ifRationalAndIrational : (r : Elem Rat) -> (x : Elem Irrat) -> Proof (irrational (times r x)) .
Leq : E : nonempty (ordered Set) -> alpha : lower_bound E -> beta : upper_bound E -> Proof (Leq alpha beta) .
prove : Proof (not (exists (Order (ComplexField) (OrderedField))) .
if_and : (z_1 : Elem Complex) -> (z_n : Elem Complex) -> Proof (Leq (abs (plus z_1 z_2 ... z_n)) (plus (abs z_1) (abs z_2) ... (abs z_n))) .
ifz : Elem Complex -> Eq (abs z) (nd 1) -> plus (pow (abs (nd 1 + z)) (nd 2)) (pow (abs (nd 1 - z)) (nd 2)) .
prove : (if (and (in R^k (x)) (in R^k (y))) (equal (plus (square (norm (plus (vector x) (vector y)))) (square (norm (minus (vector x) (vector y))))) (times (nd 2) (plus (square (norm (vector x))) (square (norm (vector y))))))) .
ifk1 : Eq k (nd 1) -> x : Elem Rk -> Proof (not (exists (y : Elem Rk) (and (neq y 0) (Eq (dot x y) 0)))) .
ifAndBdisjointClosed : (A : ClosedSet) -> (B : ClosedSet) -> (X : MetricSpace) -> Proof (separated A B) .
prove : (K : CompactMetricSpace) -> Base K .
proof : (atMostCountable (notIn P)) .
prove : (every (open (real)) (union (at_most_countable (disjoint (segment)))) .
prove : (limit (n : Nat -> sqrt (plus (pow n (nd 2)) (nd 1)) (nd 2)) (nd 1)) .
supBound : (a_n : Seq Real) -> (b_n : Seq Real) -> Proof (if (not (Eq (plus (limsup a_n) (limsup b_n)) (minus (infty) (infty)))) (Leq (limsup (plus a_n b_n)) (plus (limsup a_n) (limsup b_n)))) .
prove : (convergent (Sigma a_n)) -> (convergent (sum (div (sqrt a_n) n))) .
prove : (absolutely_convergent s1) -> (absolutely_convergent s2) -> absolutely_convergent (cauchy_product s1 s2) .
ifn : (X : CompleteMetricSpace) -> (En : Sequence (ClosedNonemptyBoundedSet X)) -> (_ : subseteq En (En (plus n (nd 1)))) -> (__1 : limit (n : Nat -> diameter En n) 0) -> singleton (intersection (nd 1) En) .
f : Elem Real -> Real\nlim : (h : Elem Real) -> Eq (minus (plus x h) (minus x h)) 0\nnot (continuous f) .
let f : Continuous (Real X) -> Z(f) : Set (p : X -> Eq (f p) 0) -> Proof (closed Z(f)) .
eqg : (f : Elem (Cont X Y)) -> (g : Elem (Cont X Y)) -> (E : Dense X) -> Proof (if (forall P (g (p) = f (p))) (forall X (g (p) = f (p)))) .
show : (E : subseteq Real) -> (f : (x__ : E) -> Real) -> not (exists (g : (x__ : Real) -> Real) (forall (x__ : E) (Eq (g x__) (f x__)))) .
let f : (x__ : R -> Real) -> Proof (bounded (unif_cont f (bounded_set E R1))) .
uniformly_continuous : (f : Elem (Mapping MetricSpace MetricSpace)) -> Proof (forall (x_n : Elem (CauchySequence MetricSpace)) (Proof (CauchySequence Y (f x_n)))) .
prove : (every (x__ : R1) (y__ : R1) (f : (x__ : R1) -> R1) (auto : continuous f) (auto : open f) (monotonic f)) .
prop : (K : Set) -> (F : Set) -> (X : MetricSpace) -> Proof (exists (delta : Pos) (p : K -> q : F -> d p q > delta)) .
let f : (x : Real) -> Real . suppose forall x : Real, forall y : Real, Leq (abs (f x - f y)) (pow (x - y) 2) . Proof (constant f) .
prop : (g : Elem Function (R 1)) -> (M : Elem Real) -> (e : Elem Real) -> Proof (if (small e) (one_to_one (f x) := x + e * g x)) .
def g : (x : Elem Real) -> f (plus x (nd 1)) - f x\nproof (lim g 0 (plus (nd 0) (nd 1))) .
assume : (f' x) (g' x) (neq (g' x) 0) (and (eq (f x) 0) (eq (g x) 0)) -> Proof (lim t x (div (f t) (g t)) (div (f' x) (g' x))) .
f : (f : Elem Real) -> (df : Elem (ThreeTimesDiff f)) -> (x : Elem Interval (-1 1)) -> Proof (if (and (Eq (f (-1)) 0) (Eq (f 0) 0) (Eq (f 1) 1) (Eq (f' 0) 0)) (exists (x : Elem Interval (-1 1)) (Geq (f''' x) 3))) .
show : not (topology (mathcal{T}_infty) X) .
if_Topology : (math : Topology) -> (alpha : Type) -> (math_T : (x__ : X) -> Family (Topology) math) -> not (is_Topology (union math_T)) .
largestTopology : (X : Set) -> (alpha : Prop) -> (mathcalT : (alpha : Prop) -> Topology X) -> Topology X .
show : (mathcalA : Subbasis X) -> Proof (equalset (generated topology mathcalA) (intersection (topologies X) (lambda T => contains mathcalA T))) .
show : Basis (gen (a : Elem Real) (b : Elem Real) (a : Lt a b) (b : rational)) .
show : (Y : Subspace X) -> (A : Subset Y) -> Eq (topology A (subspace Y)) (topology A (subspace X)) .
show : Basis (countable {(a : Elem Rat) -> (b : Elem Rat) -> (c : Elem Rat) -> (d : Elem Rat) -> if (and (Lt a b) (Lt c d)) (times (interval a b) (interval c d))) .
Leq : (Y : OrderedSet) -> (f : (X : Set) -> Y) -> (g : (X : Set) -> Y) -> Proof (closed (lambda x => Leq (f x) (g x)) X) .
letAsubX : (A : Subset X) -> f : (A -> Y) -> continuous -> Y : Hausdorff -> if (extendable f (continuous (bar A -> Y))) (unique g f) .
show : (R : Real) -> (R' : Real) -> Metrizable (dictionary_order (times R R')) .
fn : (x : Elem Real) -> pow x n . \nnot (uniformly_convergent (seq fn)) .
let p : X -> Y -> Continuous . show (if (exists (f : Y -> X) (and (Continuous f) (equal (p . f) (identity Y))) (p is QuotientMap)) .
let p : X -> Y open -> if (open A X) (open (q : A -> p A) (range p)) .
letion : (Aalpha : Collection (Connected X)) -> (A : Connected X) -> Proof (if (forall (alpha : Elem (index Aalpha)) (neq (intersection A Aalpha) emptyset)) (connected (union A (bigunion Aalpha)))) .
letA : subseteq X -> if (and (connected C) (and (intersection C A) (intersection C (complement A)))) (intersection C (boundary A)) .
let p : X -> Y be a quotient map. if (and (forall y : Y (connected (p inverse (set y)))) (connected Y)) then connected X .
fixedPoint : (f : (X : Set) -> X -> Cont) -> Proof (if (Eq X (interval 0 (nd 1))) (exists (x : X) (Eq (f x) x))) .
letG : TopologicalGroup -> Component e -> NormalSubgroup G .
perfectMap : (p : (X : Set) -> (Y : Set) -> Map) -> (x__ : (y : Y) -> compact (p^{-1} (singleton y))) -> (__1 : compact Y) -> compact X .
countably_compact : (X : Space) -> Prop := x => every (countable_open_covering X) (contains (finite_subcollection x) (covers X)) . limit_point_compact : (X : Space) -> Prop := x => every (limit_point_covering X) (contains (finite_subcollection x) (covers X)) . equivalent : (X : T1_Space) -> Proof (iff (countably_compact X) (limit_point_compact X)) .
isometry : (X : MetricSpace) -> (f : (x__ : X) -> X) -> (H : (x__ : X -> y__ : X -> Eq (d (f x) (f y)) (d x y))) -> Proof (if (and (isometry f X H) (compact X)) (and (bijective f) (homeomorphism f X))) .
show_not_locally_compact : [0, 1]^\omega -> not (locally_compact (uniform_topology)) .
show : (X : Space) -> Proof (if (countable_product (lambda i => space) (lambda i => dense_countable)) (countable_dense X)) .
show : (X : Regular) -> Proof (if X (every (Pair X) (x__ => and (Neighborhood (closure (Neighborhood x__))) (Neighborhood (closure (Neighborhood (other x__))))))) .
show_regular : (x__ : Order) -> Proof (regular x__) .
show : (prod X_\alpha) -> Hausdorff -> (Hausdorff X_\alpha) .
show : (normal (prod X_\alpha)) -> normal X_\alpha .
show : (X : Top) -> Proof (if (and (locally_compact X) (Hausdorff X)) (completely_regular X)) .
letX : CompactHausdorffSpace . X : equalset (union (closedsubspace X1) (closedsubspace X2)) . met : metrizable X1 . met2 : metrizable X2 . met : metrizable X .
letA : (X : MetricSpace) -> (Y : MetricSpace) -> (complete : Complete Y) -> (A : Subset X) -> (f : (x__ : A) -> Y) -> (unif_cont : UniformlyContinuous f) -> and (exists (g : (__ : bar A) -> Y) (continuous g)) (uniformlyContinuous g) .
show : Eq (pow (div (-1 + sqrt (nd 3) * i) (nd 2)) (nd 3)) (nd 1) .
prove : (a : Elem Field) -> (v : Elem Vector) -> (x__ : Eq (times a v) 0) -> or (Eq a 0) (Eq v 0) .
example : (U : Subset (R2)) -> (x__ : nonempty U) -> (__1 : closed_under_scalar_multiplication U) -> (__2 : not (subspace U R2)) .
prove : (U : subspace V) -> (W : subspace V) -> Proof (iff (subspace (union U W)) V (or (contained U W) (contained W U))) .
proof : (V : finite-dimensional) (T : (x__ : V -> W)) -> exists (U : subspace V) (and (equalset (intersection U (null T)) (singleton 0)) (equalset (range T) (set (u : U => T u)))) .
sup : T : Elem (L V) -> Proof (if (and (forall (U : Elem (Sub V)) (invariant U T)) (forall (i : Nat) (forall (x__ : Elem U i) (forall (__1 : Elem U (plus i (nd 1))) (forall (__2 : Elem U (plus i (nd 2)))) (equal (image T x__) (__1 + __2))))) (invariant (plus U1 ... Um) T)) .
prove : (S : Elem Linear(V)) -> (T : Elem Linear(V)) -> Proof (equalset (eigenvalues (times S T)) (eigenvalues (times T S))) .
assume T : L(V) -> every (dim V - 1) (x__ : Subspace V => invariant x__ T) -> Eq T (scalar (det T) (identity V)) .
prove : (V : VectorSpace Real) -> (T : Elem (LinearOperator V)) -> Proof (if (noEigenvalues T) (forall (W : Subspace V) (even (dim W)))) .
prove : (a : Real) -> (b : Real) -> (n : Nat) -> Proof (Leq (square (foldl (j : Nat => a_j * b_j) 0 (nd 1) n)) (times (foldl (j : Nat => j * square a_j) 0 (nd 1) n) (foldl (j : Nat => b_j * square (div j)) 0 (nd 1) n))) .
proj : (e1 : Vector V) -> (em : Vector V) -> (v : Vector V) -> Proof (iff (Eq (square (length v)) (plus (square (inner v e1)) (square (inner v em)))) (in (span (list e1 em)))) .
show : (dim : Elem Nat) -> (H : Geq dim (nd 2)) -> not (isSubspace (set NormalOp V) (mathcal L V)) .
prove : (normal : Normal (Complex InnerProductSpace)) -> Proof (iff (selfadjoint normal) (forall Real (lambda x__ => member (eigenvalues normal) x__))) .
sqrt : (V : ComplexInnerProductSpace) -> Proof (forall (T : LinearOperator V) (exists (S : LinearOperator V) (equal (square S) T))) .
prove : (not (integer (plus (div (nd 1) (nd 2)) (div (nd 1) (nd 3)) (and (div (nd 1) (nd 4)) (div (nd 1) (nd 5)) (div (nd 1) (nd 6)) (div (nd 1) (nd 7)) (div (nd 1) (nd 8)) (div (nd 1) (nd 9)) (div (nd 1) (nd 10)) (div (nd 1) (nd 11)) (div (nd 1) (nd 12)) (div (nd 1) (nd 13)) (div (nd 1) (nd 14)) (div (nd 1) (nd 15)) (div (nd 1) (nd 16)) (div (nd 1) (nd 17)) (div (nd 1) (nd 18)) (div (nd 1) (nd 19)) (div (nd 1) (nd 20)) (div (nd 1) (nd 21)) (div (nd 1) (nd 22)) (div (nd 1) (nd 23)) (div (nd 1) (nd 24)) (div (nd 1) (nd 25)) (div (nd 1) (nd 26)) (div (nd 1) (nd 27)) (div (nd 1) (nd 28)) (div (nd 1) (nd 29)) (div (nd 1) (nd 30)) (div (nd 1) (nd 31)) (div (nd 1) (nd 32)) (div (nd 1) (nd 33)) (div (nd 1) (nd 34)) (div (nd 1) (nd 35)) (div (nd 1) (nd 36)) (div (nd 1) (nd 37)) (div (nd 1) (nd 38)) (div (nd 1) (nd 39)) (div (nd 1) (nd 40)) (div (
ifInt : a : Int -> n : Int -> m : Int -> if (Neq a 0) (if (Gt n m) (Eq (gcd (pow a (pow (nd 2) n) + (nd 1)) (pow a (pow (nd 2) m) + (nd 1))) (if (odd a) (nd 1) (nd 2))) .
show : diverges (sum' (div 1 n) (square_free n)) .
show : Eq (plus (times (nd 3) (pow (nd 2) (nd 2))) (nd 2)) (pow (nd 2) (nd 1)) .
ifNotPrime : n : Nat -> Proof (if (not (prime n)) (Eq (mod (factorial (minus n (nd 1))) n) 0) (neq n (nd 4))) .
considerPrime : p : Prime -> Eq (mod p (nd 4)) (nd 1) -> iff (primitiveRoot a p) (primitiveRoot (neg a) p) .
ifp : (p : Elem Nat) -> (__ : Eq p (plus (pow (nd 2) n) (nd 1))) -> isFermatPrime p -> isPrimitiveRoot (nd 3) p .
prove : (k : Nat) -> (p : Nat) -> Proof (if (not (divisible (minus p (nd 1)) k)) (equiv (plus (pow (nd 1) k) (pow (nd 2) k) (minus p (nd 1)) k)) 0 p) (if (divisible (minus p (nd 1)) k) (equiv (plus (pow (nd 1) k) (pow (nd 2) k) (minus p (nd 1)) k)) (nd -1) p) .
show : (x : Elem Int) -> Proof (iff (Eq (mod (pow x (nd 4)) (nd 2)) (nd 0)) (Eq (mod p (nd 4)) (nd 1)) (Eq p (plus (times (pow A (nd 2)) (nd 64)) (times (pow B (nd 2)) (nd 1))))) .
show : algebraic (sin (div (pi) (nd 12))) .
holomorphicConstIm : (f : Holomorphic (Omega : Open)) -> Proof (if (constant (Im f)) (constant f)) .
prove : (not (exists (x__ : Circle) (convergent (powseries (n : Nat => n * z^n) x__))) .
proof (convergence (series (zn / n) (unit_circle) (neq z (nd 1)))) .
show : Eq (integral (from 0) (to inf) (div (sin x) x)) (pi () / 2) .
suppose : (f : Analytic (C)) -> (z_0 : C) -> or (exists Nat (n => Eq (coeff (expansion f z_0) n) 0)) .\nprove : Polynomial f .
show : (a : Real) -> Proof (if (Gt a 0) (Eq (int (-inf) inf (div (times x (sin x)) (plus (pow x 2) (pow a 2)))) (times pi (exp (neg a)))) .
prove : (forall Entire) (forall injective) (exists (f : (z : Elem Complex) -> Elem Complex) (and (forall (z : Elem Complex) (Eq (f z) (times a z (nd 1) (nd 0)))) (neq a (nd 0)))) .
prove : (f : Holomorphic UnitDisc) -> (b : Bounded) -> (nz : not (identicallyZero f)) -> (z : (n : Nat -> Elem Complex) -> (k : Nat -> Lt (abs z k) (nd 1))) -> Lt (sum Nat (n : Nat => (nd 1 - (abs z n))) (nd 0)) (ndInfinite) .
let f : (__ : Real -> Real) => InfDiffEqn : Eq (f 0) 0 => Eq (f 1) 1 => Geq (f x) 0 => exists (n : Nat) (x : Real) (Lt (f (nd n) x) 0) .
def sequence : (a : Real) -> Proof (if (exists Nat (n => Eq (x n) 0)) (periodic (n => x n))) .
let : (x : Elem) -> (y : Elem) -> (z : Elem) -> let .
prove : (and (unique Nat (a => (and (pos a) (eq (minus (pow a (plus n (nd 1))) (pow (plus a (nd 1)) n)) (nd 2001)))) (unique Nat (n => (and (pos n) (eq (minus (pow a (plus n (nd 1))) (pow (plus a (nd 1)) n)) (nd 2001))))) .
let f : Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real -> Elem Real
prove : (a : Int) -> (b : Int) -> (c : Int) -> exists (n : Nat) (not (integer (sqrt (plus (times n (pow n (nd 3))) (times a (pow n (nd 2))) (times b n)) c))) .
prove : (U : subseteq M) -> Proof (iff (open U) (not (exists (x__ : point M) (limit (complement U) x__)))) .
show : (A : subset Nat) -> clopen A .
assume : (A : compact) -> (B : compact) -> (disjoint : disjoint A B) -> (nonempty : nonempty A) -> (nonempty0 : nonempty B) -> Proof (exists (a0 : A) (b0 : B) (forall (a : A) (b : B) (Leq (distance a0 b0 a) (distance a0 b0 b)))) .
nonemptyIntersection : Proof (nonempty (intersection (compact (covering (nonempty (compact A)))) (decreasing (compact (covering (nonempty (compact A))))))) .
assume : (f : (__ : Real -> Real)) -> Proof (if (forall (t : Real) (x : Real) (Leq (abs (f t - f x)) (pow (abs (t - x)) 2))) (constant f)) .
prove : (p : Elem Real) -> (k : Nat) -> Proof (convergent (sum (div (nd 1) (pow (log k) p)))) .
modulusOfContinuity : (mu : (s : Real -> Real) -> Prop) -> (f : (x__ : Real -> Real) -> Prop) -> Proof (iff (uniformlyContinuous f) (exists (mu : (s : Real -> Real) -> Prop) (forall (s : Real -> t : Real -> Leq (abs (minus (f s) (f t))) (mu (abs (minus s t))))))) .
ifG : finiteGroup (evenOrder) -> exists (a : Elem Group) (neq e (inv a)) (Eq a (inv a)) .
ifG : Group -> Proof (given a : G, exists Nat (n => a^n = e)) .
ifG : Group -> Proof (if (and (and (Eq (pow (times a b) i) (times (pow a i) (pow b i))) (Eq (pow (times a b) (plus i (nd 1))) (times (pow a (plus i (nd 1))) (pow b (plus i (nd 1))))) (Eq (pow (times a b) (plus (nd 2) i)) (times (pow a (plus (nd 2) i)) (pow b (plus (nd 2) i))))) (abelian G)) .
letfn : G : Group -> n : Int -> H : Eq (pow (times a b) n) (times (pow a n) (pow b n)) -> a : G -> b : G -> Eq (pow (times (times a b) (inverse a) (inverse b)) (times n (minus n (nd 1)))) e .
ifG : Group -> Proof (if (no_proper_subgroups G) (cyclic_group_of_order p) (prime p)) .
letsubgroupnormal : (G : Group) -> Proof (if (all (subgroup G) (normal G)) (a : G) (b : G) (exists Int (j => Eq (times b a) (pow a j b)))) .
sup : (G : Group) -> (p : Nat) -> (n : Nat) -> (m : Nat) -> (x__ : not (divisible m p)) -> (prime p) -> (H : Subgroup G (pow p n)) -> Proof (char H G) .
prove : (Group (nd 9)) -> abelian .
letthm : (G : Group) -> (phi : Automorphism G) -> Proof (if (Gt (cardinality (filter (x__ : G => Eq (phi x) (inverse x))) G) (div (times (cardinality G) (nd 3)) (nd 4))) (and (forall G (y__ => Eq (phi y) (inverse y))) (abelian G))) .
ifhomomorphism : (phi : Homomorphism G G') -> (N : NormalSubgroup G) -> NormalSubgroup G' .
prove : (p : prime) -> (q : prime) -> (x__ : divisible (minus p (nd 1)) q) -> Proof (if (and (prime p) (prime q) (divisible (minus p (nd 1)) q)) (forall (x__ : Group pq) (forall __1 : Group pq (isomorphic x__))) .
letAbeNormalSubgroupofG : A : normal_subgroup G -> b : G -> p : prime -> __ : not (member A b) -> equalset (intersection A (generated b)) (singleton e) .
ifPtriangleleftG : (P : Subgroup G) -> (x__ : p_Sylow P G) -> Proof (forall (varphi : Automorphism G) (equal (varphi P) P)) .
ifno : (sigma : Permutation) -> (tau : Permutation) -> Proof (if (and (noCommonDisturb (sigma tau) (e)) (equal (sigma tau) e)) (equal (and (equal sigma e) (equal tau e)) e)) .
let T : Group (A : Matrix (nd 2) (nd 2) (Z_2) => not (Eq (det A) 0)) . Proof (isomorphic T S_3) .
if2 : (a : Elem R) -> Proof (if (Eq (square a) 0) (commute (plus (times a x) (times x a)) a)) .
if : R : CommutativeRing -> a : R -> L : (x : R -> xa = 0) -> Proof (ideal R L) .
show : (p : Nat) -> Proof (if (prime p) (and (Eq (div (minus p (nd 1)) (nd 2)) (length (filter (x__ : Nat => quadratic_residue x) (range (nd 1) (minus p (nd 1))))) (nd 2)) (Eq (div (minus p (nd 1)) (nd 2)) (length (filter (x__ : Nat => not (quadratic_residue x)) (range (nd 1) (minus p (nd 1))))) (nd 2))) .
let F : Eq (math_Z_7) . let p : (x : Elem F) -> Elem F . let q : (x : Elem F) -> Elem F . Proof (and (and (irreducible p) (irreducible q)) (isomorphic (field (quotient (ring F) (ideal (poly F (nd 1) (nd 0) (nd 2)))) (ring F)) (field (quotient (ring F) (ideal (poly F (nd 1) (nd 0) (nd (nd 2)))) (ring F))))) .
prove : (f : (x : Elem Q) -> Elem Q) -> Proof (irreducible (f (x) = x^3 + 3 * x + 2) Q x) .
ifpneq0 : F : Field -> p : Neq 0 -> a : F -> b : F -> n : Nat -> Eq (pow (plus a b) (times p n)) (plus (pow a (times p n)) (pow b (times p n))) .
if2 : (a : K) -> (x__ : algebraic (pow a (nd 2)) F) -> algebraic a F .
ifC : a : C -> Eq (p a) 0 -> algebraic a (degree (max (degree (coefficients p)) (length (coefficients p))) (field Q)) (Leq (degree (max (degree (coefficients p)) (length (coefficients p))) (field Q)) (nn 8 (nd 0))) .
ifpne0 : (F : Field) -> (p : Neq 0) -> all (x__ : Eq (pow p n) m) (distinct (roots (pow (nd 1) m) (minus (pow (nd 1) m) x))) .
prove : (a : Elem Group) -> (b : Elem Group) -> conjugate (times a b) (times b a) .
prove : (G : Group) -> (H : Group) -> Proof (equalset (center (times G H)) (times (center G) (center H))) .
prove : (x__ : Field) -> (y__ : Field) -> Proof (every Homomorphism (Field x__) (Field y__) (injective (Homomorphism x__ y__))) .
let V : VectorSpace F -> Proof (not (union (finite (subspace V)) (proper (subspace V)))) .
prove : (p : prime) -> (q : prime) -> Proof (not (simple (group (times p q)))) .
prove : (not (simple (group 224))) .
nilpotent : (x : Elem Ring) -> Prop := x => some (pow x) 0 .\nunit : (x : Elem Ring) -> Prop := x => exists (y : Elem Ring) (Eq (times x y) 1) .\nproof : (x : Elem Ring) -> if (nilpotent x) (unit (plus x (nd 1))) .
prove : (every (nonzero Ideal ZG) (contains (nonzero Int))) .
letIandJ : (I : Ideal R) -> (J : Ideal R) -> Proof (equalset (timesideal I J) (intersectionideal I J)) .
dividesGauss : a : Elem Int -> b : Elem Int -> __ : divisible a b (Ring Gauss) -> divisible a b Int .
prove : (irreducible (x : Elem Field) (p : Pow x (nd 2) + x + (nd 1)) (Field (nd 2))) .
prove : irreducible (x : Elem) (pow (nd 3) (nd 3) - (nd 9)) (Field (nd 31)) .
proof (infinitely_many_primes (mod (-1) 4)) .
letK : Field -> Proof (if (finite (nonzero K)) (Eq (times (nonzero K)) (-1))) .
prove : not (commutative (star : (a : Int) -> (b : Int) -> minus a b)) .
prove : associative (times : ResidueClass n) .
prove : (a_1 : G) -> (a_2 : G) -> (a_n : G) -> Proof (equal (inverse (times a_1 a_2 ... a_n)) (times (inverse a_n) (inverse a_{n-1}) ... (inverse a_1))) .
let x : G -> Proof (if (Eq (length x) n) (Eq (inverse x) (pow x (minus n 1)))) .
same_order : x : G -> Eq (order x) (order (inverse x)) .
deduce : (a : G) -> (b : G) -> Eq (length (times a b)) (length (times b a)) .
prove : (if (abelian (times A B)) (and (abelian A) (abelian B))) .
prove : (if (equalset (Omega) (nd 1) (nd 2) (nd 3) (nd 4) (nd 5) (nd 6) (nd 7) (nd 8) (nd 9) (nd 10) (nd 11) (nd 12) (nd 13) (nd 14) (nd 15) (nd 16) (nd 17) (nd 18) (nd 19) (nd 20) (nd 21) (nd 22) (nd 23) (nd 24) (nd 25) (nd 26) (nd 27) (nd 28) (nd 29) (nd 30) (nd 31) (nd 32) (nd 33) (nd 34) (nd 35) (nd 36) (nd 37) (nd 38) (nd 39) (nd 40) (nd 41) (nd 42) (nd 43) (nd 44) (nd 45) (nd 46) (nd 47) (nd 48) (nd 49) (nd 50) (nd 51) (nd 52) (nd 53) (nd 54) (nd 55) (nd 56) (nd 57) (nd 58) (nd 59) (nd 60) (nd 61) (nd 62) (nd 63) (nd 64) (nd 65) (nd 66) (nd 67) (nd 68) (nd 69) (nd 70) (nd 71) (nd 72) (nd 73) (nd 74) (nd 75) (nd 76) (nd 77) (nd 78) (nd 79) (nd 80) (nd 81) (nd 82) (nd 83) (nd 84) (nd 85) (
proof : (A : Group) -> (B : Group) -> Proof (isomorphic (times A B) (times B A)) .
let G : finite_group -> sigma : automorphism G -> eqm : (g : G -> iff (sigma g) g (Eq g 1)) -> H : Eq (sigma (sigma)) (identity_map G) -> Proof (abelian G) .
let H : subgroup (additive (rational)) (x : nonzero H => member H (div x)) -> or (eq H 0) (eq H (rational)) .
maximal_subgroup : M : subgroup G -> Prop := (x__ : not (equal M G) -> all (x__ : subgroup G -> or (equal x__ M) (equal x__ G))).\nmaximal_subgroup_exists : H : proper_subgroup G -> exists (x__ : maximal_subgroup G -> contains x__ H) .
show : (G : Group (generated (singleton x))) -> (n : Nat) -> (H : Subgroup G) -> Proof (iff (maximal H) (exists prime (p => equalset (subgroup (pow x p)) H))) .
prove : (if (and (normal-subgroup H G) (normal-subgroup K G)) (normal-subgroup (intersection H K) G)) .
prove : (if (and (finite_subgroup H G) (finite_subgroup K G) (relatively_prime (order H) (order K))) (equalset (intersection H K) (identity G))) .
useLagrange : (p : Prime) -> (a : Int) -> Proof (if (prime p) (Eq (pow a p) (mod a p))) .
prove : (H : subgroup G) -> (p : prime) -> (K : subgroup G) -> or (and (Leq K H) (not (equal G (times H K)))) (and (equal G (times H K)) (Leq (div K (intersection K H)) p)) .
useCauchyTheorem : (G : Group) -> (n : Nat) -> Proof (if (divisible (order G) n) (exists (lambda x__ => Subgroup G) (order x__ n))) .
proveSolvableQuotient : (G : Group) -> Proof (solvable (quotient G)) .
prove : (H : Group) -> (n : Nat) -> exists (K : normal_subgroup G) (and (Leq K H) (Leq (index G K) (factorial n))) .
prove : (p : prime) -> (G : Group (pow p alpha)) -> Proof (forall (x__ : (subgroup G (nd p))) (normal x__)) .
prove : (if (abelian_group (order p q)) (cyclic G)) .
prove : (exists (normal_subgroup) (not (characteristic))) .
let prove : (G : Group) -> (H : subgroup G) -> (K : subgroup G) -> (x__ : Leq H K) -> (__1 : characteristic H K) -> (__2 : normal K G) -> normal H G .
prove : (group : Group (order (eq (nn 5 (nd 6))))) -> exists (prime (divides (order group))) (p => normal (Sylow p group)) .
prove : (group 351) -> exists (prime (divisors 351)) (p => normal (Sylow p)) .
prove : (if (equal (length G) (nn 1 (nd 5))) (and (normal (sylow 5 G)) (normal (sylow 7 G)))) .
prove : if (Eq (length G) (nn 6 (nd 5 (nd 4 (nd 5))))) (not (simple G)) .
prove : (if (Eq (length G) (nd 2907)) (not (simple G))) .
prove : if (Eq (length G) (nn 4 (nd 2))) (not (simple G)) .
letto : (P : NormalSylow p G) -> (H : Subgroup G) -> Proof (uniqueSylow p (intersection P H)) .
prove : (u : Unit R) -> Unit R .
prove : (x__ : Ring) -> (__1 : contains x__ (field_identity)) -> integral_domain x__ .
p : Elem (PolynomialRing R x) -> Proof (iff (zeroDivisor p (PolynomialRing R x)) (exists (nonzero R) (b => Eq (times b p (PolynomialRing R x)) 0))) .
phi : (R : Ring) -> (S : Ring) -> SurjectiveHomomorphism -> Proof (subseteq (image (center R) phi) (center S)) .
let R : CommutativeRing (neq 1 0) -> Proof (if (nilpotent a) (forall R (b => unit (minus (nd 1) (times a b))))) .
gcd : (a : Elem R) -> (b : Elem R) -> Elem R .\ngcdForm : (a : Elem R) -> (b : Elem R) -> (r : Elem R) -> (s : Elem R) -> Eq (gcd a b) (plus (times r a) (times s b)) .\ngcdProp : (a1 : Elem R) -> (a2 : Elem R) -> (a3 : Elem R) -> (x__ : Elem Nat) -> (a : Elem R) -> (b : Elem R) -> (c : Elem R) -> (d : Elem R) -> (e : Elem R) -> (f : Elem R) -> (g : Elem R) -> (h : Elem R) -> (i : Elem R) -> (j : Elem R) -> (k : Elem R) -> (l : Elem R) -> (m : Elem R) -> (n : Elem R) -> (o : Elem R) -> (p : Elem R) -> (q : Elem R) -> (r : Elem R) -> (s : Elem R) -> (t : Elem R) -> (u : Elem R) -> (v : Elem R) -> (w : Elem R) -> (x : Elem R) -> (y : Elem R) -> (z : Elem R) -> (A : Elem R) -> (B : Elem R) -> (C : Elem R) -> (D : Elem R) -> (E : Elem R) -> (F : Elem R) -> (G : Elem R) -> (H : Elem R) -> (I : Elem R) -> (J : Elem R) -> (K : Elem R) -> (L : Elem R) -> (M : Elem R) -> (N : Elem R) -> (O : Elem R) -> (P : Elem R) -> (Q : Elem R) -> (R : Elem R) -> (S : Elem R) -> (T : Elem R) -> (U : Elem R) -> (V : Elem R) -> (W : Elem R) -> (X : Elem R) -> (Y : Elem R) -> (Z : Elem R) -> (aa : Elem R) -> (bb : Elem R) -> (cc : Elem R) -> (dd : Elem R) -> (ee : Elem R) -> (ff : Elem R) -> (gg
let n : Int -> Squarefree -> Gt n (nd 3) -> Proof (irreducible (R = Z (sqrt (nd 0 n))) (list (nd 2) (sqrt (nd 0 n)) (nd 1 (sqrt (nd 0 n))))) .
let q : Elem Int -> prime q -> Eq (mod q (nd 4)) (nd 3) -> Proof (Field (quotient Ring Int (nd q)) (nd (pow q (nd 2)))) .
prove : contains_minimal_prime_ideals (ring_quotient (polynomial_ring (int ())) (list (x (nd 1)) (x (nd 2)) (x (nd 3)) (nd 0)) (list (times (x (nd 1)) (x (nd 2))) (times (x (nd 3)) (x (nd 4))) (times (x (nd 5)) (x (nd 6))) (nd 0))) (nd 0)) .
prove : irreducible (x : Elem Int) (p : Poly Int) (Eq (coeff p 4) (nd 1)) (Eq (coeff p 3) (nd 4)) (Eq (coeff p 2) (nd 6)) .
prove : irreducible (x : Elem Int) (poly : (x : Elem Int) -> Elem Int) (p : Eq (pow x (nd 4)) (plus (times (pow x (nd 3)) (nd 4)) (plus (times x (nd 6)) (nd 2)))) (q : Eq (plus (times x (nd 1)) (nd 1)) (nd 0)) .
prove : Irreducible (pow (nd 2) (sqrt (nd 2))) (Z (sqrt (nd 2))) .
prove : (n : Z+) -> Proof (vectorSpaceIsomorphism (n, R) R) .
