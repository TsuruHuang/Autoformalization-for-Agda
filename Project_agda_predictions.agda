thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (n : Nat) -> Neq n 0 -> all Nat (\ m -> Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (n : Nat) -> NEq n 0 -> (m : Nat) -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> not (Eq n 0) -> not (Eq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> not (Eq n 0) -> not (Eq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (div m n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (n : Elem Nat) -> Proof (Neq n 0) -> Proof (forall Nat (m => Neq (pow (div m n) 2) 2)) .
postulate thm01 : (n : Nat) -> neq n 0 -> all Nat (\ m -> neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Lt n 0 -> Lt (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall n : nat, (n <> 0 -> forall m : nat, pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (n : Elem Nat) -> Proof (Neq n 0) -> (m : Elem Nat) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (n : Nat) -> NEq n 0 -> (m : Nat) -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> pow (div m n) 2 /= 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> /= (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (div m n) 2 ≠ 2
thm01 : (n : Elem Nat) -> Proof (Neq n 0) -> Proof (forall Nat (m => Neq (pow (div m n) 2) 2)) .
postulate thm01 : (n : Nat) -> Neq n 0 -> all Nat (\ m -> Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> and (Neq n 0) (Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (div m n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (n : Nat) -> Neq n 0 -> all Nat (\ m -> Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (div m n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> not (Eq n 0) -> not (Eq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (div m n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (n : Elem Nat) -> Proof (Neq n 0) -> Proof (forall Nat (m => Neq (pow (div m n) 2) 2)) .
postulate thm01 : (n : Nat) -> neq n 0 -> all Nat (\ m -> neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> and (Neq n 0) (Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> pow (m / n) 2 <> 2) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) .
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
Axiom thm01 : forall m : nat, forall n : nat, (n <> 0 -> ~ (pow (m / n) 2 = 2)) .
axiom thm01 (m n : Nat) (_ : n ≠ 0) : pow (m / n) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> NEq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (div m (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> neq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (div m (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> neq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> NEq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (div m (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (div m (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> neq (pow (div m (plus n 1)) 2) 2
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (div m (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : (pow (m / (n + 1)) 2) ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (div m (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (div m (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (div m (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (div m (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (div m (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (div m (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (div m (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : (pow (m / (n + 1)) 2) ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2
thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) .
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
Axiom thm01a : forall m : nat, forall n : nat, ~ (pow (m / (n + 1)) 2 = 2) .
axiom thm01a (m n : Nat) : (pow (m / (n + 1)) 2) ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q^2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rational, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rational, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Q, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rational, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : All Q (fun q => q ^ 2 <> 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : All Q (fun q => q ^ 2 <> 2) .
axiom thm01b : All Rat (λ q => q ^ 2 ≠ 2)
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rational, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> unequal (pow q 2) 2
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rational) : pow q 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, q ^ 2 <> 2 .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> /= (pow q 2) 2
Axiom thm01b : forall q : Q, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : pow q 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : All Rational (fun q => q ^ 2 <> 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : all Rational (\ q -> not (Eq (pow q 2) 2))
Axiom thm01b : All Rat (fun q => q^2 <> 2) .
axiom thm01b : All Rat (λ q => q ^ 2 ≠ 2)
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rational, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : ¬ (pow q 2 = 2)
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : pow q 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (pow q 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Q, ~ (pow q 2 = 2) .
axiom thm01b (q : Rational) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Rat, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : all Rational (\ q -> not (Eq (pow q 2) 2))
Axiom thm01b : All Q (fun q => q ^ 2 <> 2) .
axiom thm01b : All Rat (λ q => q ^ 2 ≠ 2)
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : all Rational (\ q -> not (Eq (pow q 2) 2))
Axiom thm01b : All Rational (fun q => q ^ 2 <> 2) .
axiom thm01b : All Rat (λ q => q ^ 2 ≠ 2)
thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) .
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
Axiom thm01b : forall q : Q, ~ (q ^ 2 = 2) .
axiom thm01b (q : Rat) : q ^ 2 ≠ 2
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (sqrt 2 = q) .
axiom thm01c (q : Rat) : sqrt 2 ≠ q
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (sqrt 2 = q) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rational, ~ (sqrt 2 = q) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (sqrt 2 = q) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rational, ~ (sqrt 2 = q) .
axiom thm01c (q : Rational) : sqrt 2 ≠ q
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rational, ~ (sqrt 2 = q) .
axiom thm01c (q : Rational) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rat (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Rat (fun q => sqrt 2 <> q) .
axiom thm01c : All Rat (λ q => ¬ (sqrt 2 = q))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Q (fun q => sqrt 2 <> q) .
axiom thm01c : All Rational (λ q => ¬ (sqrt 2 = q))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rational, ~ (sqrt 2 = q) .
axiom thm01c (q : Rational) : sqrt 2 ≠ q
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rational, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rat (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (q = sqrt 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Q (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rat (λ q => ¬ (q * q = 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Rational (fun q => ~ (q = sqrt 2)) .
axiom thm01c : All Rational (λ q => ¬ (q = sqrt 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Q, ~ (sqrt 2 = q) .
axiom thm01c (q : Rational) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (sqrt 2 = q) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q * q = 2) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q * q = 2) .
axiom thm01c : All Rat (λ q => ¬ (sqrt 2 = q))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (sqrt 2 = q) .
axiom thm01c (q : Rational) : sqrt 2 ≠ q
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (q * q = 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Q (fun q => sqrt 2 <> q) .
axiom thm01c : All Rat (λ q => q ≠ sqrt 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Rational (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rat (λ q => ¬ (q * q = 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Q, ~ (sqrt 2 = q) .
axiom thm01c (q : Rational) : sqrt 2 ≠ q
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (sqrt 2 = q) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : All Q (fun q => sqrt 2 <> q) .
axiom thm01c (q : Rat) : ¬ (q = sqrt 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Q (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rat (λ q => ¬ (q = sqrt 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Rational (fun q => ~ (q = sqrt 2)) .
axiom thm01c : All Rational (λ q => ¬ (q = sqrt 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rational, ~ (q = sqrt 2) .
axiom thm01c (q : Rational) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (q * q = 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : All Rat (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rat (λ q => ¬ (q * q = 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rat (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Q (fun q => ~ (q * q = 2)) .
axiom thm01c (q : Rat) : ¬ (q * q = 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (sqrt 2 = q) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Q (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rat (λ q => ¬ (q * q = 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Rat (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rat (λ q => ¬ (q * q = 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Q, ~ (q = sqrt 2) .
axiom thm01c (q : Rational) : ¬ (sqrt 2 = q)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (q = sqrt 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rat, ~ (q = sqrt 2) .
axiom thm01c (q : Rat) : ¬ (q = sqrt 2)
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Q (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rat (λ q => ¬ (q * q = 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
Axiom thm01c : All Rat (fun q => ~ (q * q = 2)) .
axiom thm01c : All Rational (λ q => ¬ (q = sqrt 2))
thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) .
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
Axiom thm01c : forall q : Rational, ~ (q = sqrt 2) .
axiom thm01c (q : Rational) : ¬ (sqrt 2 = q)
thm01d : Proof (not (exists (x : Elem Rat) (y : Elem Rat) (and (eq (div x y) (sqrt 2)) (and (neq x 0) (neq y 0))))).
postulate thm01d : not (rational (sqrt 2))
Axiom thm01d : ~ (exists Rational (x => exists Rational (y => and (x * x = 2) (y * y = 1)))) .
axiom thm01d : ¬ (exists Int (λ x => exists Int (λ y => and (gcd x y = 1) (pow x 2 = 2 * pow y 2))))
thm01d : Proof (forall Int (x => not (divisible (pow x 2) 2))) .
postulate thm01d : not (exists Nat (\ x -> and (even x) (divEq (square x) 2)))
Axiom thm01d : ~ (exists Q (x => (and (rational x) (equal (pow x 2) 2))) .
axiom thm01d : ¬ (r : Rat) → r * r = 2
thm01d : Proof (forall Nat (x => not (divisible x 2))) .
postulate thm01d : not (exists Rational (\ x -> Eq (sqrt 2) x))
Axiom thm01d : ~ (exists Q (x => and (rational x) (x = sqrt 2))) .
axiom thm01d : ¬ (exists Int (λ x => exists Int (λ y => and (gcd x y = 1) (pow 2 x = pow y 2))) : Prop)
thm01d : Proof (not (exists Rat (x => Eq (pow x 2) 2))) .
postulate thm01d : not (rational (sqrt 2))
Axiom thm01d : ~ (exists Q (x => exists Q (y => and (eq (pow x 2) 2) (eq (pow y 2) 1)))) .
axiom thm01d : ¬ (exists Int (λ x => exists Int (λ y => and (gcd x y = 1) (pow x 2 = 2 * pow y 2))))
thm01d : Proof (not (exists (p : Elem Int) (q : Elem Int) (div (sqrt 2) 1 = div p q))) .
postulate thm01d : not (exists Rational (\ x -> Eq (sqrt 2) x))
Axiom thm01d : ~ (exists Rational (x => exists Rational (y => and (eq (pow x 2) 2) (eq (pow y 2) 1)))) .
axiom thm01d : ¬ (r : Rat) → r * r = 2
thm01d : Proof (not (exists (p : Elem Int) (q : Elem Int) (and (divisible q 2) (divisible p 2) (Eq (div p q) (sqrt 2))))).
postulate thm01d : not (exists Rational (\ x -> Eq (pow x 2) 2))
Axiom thm01d : ~ (exists Q (x => even x /\ (exists Q (y => odd y /\ (x / y = sqrt 2))))).
axiom thm01d : irrational (sqrt 2)
thm01d : Proof (not (exists Rat (x => Eq (pow x 2) 2))) .
postulate thm01d : not (rational (sqrt 2))
Axiom thm01d : ~ (exists Q (x => even x /\ (sqrt 2 = x / 2))) .
axiom thm01d : ¬ (x : Rat) (y : Rat) (h : 0 < y) (h : pow x 2 = 2) (h : gcd x y = 1)
thm01d : Proof (not (exists Rat (x => Eq (pow x 2) 2))) .
postulate thm01d : not (exists Rational (\ x -> Eq (pow 2 x) 1)
Axiom thm01d : ~ (exists Q (x => even x /\ (sqrt 2 = x / 2))) .
axiom thm01d : ¬ (x : Rat) (H : x * x = 2)
thm01d : Proof (not (exists Rat (x => Eq (pow x 2) 2))) .
postulate thm01d : not (exists Rational (\ x -> Eq (sqrt 2) x))
Axiom thm01d : ~ (exists Q (x => even x /\ odd x)) .
axiom thm01d : ¬ (r : Rat) → r * r = 2
thm01e : Proof (irrational (sqrt 2)) .
postulate sqrt2 : Real\npostulate prop01e : irrational (sqrt2)
Axiom thm01e : irrational (sqrt 2) .
axiom thm01e : irrational (sqrt 2)
thm01e : Proof (irrational (sqrt 2)) .
postulate sqrt2 : Real\npostulate prop01e : irrational (sqrt 2)
Axiom thm01e : irrational (sqrt 2) .
axiom sqrt2 : Real\naxiom thm01e : irrational sqrt2
thm01e : Proof (irrational (sqrt 2)) .
postulate sqrt2 : Real\npostulate prop01e : irrational sqrt2
Axiom thm01e : irrational (sqrt 2) .
axiom thm01e : irrational (sqrt 2)
thm01e : Proof (irrational (sqrt 2)) .
postulate thm01e : irrational (sqrt 2)
Axiom thm01e : irrational (sqrt 2) .
axiom thm01e : irrational (sqrt 2)
thm01e : Proof (irrational (sqrt 2)) .
postulate thm01e : irrational (sqrt 2)
Axiom thm01e : irrational (sqrt 2) .
axiom thm01e : irrational (sqrt 2)
thm01e : Proof (irrational (sqrt 2)) .
postulate sqrt2 : Real\npostulate prop01e : irrational (sqrt 2)
Axiom thm01e : irrational (sqrt 2) .
axiom sqrt2 : Real\naxiom thm01e : irrational sqrt2
thm01e : Proof (irrational (sqrt 2)) .
postulate thm01e : irrational (sqrt 2)
Axiom thm01e : irrational (sqrt 2) .
axiom thm01e : irrational (sqrt 2)
thm01e : Proof (irrational (sqrt 2)) .
postulate sqrt2 : Real\npostulate irrational : Real -> Prop\npostulate thm01e : irrational (sqrt 2)
Axiom thm01e : irrational (sqrt 2) .
axiom thm01e : irrational (sqrt 2)
thm01e : Proof (irrational (sqrt 2)) .
postulate sqrt2 : Real\npostulate irrational : Real -> Prop\npostulate thm01e : irrational sqrt2
Axiom thm01e : irrational (sqrt 2) .
axiom thm01e : irrational (sqrt 2)
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => p^2 <> 2 * q^2)) .
axiom thm01f : All Nat (λ p => All Nat (λ q => p ^ 2 ≠ 2 * q ^ 2))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2)))) ) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2)))) ) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f : All Nat (λ p => ¬ (Exist Nat (λ q => p * p = 2 * q * q)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : (p : Nat) -> (q : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
Axiom thm01f : forall p : nat, forall q : nat, ~ (p^2 = 2 * q^2) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, forall q : nat, ~ (p * p = 2 * (q * q)) .
axiom thm01f : All Nat (λ p => ¬ (p * p = 2 * (q * q)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f : All Nat (λ p => ¬ (p * p = 2 * (q * q)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => p^2 <> 2 * q^2)) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2)))) ) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p^2 = 2 * q^2) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f : All Nat (λ p => ¬ ( Exist Nat (λ q => p * p = 2 * q * q)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : (p : Nat) -> (q : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => not (Eq (pow p 2) (times 2 (pow q 2))))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f (p q : Nat) : ¬ (p * p = 2 * q * q)
thm01f : (q : Elem Nat) -> Proof (not (exists Nat (p => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f : All Nat (λ p => ¬ (p * p = 2 * (q * q)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p * p = 2 * q * q)) .
axiom thm01f : All Nat (λ p => ¬ (p * p = 2 * (q * q)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (pow p 2 = 2 * pow q 2))) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * q ^ 2) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p ^ 2 = 2 * q ^ 2)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p ^ 2 = 2 * q ^ 2)
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p ^ 2 = 2 * q ^ 2)) .
axiom thm01f : All Nat (λ p => ¬ (p ^ 2 = 2 * (q ^ 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p ^ 2 = 2 * q ^ 2)) .
axiom thm01f : All Nat (λ p => ¬ (Exist Nat (λ q => p ^ 2 = 2 * q ^ 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (pow p 2 = 2 * pow q 2))) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (p ^ 2 = 2 * q ^ 2))) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => p * p <> 2 * q * q)) .
axiom thm01f : All Nat (λ p => All Nat (λ q => p ^ 2 ≠ 2 * q ^ 2))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * (q * q)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f (p : Nat) : ¬ (p * p = 2 * (q * q))
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => not (Eq (pow p 2) (times 2 (pow q 2))))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * (q * q)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f : All Nat (λ p => ¬ (p * p = 2 * (q * q)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => p ^ 2 <> 2 * q ^ 2)) .
axiom thm01f : All Nat (λ p => ¬ ( Exist Nat (λ q => p * p = 2 * q * q)))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p^2 = 2 * q^2) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * (q * q)) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2)))) ) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * (q * q)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * (q * q)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p * p = 2 * q * q)) .
axiom thm01f : All Nat (λ p => ¬ (p * p = 2 * (q * q)))
thm01f : Proof (forall Nat (p => Proof (forall Nat (q => not (Eq (pow p 2) (times 2 (pow q 2))))))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (pow p 2 = 2 * pow q 2))) .
axiom thm01f : All Nat (λ p => ¬ (Exist Nat (λ q => p ^ 2 = 2 * q ^ 2)))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p ^ 2 = 2 * q ^ 2)
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p : Nat) : ¬ ( Exist Nat (λ q => p ^ 2 = 2 * q ^ 2))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p ^ 2 = 2 * q ^ 2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => not (Eq (pow p 2) (times 2 (pow q 2)))))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => not (Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p^2 = 2 * q^2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => not (Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p ^ 2 = 2 * q ^ 2)) .
axiom thm01f : All Nat (λ p => ¬ (exists Nat (λ q => p ^ 2 = 2 * q ^ 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (p ^ 2 = 2 * q ^ 2))) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (p ^ 2 = 2 * (q ^ 2))) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => p * p <> 2 * q * q)) .
axiom thm01f : All Nat (λ p => ¬ (Exist Nat (λ q => p * p = 2 * q * q)))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f (p : Nat) : ¬ ( Exist Nat (λ q => p * p = 2 * q * q) )
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p^2 = 2 * q^2) .
axiom thm01f (p : Nat) : ¬ (Exist Nat (λ q => p * p = 2 * q * q))
thm01f : (p : Elem Nat) -> Proof (forall Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f (p q : Nat) : ¬ (p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (exists Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
Axiom thm01f : forall p : nat, ~ (p * p = 2 * (q * q)) .
axiom thm01f (p : Nat) : ¬ (p * p = 2 * (q * q))
thm01f : (q : Elem Nat) -> Proof (not (exists Nat (p => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (q : Nat) -> not (exists Nat (\ p -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p * p = 2 * q * q) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (exists Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (p * p = 2 * (q * q)) .
axiom thm01f (p : Nat) : ¬ (p * p = 2 * (q * q))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => p^2 <> 2 * q^2)) .
axiom thm01f : All Nat (λ p => ¬ (Exist Nat (λ q => p * p = 2 * q * q)))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f (p : Nat) : ¬ (exists Nat (q => p * p = 2 * q * q))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : forall p : nat, ~ Exist nat (fun q => p * p = 2 * q * q) .
axiom thm01f (p : Nat) : ¬ Exist Nat (λ q => p * p = 2 * q * q)
thm01f : (p : Elem Nat) -> Proof (exists Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (p * p = 2 * (q * q)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (p * p = 2 * (q * q)) .
axiom thm01f (p : Nat) : ¬ (p * p = 2 * (q * q))
thm01f : (q : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (p * p = 2 * (q * q)) .
axiom thm01f : All Nat (λ p => ¬ (p * p = 2 * (q * q)))
thm01f : (p : Elem Nat) -> Proof (exists Nat (q => Neq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (p * p = 2 * (q * q)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (pow p 2 = 2 * pow q 2))) .
axiom thm01f : All Nat (λ p => ¬ ( Exist Nat (λ q => p ^ 2 = 2 * q ^ 2)))
thm01f : (p : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow (div p 2) 2))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p : Nat) : ¬ (Exist Nat (λ q => p ^ 2 = 2 * q ^ 2))
thm01f : (p : Elem Nat) -> Proof (not (exists Nat (q => Eq (pow p 2) (times 2 (pow q 2))))).
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p : Nat) : ¬ (exists Nat (q => p ^ 2 = 2 * q ^ 2))
thm01f : (p : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow (div p 2) 2))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p : Nat) : ¬ (p ^ 2 = 2 * (q ^ 2))
thm01f : (p : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => ~ Exist nat (fun q => p^2 = 2 * q^2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> Proof (not (Eq (pow p 2) (times 2 (pow q 2)))) .
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : forall p : nat, ~ (exists q : nat, p ^ 2 = 2 * (q ^ 2)) .
axiom thm01f (p q : Nat) : ¬ (pow p 2 = 2 * pow q 2)
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (pow p 2 = 2 * pow q 2))) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm01f : (p : Elem Nat) -> (q : Elem Nat) -> Proof (Neq (pow p 2) (times 2 (pow q 2))) .
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
Axiom thm01f : All nat (fun p => All nat (fun q => ~ (pow p 2 = 2 * pow q 2))) .
axiom thm01f : All Nat (λ p => All Nat (λ q => ¬ (pow p 2 = 2 * pow q 2)))
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (c (root P))) ) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c ^ P = 0)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P = 0)
thm02 : (P : Polynomial) -> Proof (Grt (degree P) 0) -> Proof (exists Complex (c => Eq (c (root P))) ) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c ^ P = 0)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P = 0)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> forall c : Complex, isRoot P c) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> forall c : Complex, P c = 0) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists (c : Elem Complex) (Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> forall c : Complex, P c = 0) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) (c : Complex) : root P c
thm02 : (P : Polynomial) -> Proof (Grt (deg P) 0) -> Proof (exists (c : Elem Complex) (Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = 0)
thm02 : (P : Polynomial) -> Proof (degree P > 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = 0)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Proof (exists (c : Elem Complex) (isRoot P c)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> exists c : Complex, isRoot P c) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Geq (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = 0)
thm02 : (P : Polynomial) -> Proof (gt (degree P) 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = 0)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq (c (root P))) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c isRoot P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Elem Complex -> Proof (isRoot P) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P = 0)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists (c : Elem Complex) (Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c = root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> (c : Elem Complex) -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (gt (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c P)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c (root P))) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c isRoot P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Geq (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c isRoot P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = 0)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Elem Complex -> Proof (P c) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c = root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Geq (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c isRoot P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Proof (exists (c : Elem Complex) (P c = 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (c (roots P)))) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (c (root P))) ) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P = 0)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> (c : Elem Complex) -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> exists c : Complex, isRoot P c) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (degree P > 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists (c : Elem Complex) (Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (c (root P))) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Proof (exists (c : Elem Complex) (P c = 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c ^ P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Elem Complex -> Proof (Eq (eval P) 0) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c (root P))) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c = root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (eval P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c = root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists (c : Elem Complex) (Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (degree P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (gt (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c P)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c (root P))) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P)
thm02 : (P : Polynomial) -> Proof (GT (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Degree P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c == root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (GrEq (degree P) 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is_root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grt (degree P) 0) -> Proof (exists Complex (c => Eq (eval P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = 0)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grado P > 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P = 0)
thm02 : (P : Polynomial) -> Proof (Grd P > 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (c (root P))) ) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c = root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> (degree P > 0) -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = 0)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c == root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c (root P))) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Graded P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> Eq (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Graded P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c ^ degree P = P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> (grader P > 0) -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> (c : Complex) -> if (gt (degree P) 0) (root P c)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c = root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> {c : Complex} -> if (gt (degree P) 0) (isRoot P c)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is_root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c P)) .
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grd P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grt (degree P) 0) -> Elem Complex -> Proof (Root P c) .
postulate thm02 : (P : Polynomial) -> odd (degree P) -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Elem Complex -> Proof (exists Complex (c => Eq c (root P))) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> (c : Complex) -> if (gt (degree P) 0) (isRoot P c)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> _ -> Complex -> Prop
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ∈ roots P)
thm02 : (P : Polynomial) -> Proof (gt (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c == root P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> _ -> Complex -> Prop
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Graded P > 0) -> Elem Complex -> Proof (isRoot P c) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm02 : (P : Polynomial) -> Proof (Grtr (degree P) 0) -> Proof (exists Complex (c => Eq (P c) 0)) .
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
Axiom thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => c is a root of P)) .
axiom thm02 (P : Polynomial) (_ : degree P > 0) : Exist Complex (λ c => c ^ degree P = P c)
thm03 : Proof (denumerable Rat) .
postulate denumerable : (A : Set) -> Prop\npostulate thm03 : denumerable Rat
Axiom thm03 : denumerable Rat .
axiom denumerable : Set -> Prop\naxiom thm03 : denumerable Rat
denumerable : Proof (exists Rat) -> Proof (exists (n : Elem Nat) -> Proof (exists (f : Elem (Function Rat Nat)) -> Proof (forall x : Elem Rat -> Eq (f x) (if (Lt x 0) (neg (f (neg x))))))) .
postulate denumerable : (A : Set) -> Prop\npostulate rat : Set\npostulate thm03 : denumerable rat
Axiom thm03 : denumerable Rat .
axiom denumerable (_ : Set) : Prop
denumerable : Proof (denumerable Rat) .
postulate denumerable : Set -> Prop\npostulate thm03 : denumerable Rat
Axiom thm03 : Denumerable Rat .
axiom thm03 : denumerable Rat
denumerable : Proof (denumerable Rat) .
postulate denumerable : (A : Set) -> Prop\npostulate thm03 : denumerable Rat
Axiom thm03 : denumerable Rat .
axiom denumerable : Rat -> Prop
thm03 : Proof (denumerable Rat) .
postulate countable : Set -> Prop\npostulate thm03 : countable Rat
Axiom thm03 : Denumerable Rat .
axiom thm03 : cardinality Rat = cardinality Nat
thm03 : Proof (denumerable (Rat)) .
postulate rat : Set\npostulate ratCardinality : cardinality rat
Axiom thm03 : Countable Rat .
axiom thm03 : cardinality Rat = cardinality Nat
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate thm03a : Eq (cardinality Nat) (cardinality Rat)
Axiom thm03a : cardinality Nat = cardinality Rat .
axiom thm03a : cardinality Nat = cardinality Rat
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate thm03a : equalset Nat Rat
Axiom thm03a : cardinality Nat = cardinality Rat .
axiom thm03a : cardinality Nat = cardinality Rat
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate thm03a : equalset (cardinality Nat) (cardinality Rat)
Axiom thm03a : cardinality nat = cardinality rat .
axiom thm03a : equalset (cardinality Nat) (cardinality Rat)
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate cardinalityNat : Cardinality\npostulate cardinalityRat : Cardinality\npostulate thm03a : Eq (cardinalityNat) (cardinalityRat)
Axiom thm03a : cardinality nat = cardinality rat .
axiom thm03a : cardinality Nat = cardinality Rat
cardinality : Set -> Elem Nat -> Prop\nthm03a : Proof (equalset (Nat) (Rat)) .
postulate cardinalityNat : Cardinal\npostulate cardinalityRat : Cardinal\npostulate thm03a : Eq (cardinalityNat) (cardinalityRat)
Axiom thm03a : cardinality Nat = cardinality Rat .
axiom thm03a : cardinality Nat = cardinality Rat
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate thm03a : equalset (cardinality Nat) (cardinality Rat)
Axiom thm03a : cardinality nat = cardinality rat .
axiom thm03a : equalset (cardinality Nat) (cardinality Rat)
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate cardinalityNat : Set\npostulate cardinalityRat : Set\npostulate thm03a : equalset (cardinalityNat) (cardinalityRat)
Axiom thm03a : cardinality nat = cardinality rat .
axiom thm03a : cardinality Nat = cardinality Rat
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate thm03a : equalset Nat Rat
Axiom thm03a : cardinality nat = cardinality rat .
axiom cardinalityNat : Cardinality\naxiom cardinalityRat : Cardinality\naxiom thm03a : cardinalityNat = cardinalityRat
thm03a : Proof (equalset (cardinality Nat) (cardinality Rat)) .
postulate thm03a : equalset (cardinality Nat) (cardinality Rat)
Axiom thm03a : cardinality nat = cardinality rat .
axiom thm03a : equalset Nat Rat
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (length (resultant u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length_squared u + length_squared v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length² u + length² v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length² u + length² v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (resultant u v) = sqrt (length² u + length² v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (pow (length u) 2 + pow (length v) 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (pow (length u) 2 + pow (length v) 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (pow (norm u) 2 + pow (norm v) 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (pow (length u) 2 + pow (length v) 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : length (u + v) = sqrt (pow (length u) 2 + pow (length v) 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (pow (length u) 2 + pow (length v) 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (pow (norm u) 2 + pow (norm v) 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (u + v) = sqrt (pow (length u) 2 + pow (length v) 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (u + v) = sqrt (pow (norm u) 2 + pow (norm v) 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length^2 u + length^2 v)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : length ( resultant u v ) = sqrt ( length_sq u + length_sq v )
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : length (resultant u v) = sqrt (length_squared u + length_squared v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (resultant u v) = sqrt (length^2 u + length^2 v)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (resultant u v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : perpendicular u v) : norm (resultant u v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (resultant u v) = sqrt (length^2 u + length^2 v)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : length (resultant u v) = sqrt (length_squared u + length_squared v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm ( resultant u v ) = sqrt ( norm u ^ 2 + norm v ^ 2 )
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (resultant u v) = sqrt (norm_squared u + norm_squared v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (resultant u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (resultant u v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (resultant u v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : length (resultant u v) = sqrt (lengthSquared u + lengthSquared v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (resultant u v) = sqrt (length^2 u + length^2 v)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : length (resultant u v) = sqrt (length_squared u + length_squared v)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> length (u + v) = sqrt (length u ^ 2 + length v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))) .
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
Axiom thm04 : forall u : Vector, forall v : Vector, (orthogonal u v -> norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)) .
axiom thm04 (u v : Vector) (_ : orthogonal u v) : norm (u + v) = sqrt (norm u ^ 2 + norm v ^ 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (floor (p / 2) * floor (q / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (floor (p / 2) * floor (q / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (quot (p - 1) 2 * quot (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (binomial (p - 1) 2 * binomial (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (neg 1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2))))).
postulate thm07 : (p : Nat) -> (q : Nat) -> if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = pow (-1) (p - 1 / 2) * (q - 1 / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2 * div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (gcd p q) -1 = pow (pow (p - 1) (q - 1)) -1
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (if (and (prime p) (prime q)) (Eq (legendre p q) (pow (-1) (div (sub p 1) 2) (div (sub q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (gcd p q) -1 = pow (pow (-1) (pow (p - 1) (q - 1) / 2))
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ (p - 1 / 2) * (q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : (legendre p q * legendre q p) = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = pow (-1) (legendre p q * legendre q p))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = (-1)^( (p - 1)/2 * (q - 1)/2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (times (minus p 1)) (div (minus q 1)))) ) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2) * pow (- 1) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1) / 2 * (q - 1) / 2) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (not 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (neg 1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (not 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (not 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (neg 1) (div (sub p 1) 2))) -> Proof (Eq (legendre q p) (pow (neg 1) (div (sub q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (neg 1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (neg 1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre p q * legendre q p)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) * pow (-1) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (-1) (div (sub p 1) 2) (div (sub q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) * (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1)^( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (gcd p q) 1 = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (minus p 1) 2))) -> Proof (Eq (legendre (div q p)) (pow (-1) (div (minus q 1) 2))) -> Proof (Eq (times (legendre (div p q)) (legendre (div q p))) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : (legendre p q * legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (minus p 1) 2))) -> Proof (Eq (legendre (div q p)) (pow (-1) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) * (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) * (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) * (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (gcd p q) 1 = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) ((p - 1) / 2 * (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (floor (abs (p - 1) / 2) * floor (abs (q - 1) / 2))
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (minus p 1) 2) (minus q 1)
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (- p 1) 2) (div (- q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (- p 1) 2) (div (- q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1 / 2 * q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (- p 1) 2) (div (- q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (p - 1) * (q - 1)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (- p 1) 2) (div (- q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2)) 1
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) ((p - 1) / 2 * (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (-1) (div (sub p 1) 2) (div (sub q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ (p - 1 / 2) * (q - 1 / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (gcd p q) 1 = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : (legendre p q * legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) (q - 1))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (gcd p q) 1 = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : (legendre p q * legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1)^( (p - 1) / 2 * (q - 1) / 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) ((p - 1) / 2 * (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = (-1) ^ ( (p - 1) / 2 * (q - 1) / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (minus p 1) 2 * div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = pow (-1) (legendre (p - 1) 2 * legendre (q - 1) 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (times (minus p 1)) 2))) -> Proof (Eq (legendre (div q p)) (pow (-1) (div (times (minus q 1)) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = (-1)^( (p - 1)/2 * (q - 1)/2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre (div p q)) (pow (-1) (div (minus p 1) 2 * div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> (legendre p q * legendre q p = (-1) ^ (p - 1 / 2 * q - 1 / 2))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : legendre p q * legendre q p = pow (-1) (pow (p - 1) (div 1 2) * pow (q - 1) (div 1 2))
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (minus p 1) (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = (-1)^( (p - 1)/2 * (q - 1)/2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (gcd p q) (-1) = pow (pow (p - 1) (q - 1) / 2) (-1)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (legendre p q) (pow (-1) (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2 * div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> legendre p q * legendre q p = pow (-1) (legendre (p - 1) (q - 1))) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) (q - 1) / 2)
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))) .
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2) * pow (- 1) (div (minus q 1) 2))
Axiom thm07 : forall p : nat, forall q : nat, (prime p /\ prime q -> pow (legendre p q) (legendre q p) = pow (-1) (div (p - 1) 2 * div (q - 1) 2)) .
axiom thm07 (p q : Nat) (_ : prime p ∧ prime q) : pow (legendre p q) (legendre q p) = pow (-1) (pow (p - 1) 2 * pow (q - 1) 2)
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = norm c) : area c = pi * pow (radius c) 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Elem Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (r : Real) -> (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _r) : area c = pi * pow _r 2
thm09 : (c : Elem Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Elem Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Elem Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pow pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pow r pi)
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (equal (radius c) r) -> Proof (equal (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (_ : radius c = norm c) : area c = pi * pow (radius c) 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> Proof (equal (radius c) r) -> Proof (equal (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (r : Real) -> r = radius c -> area c = pi * pow r 2 .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom area (c : Circle) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : radius _ = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate area : Circle -> Real\npostulate prop09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : radius _ = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Area _ = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (equal (radius c) r) -> Proof (equal (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) (length) -> Eq (area c) (times pi (pow (length) 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = length) : area c = pi * pow (length) 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) (radius c) -> Eq (area c) (times pi (pow (radius c) 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = norm c) : area c = pi * pow (radius c) 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (r : Real) -> r = radius c -> area c = pi * pow r 2 .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (r : Real) -> r = radius c -> area c = pi * pow r 2 .
axiom thm09 (c : Circle) (_ : radius c = _ ) : area c = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Real -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (equal (radius c) r) -> Proof (equal (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (equal (radius c) r) -> Proof (equal (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * r ^ 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Area = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (r : Real) -> (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = _) : area c = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (r : Real) -> r = radius c -> area c = pi * pow r 2 .
axiom area (_ : Circle) (_ : radius _ = _) : Real
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Real -> if (Eq (radius c) r) (Eq (area c) (pi * pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (r : Real) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Real
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : r = radius _) : Area _ = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (_ : c.radius = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : r = radius _) : area _ = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (r : Real) -> (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : length_of (radius _) = _) : length_of (area _) = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (r : Real) -> (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : radius _ = _) : Area = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : length _ = _) : Area _ = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : area _ = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) : Real\naxiom radius (_ : Circle) : Real\naxiom pi : Real\n\naxiom thm09 (c : Circle) (_ : radius c = length) : area c = pi * pow length 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * pow r 2) .
axiom area (_ : Circle) : Real\naxiom pi : Real\n\naxiom thm09 (c : Circle) (_ : radius c = radius c) : area c = pi * pow (radius c) 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) : Prop\naxiom thm09 (c : Circle) (_ : r = radius c) : area c r = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : length (radius _) = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, (r : Real) -> r = radius c -> area c = pi * pow r 2 .
axiom area (_ : Circle) (_ : length (radius _) = _) : Real = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) : Prop\naxiom thm09 (c : Circle) (r : Real) : r = radius c → area c r = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Real -> if (Eq (radius c) r) (Eq (area c) (times pi (pow r 2)))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom areaOfCircle (_ : Circle) (_ : Real) : r = radius _ → area _ = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * pow r 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Real -> equalReal (radius c) _ -> equalReal (area c) (times pi (pow _ 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom areaOfCircle (c : Circle) (_ : radius c = r) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * r ^ 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Area _ = pi * pow _ 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * r ^ 2) .
axiom area (_ : Circle) (_ : Real) (_ : radius _ = _) : Area _ = pi * pow _ 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * r ^ 2) .
axiom area (_ : Circle) : Real\naxiom pi : Real\n\naxiom thm09 (r : Real) (_ : r = radius _) : area _ = pi * pow r 2
thm09 : (c : Circle) -> Proof (Eq (radius c) r) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (radius c = r -> area c = pi * r ^ 2) .
axiom area (_ : Circle) : Real\naxiom radius (_ : Circle) : Real\n\naxiom thm09 (c : Circle) (_ : radius c = length) : area c = pi * pow length 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) : Prop\naxiom thm09 (c : Circle) (_ : radius c = _) : area c _ = pi * pow _ 2
thm09 : (c : Circle) -> Proof (forall Real (r => Eq r (radius c))) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (r : Real) -> r = radius c -> area c = pi * pow r 2 .
axiom area (_ : Circle) (_ : length (radius _) = _) : Real
thm09 : (c : Circle) -> Proof (forall (r : Elem Real) (Eq r (radius c))) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, (r : Real) -> r = radius c -> area c = pi * pow r 2 .
axiom area (_ : Circle) (_ : r = radius _) : area _ = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) : Prop\naxiom thm09 (c : Circle) (r : Real) : radius c = r → area c r = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> Real -> if (Eq (radius c) r) (Eq (area c) (pi * pow r 2))
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) (_ : Real) : Prop\naxiom thm09 (c : Circle) (r : Real) : r = radius c → area c r = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
Axiom thm09 : forall c : Circle, forall r : Real, (radius c = r -> area c = pi * r ^ 2) .
axiom thm09 (c : Circle) (r : Real) (_ : r = radius c) : area c = pi * pow r 2
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (pow pi (pow r 2))) .
postulate thm09 : (c : Circle) -> real -> equal (radius c) (postulate) -> equal (area c) (pi * pow (postulate) 2)
Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) .
axiom area (_ : Circle) : Real\naxiom radius (_ : Circle) : Real\naxiom thm09 (c : Circle) (_ : radius c = length) : area c = pi * length ^ 2
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exists Int (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * (q : Int))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : congruent (pow a p) a (p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))).
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (Exist Int (fun q => q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => pow a p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => pow a p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : exists Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (Exist Int (fun q => a ^ p - a = p * q)))) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * (exist Int (fun q => a))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (a => Eq (minus (pow a p) a) (times p))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
Axiom fermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * a)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, pow a p - a = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : congruent (pow a p) a (p * _)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : exists Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exists Int (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some Int)
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exists Int (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * _ )
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, a ^ p - a = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, pow a p - a = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => pow a p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom fermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p) a = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => pow a p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => pow a p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (exist Int (fun q => a^p - a = p * q)))) .
axiom fermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * (Exist Int (fun q => a = pow a p - a)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a % p))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) for some q : Int) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q) ) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : exists Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Neq a 0) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p) (a + (p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : exists Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (Prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => True)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * Exist Int (fun q => q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Prime) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (some Int)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))))).
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (div (minus (pow a p) a) p))))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p ( Elem Int))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => True)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (div (minus (pow a p) a) p) 1)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))).
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, pow a p - a = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom fermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (exist Int (fun q => a^p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a ^ (p - 1)))) .
axiom fermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * (Int)) ) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * (a ^ (p - 1)))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * (exist Int (fun q => equal (pow a p - a) (p * q))))).
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * (a ^ (p - 1)))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (exist Int (fun q => a^p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => a ^ p - a = p * q)))) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
Axiom fermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * (exists Int (fun q => a = q)))) .
axiom fermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int := a => exists Int (q => Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (exist Int (fun q => a^p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * _ )
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * (a ^ (p - 1)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (forall Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Neq a 0) -> Proof (Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * _)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Neq a p) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (a / p))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (exists Int (fun q => a^p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p) (pow a 1) = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p (minus a 1)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist Int (fun q => a ^ p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Int -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a^p - a = p * q for some q : Int)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat := a => Eq (minus (pow a p) a) (times p (minus a 1)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p _))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist nat (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Nat (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat := a => minus (pow a p) a = times p (minus a 1) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * (exist nat (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Nat (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p) (a + p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Nat) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Nat) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q where q : Int
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Neq a 0) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Neq a 0) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int := a => exists Int (q => Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Neq a 0) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Neq a 0) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => Exist Nat (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Nat (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (abs (minus (pow a p) a)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (pow a p) a)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))).
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))).
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * a)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p _))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Nat (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Nat) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Nat) -> Proof (Eq (minus (pow a p) a) (times p (exists Nat (q => Eq (minus (pow a p) a) (times p q))))).
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Nat) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All nat (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Nat (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (abs q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom fermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, pow a p - a = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (abs q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * (q : Int))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (exist Int (fun q => a^p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exists Int (q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) -> Prop .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q (q : Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) for some q : Int) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) -> Axiom .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (a : Int))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * (some Int))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) -> Prop .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some Int)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a : Int))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q)) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) /\ Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a^p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * some q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Int -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> all Int (\ a -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Int -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * (a - 1))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) for some q : Int) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => pow a p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (congruent (pow a p) a) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) -> Prop .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (congruent (pow a p) a) -> Elem Int -> Proof (Eq (minus (pow a p) a) (times p _)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q)) -> Prop .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : even (pow a p - a)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int := a => exists Int (q => Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (times p q)) -> q : Int .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : even (pow a p - a)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a^p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, equal (pow a p - a) (p * q) /\ Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : pow a p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, (pow a p - a = p * q) -> Exist Int q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : a ^ p - a = p * q for some Int q
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (Prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => exists Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => exists Int (q => Eq (minus (pow a p) a) (times p q)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => Exist Int (fun q => a ^ p - a = p * q))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Int -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (pow a p) a)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Int -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exists Int (fun q => q))) ) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => Exist Int (λ q => a ^ p - a = p * q))
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> all Int (\ a -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => a ^ p - a = p * q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Elem Nat -> Proof (Eq (minus (pow a p) a) (times p q)) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * (exist Int (fun q => q)))) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (Eq (minus (pow a p) a) (times p ( Elem Int))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * a)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p (exists Int (q => Eq (minus (pow a p) a) (times p q)))))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Int (a => Eq (minus (pow a p) a) (times p ( Elem Int)))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
Axiom thm10FermatLittle : forall p : nat, (prime p -> All Int (fun a => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) : All Int (λ a => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, pow a p - a = p * q) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Elem Int .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, exists q : Int, (a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) -> Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))) .
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
Axiom thm10FermatLittle : forall p : nat, (prime p -> forall a : Int, Exist Int (fun q => a ^ p - a = p * q)) .
axiom thm10FermatLittle (p : Nat) (_ : prime p) (a : Int) : Exist Int (λ q => a ^ p - a = p * q)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (p : Elem Nat) -> Proof (and (Geq p n) (prime p)) .
postulate thm11 : (p : Nat) -> prime p -> all Nat (\ n -> Geq p n)
Axiom thm11 : forall p : nat, (p >= n /\ prime p) .
axiom thm11 (p : Nat) : Exist Nat (λ n => n ≤ p ∧ prime p)
thm11 : (p : Elem Nat) -> Proof (forall Nat (n => geq p n)) -> Proof (prime p) .
postulate thm11 : (p : Nat) -> all Nat (\ n -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (p : Nat) (n : Nat) : p ≥ n ∧ prime p
thm11 : (p : Elem Nat) -> Proof (forall Nat (n => and (Geq p n) (prime p))) .
postulate thm11 : (p : Nat) -> all Nat (\ n -> and (Geq p n) (prime p))
Axiom thm11 : forall p : nat, (forall n : nat, p >= n /\ prime p) .
axiom thm11 (p : Nat) (_ : p ≥ n) (_ : prime p) : Prop
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (p : Elem Nat) -> Proof (and (Geq p n) (prime p)) .
postulate thm11 : (p : Nat) -> Prop
Axiom thm11 : forall p : nat, (p >= 1 /\ prime p) .
axiom thm11 (p : Nat) : p ≥ 1 ∧ prime p
thm11 : (n : Elem Nat) -> Proof (forall Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (p n : Nat) : p ≥ n ∧ prime p
thm11 : (p : Elem Nat) -> Proof (forall Nat (n => Geq p n)) -> Proof (prime p) .
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
Axiom thm11 : forall p : nat, forall n : nat, (p >= n /\ prime p) .
axiom thm11 (p n : Nat) : p ≥ n ∧ prime p
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (p : Elem Nat) -> Proof (prime p) -> Proof (Geq p 11) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall p : nat, (p >= 1 /\ prime p) .
axiom thm11 (p : Nat) : Exist Nat (λ n => p >= n ∧ prime p)
thm11 : (p : Elem Nat) -> Proof (forall Nat (n => and (Geq p n) (prime p))) .
postulate thm11 : (p : Nat) -> all Nat (\ n -> if (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (p n : Nat) : p ≥ n ∧ prime p
thm11 : (p : Elem Nat) -> Proof (forall Nat (n => and (Geq p n) (prime p))) .
postulate thm11 : (p : Nat) -> all Nat (\ n -> if (Geq p n) (prime p))
Axiom thm11 : forall p : nat, forall n : nat, (p >= n /\ prime p) .
axiom thm11 (p n : Nat) : p ≥ n ∧ prime p
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (p : nat) -> Prop := n => p => prime p /\ p >= n .
axiom thm11 (p n : Nat) : p ≥ n ∧ prime p
thm11 : (p : Elem Nat) -> Proof (forall Nat (n => or (Geq p n) (prime p))) .
postulate thm11 : (p : Nat) -> all Nat (\ n -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (p : nat) -> (p >= n /\ prime p) .
axiom thm11 (p : Nat) (_ : p >= n) (_ : prime p) : Prop
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (p : Elem Nat) -> Proof (and (Geq p n) (prime p)) .
postulate thm11 : (p : Nat) -> Prop (prime p) -> Geq p 1
Axiom thm11 : forall p : nat, (p >= n -> prime p) .
axiom thm11 (p : Nat) : p >= 1 ∧ prime p
thm11 : (n : Elem Nat) -> Proof (forall Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> all Nat (\ p -> if (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (p : Elem Nat) -> (n : Elem Nat) -> Proof (if (Geq p n) (Prime p)) .
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
Axiom thm11 : forall n : nat, (p : nat) -> (p >= n /\ prime p) .
axiom thm11 (p n : Nat) : p ≥ n ∧ prime p
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (forall Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (forall Nat (p => Proof (and (Geq p n) (prime p)))) .
postulate thm11 : (n : Nat) -> all Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (forall Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (p : Elem Nat) -> (n : Elem Nat) -> Proof (if (Geq p n) (prime p)) .
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
Axiom thm11 : forall p : nat, forall n : nat, (p >= n /\ prime p) -> Prop .
axiom thm11 (p n : Nat) : p ≥ n ∧ prime p
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (p : nat) -> (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (p : nat) -> (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (forall Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> all Nat (\ p -> or (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (p : nat), (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (forall Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> all Nat (\ p -> if (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (p : nat), (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (p : nat) -> (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, (exists p : nat, (p >= n /\ prime p)) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, Exist nat (fun p => p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))) .
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
Axiom thm11 : forall n : nat, exists p : nat, (p >= n /\ prime p) .
axiom thm11 (n : Nat) : Exist Nat (λ p => p ≥ n ∧ prime p)
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => n = a^2 + (a + 1)^2 + (a + 2)^2 + (a + 3)^2) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => n = a^2 + (a + 1)^2 + (a + 2)^2 + (a + 3)^2) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => n = a^2 + a^2 + a^2 + a^2) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, (n = a^2 + b^2 + c^2 + d^2) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, exists c : nat, exists d : nat, exists a : nat, exists b : nat, (n = a^2 + b^2 + c^2 + d^2) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists nat (a => exists nat (b => exists nat (c => exists nat (d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))) n)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = pow a 2 + pow b 2 + pow c 2 + pow d 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = pow a 2 + pow b 2 + pow c 2 + pow d 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))) n)))))) .
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (a : Nat) : All Nat (λ n => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall a : nat, forall n : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (a : Nat) : All Nat (λ n => n = a ^ 2 + Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (pow b 2) (pow c 2) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (pow b 2) (pow c 2) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists c : nat, exists d : nat, exists a : nat, exists b : nat, (n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => n = a + a + a + a) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a + b + c + d + a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a + b + c + d + a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ a * a + b * b + c * c + d * d = n))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d ^ 2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d ^ 2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ b = a ^ 2 ∧ c = b ^ 2 ∧ d = c ^ 2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => n = a + a + a + a) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a + b + c + d + pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a + b + c + d + a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => n = a + a + a + a) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d where a := pow a 2 where b := pow b 2 where c := pow c 2 where d := pow d 2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => n = a + (a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ a ≤ b ∧ b ≤ c ∧ c ≤ d))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ a ≥ 0 ∧ b ≥ 0))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = pow a 2 + pow b 2 + pow c 2 + pow d 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))).
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (a : Nat) : All Nat (λ n => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))) .
postulate thm19 : (a : Nat) -> (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (a : Nat) (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (pow b 2) (pow c 2) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ b = a ∧ a = 1))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ Exist Nat (λ b => Exist Nat (λ a => a^2 + b^2 + c^2 + d^2 = n))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ b = a ^ 2 ∧ c = b ^ 2 ∧ d = c ^ 2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (a => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a^2 + b^2 + c^2 + d^2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (a : Nat) (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2)))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Proof (exists Nat (b => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a * a + b * b + c * c + d * d))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ Exist Nat (λ b => Exist Nat (λ a => a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> and (Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))) (exists Nat (\ b -> exists Nat (\ a -> and (Nat a) (Nat b))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d where a := a^2 + b^2 + c^2 + d^2)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ b = a ^ 2 ∧ d = c ^ 2))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => n = a + b + c + d)) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => n = a + b + c + d ∧ b = a ∧ a ∈ Nat))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 : All Nat (λ n => Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (a : Elem Nat) -> Proof (forall Nat (n => Eq (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))) .
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (a : Nat) : All Nat (λ n => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (a : Elem Nat) -> (n : Elem Nat) -> Proof (exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall a : nat, forall n : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (a : Nat) : Exist Nat (λ n => n = a ^ 2 + Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Proof (exists Nat (b => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (b => Proof (exists Nat (a => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Proof (exists Nat (b => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Proof (exists Nat (b => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, exists a : nat, exists b : nat, exists c : nat, exists d : nat, n = pow a 2 + pow b 2 + pow c 2 + pow d 2 .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => Proof (exists Nat (b => Proof (exists Nat (c => Proof (exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Proof (exists Nat (b => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (b => Proof (exists Nat (a => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Proof (exists Nat (b => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (c => Proof (exists Nat (d => Proof (exists Nat (a => Proof (exists Nat (b => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun c => Exist nat (fun d => Exist nat (fun a => Exist nat (fun b => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ c => Exist Nat (λ d => Exist Nat (λ a => Exist Nat (λ b => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 = n) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = pow a 2 + pow b 2 + pow c 2 + pow d 2))))
thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d => Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))) .
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
Axiom thm19 : forall n : nat, Exist nat (fun a => Exist nat (fun b => Exist nat (fun c => Exist nat (fun d => n = a^2 + b^2 + c^2 + d^2)))) .
axiom thm19 (n : Nat) : Exist Nat (λ a => Exist Nat (λ b => Exist Nat (λ c => Exist Nat (λ d => n = a^2 + b^2 + c^2 + d^2))))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => exists Nat (x => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) ) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Prime) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20a : (p : Elem Prime) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Prime) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (Prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Prime) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Prime) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (Prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + y * y)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 (Var k)) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (Var y) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 (minus p 1)) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + y * y)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (Prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x^2 + x^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (Prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (Prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (Prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2) )) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (Prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (Prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists nat (y => exists nat (x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists nat (y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Prime) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (y => Eq p (plus (pow x) (pow y)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Prime) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Prime) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))), where x : Elem Nat .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> Eq p (plus (pow x) (pow y)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (y => Eq p (plus (pow x) (pow y)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> 4 * k + 1 = p -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (y => Eq p (plus (pow x) (pow y)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ y -> Eq p (plus (pow (div p 4) 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => exists nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))), k : Elem Nat .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) ) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (y => Eq p (plus (pow x) (pow y)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))), k : Elem Nat .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> 4 * k + 1 = p -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) (times k Nat)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists nat (y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times 2 _))) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x) (pow y)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists nat (y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> and (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists nat (y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (minus (times (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus (minus (times 2) (minus p)) (minus
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) ) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))))
Axiom thm20a : forall p : nat, (prime p -> (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) : forall k : nat, Prop .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x) (pow y))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2) (minus (times 2)
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times 1 p))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
Axiom thm20a : forall p : nat, (prime p -> (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => x^2 + y^2 = 4 * k + 1))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (times 4 k 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times k 2))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> exists k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> exists k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _ )
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> odd p -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> odd p -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : All Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (times 4 x)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => p = x^2 + ( Exist Nat (λ y => p = x^2 + y^2)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => p = x * x + x * x)) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => p = x * x + (Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> Prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> Prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ : Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => exists Nat (x => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => exists Nat (x => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus x 1) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow x 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => p = x^2 + (Exist Nat (λ y => p = x^2 + y^2)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) ) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + y * y)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) ) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => p = x * x + Exist nat (fun y => p = x * x + y * y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => p = x * x + 1)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + (Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) ) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x^2 + x^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x^2 + x^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + (Exist Nat (λ y => p = x ^ 2 + y ^ 2)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + ( Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + (Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + (Exist nat (fun y => p = x^2 + y^2))))).
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (minus p))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))),
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))), where x : Elem Nat .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (minus p))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 4))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ (exists Nat (k => p = 4 * k + 1))) : exists Nat (y => exists Nat (x => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) (times k 4))) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p 4) (plus 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) (div p 4)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 1))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Elem Nat -> Proof (Eq p (plus (pow x 2) (pow y 2))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times 1 p))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 (abs k)) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 1))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))), Proof (Elem Nat x) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + y ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Elem Nat -> Proof (Eq p (plus (pow x) (pow y))) -> Elem Nat -> Proof (forall Nat (k => if (Eq p (plus (times 4 k) 1)) (exists Nat (y => exists Nat (x => Eq p (plus (pow x) (pow y))))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p 4) (exists Nat (\ k -> Eq p (plus (pow k 2) 1))) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) k)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x + pow y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x ^ 2 + _ ^ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = pow x 2 + pow _ 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ y + pow y _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ y + pow y _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> exists k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 (div p 4)) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> (exists k : nat, (p = 4 * k + 1) -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times k 1))) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 k)) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times 1 p))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (minus p))) -> exists Nat (times (plus 2 (minus p)) (minus p))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> and (Eq p 4) (plus 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) ) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (exists Nat (\ x -> and (Lt 0 x) (Eq (plus (pow x 2) (pow y 2)) p)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 (Var k)) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall k : nat, (prime (4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => 4 * k + 1 = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (Elem Nat))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) k)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> all Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> exists k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> Prim p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun p => Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun p => Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _ )
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (x + 1) * (x + 1))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : Exist Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Proof (Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => Proof (Eq p (plus (pow x 2) (pow (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))))))))) .
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ * _))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : Exist Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1)) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : Exist Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1)) -> All nat (fun x => Exist nat (fun y => p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : Exist Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ y => Exist Nat (λ x => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + ( Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> odd p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> Prim p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _ )
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + (Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) )
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> odd p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ * _))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _ )
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ * _))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ * _))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ * _))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ * _))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))), Proof (exists Nat (x => Eq p (plus (times 4 k) 1))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))), where x : Elem Nat .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))), Proof (Eq p (plus (times 4 k) 1)) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) : All Nat (λ k => p = 4 * k + 1) → Exist Nat (λ y => Exist Nat (λ x => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _ )
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + (Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) )
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x * x + x * x))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) )
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + ( Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = x^2 + y^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + x * x)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _ )
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _^2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ : Exist Nat (λ y => p = x * x + y * y)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + _ * _)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => p = x * x + (_ * _))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x * x + y * y)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> (exists k : nat, (p = 4 * k + 1) -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 (minus p 1))) 1) -> exists Nat (y => exists Nat (x => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow 2 y) (pow 2 y)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> exists Nat (y => exists Nat (x => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (times k 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p 4))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow 2 y) (pow 2 y)))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k Nat)) -> exists Nat (\ y -> Eq p (plus (pow x Nat) (pow y Nat)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Elem Nat -> Proof (Eq p (plus (pow x 2) (pow y 2))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Elem Nat -> Proof (Eq p (plus (pow x) (pow y))) -> Elem Nat -> Proof (Eq x k) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> 4 * k + 1 = p -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> if (Eq p (plus 4 (times 1 p))) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> (exists k : nat, (p = 4 * k + 1) -> exists y : nat, exists x : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => p = x ^ 2 + ( Exist Nat (λ y => p = x ^ 2 + y ^ 2)))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))), k : Elem Nat .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun y => p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))), x : Elem Nat) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : Exist Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (times 4 k 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x + pow y))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (times 4 k 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists y : nat, exists x : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, (p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => and (Eq p (plus (pow x 2) (pow y 2))) (Neq y 0)))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => Exist Nat (λ x => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Elem Nat -> Proof (Eq p (plus (pow x) (pow y))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Elem Nat -> Proof (Eq p (plus (pow x) (pow y))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ y => p = pow _ 2 + pow y 2)
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> exists k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> exists k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> exists k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, (p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 (div p 4)) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (exists Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x) (pow y))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq (p (plus (times 4 k) 1))) -> exists Nat (x => exists Nat (y => Eq (p (plus (pow x 2) (pow y 2)))))) .
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (div p))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x) (pow y))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (k => Eq p (plus (times 4 k) 1))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 k)) -> exists Nat (times (plus x 2) (plus y 2))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (times (plus (minus p (times x 2)) (times y 2)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4) (Var k))) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> All nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x) (pow y)))
Axiom thm20a : forall p : nat, (prime p -> p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : Exist Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) ) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (k : Nat) (_ : p = 4 * k + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : Exist Nat (λ k => p = 4 * k + 1)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times 1 k))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times k 1))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2)) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> forall k : nat, (p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2)))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> Eq p (plus 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> Nat -> Eq p (plus 4 times) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p ∧ p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20a : forall p : nat, (prime p -> Exist nat (fun k => p = 4 * k + 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20a (p : Nat) (_ : prime p) (_ : p = 4 * _ + 1) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> exists nat (x => exists nat (y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> 1 = p mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> 1 = p mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p <> 1 /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => p = x * x + x * x)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = xpow x 2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (Prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = xpow x 2 + y)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun y => p = xpow 2 + ypow 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (Prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> (p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) ) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> 1 = p mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> (p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> 1 = p mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> (p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> 1 = p mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => p = x ^ 2 + x ^ 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => p = pow x 2 + pow (sorry) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 4) 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (mod 4)) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ y => p = pow (some Nat) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> odd (mod p 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> odd p -> exists nat (fun x => exists nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 2) 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some Nat) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (div p 4) y) 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> exists y : nat, exists x : nat, p = x ^ 2 + y ^ 2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (Prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (sqrt p) y) 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (4)) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (div p y) 2)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun x => p = pow x 2 + pow (exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some Nat) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq (plus (pow p 2) (pow y 2)) (pow (minus (sqrt p) 1) 2))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (4)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> 1 = p mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p) (_ : p % 4 = 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 2) 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x + pow y)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => p = x ^ 2 + x ^ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some Nat) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 4) 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => p = x ^ 2 + x ^ 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 2) 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => p = x ^ 2 + x ^ 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ y => p = pow (some Nat) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some Nat) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (div p y) 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (congruent p 1 4)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (Eq (mod p 4) 1)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (Eq (mod p 4) 1)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (Eq (mod p 4) 1)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (Eq (mod p 4) 1)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (Eq (mod p 4) 1)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (Eq (mod p 4) 1)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (Eq (mod p 4) 1)) (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow ( Exist Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow ( Exist Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> odd p -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> odd p -> (exists x : nat, exists y : nat, p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p x) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> 4 * p = 1 + (pow (exists nat (x => x < p)) 2 + pow (exists nat (y => p = x + y)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (minus p x) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> exists nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (Exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> odd p -> 1 = p mod 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> exists nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus p y) 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> odd p -> 4 * p = 1 mod 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = pow x 2 + pow (exist nat (fun y => p = pow x 2 + pow y 2)) 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => p = x ^ 2 + x ^ 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow (exists Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow (exists Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow ( Exist Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow ( Exist Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow ( Exist Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow _ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (mod 4)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow ( Exist Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 4)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> exists x : nat, exists y : nat, p = x ^ 2 + y ^ 2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> exists x : nat, exists y : nat, p = pow x 2 + pow y 2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (div p 4) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> (p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => p = x^2 + x^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2))) .
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> exists x : nat, exists y : nat, p = x^2 + y^2) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus p y) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ y => p = x ^ 2 + y ^ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p) (_ : p ≡ 1 (mod 4)) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x^2 + x^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p) (_ : congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> odd p -> prime p -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (div p 2) y) 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => Eq p (plus (pow x 2) (pow (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) 2)))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (div p 2) y) 2)))
Axiom thm20b : forall p : nat, (prime p -> p <> 1 /\ 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> congruent p 1 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x * x + y * y))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Elem Nat -> Proof (Eq p (plus (pow x 2) (pow y 2))) .
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x * x + x * x)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun y => p = x^2 + y^2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = x^2 + y^2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 % 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p = 1 mod 4) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p = 1 mod 4) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x * x + y * y))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x ^ 2 + pow (norm x) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow _ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = x ^ 2 + pow (norm x) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow _ 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (mod 4)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (exists Nat (x => Eq p (plus (pow x 2) (pow y 2)))))) .
postulate thm20b : (p : Nat) -> prime p -> p ≡ 1 (mod 4) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 mod 4 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> p ≡ 1 (mod 4) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (4)) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (4)) : Exist Nat (λ y => Exist Nat (λ x => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (mod 4)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Elem Nat -> Proof (Eq p (plus (pow x 2) (pow y 2))) .
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> odd p -> prime p -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (sqrt p) y) 2)))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (mod 4)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Eq p (plus (pow x 2) (pow y 2)))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow (pow x 2) + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (4)) : Exist Nat (λ y => p = pow (some x) 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun y => p = pow x 2 + pow y 2)) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => p = pow x 2 + pow y 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p = 1 /\ 4 -> Exist nat (fun y => Exist nat (fun x => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => p = pow x 2 + pow (exists Nat (λ y => p = pow x 2 + pow y 2)) 2)
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p -> p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p = 1 mod 4 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p % 4 = 1) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ p ≡ 1 (mod 4)) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (y => Proof (Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Elem Nat -> Proof (Eq p (plus (pow x 2) (pow y 2))) .
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun y => Exist nat (fun x => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ y => Exist Nat (λ x => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (Eq (mod p 4) 1) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (congruent p 1 4)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p mod 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ (p % 4 = 1) -> Exist nat (fun x => Exist nat (fun y => p = x ^ 2 + y ^ 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x^2 + y^2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = pow x 2 + pow y 2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (if (and (prime p) (congruent p 1 4)) (exists Nat (x => exists Nat (y => Eq (plus (pow x 2) (pow y 2)) p)))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
Axiom thm20b : forall p : nat, (prime p /\ p % 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = x ^ 2 + y ^ 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))).
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm20b : (p : Elem Nat) -> Proof (and (prime p) (Eq (mod p 4) 1)) -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (pow x 2) (pow y 2))))) .
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
Axiom thm20b : forall p : nat, (prime p /\ p mod 4 = 1 -> Exist nat (fun x => Exist nat (fun y => p = x^2 + y^2))) .
axiom thm20b (p : Nat) (_ : prime p ∧ congruent p 1 4) : Exist Nat (λ x => Exist Nat (λ y => p = pow x 2 + pow y 2))
thm22 : Proof (not (denumerable Real)) .
postulate thm22 : not (denumerable Real)
Axiom thm22 : ~ Denumerable Real .
axiom thm22 : ¬ denumerable Real
thm22 : Proof (not (denumerable Real)) .
postulate thm22 : not (denumerable Real)
Axiom thm22 : Denumerable Real -> False .
axiom thm22 : ¬ denumerable Real
thm22 : Proof (not (denumerable Real)) .
postulate thm22 : not (denumerable Real)
Axiom thm22 : ~ Denumerable Real .
axiom thm22 : ¬ denumerable Real
thm22 : Proof (not (denumerable Real)) .
postulate thm22 : not (denumerable Real)
Axiom thm22 : ~ Denumerable Real .
axiom thm22 : ¬ denumerable Real
thm22 : Proof (not (denumerable Real)) .
postulate thm22 : not (denumerable Real)
Axiom thm22 : ~ denumerable Real .
axiom thm22 : ¬ countable Real
thm22 : Proof (not (denumerable Real)) .
postulate nonDenumerable : Set
Axiom thm22 : ~ denumerable Real .
axiom thm22 : ¬ countable Real
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus 1 n))
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (minus (factorial n) 1) (neg 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (minus (factorial n) 1) (neg 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n ^ (-1) % n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (equiv (factorial (minus n 1)) (minus 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ (factorial (n - 1) ≡ -1 % n)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (mod (factorial (minus n 1)) n) (-1))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ (factorial (n - 1) ≡ -1 % n)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (mod (factorial (minus n 1)) n) (minus 1))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ (factorial (n - 1) ≡ -1 % n)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (equiv (factorial (minus n 1)) (- 1) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ (factorial (n - 1) ≡ -1 % n)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (minus (factorial (minus n 1)) (- 1)) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (-1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (minus (factorial n) 1) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = neg 1 mod n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = neg 1 mod n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = 1 - 1 % n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1))
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = 1 - 1 % n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1))
Axiom thm51wilson : forall n : nat, (prime n <-> (factorial (n - 1) = 1 - 1 % n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> factorial (n - 1) = n - 1) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (equiv (factorial (minus n 1)) (- 1) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (minus (factorial (minus n 1)) (- 1)) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (mod (factorial (minus n 1)) n) (-1))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (mod (factorial (minus n 1)) n) (-1))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (equiv (factorial (minus n 1)) (minus 1) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (-1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial (minus n 1)) -1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (n - 1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (neg 1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial (minus n 1)) 1) (minus n))
Axiom thm51wilson : forall n : nat, (prime n <-> (factorial (n - 1) = 1 % n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (n - 1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (n - 1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (neg 1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (pow n (-1))
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus n 1) (minus 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (-1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus n 1) (minus 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> congr (factorial (n - 1)) (neg 1) n) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (n - 1)
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (equiv (factorial (minus n 1)) (-1) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (minus (factorial (minus n 1)) (- 1)) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (factorial (n - 1) = n - 1)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (equiv (factorial (minus n 1)) (minus 1) (mod n))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (Eq (mod (factorial (minus n 1)) n) (minus 1))) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (equiv (factorial (minus n 1)) (minus 1) n)) .
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
Axiom thm51wilson : forall n : nat, (prime n <-> (pow (factorial (n - 1)) (-1) n)) .
axiom thm51wilson (n : Nat) : prime n ↔ congr (factorial (n - 1)) (-1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> n % (factorial (n - 1) + 1) = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n - 1)! + 1 mod n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n * factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> n |> (factorial (n - 1)) + 1) % n = 0 .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n * factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> n dvd (factorial (n - 1) + 1)) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (factorial (minus n 1)) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n - 1)! + 1) % n = 0 .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n + factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n + factorial (n - 1)) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n + factorial (n - 1) = n * n)) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> divisible (factorial (n - 1) + 1) n) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> divisible (factorial (n - 1) + 1) n) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n - 1 + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> n / (factorial (n - 1) + 1) = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n - 1 + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> n / (factorial (n - 1) + 1) = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n - 1 + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> n % (factorial (n - 1) + 1) = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n - 1 + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (n - 1 + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
Axiom thm51b : forall n : nat, (prime n <-> n % (factorial (n - 1) + 1) = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ (factorial (n - 1) + 1) % n = 0
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)) .
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
Axiom thm51b : forall n : nat, (prime n <-> (factorial (n - 1) + 1) % n = 0) .
axiom thm51b (n : Nat) : prime n ↔ divisible (factorial (n - 1) + 1) n
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ cardinality A) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (2 ^ cardinality A)
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ (cardinality A)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (2 ^ (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ (cardinality A)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ (cardinality A)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (2) (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ (cardinality A)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (cardinality A) 1)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ (cardinality A)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ (cardinality A)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ cardinality A) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> equalset (powerset A) (powerset (cardinality A) 2)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (equalset (times 2) (abs A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> equalset (powerset A) (powerset (cartesian (powerset A) (2 ^ (cardinality A))))).
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (powerset (abs A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = 2 ^ cardinality A) .
axiom thm52 (A : Set) (_ : finite A) : equalset (powerset A) (pow (cardinality A) 2)
thm52 : (A : Set) -> Proof (finitecardinality A) -> Proof (equalset (powerset A) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite Adjoint A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite _ = cardinality A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite _ (Adj A)) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality (powerset A) == pow (finitecardinality A) 2
Axiom thm52 : forall A : Set, (finite _ : finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite _ = finite_Adj) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (equal (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (powerset (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (equal (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite _ A -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (equal (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite _ A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite_Adm A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite _ A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite (adj A) -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite_Adj A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Finite, cardinality (powerset A) = pow (cardinality A) 2 .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow 2 (cardinality A)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite Adjoint A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (equalset (times 2) (cardinality A))
Axiom thm52 : forall A : Set, (finite Adjoint A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite _ = finite_adj) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite _ (adj A)) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite (adj A) -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : finite, cardinality (powerset A) = pow (cardinality A) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (set (times 2 (cardinality A)))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite _ A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finitecardinality A) -> Proof (equalset (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow (cardinality A) 2)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finitecardinality A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite_Adj A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality (adjacency A) -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite Adjoint A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite _ = cardinality (adjacency _)) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite_Adj A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite (adjacency A) -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite_adj A -> cardinality (powerset A) = 2 ^ cardinality A) .
axiom thm52 (A : Set) (_ : finite (_ : Adj) A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finitecardinality A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite _ -> equalset (powerset A) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite _ A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite _ A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite _ A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite _ A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite _ (adjacency A)) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (cardinality (powerset A) = 2 ^ cardinality A) .
axiom thm52 (A : Set) (_ : finite _ = cardinality (adjacencyList A)) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite Adjoint A) -> Proof (equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (times 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite (adj A) -> cardinality (powerset A) = 2 ^ cardinality A) .
axiom thm52 (A : Set) (_ : finite _ = finite_Adj) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
Axiom thm52 : forall A : Set, (finite_cardinality A -> cardinality (powerset A) = 2 ^ cardinality A) .
axiom thm52 (A : Set) (_ : finite _ = finite_cardinality) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))) .
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow 2 (finitecardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite _ A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow (cardinality A))) .
axiom thm52 (A : Set) (_ : finite _ = finite_adj) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (powerset 2 ^ (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (cardinality (powerset A)) (pow (cardinality A))) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite (adj A)) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> equalset (powerset A) (equalset (cardinality A) (minus (pow 2) (cardinality A)))
Axiom thm52 : forall A : Set, (finite (adjacency A) -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite (adjacency A)) : cardinality (powerset A) = pow (cardinality A) 2
thm52 : (A : Set) -> Proof (finite (adjacency A)) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> equalset (powerset A) (equalset (equalset A) 2)
Axiom thm52 : forall A : finite, cardinality (powerset A) = 2 ^ cardinality A .
axiom thm52 (A : Set) (_ : finite _ = cardinality (adjacency _)) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite (cardinality A) -> equalset (cardinality (powerset A)) (pow (cardinality A))
Axiom thm52 : forall A : Set, (finite A -> equalset (powerset A) (cardinality A ^ 2)) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = 2 ^ cardinality A
thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow (cardinality A) 2)) .
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (equalset (powerset A) (powerset A))
Axiom thm52 : forall A : Set, (finite A -> cardinality (powerset A) = pow (cardinality A) 2) .
axiom thm52 (A : Set) (_ : finite A) : cardinality (powerset A) = pow (cardinality A) 2
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> Leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .\nAxiom binomial : forall n : nat, forall k : nat, nat .\n\nAxiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinationsFromSet A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> Proof (forall Nat (k => Proof (leq k n))) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, (n : nat) -> Proof (equalset (cardinality A) n) -> forall k : nat, (Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k))) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equal (cardinality A) n) -> Proof (forall Nat (k => Proof (leq k n))) -> Proof (equal (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, (n : nat) -> Proof (equalset (cardinality A) n) -> All nat (fun k => k <= n -> equalset (cardinality (combinations A k)) (binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Leq k n)) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (Leq k n) => Eq (cardinality (combinations A k)) (binomial n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (k <= n) -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> Proof (forall Nat (k => Proof (leq k n))) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .\nAxiom binomial : forall n : nat, forall k : nat, nat .\nAxiom combinationsFromSetCardinality : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinationsFromSet A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Leq k n)) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (Leq k n))) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .\nAxiom binomial : forall n : nat, forall k : nat, nat .\nAxiom combinationsFromSetCardinality : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinationsFromSet A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> and (leq k n) -> equalset (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, (n : nat) -> (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, (n : nat) -> (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> and (leq k n) (equalset (cardinality (combinations A k)) (binomial n k)))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (and (Leq k n) (Eq (cardinality (combinations A k)) (binomial n k))))).
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> if (leq k n) (equalset (cardinality (combinations A k)) (binomial n k)))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (Leq k n) => Eq (cardinality (combinations A k)) (binomial n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (Leq k n) => Eq (cardinality (combinations A k)) (binomial n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (Leq k n) => Eq (cardinality (combinations A k)) (binomial n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (and (Leq k n) (Eq (cardinality (combinations A k)) (binomial n k)))) ) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Eq (leq k n) => Eq (cardinality (combinations A k)) (binomial n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (combinations A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (combinations A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (combinations A k)) (combinations n k))) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (combinations A k) = combinations n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> Leq k n -> equalset (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, (n : nat) -> (cardinality A = n -> forall k : nat -> (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> Leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (leq k n) -> Proof (equalset (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (leq k n) -> Eq (cardinality (combinationsFromSet A k)) (combinations n k))
Axiom thm58 : forall A : Set, (n : nat) -> (A : equalset A (cardinality A)) -> forall k : nat, (k <= n -> equalset (cardinality (binomial A k)) (binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (binomial A k)) (binomial n k))
Axiom thm58 : forall A : Set, (n : nat) -> equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (binomial A k)) (binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> and (leq k n) (equalset (cardinality (combinations A k)) (combinations n k)))
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> All nat (fun k => k <= n -> equalset (cardinality (choose A k)) (choose n k))) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (binomial A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Proof (Leq k n) => Eq (cardinality (combinations A k)) (combinations n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (binomial A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> if (leq k n) (equalset (cardinality (binomial A k)) (binomial n k)))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (binomial A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Proof (Leq k n) => Eq (cardinality (combinations A k)) (combinations n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (combinations n k))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) : All Nat (λ k => k ≤ n → cardinality (binomial A k) = binomial n k)
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (binomial A k)) (binomial n k))) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Proof (Leq k n))) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (binomial A k)) (binomial n k)))
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (choose A k)) (choose n k))) .
axiom thm58 (A : Set) (_ : cardinality A = n) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Proof (Leq k n))) -> Proof (Eq (cardinality (binomial A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (binomial A k)) (binomial n k)))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Proof (Leq k n))) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (combinations A k)) (binomial n k)))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> Proof (forall Nat (k => Proof (Leq k n) => Eq (cardinality (combinations A k)) (combinations n k))) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (binomial A k)) (binomial n k)))
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> All nat (fun k => k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (choose A k) = choose n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (choose A k)) (choose n k))) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (binomial A k)) (binomial n k))) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (equalset (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (equalset (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (equalset (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (binomial A k)) (binomial n k))) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (equalset (cardinality A) n -> forall k : nat, (k <= n -> equalset (cardinality (choose A k)) (choose n k))) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (choose A k) = choose n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (binomial A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (binomial A k)) (binomial n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
thm58 : (A : Set) -> (n : Elem Nat) -> Proof (Eq (cardinality A) n) -> (k : Elem Nat) -> Proof (Leq k n) -> Proof (Eq (cardinality (combinations A k)) (combinations n k)) .
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
Axiom thm58 : forall A : Set, forall n : nat, (cardinality A = n -> forall k : nat, (k <= n -> cardinality (choose A k) = binomial n k)) .
axiom thm58 (A : Set) (n : Nat) (_ : cardinality A = n) (k : Nat) (_ : k ≤ n) : cardinality (binomial A k) = binomial n k
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom abs (_ : Real) : Real
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom abs (_ : Real) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition length (v : Vector) : Real := norm v .
axiom abs (_ : Real) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom norm : Vector -> Real .
axiom abs (_ : Real) : Real
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom abs (_ : Real) : Real
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom abs (_ : Real) : Real
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom abs (_ : Real) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom abs (_ : Real) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom abs (_ : Real) : Real
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition length (v : Vector) : Real := norm v .
axiom abs (_ : Real) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom abs (_ : Real) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom norm (_ : Vector) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom norm (_ : Vector) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom norm (_ : Vector) : Real
abs : Elem Real -> Elem Real .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition length (v : Vector) : Real := norm v .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom norm (_ : Vector) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom norm (_ : Vector) : Real
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom norm (_ : Vector) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom norm (_ : Vector) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom norm (_ : Vector) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom norm (_ : Vector) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition length (v : Vector) : Real := norm v .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom norm (_ : Vector) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom abs : Real -> Real .
axiom norm (_ : Vector) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom norm (_ : Vector) : Real
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Le (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ r -> and (Leq (dotProduct u v) r) (Leq r (times (norm u) (norm v))))
Axiom thm78 : forall u : Vector, forall v : Vector, (u . v <= length u * length v) .
axiom thm78 (u v : Vector) : dotProduct u v ≤ length u * length v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Le (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (dotProduct u v) (times (norm u) (norm v)))
Axiom thm78 : forall u : Vector, forall v : Vector, (u . v) <= length u * length v .
axiom thm78 (u v : Vector) : norm (dotProduct u v) ≤ length u * length v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Le (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (dotProduct u v) (times (norm u) (norm v)))
Axiom thm78 : forall u : Vector, forall v : Vector, (dotProduct u v <= length u * length v) .
axiom thm78 (u v : Vector) : dotProduct u v ≤ length u * length v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Le (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (dotProduct u v) (times (norm u) (norm v)))
Axiom thm78 : forall u : Vector, forall v : Vector, (u . v <= length u * length v) .
axiom thm78 (u v : Vector) : dotProduct u v ≤ length u * length v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Le (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (dotProduct u v) (times (norm u) (norm v)))
Axiom thm78 : forall u : Vector, forall v : Vector, (u . v) <= length u * length v .
axiom thm78 (u v : Vector) : dotProduct u v ≤ length u * length v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Le (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (dotProduct u v) (times (norm u) (norm v)))
Axiom thm78 : forall u : Vector, forall v : Vector, (dotProduct u v <= length u * length v) .
axiom thm78 (u v : Vector) : dotProduct u v ≤ length u * length v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> geq (dotProduct u v) (times (length u) (length v))
Axiom thm78 : forall u : Vector, forall v : Vector, (dotProduct u v <= length u * length v) .
axiom thm78 (u v : Vector) : dotProduct u v ≤ length u * length v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> leq (dotProduct u v) (times (norm u) (norm v)))
Axiom thm78 : forall u : Vector, forall v : Vector, (u . v <= length u * length v) .
axiom thm78 (u v : Vector) : norm (dotProduct u v) ≤ norm u * norm v
thm78 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (dotProduct u v) (times (norm u) (norm v))) .
postulate thm78 : (u : Vector) -> (v : Vector) -> geq (dotProduct u v) (times (length u) (length v))
Axiom thm78 : forall u : Vector, forall v : Vector, (u . v <= length u * length v) .
axiom thm78 (u v : Vector) : length (u * v) ≤ length u * length v
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom abs (_ : Real) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom abs (_ : Real) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom norm (_ : Vector) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom abs : Real -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom norm (_ : Vector) : Real
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (perpendicular u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (perpendicular u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dot_product u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (perpendicular u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> scalarProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : innerProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> scalarProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (equal (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : innerProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (perpendicular u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (perpendicular u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (perpendicular u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : perpendicular u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (perpendicular u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : perpendicular u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (perpendicular u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (orthogonal u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (orthogonal u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (perpendicular u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (perpendicular u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (perpendicular u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) : orthogonal u v → dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (if (perpendicular u v) (Eq (dotProduct u v) 0)) .
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm78a : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (dotProduct u v) 0) .
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
Axiom thm78a : forall u : Vector, forall v : Vector, (orthogonal u v -> dotProduct u v = 0) .
axiom thm78a (u v : Vector) (_ : orthogonal u v) : dotProduct u v = 0
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (norm (plus u v)) (plus (norm u) (norm v)))
Axiom thm91 : forall u : Vector, forall v : Vector, length (u + v) <= length u + length v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ r -> r <= norm (plus u v))
Axiom thm91 : forall u : Vector, forall v : Vector, norm (u + v) <= norm u + norm v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (norm (plus u v)) (plus (norm u) (norm v)))
Axiom thm91 : forall u : Vector, forall v : Vector, norm (u + v) <= norm u + norm v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (norm (plus u v)) (plus (norm u) (norm v)))
Axiom thm91 : forall u : Vector, forall v : Vector, norm (u + v) <= norm u + norm v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (norm (plus u v)) (plus (norm u) (norm v)))
Axiom thm91 : forall u : Vector, forall v : Vector, norm (u + v) <= norm u + norm v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (norm (plus u v)) (plus (norm u) (norm v)))
Axiom thm91 : forall u : Vector, forall v : Vector, length (u + v) <= length u + length v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ d -> d <= norm (plus u v))
Axiom thm91 : forall u : Vector, forall v : Vector, length (u + v) <= length u + length v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ norm -> norm (plus u v) <= plus (norm u) (norm v))
Axiom thm91 : forall u : Vector, forall v : Vector, length (u + v) <= length u + length v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
thm91 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (Leq (norm (plus u v)) (plus (norm u) (norm v))) .
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ norm => norm (plus u v) <= plus (norm u) (norm v))
Axiom thm91 : forall u : Vector, forall v : Vector, length (u + v) <= length u + length v .
axiom thm91 (u v : Vector) : norm (u + v) ≤ norm u + norm v
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom combinations (n k : Nat) : Nat
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Definition length (v : Vector) : Real := norm v .
axiom combinations (n k : Nat) : Nat
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom abs (_ : Real) : Real
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom norm : Vector -> Real .
axiom abs (_ : Real) : Real
def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Definition length (v : Vector) : Real := norm v .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate norm : Vector -> Real
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom abs (_ : Real) : Real
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom abs : Real -> Real .
axiom norm (_ : Vector) : Real
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinationsFromSet (A : Set) (k : Nat) : Set
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate norm : Vector -> Real
Axiom combinations : forall n : nat, forall k : nat, nat .
axiom combinations (n k : Nat) : Nat
def length : (v : Elem Vector) -> Elem Real := v => norm v .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) .
axiom combinations (n k : Nat) : Nat
abs : Elem Real -> Elem Real .
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
Axiom combinationsFromSet : forall A : Set, forall k : nat, Set .
axiom combinations (n k : Nat) : Nat
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (forall Nat (n => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (n : nat) -> (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < _ ∧ p < 2 * _) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (n => and (Lt n p) (Lt p (times 2 n)))) .
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (n : nat) -> Prop := p => n => prime p /\ n < p /\ p < 2 * n .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < _ ∧ p < 2 * _) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (and (prime p) (Lt (n) (p))) -> Proof (Lt (p) (times 2 (n))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, (p : nat) -> (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (p > 1 -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < _ ∧ p < 2 * _) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < n) (_ : n < 2 * p) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> (n : Elem Nat) -> Proof (if (and (prime p) (Lt n p)) (Lt p (times 2 n))) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> forall n : nat, (n < p -> p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < n) (_ : n < 2 * p) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt p n) (Lt n (times 2 p)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p n) (Lt n (times 2 p)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (and (Lt n p) (Lt p (times 2 n))) .
postulate thm98 : (p : Nat) -> and (prime p) (all Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (n => Lt n p)) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (forall Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * p) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p n) (Lt n (times 2 p)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (n => Lt n p)) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (n => Lt n p)) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (forall Nat (n => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (n : nat) -> (p < 2 * n /\ prime p /\ n < p) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < n) (_ : p < 2 * n) : Prop
thm98 : (p : Elem Nat) -> Proof (Prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt p (times 2 n)) -> all Nat (\ n -> Lt p (times 2 n))
Axiom thm98 : forall p : nat, (p > 1 -> (n : nat) -> (p < n -> p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < n) (_ : p < 2 * n) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> (n : Elem Nat) -> Proof (and (prime p) (Lt n p) (Lt p (times 2 n))) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (n : nat) -> (p < n /\ p < 2 * n -> prime p) .
axiom thm98 (p : Nat) (_ : prime p ∧ p < _ ∧ p < 2 * _) : Prop
thm98 : (p : Elem Nat) -> Proof (forall Nat (n => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (forall n : nat, (prime p /\ n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p ∧ p < _ ∧ p < 2 * _) : All Nat (λ n => p < n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt n p))) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt n p))) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> forall n : nat, (n < p -> p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < _ ∧ p < 2 * _) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) -> Proof .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> (n : Elem Nat) -> Proof (and (prime p) (Lt n p)) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> forall n : nat, (n < p -> p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < n) (_ : p < 2 * n) : Prop
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) -> Proof .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> forall n : nat, (n < p -> p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p n))) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p n))) => Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (and (Lt n p) (Lt p (times 2 n))) .
postulate thm98 : (p : Nat) -> (n : Nat) -> if (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (and (Lt n p) (Lt p (times 2 n))) .
postulate thm98 : (p : Nat) -> and (prime p) (exists Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : All Nat (λ n => n < p)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt n p))) => Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt n p))) => Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt n p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (n => Lt n p)) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (forall Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : p < _
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (n => Lt n p)) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (exists Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _) : p < _
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : false
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _) : p < _
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (p > 0 -> (n : nat) -> (p < n /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p ∧ p < _ ∧ p < 2 * _) : Prop
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (p > 1 -> (n : nat, n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p ∧ p < _ ∧ p < 2 * _) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, exists p : nat, (prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) (_ : n < 2 * n) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (forall Nat (n => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (p : Nat) (_ : prime p ∧ p < _ ∧ p < 2 * _) : Prop
thm98 : (p : Elem Nat) -> Proof (forall Nat (n => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (p > 0 -> p > 1 -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p ∧ p < _ ∧ p < 2 * _) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (and (prime p) (Lt n p)) -> Proof (Lt p (times 2 n)) -> Proof (forall Nat (n => and (prime p) (Lt n p))) .
postulate thm98 : (p : Nat) -> and (prime p) (all Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : Exist nat (fun p => prime p /\ forall n (fun n => n < p /\ p < 2 * n)) .
axiom thm98 : Exist Nat (λ p => prime p ∧ All Nat (λ n => n < p ∧ p < 2 * n))
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (prime p -> forall n : nat, (n < p -> p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < n) (_ : p < 2 * n) : Prop
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (prime p -> forall n : nat, (n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < _ ∧ p < 2 * _) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p /\ n < p /\ p < 2 * n) -> False .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < n) (_ : p < 2 * n) : Prop
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
Axiom thm98 : forall p : nat, (prime p -> forall n : nat, (n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p ∧ (n : Nat) < p ∧ p < 2 * n) : Prop
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) (_ : n > 0) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p n))) => Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 : Exist Nat (λ p => prime p ∧ All Nat (λ n => n < p ∧ p < 2 * n))
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p n)) (Lt p (times 2 n))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * p) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> Proof (forall Nat (n => Lt n p)) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> and (prime p) (exists Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * p) : All Nat (λ n => n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (and (Lt n p) (Lt p (times 2 n))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n)))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p (times 2 n)))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (Lt p n))) => Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 : Exist Nat (λ p => prime p ∧ All Nat (λ n => n < p ∧ p < 2 * n))
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _ : Nat) : p < _
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
Axiom thm98 : forall p : nat, (prime p -> All nat (fun n => n < p /\ p < 2 * n)) .
axiom thm98 (p : Nat) (_ : prime p) (_ : p < 2 * _) : p < _
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (p : Elem Nat) -> Proof (prime p) -> (n : Elem Nat) -> Proof (Lt n p) -> Proof (Lt p (times 2 n)) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
thm98 : (n : Elem Nat) -> Proof (exists Nat (p => and (prime p) (and (Lt n p) (Lt p (times 2 n))))) .
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
Axiom thm98 : forall n : nat, Exist nat (fun p => prime p /\ n < p /\ p < 2 * n) .
axiom thm98 (n : Nat) : Exist Nat (λ p => prime p ∧ n < p ∧ p < 2 * n)
