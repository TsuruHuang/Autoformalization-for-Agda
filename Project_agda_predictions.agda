postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> Neq n 0 -> all Nat (\ m -> Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> NEq n 0 -> (m : Nat) -> NEq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> not (Eq n 0) -> not (Eq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> not (Eq n 0) -> not (Eq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> neq n 0 -> all Nat (\ m -> neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Lt n 0 -> Lt (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> NEq n 0 -> (m : Nat) -> NEq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> pow (div m n) 2 /= 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> /= (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> Neq n 0 -> all Nat (\ m -> Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> and (Neq n 0) (Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> Neq n 0 -> all Nat (\ m -> Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> not (Eq n 0) -> not (Eq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (n : Nat) -> neq n 0 -> all Nat (\ m -> neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> neq n 0 -> neq (pow (div m n) 2) 2
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> and (Neq n 0) (Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> n /= 0 -> not (Eq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> if (Neq n 0) (Neq (pow (div m n) 2) 2)
postulate thm01 : (m : Nat) -> (n : Nat) -> NEq n 0 -> NEq (pow (div m n) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> NEq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> neq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> neq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> NEq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> neq (pow (div m (plus n 1)) 2) 2
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01a : (m : Nat) -> (n : Nat) -> not (Eq (pow (div m (plus n 1)) 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> unequal (pow q 2) 2
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> /= (pow q 2) 2
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : all Rational (\ q -> not (Eq (pow q 2) 2))
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : (q : Rat) -> not (Eq (pow q 2) 2)
postulate thm01b : all Rational (\ q -> not (Eq (pow q 2) 2))
postulate thm01b : all Rational (\ q -> not (Eq (pow q 2) 2))
postulate thm01b : (q : Rational) -> not (Eq (pow q 2) 2)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : all Rat (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : all Rat (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : all Rat (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : (q : Rat) -> not (Eq (sqrt 2) q)
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : all Rational (\ q -> not (Eq (sqrt 2) q))
postulate thm01c : (q : Rational) -> not (Eq (sqrt 2) q)
postulate thm01d : not (rational (sqrt 2))
postulate thm01d : not (exists Nat (\ x -> and (even x) (divEq (square x) 2)))
postulate thm01d : not (exists Rational (\ x -> Eq (sqrt 2) x))
postulate thm01d : not (rational (sqrt 2))
postulate thm01d : not (exists Rational (\ x -> Eq (sqrt 2) x))
postulate thm01d : not (exists Rational (\ x -> Eq (pow x 2) 2))
postulate thm01d : not (rational (sqrt 2))
postulate thm01d : not (exists Rational (\ x -> Eq (pow 2 x) 1)
postulate thm01d : not (exists Rational (\ x -> Eq (sqrt 2) x))
postulate sqrt2 : Real\npostulate prop01e : irrational (sqrt2)
postulate sqrt2 : Real\npostulate prop01e : irrational (sqrt 2)
postulate sqrt2 : Real\npostulate prop01e : irrational sqrt2
postulate thm01e : irrational (sqrt 2)
postulate thm01e : irrational (sqrt 2)
postulate sqrt2 : Real\npostulate prop01e : irrational (sqrt 2)
postulate thm01e : irrational (sqrt 2)
postulate sqrt2 : Real\npostulate irrational : Real -> Prop\npostulate thm01e : irrational (sqrt 2)
postulate sqrt2 : Real\npostulate irrational : Real -> Prop\npostulate thm01e : irrational sqrt2
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> (q : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
postulate thm01f : (p : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> (q : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (Eq (pow p 2) (times 2 (pow q 2)))
postulate thm01f : (q : Nat) -> not (exists Nat (\ p -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : (p : Nat) -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2))))
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> not (exists Nat (\ q -> Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm01f : all Nat (\ p -> all Nat (\ q -> not (Eq (pow p 2) (times 2 (pow q 2)))) )
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (eval P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> (degree P > 0) -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> Eq (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> (grader P > 0) -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> (c : Complex) -> if (gt (degree P) 0) (root P c)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> {c : Complex} -> if (gt (degree P) 0) (isRoot P c)
postulate thm02 : (P : Polynomial) -> greaterThan (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> odd (degree P) -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> (c : Complex) -> if (gt (degree P) 0) (isRoot P c)
postulate thm02 : (P : Polynomial) -> _ -> Complex -> Prop
postulate thm02 : (P : Polynomial) -> greater (degree P) 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> _ -> Complex -> Prop
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate thm02 : (P : Polynomial) -> degree P > 0 -> exists Complex (\ c -> Eq (P c) 0)
postulate denumerable : (A : Set) -> Prop\npostulate thm03 : denumerable Rat
postulate denumerable : (A : Set) -> Prop\npostulate rat : Set\npostulate thm03 : denumerable rat
postulate denumerable : Set -> Prop\npostulate thm03 : denumerable Rat
postulate denumerable : (A : Set) -> Prop\npostulate thm03 : denumerable Rat
postulate countable : Set -> Prop\npostulate thm03 : countable Rat
postulate rat : Set\npostulate ratCardinality : cardinality rat
postulate thm03a : Eq (cardinality Nat) (cardinality Rat)
postulate thm03a : equalset Nat Rat
postulate thm03a : equalset (cardinality Nat) (cardinality Rat)
postulate cardinalityNat : Cardinality\npostulate cardinalityRat : Cardinality\npostulate thm03a : Eq (cardinalityNat) (cardinalityRat)
postulate cardinalityNat : Cardinal\npostulate cardinalityRat : Cardinal\npostulate thm03a : Eq (cardinalityNat) (cardinalityRat)
postulate thm03a : equalset (cardinality Nat) (cardinality Rat)
postulate cardinalityNat : Set\npostulate cardinalityRat : Set\npostulate thm03a : equalset (cardinalityNat) (cardinalityRat)
postulate thm03a : equalset Nat Rat
postulate thm03a : equalset (cardinality Nat) (cardinality Rat)
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (length (resultant u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> equal (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (length (plus u v)) (sqrt (plus (pow (length u) 2) (pow (length v) 2)))
postulate thm04 : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (norm (plus u v)) (sqrt (plus (pow (norm u) 2) (pow (norm v) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> if (and (prime p) (prime q)) (Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2 * div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2) * pow (- 1) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (not 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) * pow (-1) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) * (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2) * (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) * (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) * (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (minus p 1) 2) (minus q 1)
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (- p 1) 2) (div (- q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (- p 1) 2) (div (- q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (minus 1 (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (- p 1) 2) (div (- q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (times (div (- p 1) 2) (div (- q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (neg 1) -> Eq (times (div (minus p 1) 2) (div (minus q 1) 2)) 1
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (times (minus p 1) (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow -1 (div (minus p 1) 2) (div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (-1) (div (minus p 1) 2 * div (minus q 1) 2))
postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (- 1) (div (minus p 1) 2) * pow (- 1) (div (minus q 1) 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pow pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pow r pi)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate area : Circle -> Real\npostulate prop09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) (length) -> Eq (area c) (times pi (pow (length) 2))
postulate thm09 : (c : Circle) -> Eq (radius c) (radius c) -> Eq (area c) (times pi (pow (radius c) 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Real -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Real -> if (Eq (radius c) r) (Eq (area c) (pi * pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Real -> if (Eq (radius c) r) (Eq (area c) (times pi (pow r 2)))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))
postulate thm09 : (c : Circle) -> Real -> equalReal (radius c) _ -> equalReal (area c) (times pi (pow _ 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Eq (radius c) r -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> Real -> if (Eq (radius c) r) (Eq (area c) (pi * pow r 2))
postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (pi * pow r 2)
postulate thm09 : (c : Circle) -> real -> equal (radius c) (postulate) -> equal (area c) (pi * pow (postulate) 2)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (some Int)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (div (minus (pow a p) a) p))))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (div (minus (pow a p) a) p) 1)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p (minus a 1)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p _))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Nat) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Nat (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (abs (minus (pow a p) a)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p _))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (pow a p) a)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Nat (\ a -> Eq (minus (pow a p) a) (times p _))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Nat) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (abs q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (abs q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> odd p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> odd p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> odd p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (postulate q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))))
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q)) where q : Int
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> all Int (\ a -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (forall Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> odd p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (minus (pow a p) a)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> all Int (\ a -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p)))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p (div (minus (pow a p) a) p))
postulate thm10FermatLittle : (p : Nat) -> and (prime p) (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> prime p -> all Nat (\ n -> Geq p n)
postulate thm11 : (p : Nat) -> all Nat (\ n -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> all Nat (\ n -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> Prop
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> all Nat (\ n -> if (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> all Nat (\ n -> if (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> all Nat (\ n -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> Prop (prime p) -> Geq p 1
postulate thm11 : (n : Nat) -> all Nat (\ p -> if (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> all Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> (n : Nat) -> if (Geq p n) (prime p)
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> all Nat (\ p -> or (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> all Nat (\ p -> if (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (a : Nat) -> (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> and (Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))) (exists Nat (\ b -> exists Nat (\ a -> and (Nat a) (Nat b))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (a : Nat) -> all Nat (\ n -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> exists Nat (\ a -> exists Nat (\ b -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (pow a 2) (pow b 2)) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> Eq p (plus (pow x) (pow y)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ y -> Eq p (plus (pow (div p 4) 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) (times k Nat)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times 2 _))) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> and (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x) (pow y))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times 1 p))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times k 2))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> Prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> Prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) (times k 4))) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p 4) (plus 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) (div p 4)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times 1 p))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p 4) (exists Nat (\ k -> Eq p (plus (pow k 2) 1))) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (div p 4))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times k 1))) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 k)) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 (times 1 p))) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 (minus p))) -> exists Nat (times (plus 2 (minus p)) (minus p))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p 4) (plus 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (exists Nat (\ x -> and (Lt 0 x) (Eq (plus (pow x 2) (pow y 2)) p)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4) 1) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> all Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> Prim p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> odd p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> Prim p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) )
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> odd p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> odd p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) )
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> if (Eq p (plus (times 4 k) 1)) (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2))) )
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow 2 y) (pow 2 y)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> Eq p (plus (pow 2 y) (pow 2 y)))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus (times 4) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k Nat)) -> exists Nat (\ y -> Eq p (plus (pow x Nat) (pow y Nat)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> if (Eq p (plus 4 (times 1 p))) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> and (Eq p (plus 4 k)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 2 k)) -> exists Nat (times (plus x 2) (plus y 2))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (times (plus (minus p (times x 2)) (times y 2)))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times 1 p)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) -> exists Nat (exists Nat (\ x -> \ y -> Eq p (plus (pow x) (pow y)))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus 4 k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus (times 4) k)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times 1 k))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> if (Eq p (plus 4 (times k 1))) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> Eq p (plus 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> Nat -> Eq p (plus 4 times) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x) (pow y))))
postulate thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 4) 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> odd (mod p 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 2) 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (div p 4) y) 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (sqrt p) y) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (div p y) 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq (plus (pow p 2) (pow y 2)) (pow (minus (sqrt p) 1) 2))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 2) 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 4) 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (div p 2) 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (div p y) 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus p y) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (λ x => exists Nat (λ y => Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (div p 4) 2)))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 4)))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow x 2)))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus p y) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> odd p -> prime p -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (div p 2) y) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (div p 2) y) 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p x) 2)))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow (minus p (pow x 2)) 2)))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> odd p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> p ≡ 1 (mod 4) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> p ≡ 1 (mod 4) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> odd p -> prime p -> exists Nat (\ y -> Eq p (plus (pow y 2) (pow (minus (sqrt p) y) 2)))
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))) )
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> if (Eq (mod p 4) 1) (exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (pow x 2) (pow y 2)) p))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm20b : (p : Nat) -> and (prime p) (Eq (mod p 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate thm22 : not (denumerable Real)
postulate thm22 : not (denumerable Real)
postulate thm22 : not (denumerable Real)
postulate thm22 : not (denumerable Real)
postulate thm22 : not (denumerable Real)
postulate nonDenumerable : Set
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus 1 n))
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (minus (factorial n) 1) (neg 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (minus (factorial n) 1) (neg 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (-1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (cong (minus (factorial n) 1) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1))
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1))
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial (minus n 1)) -1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial n) 1) (minus n 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial (minus n 1)) 1) (minus n))
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus n 1) (minus 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus n 1) (minus 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1) + 1) n)
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (2 ^ cardinality A)
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (2 ^ (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (2) (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (cardinality A) 1)
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (minus (pow 2) (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (equalset (times 2) (abs A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (powerset (abs A))
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finitecardinality (powerset A) == pow (finitecardinality A) 2
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (powerset (cardinality A))
postulate thm52 : (A : Set) -> finite _ A -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite _ A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite (adj A) -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (equalset (times 2) (cardinality A))
postulate thm52 : (A : Set) -> finite (adj A) -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (set (times 2 (cardinality A)))
postulate thm52 : (A : Set) -> finite _ A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finitecardinality (adjacency A) -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite (adjacency A) -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite _ -> equalset (powerset A) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite (adj A) -> equalset (powerset A) (times 2 (cardinality A))
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finitecardinality A -> equalset (powerset A) (pow 2 (finitecardinality A))
postulate thm52 : (A : Set) -> finite _ A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (powerset 2 ^ (cardinality A))
postulate thm52 : (A : Set) -> equalset (powerset A) (equalset (cardinality A) (minus (pow 2) (cardinality A)))
postulate thm52 : (A : Set) -> equalset (powerset A) (equalset (equalset A) 2)
postulate thm52 : (A : Set) -> finite (cardinality A) -> equalset (cardinality (powerset A)) (pow (cardinality A))
postulate thm52 : (A : Set) -> finite A -> equalset (powerset A) (equalset (powerset A) (powerset A))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> Leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (k <= n) -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> and (leq k n) -> equalset (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> and (leq k n) (equalset (cardinality (combinations A k)) (binomial n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> if (leq k n) (equalset (cardinality (combinations A k)) (binomial n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> Leq k n -> equalset (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> (k : Nat) -> Leq k n -> equalset (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (leq k n) -> Eq (cardinality (combinationsFromSet A k)) (combinations n k))
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (binomial A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> and (leq k n) (equalset (cardinality (combinations A k)) (combinations n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> equalset (cardinality A) n -> all Nat (\ k -> if (leq k n) (equalset (cardinality (binomial A k)) (binomial n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (binomial A k)) (binomial n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (binomial A k)) (binomial n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (combinations A k)) (binomial n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> and (Leq k n) (Eq (cardinality (binomial A k)) (binomial n k)))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (binomial A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (combinations n k)
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ r -> and (Leq (dotProduct u v) r) (Leq r (times (norm u) (norm v))))
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (dotProduct u v) (times (norm u) (norm v)))
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (dotProduct u v) (times (norm u) (norm v)))
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (dotProduct u v) (times (norm u) (norm v)))
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (dotProduct u v) (times (norm u) (norm v)))
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (dotProduct u v) (times (norm u) (norm v)))
postulate thm78 : (u : Vector) -> (v : Vector) -> geq (dotProduct u v) (times (length u) (length v))
postulate thm78 : (u : Vector) -> (v : Vector) -> all Real (\ x -> leq (dotProduct u v) (times (norm u) (norm v)))
postulate thm78 : (u : Vector) -> (v : Vector) -> geq (dotProduct u v) (times (length u) (length v))
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate norm : Vector -> Real
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (equal (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> if (orthogonal u v) (Eq (dotProduct u v) 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm78a : (u : Vector) -> (v : Vector) -> if (perpendicular u v) (dotProduct u v == 0)
postulate thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (norm (plus u v)) (plus (norm u) (norm v)))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ r -> r <= norm (plus u v))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (norm (plus u v)) (plus (norm u) (norm v)))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (norm (plus u v)) (plus (norm u) (norm v)))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> <= (norm (plus u v)) (plus (norm u) (norm v)))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ x -> Leq (norm (plus u v)) (plus (norm u) (norm v)))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ d -> d <= norm (plus u v))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ norm -> norm (plus u v) <= plus (norm u) (norm v))
postulate thm91 : (u : Vector) -> (v : Vector) -> all Real (\ norm => norm (plus u v) <= plus (norm u) (norm v))
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate norm : Vector -> Real
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set
postulate combinations : (n : Nat) -> (k : Nat) -> Nat
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (all Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (forall Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (Lt p (times 2 n)) -> all Nat (\ n -> Lt p (times 2 n))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> all Nat (\ n -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> if (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> and (prime p) (exists Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (forall Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (exists Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (all Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> and (prime p) (Lt n p) -> Lt p (times 2 n)
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> and (prime p) (exists Nat (\ n -> and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
