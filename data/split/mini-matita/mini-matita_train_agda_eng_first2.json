[
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ \\in N$. Then we can say that $__$ is prime.",
    "output": "postulate prime : (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a function from natural numbers to natural numbers. Let $__1 \\in N$. Then we can say that $injn$ holds for $__$ and $__1$.",
    "output": "postulate injn : (_ : (_ : Nat) -> Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSSO. $B (6)= 20$.",
    "output": "postulate B_SSSSSSO : Eq (B 6) 20"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_transpose. Let $i$ and $j$ and $k$ and $n$ be natural numbers. Then if $j$ is not equal to $i$, then if $i$ is not equal to $k$, then if $j$ is not equal to $k$, then $transpose$ applied to $i$ and $j$ and $n$ is equal to $transpose$ applied to $i$ and $k$ and $transpose$ applied to $k$ and $j$ and $transpose$ applied to $i$ and $k$ and $n$.",
    "output": "postulate eq_transpose : (i : Nat) -> (j : Nat) -> (k : Nat) -> (n : Nat) -> (_ : not (Eq j i)) -> (__1 : not (Eq i k)) -> (__2 : not (Eq j k)) -> Eq (transpose i j n) (transpose i k (transpose k j (transpose i k n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_minus_associative. Let $x$ and $y$ and $z$ be natural numbers. Then if $z$ is less than or equal to $y$, then if $y$ is less than or equal to $x$, then the difference of $x$ and the difference of $y$ and $z$ is equal to the sum of the difference of $x$ and $y$ and $z$.",
    "output": "postulate minus_minus_associative : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq z y) -> (__1 : Leq y x) -> Eq (minus x (minus y z)) (plus (minus x y) z)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_mod_m_m. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then $mod$ applied to $n$ and $m$ is less than $m$.",
    "output": "postulate lt_mod_m_m : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Lt (mod n m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_length_to_not_mem. Let $n$ be a natural number. Then for all lists $l$ of natural numbers, for all elements $__$ of $unique$ of $Nat$ and $l$, for all functions $__1$ from natural numbers $x$ and elements $__1$ of $mem$ of $Nat$ and $x$ and $l$ to elements of $Lt$ of $x$ and $n$, if $length$ applied to $Nat$ and $l$ is less than $n$, then $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and the negation of $mem$ applied to $Nat$ and $i$ and $l$.",
    "output": "postulate lt_length_to_not_mem : (n : Nat) -> (l : list Nat) -> (_ : unique Nat l) -> (__1 : (x : Nat) -> (__1 : mem Nat x l) -> Lt x n) -> (__2 : Lt (length Nat l) n) -> ex Nat (\\ i : Nat -> and (Lt i n) (not (mem Nat i l)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1686. For all natural numbers $n$ and $m$, for all functions $Hind$ from natural numbers $p$ and elements of $Lt$ of $p$ and $m$ and elements $__1$ of $Lt$ of $1$ and $p$ to elements of $Leq$ of $Psi$ applied to $p$ and the product of $pred$ applied to $p$ and the exponentiation of $2$ and the difference of the product of $2$ and $p$ and $3$, for all natural numbers $a$, if $m$ is equal to the product of $2$ and $a$ or $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $1$ is less than the sum of the product of $2$ and $a$ and $1$, then if $0$ is less than $a$, then $pred$ applied to $m$ is equal to the sum of $a$ and $a$.",
    "output": "postulate let_clause_1686 : (n : Nat) -> (m : Nat) -> (Hind : (p : Nat) -> (_ : Lt p m) -> (__1 : Lt 1 p) -> Leq (Psi p) (times (pred p) (pow 2 (minus (times 2 p) 3)))) -> (a : Nat) -> (_clearme : or (Eq m (times 2 a)) (Eq m (plus (times 2 a) 1))) -> (Hm : Eq m (plus (times 2 a) 1)) -> (Hlt : Lt 1 (plus (times 2 a) 1)) -> (Ha : Lt 0 a) -> Eq (pred m) (plus a a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type1. Let $Q_$ be a function from natural numbers $_x_385$ to elements of $Type1$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_386$ and elements $_x_388$ of $Q_$ of $x_386$ to elements of $Q_$ of the sum of $x_386$ and $1$, for all natural numbers $x_385$, $Q_$ holds for $x_385$.",
    "output": "postulate nat_rect_Type1 : (Q_ : (_x_385 : Nat) -> Type1) -> (_H_O : Q_ 0) -> (_H_S : (x_386 : Nat) -> (_x_388 : Q_ x_386) -> Q_ (plus x_386 1)) -> (x_385 : Nat) -> Q_ x_385"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_fact_2. Let $n$ be a natural number. Then the exponentiation of the factorial of $n$ and $2$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$.",
    "output": "postulate exp_fact_2 : (n : Nat) -> Eq (pow (factorial n) 2) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1)))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Binomial_law. For all natural numbers $a$ and $b$ and $n$, the exponentiation of the sum of $a$ and $b$ and $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $k$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $k$ to the product of the product of $bc$ applied to $n$ and $k$ and the exponentiation of $a$ and the difference of $n$ and $k$ and the exponentiation of $b$ and $k$.",
    "output": "postulate binomial_law : (a : Nat) -> (b : Nat) -> (n : Nat) -> Eq (pow (plus a b) n) (bigop (plus n 1) (\\ k : Nat -> true) Nat 0 plus (\\ k : Nat -> times (times (bc n k) (pow a (minus n k))) (pow b k)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_fn. For all functions $f$ from natural numbers to natural numbers, for all elements $__$ of $increasing$ of $f$, for all natural numbers $n$, $n$ is less than or equal to $f$ applied to $n$.",
    "output": "postulate le_n_fn : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> (n : Nat) -> Leq n (f n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_gcd. For all natural numbers $m$ and $n$, $ex$ holds for $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and the greatest common divisor of $n$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and the greatest common divisor of $n$ and $m$.",
    "output": "postulate eq_minus_gcd : (m : Nat) -> (n : Nat) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd n m)) (Eq (minus (times b m) (times a n)) (gcd n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1078. Let $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$ be natural numbers. Then for all elements $_clearme$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, if $r$ is less than $b$, then if $a$ is equal to the sum of the product of $q$ and $b$ and $r$, then for all elements $_clearme0$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, if $r1$ is less than $b$, then if $a$ is equal to the sum of the product of $q1$ and $b$ and $r1$, then if $q$ is less than or equal to $q1$, then if $q$ is less than $q1$, then $a$ is equal to the sum of $r$ and the product of $b$ and $q$.",
    "output": "postulate let_clause_1078 : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_clearme : div_mod_spec a b q r) -> (ltrb : Lt r b) -> (spec : Eq a (plus (times q b) r)) -> (_clearme0 : div_mod_spec a b q1 r1) -> (ltr1b : Lt r1 b) -> (spec1 : Eq a (plus (times q1 b) r1)) -> (leqq1 : Leq q q1) -> (ltqq1 : Lt q q1) -> Eq a (plus r (times b q))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_ltransitive. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, $inv_ltransitive$ holds for $B$ and $lstar$ applied to $B$ and $R$.",
    "output": "postulate lstar_inv_ltransitive : (B : Set) -> (R : relation B) -> inv_ltransitive B (lstar B R)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp0_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_967$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_967$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_967$.",
    "output": "postulate Dop_rect_CProp0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_967 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_967 : Dop A _nil) -> Q_ x_967"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_fact_to_le. For all natural numbers $p$ and $n$, if $p$ is prime, then if $p$ is divisible by the factorial of $n$, then $p$ is less than or equal to $n$.",
    "output": "postulate divides_fact_to_le : (p : Nat) -> (n : Nat) -> (_ : prime p) -> (__1 : divisible p (factorial n)) -> Leq p n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_minus_m_m. Let $m$ and $n$ be natural numbers. Then if $n$ is less than or equal to $m$, then the difference of $m$ and the difference of $m$ and $n$ is equal to $n$.",
    "output": "postulate minus_minus_m_m : (m : Nat) -> (n : Nat) -> (_ : Leq n m) -> Eq (minus m (minus m n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iter. For all sets $H$, for all functions $__$ from elements of $H$ to elements of $H$, for all natural numbers $__1$, for all elements $__2$ of $H$, $H$.",
    "output": "postulate iter : (H : Set) -> (_ : (_ : H) -> H) -> (__1 : Nat) -> (__2 : H) -> H"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type4. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_813$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type4$, for all functions $_H_div_mod_spec_intro$ from elements $x_815$ of $Lt$ of $_r$ and $_m$ and elements $x_814$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_815$ and $x_814$, for all elements $x_813$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_813$.",
    "output": "postulate div_mod_spec_rect_Type4 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_813 : div_mod_spec _n _m _q _r) -> Type4) -> (_H_div_mod_spec_intro : (x_815 : Lt _r _m) -> (x_814 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_815 x_814)) -> (x_813 : div_mod_spec _n _m _q _r) -> Q_ x_813"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_times_gcd_aux. Let $p$ and $m$ and $n$ and $d$ and $c$ be natural numbers. Then if $0$ is less than $c$, then if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then if $d$ is divisible by the product of $c$ and $m$, then if $d$ is divisible by the product of $c$ and $n$, then $d$ is divisible by the product of $c$ and $gcd_aux$ applied to $p$ and $m$ and $n$.",
    "output": "postulate divides_times_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (d : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : Lt 0 n) -> (__2 : Leq n m) -> (__3 : Leq n p) -> (__4 : divisible d (times c m)) -> (__5 : divisible d (times c n)) -> divisible d (times c (gcd_aux p m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_BPsi1. For all natural numbers $n$, if $0$ is less than $n$, then $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of $B$ applied to the product of $2$ and $n$ and $Psi$ applied to $n$.",
    "output": "postulate le_Psi_BPsi1 : (n : Nat) -> (_ : Lt 0 n) -> Leq (Psi (times 2 n)) (times (B (times 2 n)) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max'_body. For all natural numbers $__$, for all functions $__1$ from natural numbers $__1$ to booleans, for all natural numbers $__2$, $Nat$.",
    "output": "postulate max'_body : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ be a natural number. Let $_f$ be a function from natural numbers to booleans. Let $__ \\in N$. Then $max_spec$ applied to $_n$ and $_f$ and $__$ is a proposition.",
    "output": "postulate max_spec : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_to_leb_false. For all natural numbers $n$ and $m$, if $n$ is not less than or equal to $m$, then $leb$ applied to $n$ and $m$ is equal to absurdity.",
    "output": "postulate not_le_to_leb_false : (n : Nat) -> (m : Nat) -> (_ : not (Leq n m)) -> Eq (leb n m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type1. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1656$ of $range$ of $x1$ to elements of $Type1$, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1657$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type1 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1656 : range x1) -> Type1) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1657 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_exp1. Let $p$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $p$, then the logarithm of $p$ and the exponentiation of $n$ and $m$ is less than or equal to the product of $m$ and the sum of the logarithm of $p$ and $n$ and $1$.",
    "output": "postulate log_exp1 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> Leq (log p (pow n m)) (times m (plus (log p n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_O. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all elements $b$ of $B$, $lstar$ holds for $B$ and $R$ and $0$ and $b$ and $b$.",
    "output": "postulate lstar_O : (B : Set) -> (R : relation B) -> (b : B) -> lstar B R 0 b b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type5. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_919$ of $range$ of $_A$ to elements of $Type5$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_919$ of $range$ of $_A$, $Q_$ holds for $x_919$.",
    "output": "postulate range_rect_Type5 : (_A : Set) -> (Q_ : (_x_919 : range _A) -> Type5) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_919 : range _A) -> Q_ x_919"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_mod. For all natural numbers $p$ and $a$, if $p$ is prime, then if $p$ is not divisible by $a$, then $permut$ holds for the function that maps $n$ to $mod$ applied to the product of $a$ and $n$ and $p$ and $pred$ applied to $p$.",
    "output": "postulate permut_mod : (p : Nat) -> (a : Nat) -> (_ : prime p) -> (__1 : not (divisible p a)) -> permut (\\ n : Nat -> mod (times a n) p) (pred p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_log_r. For all natural numbers $b$ and $n$ and $m$, if $1$ is less than $b$, then if $n$ is less than $m$, then if the exponentiation of $b$ and $n$ is less than or equal to $m$, then $n$ is less than or equal to the logarithm of $b$ and $m$.",
    "output": "postulate exp_to_log_r : (b : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 b) -> (__1 : Lt n m) -> (__2 : Leq (pow b n) m) -> Leq n (log b m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp3. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1542$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1543$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp3 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1542 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1543 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_spec_to_max. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, for all elements $__$ of $max_spec$ of $n$ and $f$ and $m$, $max$ applied to $n$ and $f$ is equal to $m$.",
    "output": "postulate max_spec_to_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : max_spec n f m) -> Eq (max n f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_n_mod_times. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then if $0$ is less than $m$, then $congruent$ holds for $n$ and $mod$ applied to $n$ and the product of $m$ and $p$ and $p$.",
    "output": "postulate congruent_n_mod_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Lt 0 m) -> congruent n (mod n (times m p)) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_priml. Let $n$ be a natural number. Then if $0$ is less than $n$, then the product of $2$ and $n$ is less than or equal to the product of the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$ and the sum of $prim$ applied to the product of $2$ and $n$ and $1$.",
    "output": "postulate le_priml : (n : Nat) -> (_ : Lt 0 n) -> Leq (times 2 n) (times (plus (log 2 (times 2 n)) 1) (plus (prim (times 2 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "SameF_upto. For all natural numbers $__$, for all sets $A$, $relation$ holds for $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__1$ to $A$.",
    "output": "postulate sameF_upto : (_ : Nat) -> (A : Set) -> relation (prod Set Set Nat (\\ __1 : Nat -> A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_div_m_m. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then the product of the quotient of $n$ and $m$ and $m$ is less than or equal to $n$.",
    "output": "postulate le_times_div_m_m : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Leq (times (div n m) m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type1_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_899$ of $ACop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_899$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_899$.",
    "output": "postulate ACop_rect_Type1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_899 : ACop A _nil) -> Type1) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_899 : ACop A _nil) -> Q_ x_899"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp1. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_911$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_911$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_911$.",
    "output": "postulate ACop_rect_CProp1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_911 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_911 : ACop A _nil) -> Q_ x_911"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_times1. Let $p$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then if $0$ is less than $m$, then the logarithm of $p$ and the product of $n$ and $m$ is less than or equal to the sum of the sum of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$ and $1$.",
    "output": "postulate log_times1 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> (__2 : Lt 0 m) -> Leq (log p (times n m)) (plus (plus (log p n) (log p m)) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_4_to_le_Psi_exp. Let $n$ be a natural number. Then if $4$ is less than $n$, then $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $2$ and $Psi$ applied to $n$.",
    "output": "postulate lt_4_to_le_Psi_exp : (n : Nat) -> (_ : Lt 4 n) -> Leq (Psi (times 2 n)) (times (pow 2 (minus (times 2 n) 2)) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_ind_aux. For all sets $A$, for all functions $f$ from elements of $A$ to natural numbers, for all elements $P$ of $predicate$ of $A$, for all functions $__$ from natural numbers $n$ and functions from elements $a$ of $A$ and elements of $Lt$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$ and elements $a$ of $A$ and elements $__1$ of $Eq$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$, for all natural numbers $n$, for all elements $a$ of $A$, if $f$ applied to $a$ is equal to $n$, then $P$ holds for $a$.",
    "output": "postulate f_ind_aux : (A : Set) -> (f : (_ : A) -> Nat) -> (P : predicate A) -> (_ : (n : Nat) -> (_ : (a : A) -> (_ : Lt (f a) n) -> P a) -> (a : A) -> (__1 : Eq (f a) n) -> P a) -> (n : Nat) -> (a : A) -> (__1 : Eq (f a) n) -> P a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_ind_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_943$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_943$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_943$.",
    "output": "postulate Dop_ind_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_943 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_943 : Dop A _nil) -> Q_ x_943"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_SO_smallest_factor. Let $n$ be a natural number. Then if $n$ is less than or equal to $1$, then $smallest_factor$ applied to $n$ is equal to $n$.",
    "output": "postulate le_SO_smallest_factor : (n : Nat) -> (_ : Leq n 1) -> Eq (smallest_factor n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_S. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all elements $b1$ and $b$ of $B$, for all elements $__$ of $R$ of $b1$ and $b$, for all natural numbers $l$, for all elements $b2$ of $B$, for all elements $__1$ of $lstar$ of $B$ and $R$ and $l$ and $b$ and $b2$, $lstar$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_S : (B : Set) -> (R : relation B) -> (b1 : B) -> (b : B) -> (_ : R b1 b) -> (l : Nat) -> (b2 : B) -> (__1 : lstar B R l b b2) -> lstar B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_le_minus_minus_comm. Let $b$ and $c$ and $a$ be natural numbers. Then if $c$ is less than or equal to $b$, then the difference of $a$ and the difference of $b$ and $c$ is equal to the difference of the sum of $a$ and $c$ and $b$.",
    "output": "postulate minus_le_minus_minus_comm : (b : Nat) -> (c : Nat) -> (a : Nat) -> (_ : Leq c b) -> Eq (minus a (minus b c)) (minus (plus a c) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_ind_aux. Let $A$ be a set. Then for all functions $f$ from elements of $A$ to natural numbers, for all elements $P$ of $predicate$ of $A$, for all functions $__$ from natural numbers $n$ and functions from elements $a$ of $A$ and elements of $Lt$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$ and elements $a$ of $A$ and elements $__1$ of $Eq$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$, for all natural numbers $n$, for all elements $a$ of $A$, if $f$ applied to $a$ is equal to $n$, then $P$ holds for $a$.",
    "output": "postulate f_ind_aux : (A : Set) -> (f : (_ : A) -> Nat) -> (P : predicate A) -> (_ : (n : Nat) -> (_ : (a : A) -> (_ : Lt (f a) n) -> P a) -> (a : A) -> (__1 : Eq (f a) n) -> P a) -> (n : Nat) -> (a : A) -> (__1 : Eq (f a) n) -> P a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_lt_SO. Let $p$ be a natural number. Then if $p$ is prime, then $1$ is less than $p$.",
    "output": "postulate prime_to_lt_SO : (p : Nat) -> (_ : prime p) -> Lt 1 p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "SameF_p. Let $__$ be a natural number. Then for all functions $__1$ from natural numbers $__1$ to booleans, for all sets $A$, $relation$ holds for $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__2$ to $A$.",
    "output": "postulate sameF_p : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (A : Set) -> relation (prod Set Set Nat (\\ __2 : Nat -> A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_div_S_S_div. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then the quotient of the sum of $n$ and $1$ and $m$ is less than or equal to the sum of the quotient of $n$ and $m$ and $1$.",
    "output": "postulate le_div_S_S_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Leq (div (plus n 1) m) (plus (div n m) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $n$ be a natural number. Then if $1$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (lt1n : Lt 1 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_to_le. For all natural numbers $b$ and $n$ and $m$, if $1$ is less than $b$, then if the exponentiation of $b$ and $n$ is less than or equal to the exponentiation of $b$ and $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_exp_to_le : (b : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 b) -> (__1 : Leq (pow b n) (pow b m)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp0. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z713$ to propositions, for all functions $_H1$ from elements $_z714$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_414$ and functions $_x_416$ from elements $_z714$ of $Eq$ of $Hterm$ and $x_414$ to elements of $P$ of $x_414$ and elements $_z714$ of $Eq$ of $Hterm$ and the sum of $x_414$ and $1$ to elements of $P$ of the sum of $x_414$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp0 : (Hterm : Nat) -> (P : (_z713 : Nat) -> Prop) -> (_H1 : (_z714 : Eq Hterm 0) -> P 0) -> (_H2 : (x_414 : Nat) -> (_x_416 : (_z714 : Eq Hterm x_414) -> P x_414) -> (_z714 : Eq Hterm (plus x_414 1)) -> P (plus x_414 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_div_S. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then $n$ is less than the product of the sum of the quotient of $n$ and $m$ and $1$ and $m$.",
    "output": "postulate lt_div_S : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Lt n (times (plus (div n m) 1) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_true_to_lt_O. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $m$ is divisible by $n$, then $0$ is less than $m$.",
    "output": "postulate dividesb_true_to_lt_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : divisible m n) -> Lt 0 m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injn_Sn_n. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $__$ of $injn$ of $f$ and the sum of $n$ and $1$, $injn$ holds for $f$ and $n$.",
    "output": "postulate injn_Sn_n : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : injn f (plus n 1)) -> injn f n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prod_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, for all elements $_x_969$ and $_x_970$ of $A$, $A$.",
    "output": "postulate prod_body : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> (_x_969 : A) -> (_x_970 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Discr_plus_xy_minus_xz. Let $x$ and $z$ and $y$ be natural numbers. Then if the sum of $x$ and $y$ is equal to the difference of $x$ and $z$, then $y$ is equal to $0$.",
    "output": "postulate discr_plus_xy_minus_xz : (x : Nat) -> (z : Nat) -> (y : Nat) -> (_ : Eq (plus x y) (minus x z)) -> Eq y 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_length_to_mem. For all natural numbers $n$, for all lists $l$ of natural numbers, if $length$ applied to $Nat$ and $l$ is equal to the sum of $n$ and $1$, then for all elements $__1$ of $unique$ of $Nat$ and $l$, for all functions $__2$ from natural numbers $x$ and elements $__2$ of $mem$ of $Nat$ and $x$ and $l$ to elements of $Leq$ of $x$ and $n$, $mem$ holds for $Nat$ and $n$ and $l$.",
    "output": "postulate eq_length_to_mem : (n : Nat) -> (l : list Nat) -> (_ : Eq (length Nat l) (plus n 1)) -> (__1 : unique Nat l) -> (__2 : (x : Nat) -> (__2 : mem Nat x l) -> Leq x n) -> mem Nat n l"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type4. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1440$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to elements of $Type4$, for all functions $_H1$ from elements $x_815$ of $Lt$ of $x4$ and $x2$ and elements $x_814$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1441$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_815$ and $x_814$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_815$ and $x_814$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type4 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1440 : div_mod_spec x1 x2 x3 x4) -> Type4) -> (_H1 : (x_815 : Lt x4 x2) -> (x_814 : Eq x1 (plus (times x3 x2) x4)) -> (_z1441 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_815 x_814)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_815 x_814)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bk. Let $_n$ be a natural number. Then $Nat$.",
    "output": "postulate Bk : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_pi. Let $n$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $p$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g1$ applied to $i$ is less than or equal to $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g2$ applied to $i$.",
    "output": "postulate le_pi : (n : Nat) -> (p : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (p i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g1 i)) (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a function from natural numbers to natural numbers. Let $__1$ be a natural number. Then we can say that $permut$ holds for $__$ and $__1$.",
    "output": "postulate permut : (_ : (_ : Nat) -> Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sigma_p_dividesb1. Let $m$ and $n$ and $p$ and $k$ be natural numbers. Then if $0$ is less than $n$, then if $p$ is prime, then if $p$ is not divisible by $n$, then if $m$ is less than or equal to $k$, then $m$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $dividesb$ applied to the exponentiation of $p$ and the sum of $i$ and $1$ and the product of the exponentiation of $p$ and $m$ and $n$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$.",
    "output": "postulate sigma_p_dividesb1 : (m : Nat) -> (n : Nat) -> (p : Nat) -> (k : Nat) -> (_ : Lt 0 n) -> (__1 : prime p) -> (__2 : not (divisible p n)) -> (__3 : Leq m k) -> Eq m (bigop k (\\ i : Nat -> dividesb (pow p (plus i 1)) (times (pow p m) n)) Nat 0 plus (\\ i : Nat -> 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sigma_const. For all natural numbers $n$, $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$ is equal to $n$.",
    "output": "postulate sigma_const : (n : Nat) -> Eq (bigop n (\\ i : Nat -> true) Nat 0 plus (\\ i : Nat -> 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp2. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_935$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_935$ of $range$ of $_A$, $Q_$ holds for $x_935$.",
    "output": "postulate range_rect_CProp2 : (_A : Set) -> (Q_ : (_x_935 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_935 : range _A) -> Q_ x_935"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_transpose. Let $n$ and $i$ and $j$ be natural numbers. Then if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then $bijn$ holds for $transpose$ applied to $i$ and $j$ and $n$.",
    "output": "postulate bijn_transpose : (n : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i n) -> (__1 : Leq j n) -> bijn (transpose i j) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then the quotient of $__$ and $__1$ is a natural number.",
    "output": "postulate div : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp3_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_879$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_879$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_879$.",
    "output": "postulate Aop_rect_CProp3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_879 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_879 : Aop A _nil) -> Q_ x_879"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime1. Let $n$ be a natural number. Then $Nat$.",
    "output": "postulate let_previous_prime1 : (n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi. For all natural numbers $__$, $Nat$.",
    "output": "postulate Psi : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp4. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1668$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1669$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp4 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1668 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1669 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_iter. For all functions $g$ from natural numbers to natural numbers, for all natural numbers $a$ and $b$ and $i$, for all elements $__$ of $monotonic$ of $Nat$ and $Leq$ and $g$, if $a$ is less than or equal to $b$, then $iter$ applied to $Nat$ and $g$ and $i$ and $a$ is less than or equal to $iter$ applied to $Nat$ and $g$ and $i$ and $b$.",
    "output": "postulate monotonic_iter : (g : (_ : Nat) -> Nat) -> (a : Nat) -> (b : Nat) -> (i : Nat) -> (_ : monotonic Nat Leq g) -> (__1 : Leq a b) -> Leq (iter Nat g i a) (iter Nat g i b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_elim. For all natural numbers $n$ and $m$, for all functions $P$ from booleans to propositions, for all functions $__$ from elements of $Eq$ of $n$ and $m$ to elements of $P$ of $true$, for all functions $__1$ from elements $__1$ of $not$ of $Eq$ applied to $n$ and $m$ to elements of $P$ of absurdity, $P$ holds for $eqb$ applied to $n$ and $m$.",
    "output": "postulate eqb_elim : (n : Nat) -> (m : Nat) -> (P : (_ : bool) -> Prop) -> (_ : (_ : Eq n m) -> P true) -> (__1 : (__1 : not (Eq n m)) -> P false) -> P (eqb n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type2. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_897$ of $ACop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_897$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_897$.",
    "output": "postulate ACop_rect_Type2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_897 : ACop A _nil) -> Type2) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_897 : ACop A _nil) -> Q_ x_897"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_div_mod_spec. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $return_type$ of $z$, for all elements $z$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $return_type$ holds for $z$.",
    "output": "postulate filter_div_mod_spec : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (return_sort : Sort) -> (return_type : (z : div_mod_spec _n _m _q _r) -> return_sort) -> (return : (z : div_mod_spec _n _m _q _r) -> return_type z) -> (z : div_mod_spec _n _m _q _r) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_div_O. For all natural numbers $n$ and $m$, if $n$ is less than $m$, then the quotient of $n$ and $m$ is equal to $0$.",
    "output": "postulate eq_div_O : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq (div n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp4_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_957$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_957$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_957$.",
    "output": "postulate Dop_rect_CProp4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_957 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_957 : Dop A _nil) -> Q_ x_957"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $ACop$ of $A$ and $nil$, $Aop$ holds for $A$ and $nil$.",
    "output": "postulate aop_body : (A : Set) -> (nil : A) -> (_xxx : ACop A nil) -> Aop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp0. For all sets $_A$, for all functions $Q_$ from elements $_x_939$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_939$ of $range$ of $_A$, $Q_$ holds for $x_939$.",
    "output": "postulate range_rect_CProp0 : (_A : Set) -> (Q_ : (_x_939 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_939 : range _A) -> Q_ x_939"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nilr_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ is equal to $a$.",
    "output": "postulate nilr_body : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx a nil) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_mod_aux_m_m. Let $p$ and $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $p$, then $mod_aux$ applied to $p$ and $n$ and $m$ is less than or equal to $m$.",
    "output": "postulate le_mod_aux_m_m : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq n p) -> Leq (mod_aux p n m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_gcd_SO_to_not_divides. Let $n$ and $m$ be natural numbers. Then if $1$ is less than $n$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then $n$ is not divisible by $m$.",
    "output": "postulate eq_gcd_SO_to_not_divides : (n : Nat) -> (m : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (gcd n m) 1) -> not (divisible n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_1_fact. Let $n$ be a natural number. Then $1$ is less than or equal to the factorial of $n$.",
    "output": "postulate le_1_fact : (n : Nat) -> Leq 1 (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_to_divides. Let $n$ and $m$ and $q$ be natural numbers. Then for all elements $__$ of $div_mod_spec$ of $m$ and $n$ and $q$ and $0$, $n$ is divisible by $m$.",
    "output": "postulate div_mod_spec_to_divides : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : div_mod_spec m n q 0) -> divisible n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_lstar_r. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $__1$ of $B$ and elements $__2$ of $B$ and elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_sort$, for all functions $case_lstar_r_O$ from elements $b$ of $B$ to elements of $return_type$ of $0$ and $b$ and $b$ and $lstar_r_O$ applied to $B$ and $_R$ and $b$, for all functions $case_lstar_r_S$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements of $lstar_r$ of $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $B$ and elements $__1$ of $_R$ of $b$ and $b2$ to elements of $return_type$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $__$ and $b2$ and $__1$, for all natural numbers $__$, for all elements $__1$ and $__2$ of $B$, for all elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$, $return_type$ holds for $__$ and $__1$ and $__2$ and $z$.",
    "output": "postulate match_lstar_r : (B : Set) -> (_R : relation B) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (__1 : B) -> (__2 : B) -> (z : lstar_r B _R __ __1 __2) -> return_sort) -> (case_lstar_r_O : (b : B) -> return_type 0 b b (lstar_r_O B _R b)) -> (case_lstar_r_S : (l : Nat) -> (b1 : B) -> (b : B) -> (_ : lstar_r B _R l b1 b) -> (b2 : B) -> (__1 : _R b b2) -> return_type (plus l 1) b1 b2 (lstar_r_S B _R l b1 b __ b2 __1)) -> (_ : Nat) -> (__1 : B) -> (__2 : B) -> (z : lstar_r B _R __ __1 __2) -> return_type __ __1 __2 z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_I_gen. Let $a$ and $b$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, if $a$ is less than or equal to $b$, then $bigop$ applied to the difference of $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$ is equal to $bigop$ applied to $b$ and the function that maps $i$ to $andb$ applied to $leb$ applied to $a$ and $i$ and $p$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_I_gen : (a : Nat) -> (b : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (_ : Leq a b) -> Eq (bigop (minus b a) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))) (bigop b (\\ i : Nat -> andb (leb a i) (p i)) B nil (op B nil op) (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp3. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1542$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1543$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp3 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1542 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1543 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bool_to_nat. Let $_b$ be a boolean. Then $Nat$.",
    "output": "postulate bool_to_nat : (_b : bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Op_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $Aop$ of $A$ and $nil$, for all elements $_x_887$ and $_x_888$ of $A$, $A$.",
    "output": "postulate op_body : (A : Set) -> (nil : A) -> (_xxx : Aop A nil) -> (_x_887 : A) -> (_x_888 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example5. Absurdity is equal to $primeb (6)$.",
    "output": "postulate example5 : Eq (primeb 6) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "PlusA. $Aop$ holds for $Nat$ and $0$.",
    "output": "postulate plusA : Aop Nat 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16005. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_16005 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1562. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the difference of the product of $n$ and $c$ and the product of $m$ and $d$ is equal to $1$.",
    "output": "postulate let_clause_1562 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (minus (times n c) (times m d)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Associative_times. $associative$ holds for $Nat$ and $times$.",
    "output": "postulate associative_times : associative Nat times"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_plus_l. Let $m$ be a natural number. Then $monotonic$ holds for $Nat$ and $Leq$ and the function that maps $n$ to the sum of $n$ and $m$.",
    "output": "postulate monotonic_le_plus_l : (m : Nat) -> monotonic Nat Leq (\\ n : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_times. For all natural numbers $n$ and $m$ and $p$ and $q$, if $n$ is divisible by $p$, then if $m$ is divisible by $q$, then the product of $n$ and $m$ is divisible by the product of $p$ and $q$.",
    "output": "postulate divides_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (_ : divisible n p) -> (__1 : divisible m q) -> divisible (times n m) (times p q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSSSSO. $B (8)= 70$.",
    "output": "postulate B_SSSSSSSSO : Eq (B 8) 70"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_n_n. For all natural numbers $n$, if $0$ is less than $n$, then $mod$ applied to $n$ and $n$ is equal to $0$.",
    "output": "postulate mod_n_n : (n : Nat) -> (_ : Lt 0 n) -> Eq (mod n n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp2_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_963$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_963$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_963$.",
    "output": "postulate Dop_rect_CProp2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_963 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_963 : Dop A _nil) -> Q_ x_963"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Inv_eq_minus_O. For all natural numbers $x$ and $y$, if the difference of $x$ and $y$ is equal to $0$, then $x$ is less than or equal to $y$.",
    "output": "postulate inv_eq_minus_O : (x : Nat) -> (y : Nat) -> (_ : Eq (minus x y) 0) -> Leq x y"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type2. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1452$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to elements of $Type2$, for all functions $_H1$ from elements $x_827$ of $Lt$ of $x4$ and $x2$ and elements $x_826$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1453$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_827$ and $x_826$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_827$ and $x_826$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type2 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1452 : div_mod_spec x1 x2 x3 x4) -> Type2) -> (_H1 : (x_827 : Lt x4 x2) -> (x_826 : Eq x1 (plus (times x3 x2) x4)) -> (_z1453 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_827 x_826)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_827 x_826)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp0. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_939$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_939$ of $range$ of $_A$, $Q_$ holds for $x_939$.",
    "output": "postulate range_rect_CProp0 : (_A : Set) -> (Q_ : (_x_939 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_939 : range _A) -> Q_ x_939"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp0. Let $Q_$ be a function from natural numbers $_x_413$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_414$ and elements $_x_416$ of $Q_$ of $x_414$ to elements of $Q_$ of the sum of $x_414$ and $1$, for all natural numbers $x_413$, $Q_$ holds for $x_413$.",
    "output": "postulate nat_rect_CProp0 : (Q_ : (_x_413 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_414 : Nat) -> (_x_416 : Q_ x_414) -> Q_ (plus x_414 1)) -> (x_413 : Nat) -> Q_ x_413"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example1. $smallest_factor$ applied to $3$ is equal to $3$.",
    "output": "postulate example1 : Eq (smallest_factor 3) 3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B2_exp. Let $n$ be a natural number. Then if the exponentiation of $2$ and $7$ is less than or equal to $n$, then $B2$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of the product of $2$ and $n$ and $pred$ applied to the quotient of the square root of the product of $2$ and $n$ and $2$.",
    "output": "postulate le_B2_exp : (n : Nat) -> (_ : Leq (pow 2 7) n) -> Leq (B2 (times 2 n)) (pow (times 2 n) (pred (div (sqrt (times 2 n)) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_fact_B. Let $n$ be a natural number. Then if $1$ is less than $n$, then the factorial of the product of $2$ and $n$ is equal to the product of the exponentiation of the factorial of $n$ and $2$ and $B$ applied to the product of $2$ and $n$.",
    "output": "postulate eq_fact_B : (n : Nat) -> (_ : Lt 1 n) -> Eq (factorial (times 2 n)) (times (pow (factorial n) 2) (B (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_l$ be a list of natural numbers. Let $_n$ be a natural number. Then we can say that $primes_below$ holds for $_l$ and $_n$.",
    "output": "postulate primes_below : (_l : list Nat) -> (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1544. For all natural numbers $p$ and $q$, for all functions $Hind$ from natural numbers $m$ and natural numbers $n$ and elements of $Lt$ of $0$ and $n$ and elements $__1$ of $Leq$ of $n$ and $m$ and elements $__2$ of $Leq$ of $n$ and $q$ to elements of $ex$ of $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and $gcd_aux$ applied to $q$ and $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and $gcd_aux$ applied to $q$ and $m$ and $n$, for all natural numbers $m$ and $n$, if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to the sum of $q$ and $1$, then if $n$ is not divisible by $m$, then for all natural numbers $a$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, for all natural numbers $b$, if the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ or the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then if the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $n$ and $b$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate let_clause_1544 : (p : Nat) -> (q : Nat) -> (Hind : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n q) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd_aux q m n)) (Eq (minus (times b m) (times a n)) (gcd_aux q m n))))) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (lenm : Leq n m) -> (lenS : Leq n (plus q 1)) -> (ndivnm : not (divisible n m)) -> (a : Nat) -> (_clearme : ex Nat (\\ b : Nat -> or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n))))) -> (b : Nat) -> (_clearme0 : or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n)))) -> (H : Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) -> Eq (minus (times a (mod m n)) (times n b)) (gcd_aux q n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1573. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $m$ is divisible by $n$, then for all natural numbers $d$, if $0$ is equal to $m$, then if $n$ is equal to the product of $m$ and $d$, then $n$ is equal to $m$.",
    "output": "postulate let_clause_1573 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (_clearme : divisible m n) -> (d : Nat) -> (auto : Eq 0 m) -> (auto' : Eq n (times m d)) -> Eq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1047. For all natural numbers $k$ and $n$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $n$ is less than or equal to $k$, then for all natural numbers $j$, if $n$ is less than or equal to $j$, then for all functions $Hind$ from functions from natural numbers $i$ and elements of $Leq$ of $n$ and $i$ and elements $__1$ of $Lt$ of $i$ and $j$ to elements of $Eq$ of $p$ applied to $i$ and absurdity to elements of $Eq$ of $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $j$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$, for all functions $Hfalse$ from natural numbers $i$ and elements of $Leq$ of $n$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $j$ and $1$ to elements of $Eq$ of $p$ applied to $i$ and absurdity, for all natural numbers $x2571$ and $x2572$, $x2571$ is equal to the sum of the product of $x2572$ and the quotient of $x2571$ and $x2572$ and $mod$ applied to $x2571$ and $x2572$.",
    "output": "postulate let_clause_1047 : (k : Nat) -> (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (lenk : Leq n k) -> (j : Nat) -> (leup : Leq n j) -> (Hind : (_ : (i : Nat) -> (_ : Leq n i) -> (__1 : Lt i j) -> Eq (p i) false) -> Eq (bigop n (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop j (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i))) -> (Hfalse : (i : Nat) -> (_ : Leq n i) -> (__1 : Lt i (plus j 1)) -> Eq (p i) false) -> (x2571 : Nat) -> (x2572 : Nat) -> Eq x2571 (plus (times x2572 (div x2571 x2572)) (mod x2571 x2572))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSO. $B$ applied to $5$ is equal to $30$.",
    "output": "postulate B_SSSSSO : Eq (B 5) 30"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_n_to_le. Let $h$ be a function from natural numbers to natural numbers. Then for all natural numbers $k$ and $n$, if $k$ is less than or equal to $n$, then for all elements $__1$ of $permut$ of $h$ and $n$, for all functions $__2$ from natural numbers $m$ and elements $__2$ of $Lt$ of $m$ and $k$ to elements of $Eq$ of $h$ applied to $m$ and $m$, for all natural numbers $j$, if $k$ is less than or equal to $j$, then if $j$ is less than or equal to $n$, then $k$ is less than or equal to $h$ applied to $j$.",
    "output": "postulate permut_n_to_le : (h : (_ : Nat) -> Nat) -> (k : Nat) -> (n : Nat) -> (_ : Leq k n) -> (__1 : permut h n) -> (__2 : (m : Nat) -> (__2 : Lt m k) -> Eq (h m) m) -> (j : Nat) -> (__3 : Leq k j) -> (__4 : Leq j n) -> Leq k (h j)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_Conf3. Let $A$ and $B$ be sets. Then for all elements $succ$ of $relation2$ of $A$ and $B$, for all elements $R$ of $relation$ of $A$, for all elements $__$ of $Conf3$ of $A$ and $B$ and $succ$ and $R$, for all natural numbers $l$, $Conf3$ holds for $A$ and $B$ and $succ$ and $lstar$ applied to $A$ and $R$ and $l$.",
    "output": "postulate lstar_Conf3 : (A : Set) -> (B : Set) -> (succ : relation2 A B) -> (R : relation A) -> (_ : Conf3 A B succ R) -> (l : Nat) -> Conf3 A B succ (lstar A R l)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_r_aux. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all elements $b1$ of $B$, for all elements $P$ of $relation2$ of $Nat$ and $B$, for all elements $__$ of $P$ of $0$ and $b1$, for all functions $__1$ from natural numbers $l$ and elements $b$ of $B$ and elements $b2$ of $B$ and elements $__1$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $R$ of $b$ and $b2$ and elements $__3$ of $P$ of $l$ and $b$ to elements of $P$ of the sum of $l$ and $1$ and $b2$, for all natural numbers $l$, for all elements $b$ and $b2$ of $B$, for all elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b$ and $b2$, if $b$ is equal to $b1$, then $P$ holds for $l$ and $b2$.",
    "output": "postulate lstar_ind_r_aux : (B : Set) -> (R : relation B) -> (b1 : B) -> (P : relation2 Nat B) -> (_ : P 0 b1) -> (__1 : (l : Nat) -> (b : B) -> (b2 : B) -> (__1 : lstar B R l b1 b) -> (__2 : R b b2) -> (__3 : P l b) -> P (plus l 1) b2) -> (l : Nat) -> (b : B) -> (b2 : B) -> (__2 : lstar B R l b b2) -> (__3 : Eq b b1) -> P l b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_ord_rem. Let $p$ and $q$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $p$ is prime, then if $q$ is prime, then if $q$ is less than $p$, then $ord$ applied to $ord_rem$ applied to $m$ and $p$ and $q$ is equal to $ord$ applied to $m$ and $q$.",
    "output": "postulate ord_ord_rem : (p : Nat) -> (q : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : prime q) -> (__3 : Lt q p) -> Eq (ord (ord_rem m p) q) (ord m q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type3_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_895$ of $ACop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_895$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_895$.",
    "output": "postulate ACop_rect_Type3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_895 : ACop A _nil) -> Type3) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_895 : ACop A _nil) -> Q_ x_895"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15611. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to $1$, then the difference of the product of $m$ and $b$ and the product of $p$ and $a$ is equal to $1$.",
    "output": "postulate let_clause_15611 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times b m) (times a p)) (gcd p m)) -> (H0 : Eq (minus (times b m) (times a p)) 1) -> Eq (minus (times m b) (times p a)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt_n. Let $n$ be a natural number. Then if $1$ is less than $n$, then the square root of $n$ is less than $n$.",
    "output": "postulate lt_sqrt_n : (n : Nat) -> (_ : Lt 1 n) -> Lt (sqrt n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type0. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1662$ of $range$ of $x1$ to sets, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1663$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type0 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1662 : range x1) -> Set) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1663 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_false_to_le_max. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $p$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$, for all functions $__1$ from natural numbers $m$ and elements $__1$ of $Lt$ of $p$ and $m$ to elements of $Eq$ of $f$ applied to $m$ and absurdity, $max$ applied to $n$ and $f$ is less than or equal to $p$.",
    "output": "postulate f_false_to_le_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (p : Nat) -> (_ : ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) -> (__1 : (m : Nat) -> (__1 : Lt p m) -> Eq (f m) false) -> Leq (max n f) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1063. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $permf$ of $permut$ of $f$ and $n$, for all natural numbers $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then for all natural numbers $a$, if $a$ is less than or equal to $n$ and $f$ applied to $a$ is equal to $i$, then if $a$ is less than or equal to $n$, then if $f$ applied to $a$ is equal to $i$, then for all natural numbers $b$, if $b$ is less than or equal to $n$ and $f$ applied to $b$ is equal to $j$, then if $b$ is less than or equal to $n$, then if $f$ applied to $b$ is equal to $j$, then for all functions $__$ from natural numbers $i0$ and elements of $Leq$ of $i0$ and $n$ to elements of $Leq$ of $f$ applied to $i0$ and $n$, for all elements $injf$ of $injn$ of $f$ and $n$, if $a$ is equal to $b$, then $f$ applied to $a$ is equal to $j$.",
    "output": "postulate let_clause_1063 : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (permf : permut f n) -> (i : Nat) -> (j : Nat) -> (lein : Leq i n) -> (lejn : Leq j n) -> (a : Nat) -> (_clearme : and (Leq a n) (Eq (f a) i)) -> (lean : Leq a n) -> (fa : Eq (f a) i) -> (b : Nat) -> (_clearme0 : and (Leq b n) (Eq (f b) j)) -> (lebn : Leq b n) -> (fb : Eq (f b) j) -> (_ : (i0 : Nat) -> (_ : Leq i0 n) -> Leq (f i0) n) -> (injf : injn f n) -> (auto : Eq a b) -> Eq (f a) j"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_times_to_divides. Let $p$ and $n$ and $m$ be natural numbers. Then if $p$ is prime, then if $p$ is divisible by the product of $n$ and $m$, then $p$ is divisible by $n$ or $p$ is divisible by $m$.",
    "output": "postulate divides_times_to_divides : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : divisible p (times n m)) -> or (divisible p n) (divisible p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp3. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_907$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_907$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_907$.",
    "output": "postulate ACop_rect_CProp3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_907 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_907 : ACop A _nil) -> Q_ x_907"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_gcd_times. Let $m$ and $n$ and $p$ be natural numbers. Then if $0$ is less than $p$, then the greatest common divisor of $m$ and $n$ is less than or equal to the greatest common divisor of $m$ and the product of $n$ and $p$.",
    "output": "postulate le_gcd_times : (m : Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> Leq (gcd m n) (gcd m (times n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $n$, if the exponentiation of $2$ and $4$ is less than or equal to $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (le_n : Leq (pow 2 4) n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_max_n. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$, $max$ applied to $n$ and $f$ is less than or equal to $n$.",
    "output": "postulate le_max_n : (f : (_ : Nat) -> bool) -> (n : Nat) -> Leq (max n f) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_transpose_r. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$ and $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then for all elements $__2$ of $bijn$ of $f$ and $n$, $bijn$ holds for the function that maps $p$ to $f$ applied to $transpose$ applied to $i$ and $j$ and $p$ and $n$.",
    "output": "postulate bijn_transpose_r : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i n) -> (__1 : Leq j n) -> (__2 : bijn f n) -> bijn (\\ p : Nat -> f (transpose i j p)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type5. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_817$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type5$, for all functions $_H_div_mod_spec_intro$ from elements $x_819$ of $Lt$ of $_r$ and $_m$ and elements $x_818$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_819$ and $x_818$, for all elements $x_817$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_817$.",
    "output": "postulate div_mod_spec_rect_Type5 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_817 : div_mod_spec _n _m _q _r) -> Type5) -> (_H_div_mod_spec_intro : (x_819 : Lt _r _m) -> (x_818 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_819 x_818)) -> (x_817 : div_mod_spec _n _m _q _r) -> Q_ x_817"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_inv. For all natural numbers $_p$ and $_m$ and $_x$, $Nat$.",
    "output": "postulate p_ord_inv : (_p : Nat) -> (_m : Nat) -> (_x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb. Let $__$ and $__1$ be natural numbers. Then $bool$.",
    "output": "postulate leb : (_ : Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1571. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then if the greatest common divisor of $m$ and $n$ is equal to $0$, then if $m$ is equal to $0$, then if $n$ is equal to $0$, then $m$ is equal to $n$.",
    "output": "postulate let_clause_1571 : (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (H : Eq (gcd m n) 0) -> (auto : Eq m 0) -> (auto' : Eq n 0) -> Eq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter. For all sets $A$, for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_941$, $bool$.",
    "output": "postulate filter : (A : Set) -> (_xxx : range A) -> (_x_941 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_nth_prime. For all natural numbers $n$, $nth_prime$ applied to $n$ is prime.",
    "output": "postulate prime_nth_prime : (n : Nat) -> prime (nth_prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type1. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1524$ of $Aop$ of $x1$ and $x2$ to elements of $Type1$, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1525$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type1 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1524 : Aop x1 x2) -> Type1) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1525 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type3. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_895$ of $ACop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_895$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_895$.",
    "output": "postulate ACop_rect_Type3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_895 : ACop A _nil) -> Type3) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_895 : ACop A _nil) -> Q_ x_895"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bk_def. For all natural numbers $n$, $Bk$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $k$ applied to $n$ and $p$.",
    "output": "postulate Bk_def : (n : Nat) -> Eq (Bk n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (k n p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp4. For all natural numbers $n$, if $1$ is less than $n$, then $Psi$ applied to $n$ is less than or equal to the product of $pred$ applied to $n$ and the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_Psi_exp4 : (n : Nat) -> (_ : Lt 1 n) -> Leq (Psi n) (times (pred n) (pow 2 (minus (times 2 n) 3)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_le. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $n$ is divisible by $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate divides_to_le : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : divisible n m) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type2. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_923$ of $range$ of $_A$ to elements of $Type2$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_923$ of $range$ of $_A$, $Q_$ holds for $x_923$.",
    "output": "postulate range_rect_Type2 : (_A : Set) -> (Q_ : (_x_923 : range _A) -> Type2) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_923 : range _A) -> Q_ x_923"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_smallest_factor_to_not_divides. Let $n$ and $i$ be natural numbers. Then if $1$ is less than $n$, then if $1$ is less than $i$, then if $i$ is less than $smallest_factor$ applied to $n$, then $i$ is not divisible by $n$.",
    "output": "postulate lt_smallest_factor_to_not_divides : (n : Nat) -> (i : Nat) -> (_ : Lt 1 n) -> (__1 : Lt 1 i) -> (__2 : Lt i (smallest_factor n)) -> not (divisible i n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_aux_body. Let $_p$ and $_m$ and $_n$ be natural numbers. Then $Nat$.",
    "output": "postulate mod_aux_body : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prod_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, for all elements $_x_969$ and $_x_970$ of $A$, $A$.",
    "output": "postulate prod_body : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> (_x_969 : A) -> (_x_970 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ex_prime. Let $n$ be a natural number. Then if $1$ is less than or equal to $n$, then $ex$ holds for $Nat$ and the function that maps $m$ to the conjunction of the conjunction of $Lt$ applied to $n$ and $m$ and $Leq$ applied to $m$ and the sum of the factorial of $n$ and $1$ and $prime$ applied to $m$.",
    "output": "postulate ex_prime : (n : Nat) -> (_ : Leq 1 n) -> ex Nat (\\ m : Nat -> and (and (Lt n m) (Leq m (plus (factorial n) 1))) (prime m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_lstar_r. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all natural numbers $__$, for all elements $__1$ and $__2$ of $B$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_type$ of $z$, for all elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$, $return_type$ holds for $z$.",
    "output": "postulate filter_lstar_r : (B : Set) -> (_R : relation B) -> (_ : Nat) -> (__1 : B) -> (__2 : B) -> (return_sort : Sort) -> (return_type : (z : lstar_r B _R __ __1 __2) -> return_sort) -> (return : (z : lstar_r B _R __ __1 __2) -> return_type z) -> (z : lstar_r B _R __ __1 __2) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_ind. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1566$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1567$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_ind : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1566 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1567 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "True_to_le_min. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$ and $b$, if $b$ is less than or equal to $m$, then if $f$ applied to $m$ is equal to $true$, then $min$ applied to $n$ and $b$ and $f$ is less than or equal to $m$.",
    "output": "postulate true_to_le_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (b : Nat) -> (_ : Leq b m) -> (__1 : Eq (f m) true) -> Leq (min n b f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_log. For all natural numbers $n$ and $b$, if $1$ is less than $b$, then the logarithm of $b$ and $Psi$ applied to $n$ is less than or equal to the product of $prim$ applied to $n$ and the sum of the logarithm of $b$ and $n$ and $1$.",
    "output": "postulate le_prim_log : (n : Nat) -> (b : Nat) -> (_ : Lt 1 b) -> Leq (log b (Psi n)) (times (prim n) (plus (log b n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_to_eq. For all natural numbers $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$, for all elements $__$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, for all elements $__1$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, $q$ is equal to $q1$.",
    "output": "postulate div_mod_spec_to_eq : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_ : div_mod_spec a b q r) -> (__1 : div_mod_spec a b q1 r1) -> Eq q q1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distr. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Dop$ of $A$ and $nil$, for all elements $a$ and $b$ and $c$ of $A$, $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ is equal to $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $c$.",
    "output": "postulate distr : (A : Set) -> (nil : A) -> (xxx : Dop A nil) -> (a : A) -> (b : A) -> (c : A) -> Eq (prod A nil xxx a (aop__o__op A nil (sum A nil xxx) b c)) (aop__o__op A nil (sum A nil xxx) (prod A nil xxx a b) (prod A nil xxx a c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_divides_ord_rem. Let $p$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then $ord_rem$ applied to $n$ and $p$ is divisible by $ord_rem$ applied to $m$ and $p$.",
    "output": "postulate divides_to_divides_ord_rem : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> divisible (ord_rem n p) (ord_rem m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_plus_l. Let $n$ be a natural number. Then $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $m$ to the sum of $m$ and $n$.",
    "output": "postulate monotonic_lt_plus_l : (n : Nat) -> monotonic Nat Lt (\\ m : Nat -> plus m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1692. For all natural numbers $m$, if $0$ is less than $m$, then for all natural numbers $a$ and $x358$ and $x359$, $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x358$ and the product of $x358$ and $x359$ is equal to the product of $x358$ and the sum of $x359$ and $1$.",
    "output": "postulate let_clause_1692 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x358 : Nat) -> (x359 : Nat) -> Eq (aop__o__op Nat 0 plusAC x358 (times x358 x359)) (times x358 (plus x359 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_div. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then the quotient of $m$ and $n$ is less than or equal to $m$.",
    "output": "postulate le_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> Leq (div m n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min. For all natural numbers $__$ and $__1$, for all functions $__2$ from natural numbers $__2$ to booleans, $Nat$.",
    "output": "postulate min : (_ : Nat) -> (__1 : Nat) -> (__2 : (__2 : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sigma_p_dividesb1. For all natural numbers $m$ and $n$ and $p$ and $k$, if $0$ is less than $n$, then if $p$ is prime, then if $p$ is not divisible by $n$, then if $m$ is less than or equal to $k$, then $m$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $dividesb$ applied to the exponentiation of $p$ and the sum of $i$ and $1$ and the product of the exponentiation of $p$ and $m$ and $n$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$.",
    "output": "postulate sigma_p_dividesb1 : (m : Nat) -> (n : Nat) -> (p : Nat) -> (k : Nat) -> (_ : Lt 0 n) -> (__1 : prime p) -> (__2 : not (divisible p n)) -> (__3 : Leq m k) -> Eq m (bigop k (\\ i : Nat -> dividesb (pow p (plus i 1)) (times (pow p m) n)) Nat 0 plus (\\ i : Nat -> 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iter_body. Let $H$ be a set. Then for all functions $__$ from elements of $H$ to elements of $H$, for all natural numbers $__1$, for all elements $__2$ of $H$, $H$.",
    "output": "postulate iter_body : (H : Set) -> (_ : (_ : H) -> H) -> (__1 : Nat) -> (__2 : H) -> H"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "SameF_upto_le. For all sets $A$, for all functions $f$ and $g$ from natural numbers to elements of $A$, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then for all elements $__1$ of $sameF_upto$ of $m$ and $A$ and $f$ and $g$, $sameF_upto$ holds for $n$ and $A$ and $f$ and $g$.",
    "output": "postulate sameF_upto_le : (A : Set) -> (f : (_ : Nat) -> A) -> (g : (_ : Nat) -> A) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> (__1 : sameF_upto m A f g) -> sameF_upto n A f g"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1595. For all natural numbers $p$ and $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $p$ and $n$ is equal to $1$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $1$ is less than the greatest common divisor of $p$ and the product of $n$ and $m$, then if $smallest_factor$ applied to the greatest common divisor of $p$ and the product of $n$ and $m$ is divisible by $m$, then the greatest common divisor of $p$ and $n$ is equal to the greatest common divisor of $p$ and $m$.",
    "output": "postulate let_clause_1595 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (primepn : Eq (gcd p n) 1) -> (primepm : Eq (gcd p m) 1) -> (lt1gcd : Lt 1 (gcd p (times n m))) -> (H : divisible (smallest_factor (gcd p (times n m))) m) -> Eq (gcd p n) (gcd p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp0. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1626$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1627$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp0 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1626 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1627 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1551. For all natural numbers $m$ and $n$, if $0$ is equal to $n$, then for all natural numbers $x347$, $n$ is equal to the product of $x347$ and $n$.",
    "output": "postulate let_clause_1551 : (m : Nat) -> (n : Nat) -> (eqn0 : Eq 0 n) -> (x347 : Nat) -> Eq n (times x347 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sub_lt. For all sets $A$, for all functions $e$ from natural numbers to elements of $A$, for all functions $p$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $sub_hk$ holds for the function that maps $x$ to $x$ and the function that maps $x$ to $x$ and $A$ and $mk_range$ applied to $A$ and $e$ and $n$ and $p$ and $mk_range$ applied to $A$ and $e$ and $m$ and $p$.",
    "output": "postulate sub_lt : (A : Set) -> (e : (_ : Nat) -> A) -> (p : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> sub_hk (\\ x : Nat -> x) (\\ x : Nat -> x) A (mk_range A e n p) (mk_range A e m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type2. For all sets $_A$, for all functions $Q_$ from elements $_x_923$ of $range$ of $_A$ to elements of $Type2$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_923$ of $range$ of $_A$, $Q_$ holds for $x_923$.",
    "output": "postulate range_rect_Type2 : (_A : Set) -> (Q_ : (_x_923 : range _A) -> Type2) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_923 : range _A) -> Q_ x_923"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_times_r. Let $c$ be a natural number. Then if $0$ is less than $c$, then $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $t$ to the product of $c$ and $t$.",
    "output": "postulate monotonic_lt_times_r : (c : Nat) -> (_ : Lt 0 c) -> monotonic Nat Lt (\\ t : Nat -> times c t)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_true_to_divides. For all natural numbers $n$ and $m$, if $dividesb$ applied to $n$ and $m$ is equal to $true$, then $n$ is divisible by $m$.",
    "output": "postulate dividesb_true_to_divides : (n : Nat) -> (m : Nat) -> (_ : Eq (dividesb n m) true) -> divisible n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_O_elim. Let $n$ be a natural number. Then if $n$ is less than or equal to $0$, then for all functions $P$ from natural numbers $__1$ to propositions, for all elements $__1$ of $P$ of $0$, $P$ holds for $n$.",
    "output": "postulate le_n_O_elim : (n : Nat) -> (_ : Leq n 0) -> (P : (__1 : Nat) -> Prop) -> (__1 : P 0) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_not_bertrand_to_bertrand1. Let $n$ be a natural number. Then if it is not the case that $not_bertrand$ holds for $n$, then for all natural numbers $x$, if $n$ is less than or equal to $x$, then if $x$ is less than or equal to the product of $2$ and $n$, then for all functions $__3$ from natural numbers $p$ and elements $__3$ of $Lt$ of $x$ and $p$ and elements $__4$ of $Leq$ of $p$ and the product of $2$ and $n$ to elements of $not$ of $prime$ applied to $p$, $ex$ holds for $Nat$ and the function that maps $p$ to the conjunction of the conjunction of $Lt$ applied to $n$ and $p$ and $Leq$ applied to $p$ and $x$ and $prime$ applied to $p$.",
    "output": "postulate not_not_bertrand_to_bertrand1 : (n : Nat) -> (_ : not (not_bertrand n)) -> (x : Nat) -> (__1 : Leq n x) -> (__2 : Leq x (times 2 n)) -> (__3 : (p : Nat) -> (__3 : Lt x p) -> (__4 : Leq p (times 2 n)) -> not (prime p)) -> ex Nat (\\ p : Nat -> and (and (Lt n p) (Leq p x)) (prime p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_fact2. Let $n$ be a natural number. Then if $0$ is less than $n$, then the product of the exponentiation of $2$ and the product of $2$ and $n$ and the exponentiation of the factorial of $n$ and $2$ is less than or equal to the product of the product of $2$ and $n$ and the factorial of the product of $2$ and $n$.",
    "output": "postulate exp_to_fact2 : (n : Nat) -> (_ : Lt 0 n) -> Leq (times (pow 2 (times 2 n)) (pow (factorial n) 2)) (times (times 2 n) (factorial (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fmax_false. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $max$ applied to $n$ and $f$ is equal to $m$, then if $f$ applied to $m$ is equal to absurdity, then $m$ is equal to $0$.",
    "output": "postulate fmax_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Eq (max n f) m) -> (__1 : Eq (f m) false) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_plus_r. Let $n$ be a natural number. Then $injective$ holds for $Nat$ and $Nat$ and the function that maps $m$ to the sum of $n$ and $m$.",
    "output": "postulate injective_plus_r : (n : Nat) -> injective Nat Nat (\\ m : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_S. Let $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $m$, then $n$ is less than or equal to the sum of $m$ and $1$.",
    "output": "postulate le_S : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq n (plus m 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_div_true. For all natural numbers $d$ and $n$, if $0$ is less than $n$, then if $dividesb$ applied to $d$ and $n$ is equal to $true$, then $dividesb$ applied to the quotient of $n$ and $d$ and $n$ is equal to $true$.",
    "output": "postulate dividesb_div_true : (d : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Eq (dividesb d n) true) -> Eq (dividesb (div n d) n) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_iter2. For all functions $g$ from natural numbers to natural numbers, for all natural numbers $a$ and $i$ and $j$, for all functions $__$ from natural numbers $x$ to elements of $Leq$ of $x$ and $g$ applied to $x$, if $i$ is less than or equal to $j$, then $iter$ applied to $Nat$ and $g$ and $i$ and $a$ is less than or equal to $iter$ applied to $Nat$ and $g$ and $j$ and $a$.",
    "output": "postulate monotonic_iter2 : (g : (_ : Nat) -> Nat) -> (a : Nat) -> (i : Nat) -> (j : Nat) -> (_ : (x : Nat) -> Leq x (g x)) -> (__1 : Leq i j) -> Leq (iter Nat g i a) (iter Nat g j a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_smallest_factor. Let $n$ be a natural number. Then if $n$ is prime, then $smallest_factor$ applied to $n$ is equal to $n$.",
    "output": "postulate prime_to_smallest_factor : (n : Nat) -> (_ : prime n) -> Eq (smallest_factor n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type0_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_901$ of $ACop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_901$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_901$.",
    "output": "postulate ACop_rect_Type0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_901 : ACop A _nil) -> Set) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_901 : ACop A _nil) -> Q_ x_901"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_le. Let $f$ be a function from natural numbers to natural numbers. Then for all elements $__$ of $increasing$ of $f$, for all natural numbers $m$, $ex$ holds for $Nat$ and the function that maps $i$ to $Leq$ applied to $m$ and $f$ applied to $i$.",
    "output": "postulate increasing_to_le : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> (m : Nat) -> ex Nat (\\ i : Nat -> Leq m (f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound4. For all natural numbers $n$ and $m$, $Nat$.",
    "output": "postulate let_upper_bound4 : (n : Nat) -> (m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_ind. Let $A$ be a set. Then for all functions $f$ from elements of $A$ to natural numbers, for all elements $P$ of $predicate$ of $A$, for all functions $__$ from natural numbers $n$ and functions from elements $a$ of $A$ and elements of $Lt$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$ and elements $a$ of $A$ and elements $__1$ of $Eq$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$, for all elements $a$ of $A$, $P$ holds for $a$.",
    "output": "postulate f_ind : (A : Set) -> (f : (_ : A) -> Nat) -> (P : predicate A) -> (_ : (n : Nat) -> (_ : (a : A) -> (_ : Lt (f a) n) -> P a) -> (a : A) -> (__1 : Eq (f a) n) -> P a) -> (a : A) -> P a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_exp. For all natural numbers $p$ and $m$, if $1$ is less than $p$, then $ord$ applied to the exponentiation of $p$ and $m$ and $p$ is equal to $m$.",
    "output": "postulate ord_exp : (p : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> Eq (ord (pow p m) p) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15601. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $0$ is equal to $n$, then if $0$ is divisible by $m$, then for all natural numbers $q$, if $m$ is equal to the product of $0$ and $q$, then $n$ is equal to $0$.",
    "output": "postulate let_clause_15601 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 m) -> (eqn0 : Eq 0 n) -> (_clearme : divisible 0 m) -> (q : Nat) -> (eqm : Eq m (times 0 q)) -> Eq n 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "True_min. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $b$, if $f$ applied to $b$ is equal to $true$, then for all natural numbers $n$, $min$ applied to $n$ and $b$ and $f$ is equal to $b$.",
    "output": "postulate true_min : (f : (_ : Nat) -> bool) -> (b : Nat) -> (_ : Eq (f b) true) -> (n : Nat) -> Eq (min n b f) b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_times_r. For all natural numbers $n$, $monotonic$ holds for $Nat$ and $Leq$ and the function that maps $m$ to the product of $n$ and $m$.",
    "output": "postulate monotonic_le_times_r : (n : Nat) -> monotonic Nat Leq (\\ m : Nat -> times n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type0_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_901$ of $ACop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_901$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_901$.",
    "output": "postulate ACop_rect_Type0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_901 : ACop A _nil) -> Set) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_901 : ACop A _nil) -> Q_ x_901"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_gen. Let $P$ be a function from natural numbers to propositions. Then for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $i$ and $n$ to elements of $P$ of $i$, $P$ holds for $n$.",
    "output": "postulate le_gen : (P : (_ : Nat) -> Prop) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Leq i n) -> P i) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ProdF. Let $A$ and $B$ be sets. Then for all functions $_f$ from natural numbers to elements of $A$, for all functions $_g$ from natural numbers to elements of $B$, for all natural numbers $_m$ and $_x$, $Prod$ holds for $A$ and $B$.",
    "output": "postulate prodF : (A : Set) -> (B : Set) -> (_f : (_ : Nat) -> A) -> (_g : (_ : Nat) -> B) -> (_m : Nat) -> (_x : Nat) -> Prod A B"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_Sn_O. For all natural numbers $n$, the sum of $n$ and $1$ is not less than or equal to $0$.",
    "output": "postulate not_le_Sn_O : (n : Nat) -> not (Leq (plus n 1) 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop. For all natural numbers $__$, for all functions $__1$ from natural numbers $__1$ to booleans, for all sets $H$, for all elements $__2$ of $H$, for all functions $__3$ from elements $__3$ of $H$ and elements $__4$ of $H$ to elements of $H$, for all functions $__4$ from natural numbers $__4$ to elements of $H$, $H$.",
    "output": "postulate bigop : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (H : Set) -> (__2 : H) -> (__3 : (__3 : H) -> (__4 : H) -> H) -> (__4 : (__4 : Nat) -> H) -> H"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb1. For all natural numbers $n$, if $0$ is less than $n$, then $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $dividesb$ applied to the exponentiation of $p$ and the sum of $i$ and $1$ and $n$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $p$.",
    "output": "postulate pi_p_primeb1 : (n : Nat) -> (_ : Lt 0 n) -> Eq n (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> dividesb (pow p (plus i 1)) n) Nat 1 times (\\ i : Nat -> p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_17041. Let $m$ be a natural number. Then if $0$ is less than $m$, then for all natural numbers $a$ and $x1029$, $x1029$ is equal to $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x1029$ and $0$.",
    "output": "postulate let_clause_17041 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x1029 : Nat) -> Eq x1029 (aop__o__op Nat 0 plusAC x1029 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10332. Let $n$ be a natural number. Then if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10332 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $n$, if $1$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (lt1n : Lt 1 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp3. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1476$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_847$ of $Lt$ of $x4$ and $x2$ and elements $x_846$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1477$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_847$ and $x_846$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_847$ and $x_846$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp3 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1476 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_847 : Lt x4 x2) -> (x_846 : Eq x1 (plus (times x3 x2) x4)) -> (_z1477 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_847 x_846)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_847 x_846)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_ind. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_861$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_861$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_861$.",
    "output": "postulate Aop_ind : (A : Set) -> (_nil : A) -> (Q_ : (_x_861 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_861 : Aop A _nil) -> Q_ x_861"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_l$ be a list of natural numbers. Then we can say that $all_primes$ holds for $_l$.",
    "output": "postulate all_primes : (_l : list Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_ind. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1698$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1699$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_ind : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1698 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1699 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus. Let $n$ and $m$ and $p$ and $q$ be natural numbers. Then if $n$ is less than $m$, then if $p$ is less than $q$, then the sum of $n$ and $p$ is less than the sum of $m$ and $q$.",
    "output": "postulate lt_plus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt n m) -> (__1 : Lt p q) -> Lt (plus n p) (plus m q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distr. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Dop$ of $A$ and $nil$, for all elements $a$ and $b$ and $c$ of $A$, $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ is equal to $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $c$.",
    "output": "postulate distr : (A : Set) -> (nil : A) -> (xxx : Dop A nil) -> (a : A) -> (b : A) -> (c : A) -> Eq (prod A nil xxx a (aop__o__op A nil (sum A nil xxx) b c)) (aop__o__op A nil (sum A nil xxx) (prod A nil xxx a b) (prod A nil xxx a c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_j_j_i. For all natural numbers $i$ and $j$ and $n$, $transpose$ applied to $i$ and $j$ and $n$ is equal to $transpose$ applied to $j$ and $i$ and $n$.",
    "output": "postulate transpose_i_j_j_i : (i : Nat) -> (j : Nat) -> (n : Nat) -> Eq (transpose i j n) (transpose j i n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pad_bigop1. For all natural numbers $k$ and $n$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $n$ is less than or equal to $k$, then for all functions $__1$ from natural numbers $i$ and elements $__1$ of $Leq$ of $n$ and $i$ and elements $__2$ of $Lt$ of $i$ and $k$ to elements of $Eq$ of $p$ applied to $i$ and absurdity, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate pad_bigop1 : (k : Nat) -> (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Leq n k) -> (__1 : (i : Nat) -> (__1 : Leq n i) -> (__2 : Lt i k) -> Eq (p i) false) -> Eq (bigop n (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_body. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate exp_body : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_exp_to_eq. Let $p$ and $q$ and $m$ be natural numbers. Then if $p$ is prime, then if $q$ is prime, then if $p$ is divisible by the exponentiation of $q$ and $m$, then $p$ is equal to $q$.",
    "output": "postulate divides_exp_to_eq : (p : Nat) -> (q : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : prime q) -> (__2 : divisible p (pow q m)) -> Eq p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_not. Let $P$ be a proposition. Then for all elements $__$ of $decidable$ of $P$, $decidable$ holds for the negation of $P$.",
    "output": "postulate decidable_not : (P : Prop) -> (_ : decidable P) -> decidable (not P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb4. For all natural numbers $n$, if $1$ is less than $n$, then $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$.",
    "output": "postulate pi_p_primeb4 : (n : Nat) -> (_ : Lt 1 n) -> Eq (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1))))))) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1)))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Inv_eq_minus_O. Let $x$ and $y$ be natural numbers. Then if the difference of $x$ and $y$ is equal to $0$, then $x$ is less than or equal to $y$.",
    "output": "postulate inv_eq_minus_O : (x : Nat) -> (y : Nat) -> (_ : Eq (minus x y) 0) -> Leq x y"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_times1. For all natural numbers $p$ and $n$ and $m$, if $1$ is less than $p$, then if $0$ is less than $n$, then if $0$ is less than $m$, then the logarithm of $p$ and the product of $n$ and $m$ is less than or equal to the sum of the sum of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$ and $1$.",
    "output": "postulate log_times1 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> (__2 : Lt 0 m) -> Leq (log p (times n m)) (plus (plus (log p n) (log p m)) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_ord_rem. For all natural numbers $p$ and $q$ and $m$, if $0$ is less than $m$, then if $p$ is prime, then if $q$ is prime, then if $q$ is less than $p$, then $ord$ applied to $ord_rem$ applied to $m$ and $p$ and $q$ is equal to $ord$ applied to $m$ and $q$.",
    "output": "postulate ord_ord_rem : (p : Nat) -> (q : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : prime q) -> (__3 : Lt q p) -> Eq (ord (ord_rem m p) q) (ord m q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_min_f_min_g. For all functions $f$ and $g$ from natural numbers to booleans, for all natural numbers $n$ and $b$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $n$ and $b$ and elements $__2$ of $Eq$ of $f$ applied to $i$ and $true$ to elements of $Eq$ of $g$ applied to $i$ and $true$, $min$ applied to $n$ and $b$ and $g$ is less than or equal to $min$ applied to $n$ and $b$ and $f$.",
    "output": "postulate le_min_f_min_g : (f : (_ : Nat) -> bool) -> (g : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : (i : Nat) -> (_ : Leq b i) -> (__1 : Lt i (plus n b)) -> (__2 : Eq (f i) true) -> Eq (g i) true) -> Leq (min n b g) (min n b f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_n_Sm. Let $n$ and $m$ be natural numbers. Then the sum of the sum of $n$ and $m$ and $1$ is equal to the sum of $n$ and the sum of $m$ and $1$.",
    "output": "postulate plus_n_Sm : (n : Nat) -> (m : Nat) -> Eq (plus (plus n m) 1) (plus n (plus m 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "True_to_le_max. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $m$ is less than $n$, then if $f$ applied to $m$ is equal to $true$, then $m$ is less than or equal to $max$ applied to $n$ and $f$.",
    "output": "postulate true_to_le_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Eq (f m) true) -> Leq m (max n f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nilr_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ is equal to $a$.",
    "output": "postulate nilr_body : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx a nil) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_to_divides. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then for all elements $__1$ of $congruent$ of $n$ and $m$ and $p$, $p$ is divisible by the difference of $n$ and $m$.",
    "output": "postulate congruent_to_divides : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : congruent n m p) -> divisible p (minus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp2. For all functions $Q_$ from natural numbers $_x_405$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_406$ and elements $_x_408$ of $Q_$ of $x_406$ to elements of $Q_$ of the sum of $x_406$ and $1$, for all natural numbers $x_405$, $Q_$ holds for $x_405$.",
    "output": "postulate nat_rect_CProp2 : (Q_ : (_x_405 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_406 : Nat) -> (_x_408 : Q_ x_406) -> Q_ (plus x_406 1)) -> (x_405 : Nat) -> Q_ x_405"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iter_body. For all sets $H$, for all functions $__$ from elements of $H$ to elements of $H$, for all natural numbers $__1$, for all elements $__2$ of $H$, $H$.",
    "output": "postulate iter_body : (H : Set) -> (_ : (_ : H) -> H) -> (__1 : Nat) -> (__2 : H) -> H"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_to_minus. Let $n$ and $m$ and $p$ be natural numbers. Then if $n$ is equal to the sum of $m$ and $p$, then the difference of $n$ and $m$ is equal to $p$.",
    "output": "postulate plus_to_minus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Eq n (plus m p)) -> Eq (minus n m) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_not_eq. For all natural numbers $n$ and $m$, if $n$ is less than $m$, then $n$ is not equal to $m$.",
    "output": "postulate lt_to_not_eq : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> not (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_a. Let $a$ and $b$ be natural numbers. Then for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, if $a$ is less than or equal to $b$, then $bigop$ applied to the difference of the sum of $b$ and $1$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$ is equal to $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to the difference of $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to the successor of $i0$ applied to the sum of $i$ and $a$ and $f$ applied to $a$.",
    "output": "postulate bigop_a : (a : Nat) -> (b : Nat) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (_ : Leq a b) -> Eq (bigop (minus (plus b 1) a) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))) (op B nil op (bigop (minus b a) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f (succ i0)) (plus i a))) (f a))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_to_exp1. For all natural numbers $p$ and $n$ and $q$ and $r$, if $1$ is less than $p$, then if $0$ is less than $n$, then if $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $p$ is not divisible by $r$ and $n$ is equal to the product of the exponentiation of $p$ and $q$ and $r$.",
    "output": "postulate p_ord_to_exp1 : (p : Nat) -> (n : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> (__2 : Eq (p_ord n p) (mk_Prod Nat Nat q r)) -> and (not (divisible p r)) (Eq n (times (pow p q) r))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type3_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_949$ of $Dop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_949$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_949$.",
    "output": "postulate Dop_rect_Type3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_949 : Dop A _nil) -> Type3) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_949 : Dop A _nil) -> Q_ x_949"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_m2. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $i$ and $b$, $Nat$.",
    "output": "postulate let_m2 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (i : Nat) -> (b : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_minl. For all natural numbers $i$ and $n$ and $m$, if $i$ is less than or equal to $min$ applied to $n$ and $m$, then $i$ is less than or equal to $n$.",
    "output": "postulate le_minl : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq i (min n m)) -> Leq i n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_lstar. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $__1$ of $B$ and elements $__2$ of $B$ and elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_sort$, for all functions $case_lstar_O$ from elements $b$ of $B$ to elements of $return_type$ of $0$ and $b$ and $b$ and $lstar_O$ applied to $B$ and $_R$ and $b$, for all functions $case_lstar_S$ from elements $b1$ of $B$ and elements $b$ of $B$ and elements of $_R$ of $b1$ and $b$ and natural numbers $l$ and elements $b2$ of $B$ and elements $__1$ of $lstar$ of $B$ and $_R$ and $l$ and $b$ and $b2$ to elements of $return_type$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_S$ applied to $B$ and $_R$ and $b1$ and $b$ and $__$ and $l$ and $b2$ and $__1$, for all natural numbers $__$, for all elements $__1$ and $__2$ of $B$, for all elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$, $return_type$ holds for $__$ and $__1$ and $__2$ and $z$.",
    "output": "postulate match_lstar : (B : Set) -> (_R : relation B) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (__1 : B) -> (__2 : B) -> (z : lstar B _R __ __1 __2) -> return_sort) -> (case_lstar_O : (b : B) -> return_type 0 b b (lstar_O B _R b)) -> (case_lstar_S : (b1 : B) -> (b : B) -> (_ : _R b1 b) -> (l : Nat) -> (b2 : B) -> (__1 : lstar B _R l b b2) -> return_type (plus l 1) b1 b2 (lstar_S B _R b1 b __ l b2 __1)) -> (_ : Nat) -> (__1 : B) -> (__2 : B) -> (z : lstar B _R __ __1 __2) -> return_type __ __1 __2 z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_log_n_n. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then if $0$ is less than $n$, then the logarithm of $p$ and $n$ is less than $n$.",
    "output": "postulate lt_log_n_n : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Lt (log p n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_B_Bk. For all natural numbers $n$, $B$ applied to $n$ is equal to $Bk$ applied to $n$.",
    "output": "postulate eq_B_Bk : (n : Nat) -> Eq (B n) (Bk n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16921. Let $m$ be a natural number. Then if $0$ is less than $m$, then for all natural numbers $a$ and $x358$ and $x359$, $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x358$ and the product of $x358$ and $x359$ is equal to the product of $x358$ and the sum of $x359$ and $1$.",
    "output": "postulate let_clause_16921 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x358 : Nat) -> (x359 : Nat) -> Eq (aop__o__op Nat 0 plusAC x358 (times x358 x359)) (times x358 (plus x359 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Tech. For all natural numbers $n$, if the product of $2$ and the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$ is less than or equal to the square root of the product of $2$ and $n$, then the product of the quotient of the square root of the product of $2$ and $n$ and $2$ and the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$ is less than or equal to the quotient of the product of $2$ and $n$ and $4$.",
    "output": "postulate tech : (n : Nat) -> (_ : Leq (times 2 (plus (log 2 (times 2 n)) 1)) (sqrt (times 2 n))) -> Leq (times (div (sqrt (times 2 n)) 2) (plus (log 2 (times 2 n)) 1)) (div (times 2 n) 4)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16003. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_16003 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_lt_SO. For all natural numbers $p$, if $p$ is prime, then $1$ is less than $p$.",
    "output": "postulate prime_to_lt_SO : (p : Nat) -> (_ : prime p) -> Lt 1 p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_Sn_n. Let $n$ be a natural number. Then the sum of $n$ and $1$ is not less than or equal to $n$.",
    "output": "postulate not_le_Sn_n : (n : Nat) -> not (Leq (plus n 1) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type2. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1518$ of $Aop$ of $x1$ and $x2$ to elements of $Type2$, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1519$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type2 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1518 : Aop x1 x2) -> Type2) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1519 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_Psil. For all natural numbers $n$, if $0$ is less than $n$, then the exponentiation of $2$ and $n$ is less than or equal to $Psi$ applied to the product of $2$ and $n$.",
    "output": "postulate le_exp_Psil : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 n) (Psi (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp4_body. For all functions $Q_$ from natural numbers $_x_393$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_394$ and elements $_x_396$ of $Q_$ of $x_394$ to elements of $Q_$ of the sum of $x_394$ and $1$, for all natural numbers $x_393$, $Q_$ holds for $x_393$.",
    "output": "postulate nat_rect_CProp4_body : (Q_ : (_x_393 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_394 : Nat) -> (_x_396 : Q_ x_394) -> Q_ (plus x_394 1)) -> (x_393 : Nat) -> Q_ x_393"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "True_to_le_max. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $m$ is less than $n$, then if $f$ applied to $m$ is equal to $true$, then $m$ is less than or equal to $max$ applied to $n$ and $f$.",
    "output": "postulate true_to_le_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Eq (f m) true) -> Leq m (max n f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_plus_times. For all natural numbers $m$ and $q$ and $r$, if $r$ is less than $m$, then the quotient of the sum of the product of $q$ and $m$ and $r$ and $m$ is equal to $q$.",
    "output": "postulate div_plus_times : (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt r m) -> Eq (div (plus (times q m) r) m) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_min. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of the conjunction of $Leq$ applied to $b$ and $i$ and $Lt$ applied to $i$ and the sum of $n$ and $b$ and $Eq$ applied to $f$ applied to $i$ and $true$, $min$ applied to $n$ and $b$ and $f$ is less than the sum of $n$ and $b$.",
    "output": "postulate lt_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : ex Nat (\\ i : Nat -> and (and (Leq b i) (Lt i (plus n b))) (Eq (f i) true))) -> Lt (min n b f) (plus n b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_nth_prime_to_not_prime. For all natural numbers $n$ and $m$, if $nth_prime$ applied to $n$ is less than $m$, then if $m$ is less than $nth_prime$ applied to the sum of $n$ and $1$, then $m$ is not prime.",
    "output": "postulate lt_nth_prime_to_not_prime : (n : Nat) -> (m : Nat) -> (_ : Lt (nth_prime n) m) -> (__1 : Lt m (nth_prime (plus n 1))) -> not (prime m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15692. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15692 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_p_ord_inv. Let $p$ and $m$ and $x$ be natural numbers. Then if $ord$ applied to $x$ and $p$ is less than $m$, then the quotient of $p_ord_inv$ applied to $p$ and $m$ and $x$ and $m$ is equal to $ord_rem$ applied to $x$ and $p$.",
    "output": "postulate div_p_ord_inv : (p : Nat) -> (m : Nat) -> (x : Nat) -> (_ : Lt (ord x p) m) -> Eq (div (p_ord_inv p m x) m) (ord_rem x p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Comm_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $ACop$ of $A$ and $nil$, for all elements $a$ and $b$ of $A$, $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ is equal to $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.",
    "output": "postulate comm_body : (A : Set) -> (nil : A) -> (xxx : ACop A nil) -> (a : A) -> (b : A) -> Eq (op A nil (aop A nil xxx) a b) (op A nil (aop A nil xxx) b a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_max_n. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$, $max$ applied to $n$ and $f$ is less than or equal to $n$.",
    "output": "postulate le_max_n : (f : (_ : Nat) -> bool) -> (n : Nat) -> Leq (max n f) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides_true. Let $l$ be a list of natural numbers. Then for all natural numbers $n$, if $list_divides$ applied to $l$ and $n$ is equal to $true$, then $ex$ holds for $Nat$ and the function that maps $p$ to the conjunction of $mem$ applied to $Nat$ and $p$ and $l$ and $divisible$ applied to $p$ and $n$.",
    "output": "postulate list_divides_true : (l : list Nat) -> (n : Nat) -> (_ : Eq (list_divides l n) true) -> ex Nat (\\ p : Nat -> and (mem Nat p l) (divisible p n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type3_body. For all sets $_A$, for all functions $Q_$ from elements $_x_921$ of $range$ of $_A$ to elements of $Type3$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_921$ of $range$ of $_A$, $Q_$ holds for $x_921$.",
    "output": "postulate range_rect_Type3_body : (_A : Set) -> (Q_ : (_x_921 : range _A) -> Type3) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_921 : range _A) -> Q_ x_921"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16005. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_16005 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_SO. For all natural numbers $n$, if $1$ is less than $n$, then the logarithm of $n$ and $1$ is equal to $0$.",
    "output": "postulate log_SO : (n : Nat) -> (_ : Lt 1 n) -> Eq (log n 1) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "False_min. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, if $f$ applied to $b$ is equal to absurdity, then $min$ applied to the sum of $n$ and $1$ and $b$ and $f$ is equal to $min$ applied to $n$ and the sum of $b$ and $1$ and $f$.",
    "output": "postulate false_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : Eq (f b) false) -> Eq (min (plus n 1) b f) (min n (plus b 1) f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound3. Let $n$ and $m$ and $x$ be natural numbers. Then $Nat$.",
    "output": "postulate let_upper_bound3 : (n : Nat) -> (m : Nat) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate ord : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_elim. For all natural numbers $n$ and $m$, for all functions $P$ from booleans to propositions, for all functions $__$ from elements of $Leq$ of $n$ and $m$ to elements of $P$ of $true$, for all functions $__1$ from elements $__1$ of $not$ of $Leq$ applied to $n$ and $m$ to elements of $P$ of absurdity, $P$ holds for $leb$ applied to $n$ and $m$.",
    "output": "postulate leb_elim : (n : Nat) -> (m : Nat) -> (P : (_ : bool) -> Prop) -> (_ : (_ : Leq n m) -> P true) -> (__1 : (__1 : not (Leq n m)) -> P false) -> P (leb n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type0. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_873$ of $Aop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_873$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_873$.",
    "output": "postulate Aop_rect_Type0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_873 : Aop A _nil) -> Set) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_873 : Aop A _nil) -> Q_ x_873"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_minus_to_plus_r. Let $a$ and $b$ and $c$ be natural numbers. Then if $a$ is less than the difference of $b$ and $c$, then the sum of $a$ and $c$ is less than $b$.",
    "output": "postulate lt_minus_to_plus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt a (minus b c)) -> Lt (plus a c) b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair5. $cr_pair$ applied to $3$ and $7$ and $0$ and $4$ is equal to $18$.",
    "output": "postulate cr_pair5 : Eq (cr_pair 3 7 0 4) 18"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fmin_false. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, $prod$ holds for $Prop$ and $Prop$ and $Eq$ applied to $f$ applied to $let_m$ applied to $f$ and $n$ and $b$ and absurdity and the function that maps $__$ to $Eq$ applied to $let_m$ applied to $f$ and $n$ and $b$ and the sum of $n$ and $b$.",
    "output": "postulate fmin_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> prod Prop Prop (Eq (f (let_m f n b)) false) (\\ _ : Eq (f (let_m f n b)) false -> Eq (let_m f n b) (plus n b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_max_n. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$, if $0$ is less than $n$, then $max$ applied to $n$ and $f$ is less than $n$.",
    "output": "postulate lt_max_n : (f : (_ : Nat) -> bool) -> (n : Nat) -> (_ : Lt 0 n) -> Lt (max n f) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_sn. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b$ and $b2$ of $B$, for all elements $__$ of $lstar_r$ of $B$ and $R$ and $l$ and $b$ and $b2$, for all elements $b1$ of $B$, for all elements $__1$ of $R$ of $b1$ and $b$, $lstar_r$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_r_sn : (B : Set) -> (R : relation B) -> (l : Nat) -> (b : B) -> (b2 : B) -> (_ : lstar_r B R l b b2) -> (b1 : B) -> (__1 : R b1 b) -> lstar_r B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_plus_times. For all natural numbers $m$ and $q$ and $r$, if $r$ is less than $m$, then $mod$ applied to the sum of the product of $q$ and $m$ and $r$ and $m$ is equal to $r$.",
    "output": "postulate mod_plus_times : (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt r m) -> Eq (mod (plus (times q m) r) m) r"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_div. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then the quotient of $m$ and $n$ is less than or equal to $m$.",
    "output": "postulate le_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> Leq (div m n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_minr. For all natural numbers $i$ and $n$ and $m$, if $i$ is less than or equal to $min$ applied to $n$ and $m$, then $i$ is less than or equal to $m$.",
    "output": "postulate le_minr : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq i (min n m)) -> Leq i m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_dx. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b$, for all elements $b2$ of $B$, for all elements $__1$ of $R$ of $b$ and $b2$, $lstar$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_dx : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b : B) -> (_ : lstar B R l b1 b) -> (b2 : B) -> (__1 : R b b2) -> lstar B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_body. Let $__$ and $__1$ be natural numbers. Then $Nat$.",
    "output": "postulate plus_body : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_nth_prime_n. For all natural numbers $n$, $0$ is less than $nth_prime$ applied to $n$.",
    "output": "postulate lt_O_nth_prime_n : (n : Nat) -> Lt 0 (nth_prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_ord. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then if $0$ is less than $n$, then $n$ is equal to the product of the exponentiation of $p$ and $ord$ applied to $n$ and $p$ and $ord_rem$ applied to $n$ and $p$.",
    "output": "postulate exp_ord : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Eq n (times (pow p (ord n p)) (ord_rem n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_body. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate plus_body : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nilr. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ is equal to $a$.",
    "output": "postulate nilr : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx a nil) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_fact_10. $(2 \\times 5)! \\leq 2 ^ (2 \\times 5 - 2)5 ! 5 !$.",
    "output": "postulate le_fact_10 : Leq (factorial (times 2 5)) (times (times (pow 2 (minus (times 2 5) 2)) (factorial 5)) (factorial 5))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_elim. Let $n$ and $m$ be natural numbers. Then for all functions $P$ from booleans to propositions, for all functions $__$ from elements of $Leq$ of $n$ and $m$ to elements of $P$ of $true$, for all functions $__1$ from elements $__1$ of $not$ of $Leq$ applied to $n$ and $m$ to elements of $P$ of absurdity, $P$ holds for $leb$ applied to $n$ and $m$.",
    "output": "postulate leb_elim : (n : Nat) -> (m : Nat) -> (P : (_ : bool) -> Prop) -> (_ : (_ : Leq n m) -> P true) -> (__1 : (__1 : not (Leq n m)) -> P false) -> P (leb n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc_n_O. For all natural numbers $n$, $bc$ applied to $n$ and $0$ is equal to $1$.",
    "output": "postulate bc_n_O : (n : Nat) -> Eq (bc n 0) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp4. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z689$ to propositions, for all functions $_H1$ from elements $_z690$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_394$ and functions $_x_396$ from elements $_z690$ of $Eq$ of $Hterm$ and $x_394$ to elements of $P$ of $x_394$ and elements $_z690$ of $Eq$ of $Hterm$ and the sum of $x_394$ and $1$ to elements of $P$ of the sum of $x_394$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp4 : (Hterm : Nat) -> (P : (_z689 : Nat) -> Prop) -> (_H1 : (_z690 : Eq Hterm 0) -> P 0) -> (_H2 : (x_394 : Nat) -> (_x_396 : (_z690 : Eq Hterm x_394) -> P x_394) -> (_z690 : Eq Hterm (plus x_394 1)) -> P (plus x_394 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_max_spec. Let $_n$ be a natural number. Then for all functions $_f$ from natural numbers to booleans, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$ to elements of $return_sort$, for all functions $case_found_max_spec$ from natural numbers $m$ and elements of $Lt$ of $m$ and $_n$ and elements $__1$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $__2$ from natural numbers $i$ and elements $__2$ of $Lt$ of $m$ and $i$ and elements $__3$ of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $return_type$ of $m$ and $found_max_spec$ applied to $_n$ and $_f$ and $m$ and $__$ and $__1$ and $__2$, for all functions $case_not_found_max_spec$ from functions from natural numbers $i$ and elements of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $return_type$ of $0$ and $not_found_max_spec$ applied to $_n$ and $_f$ and $__$, for all natural numbers $__$, for all elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$, $return_type$ holds for $__$ and $z$.",
    "output": "postulate match_max_spec : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (z : max_spec _n _f __) -> return_sort) -> (case_found_max_spec : (m : Nat) -> (_ : Lt m _n) -> (__1 : Eq (_f m) true) -> (__2 : (i : Nat) -> (__2 : Lt m i) -> (__3 : Lt i _n) -> Eq (_f i) false) -> return_type m (found_max_spec _n _f m __ __1 __2)) -> (case_not_found_max_spec : (_ : (i : Nat) -> (_ : Lt i _n) -> Eq (_f i) false) -> return_type 0 (not_found_max_spec _n _f __)) -> (_ : Nat) -> (z : max_spec _n _f __) -> return_type __ z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_Psi2. Let $n$ be a natural number. Then if $1$ is less than $n$, then the exponentiation of $2$ and the quotient of $n$ and $2$ is less than or equal to $Psi$ applied to $n$.",
    "output": "postulate le_exp_Psi2 : (n : Nat) -> (_ : Lt 1 n) -> Leq (pow 2 (div n 2)) (Psi n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_O_n. Let $n$ be a natural number. Then $0$ is equal to the difference of $0$ and $n$.",
    "output": "postulate minus_O_n : (n : Nat) -> Eq 0 (minus 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp0_body. Let $Q_$ be a function from natural numbers $_x_413$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_414$ and elements $_x_416$ of $Q_$ of $x_414$ to elements of $Q_$ of the sum of $x_414$ and $1$, for all natural numbers $x_413$, $Q_$ holds for $x_413$.",
    "output": "postulate nat_rect_CProp0_body : (Q_ : (_x_413 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_414 : Nat) -> (_x_416 : Q_ x_414) -> Q_ (plus x_414 1)) -> (x_413 : Nat) -> Q_ x_413"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type3. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_867$ of $Aop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_867$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_867$.",
    "output": "postulate Aop_rect_Type3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_867 : Aop A _nil) -> Type3) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_867 : Aop A _nil) -> Q_ x_867"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp3. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_879$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_879$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_879$.",
    "output": "postulate Aop_rect_CProp3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_879 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_879 : Aop A _nil) -> Q_ x_879"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_discr. For all sets $a1$, for all elements $a2$ of $a1$, for all elements $x$ and $y$ of $Aop$ of $a1$ and $a2$, if $x$ is equal to $y$, then $match_Aop$ holds for $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ and $t2$ and $t3$ to $match_Aop$ applied to $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ and $u2$ and $u3$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and the function that maps $x_19$ and $_x_20$ to the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x0$ applied to $a2$ and $a$ and $a$ applied to $x_19$ and $_x_20$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $e1$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R2$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and the function that maps $x0$ and $__$ to the function that maps $x01$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a2$ and $a$ and $a$ applied to $x0$ and $__$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a$ and $a2$ and $a$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and the function that maps $e2$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R3$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and the function that maps $x0$ and $__$ to the function that maps $x01$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a2$ and $a$ and $a$ applied to $x0$ and $__$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a$ and $a2$ and $a$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and the function that maps $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p11$ and $x21$ and $p2$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $b$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $c$ to $Eq$ applied to $x01$ applied to $a$ and $x01$ applied to $b$ and $c$ and $x01$ applied to $x01$ applied to $a$ and $b$ and $c$ applied to $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ and $t3$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and $e2$ and $u3$ and the function that maps $_e3$ to $P$ and the function that maps $_z55$ to $P$ and $y$ and $x$.",
    "output": "postulate Aop_discr : (a1 : Set) -> (a2 : a1) -> (x : Aop a1 a2) -> (y : Aop a1 a2) -> (_e : Eq x y) -> match_Aop a1 a2 (plus Type2 1) (\\ _ : Aop a1 a2 -> univ Type2) (\\ t0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ t1 : ((a : a1) -> Eq (t0 a2 a) a) -> \\ t2 : ((a : a1) -> Eq (t0 a a2) a) -> \\ t3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (t0 a (t0 b c)) (t0 (t0 a b) c)) -> match_Aop a1 a2 (plus Type2 1) (\\ _ : Aop a1 a2 -> univ Type2) (\\ u0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ u1 : ((a : a1) -> Eq (u0 a2 a) a) -> \\ u2 : ((a : a1) -> Eq (u0 a a2) a) -> \\ u3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (u0 a (u0 b c)) (u0 (u0 a b) c)) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0) u0) (\\ e0 : Eq (R0 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0) u0 -> prod Prop Type1 (Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> Eq (x0 a2 a) a)) x_19 _x_20) t1 u0 e0) u1) (\\ e1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> Eq (x0 a2 a) a)) x_19 _x_20) t1 u0 e0) u1 -> prod Prop Type1 (Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) (\\ e2 : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2 -> prod Prop Type1 (Eq (R3 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x01 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 __) t1 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 p01 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : ((a : a1) -> Eq (x02 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a a2) a)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x01 a a2) a) -> \\ p2 : Eq (R2 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ __1 : Eq t0 x02 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 __1) t1 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 p02 -> \\ __1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> \\ x10 : ((a : a1) -> Eq (x00 a2 a) a) -> \\ p10 : Eq (R1 (prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t0 (\\ x_19 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x011 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p011 : Eq t0 x011 -> prod Set Prop a1 (\\ a : a1 -> Eq (x011 a2 a) a)) x_19 _x_20) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a a2) a)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x01 a (x01 b c)) (x01 (x01 a b) c))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) (\\ _e3 : Eq (R3 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x01 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 __) t1 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 p01 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : ((a : a1) -> Eq (x02 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a a2) a)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x01 a a2) a) -> \\ p2 : Eq (R2 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ __1 : Eq t0 x02 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 __1) t1 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 p02 -> \\ __1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> \\ x10 : ((a : a1) -> Eq (x00 a2 a) a) -> \\ p10 : Eq (R1 (prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t0 (\\ x_19 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x011 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p011 : Eq t0 x011 -> prod Set Prop a1 (\\ a : a1 -> Eq (x011 a2 a) a)) x_19 _x_20) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a a2) a)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x01 a (x01 b c)) (x01 (x01 a b) c))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3 -> P))))) (\\ _z55 : ((e0 : Eq (R0 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0) u0) -> (e1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> Eq (x0 a2 a) a)) x_19 _x_20) t1 u0 e0) u1) -> (e2 : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) -> (_e3 : Eq (R3 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x01 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 __) t1 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 p01 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : ((a : a1) -> Eq (x02 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a a2) a)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x01 a a2) a) -> \\ p2 : Eq (R2 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ __1 : Eq t0 x02 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 __1) t1 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 p02 -> \\ __1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> \\ x10 : ((a : a1) -> Eq (x00 a2 a) a) -> \\ p10 : Eq (R1 (prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t0 (\\ x_19 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x011 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p011 : Eq t0 x011 -> prod Set Prop a1 (\\ a : a1 -> Eq (x011 a2 a) a)) x_19 _x_20) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a a2) a)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x01 a (x01 b c)) (x01 (x01 a b) c))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_smallest_factor_n. Let $n$ be a natural number. Then if $1$ is less than $n$, then $smallest_factor$ applied to $n$ is prime.",
    "output": "postulate prime_smallest_factor_n : (n : Nat) -> (_ : Lt 1 n) -> prime (smallest_factor n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_O_elim. For all natural numbers $n$, if $n$ is less than or equal to $0$, then for all functions $P$ from natural numbers $__1$ to propositions, for all elements $__1$ of $P$ of $0$, $P$ holds for $n$.",
    "output": "postulate le_n_O_elim : (n : Nat) -> (_ : Leq n 0) -> (P : (__1 : Nat) -> Prop) -> (__1 : P 0) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_S. For all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $n$ is less than or equal to the sum of $m$ and $1$.",
    "output": "postulate le_S : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq n (plus m 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_Sn. Let $n$ be a natural number. Then $n$ is less than or equal to the sum of $n$ and $1$.",
    "output": "postulate le_n_Sn : (n : Nat) -> Leq n (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_nat. For all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers $z$ to elements of $return_sort$, for all functions $return$ from natural numbers $z$ to elements of $return_type$ of $z$, for all natural numbers $z$, $return_type$ holds for $z$.",
    "output": "postulate filter_nat : (return_sort : Sort) -> (return_type : (z : Nat) -> return_sort) -> (return : (z : Nat) -> return_type z) -> (z : Nat) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type0_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_927$ of $range$ of $_A$ to sets, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_927$ of $range$ of $_A$, $Q_$ holds for $x_927$.",
    "output": "postulate range_rect_Type0_body : (_A : Set) -> (Q_ : (_x_927 : range _A) -> Set) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_927 : range _A) -> Q_ x_927"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_not_zero. For all natural numbers $n$ and $m$, if $n$ is less than $m$, then $not_zero$ holds for $m$.",
    "output": "postulate lt_to_not_zero : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> not_zero m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type4. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_917$ of $range$ of $_A$ to elements of $Type4$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_917$ of $range$ of $_A$, $Q_$ holds for $x_917$.",
    "output": "postulate range_rect_Type4 : (_A : Set) -> (Q_ : (_x_917 : range _A) -> Type4) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_917 : range _A) -> Q_ x_917"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type5. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_817$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type5$, for all functions $_H_div_mod_spec_intro$ from elements $x_819$ of $Lt$ of $_r$ and $_m$ and elements $x_818$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_819$ and $x_818$, for all elements $x_817$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_817$.",
    "output": "postulate div_mod_spec_rect_Type5 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_817 : div_mod_spec _n _m _q _r) -> Type5) -> (_H_div_mod_spec_intro : (x_819 : Lt _r _m) -> (x_818 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_819 x_818)) -> (x_817 : div_mod_spec _n _m _q _r) -> Q_ x_817"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sub0_to_false. For all functions $h$ and $k$ from natural numbers to natural numbers, for all sets $A$, for all elements $I$ and $J$ of $range$ of $A$, if $upto$ applied to $A$ and $I$ is equal to $0$, then for all elements $__1$ of $sub_hk$ of $h$ and $k$ and $A$ and $J$ and $I$, for all natural numbers $i$, if $i$ is less than $upto$ applied to $A$ and $J$, then $filter$ applied to $A$ and $J$ and $i$ is equal to absurdity.",
    "output": "postulate sub0_to_false : (h : (_ : Nat) -> Nat) -> (k : (_ : Nat) -> Nat) -> (A : Set) -> (I : range A) -> (J : range A) -> (_ : Eq (upto A I) 0) -> (__1 : sub_hk h k A J I) -> (i : Nat) -> (__2 : Lt i (upto A J)) -> Eq (filter A J i) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1532. Let $n$ and $m$ be natural numbers. Then if $n$ is divisible by $m$, then if $0$ is equal to $n$, then for all natural numbers $d$, if $m$ is equal to the product of $0$ and $d$, then $m$ is equal to $0$.",
    "output": "postulate let_clause_1532 : (n : Nat) -> (m : Nat) -> (divnm : divisible n m) -> (H : Eq 0 n) -> (d : Nat) -> (auto : Eq m (times 0 d)) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_ind. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z653$ to propositions, for all functions $_H1$ from elements $_z654$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_366$ and functions $_x_368$ from elements $_z654$ of $Eq$ of $Hterm$ and $x_366$ to elements of $P$ of $x_366$ and elements $_z654$ of $Eq$ of $Hterm$ and the sum of $x_366$ and $1$ to elements of $P$ of the sum of $x_366$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_ind : (Hterm : Nat) -> (P : (_z653 : Nat) -> Prop) -> (_H1 : (_z654 : Eq Hterm 0) -> P 0) -> (_H2 : (x_366 : Nat) -> (_x_368 : (_z654 : Eq Hterm x_366) -> P x_366) -> (_z654 : Eq Hterm (plus x_366 1)) -> P (plus x_366 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_minus. Let $n$ and $k$ be natural numbers. Then if $k$ is less than $n$, then the product of the factorial of the difference of $n$ and the sum of $k$ and $1$ and the difference of $n$ and $k$ is equal to the factorial of the difference of $n$ and $k$.",
    "output": "postulate fact_minus : (n : Nat) -> (k : Nat) -> (_ : Lt k n) -> Eq (times (factorial (minus n (plus k 1))) (minus n k)) (factorial (minus n k))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n. Let $n$ be a natural number. Then $n$ is less than or equal to $n$.",
    "output": "postulate le_n : (n : Nat) -> Leq n n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pred. Let $_n$ be a natural number. Then $Nat$.",
    "output": "postulate pred : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_cases. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$, $f$ applied to $n$ is equal to $true$ and $max$ applied to the sum of $n$ and $1$ and $f$ is equal to $n$ or $f$ applied to $n$ is equal to absurdity and $max$ applied to the sum of $n$ and $1$ and $f$ is equal to $max$ applied to $n$ and $f$.",
    "output": "postulate max_cases : (f : (_ : Nat) -> bool) -> (n : Nat) -> or (and (Eq (f n) true) (Eq (max (plus n 1) f) n)) (and (Eq (f n) false) (Eq (max (plus n 1) f) (max n f)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_ind. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1500$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1501$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_ind : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1500 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1501 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound. For all natural numbers $__$ and $p$, $Nat$.",
    "output": "postulate let_upper_bound : (_ : Nat) -> (p : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp2_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_935$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_935$ of $range$ of $_A$, $Q_$ holds for $x_935$.",
    "output": "postulate range_rect_CProp2_body : (_A : Set) -> (Q_ : (_x_935 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_935 : range _A) -> Q_ x_935"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp1. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1488$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_855$ of $Lt$ of $x4$ and $x2$ and elements $x_854$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1489$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_855$ and $x_854$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_855$ and $x_854$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp1 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1488 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_855 : Lt x4 x2) -> (x_854 : Eq x1 (plus (times x3 x2) x4)) -> (_z1489 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_855 x_854)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_855 x_854)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_gcd_aux. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $p$, then if $0$ is less than $n$, then if $n$ is divisible by $m$, then $gcd_aux$ applied to $p$ and $m$ and $n$ is equal to $n$.",
    "output": "postulate divides_to_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 p) -> (__1 : Lt 0 n) -> (__2 : divisible n m) -> Eq (gcd_aux p m n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_body. Let $__$ and $__1$ be natural numbers. Then $Nat$.",
    "output": "postulate times_body : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_n_O. For all natural numbers $n$, $1$ is equal to the exponentiation of $n$ and $0$.",
    "output": "postulate exp_n_O : (n : Nat) -> Eq 1 (pow n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb. For all natural numbers $__$ and $__1$, $bool$.",
    "output": "postulate dividesb : (_ : Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_O_to_eq. For all natural numbers $n$, if $n$ is less than or equal to $0$, then $0$ is equal to $n$.",
    "output": "postulate le_n_O_to_eq : (n : Nat) -> (_ : Leq n 0) -> Eq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_ACop. For all sets $A$, for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $ACop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $case_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $return_type$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $z$ of $ACop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate match_ACop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : ACop A _nil) -> return_sort) -> (case_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> return_type (mk_ACop A _nil aop _comm)) -> (z : ACop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc1. For all natural numbers $n$ and $k$, if $k$ is less than $n$, then $bc$ applied to the sum of $n$ and $1$ and the sum of $k$ and $1$ is equal to the sum of $bc$ applied to $n$ and $k$ and $bc$ applied to $n$ and the sum of $k$ and $1$.",
    "output": "postulate bc1 : (n : Nat) -> (k : Nat) -> (_ : Lt k n) -> Eq (bc (plus n 1) (plus k 1)) (plus (bc n k) (bc n (plus k 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp0. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1560$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1561$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1560 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1561 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_or_ge. Let $m$ and $n$ be natural numbers. Then $m$ is less than or equal to $n$ or $n$ is less than or equal to $m$.",
    "output": "postulate le_or_ge : (m : Nat) -> (n : Nat) -> or (Leq m n) (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_to_exp1. Let $n$ be a natural number. Then if $0$ is less than $n$, then the factorial of the product of $2$ and $n$ is less than or equal to the product of the product of the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$ and the factorial of $n$ and the factorial of $n$.",
    "output": "postulate fact_to_exp1 : (n : Nat) -> (_ : Lt 0 n) -> Leq (factorial (times 2 n)) (times (times (pow 2 (pred (times 2 n))) (factorial n)) (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15321. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $0$ is equal to $n$, then if $0$ is divisible by $m$, then for all natural numbers $q$, if $m$ is equal to the product of $0$ and $q$, then $m$ is equal to $0$.",
    "output": "postulate let_clause_15321 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 m) -> (eqn0 : Eq 0 n) -> (_clearme : divisible 0 m) -> (q : Nat) -> (eqm : Eq m (times 0 q)) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_or_lt_eq. For all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $n$ is less than $m$ or $n$ is equal to $m$.",
    "output": "postulate le_to_or_lt_eq : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> or (Lt n m) (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_le_min. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then for all natural numbers $b$, $min$ applied to $n$ and $b$ and $f$ is less than or equal to $min$ applied to $m$ and $b$ and $f$.",
    "output": "postulate le_to_le_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> (b : Nat) -> Leq (min n b f) (min m b f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_to_minus. Let $n$ and $m$ and $p$ be natural numbers. Then if $m$ is less than or equal to $n$, then if $n$ is less than the sum of $p$ and $m$, then the difference of $n$ and $m$ is less than $p$.",
    "output": "postulate lt_plus_to_minus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq m n) -> (__1 : Lt n (plus p m)) -> Lt (minus n m) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Comm. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $ACop$ of $A$ and $nil$, for all elements $a$ and $b$ of $A$, $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ is equal to $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.",
    "output": "postulate comm : (A : Set) -> (nil : A) -> (xxx : ACop A nil) -> (a : A) -> (b : A) -> Eq (op A nil (aop A nil xxx) a b) (op A nil (aop A nil xxx) b a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sqrt_bound. For all natural numbers $n$, if the exponentiation of $2$ and $8$ is less than or equal to $n$, then the product of $2$ and the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$ is less than or equal to the square root of the product of $2$ and $n$.",
    "output": "postulate sqrt_bound : (n : Nat) -> (_ : Leq (pow 2 8) n) -> Leq (times 2 (plus (log 2 (times 2 n)) 1)) (sqrt (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus_minus_l. For all natural numbers $x$ and $y$ and $z$, if $y$ is less than or equal to $z$, then the difference of the sum of $z$ and $x$ and the difference of $z$ and $y$ is equal to the sum of $x$ and $y$.",
    "output": "postulate minus_plus_minus_l : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq y z) -> Eq (minus (plus z x) (minus z y)) (plus x y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus1. Let $a$ and $b$ and $c$ be natural numbers. Then if $c$ is less than or equal to $b$, then the sum of $a$ and the difference of $b$ and $c$ is equal to the difference of the sum of $a$ and $b$ and $c$.",
    "output": "postulate plus_minus1 : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Leq c b) -> Eq (plus a (minus b c)) (minus (plus a b) c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp2. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z701$ to propositions, for all functions $_H1$ from elements $_z702$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_406$ and functions $_x_408$ from elements $_z702$ of $Eq$ of $Hterm$ and $x_406$ to elements of $P$ of $x_406$ and elements $_z702$ of $Eq$ of $Hterm$ and the sum of $x_406$ and $1$ to elements of $P$ of the sum of $x_406$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp2 : (Hterm : Nat) -> (P : (_z701 : Nat) -> Prop) -> (_H1 : (_z702 : Eq Hterm 0) -> P 0) -> (_H2 : (x_406 : Nat) -> (_x_408 : (_z702 : Eq Hterm x_406) -> P x_406) -> (_z702 : Eq Hterm (plus x_406 1)) -> P (plus x_406 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1047. Let $k$ and $n$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $n$ is less than or equal to $k$, then for all natural numbers $j$, if $n$ is less than or equal to $j$, then for all functions $Hind$ from functions from natural numbers $i$ and elements of $Leq$ of $n$ and $i$ and elements $__1$ of $Lt$ of $i$ and $j$ to elements of $Eq$ of $p$ applied to $i$ and absurdity to elements of $Eq$ of $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $j$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$, for all functions $Hfalse$ from natural numbers $i$ and elements of $Leq$ of $n$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $j$ and $1$ to elements of $Eq$ of $p$ applied to $i$ and absurdity, for all natural numbers $x2571$ and $x2572$, $x2571$ is equal to the sum of the product of $x2572$ and the quotient of $x2571$ and $x2572$ and $mod$ applied to $x2571$ and $x2572$.",
    "output": "postulate let_clause_1047 : (k : Nat) -> (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (lenk : Leq n k) -> (j : Nat) -> (leup : Leq n j) -> (Hind : (_ : (i : Nat) -> (_ : Leq n i) -> (__1 : Lt i j) -> Eq (p i) false) -> Eq (bigop n (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop j (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i))) -> (Hfalse : (i : Nat) -> (_ : Leq n i) -> (__1 : Lt i (plus j 1)) -> Eq (p i) false) -> (x2571 : Nat) -> (x2572 : Nat) -> Eq x2571 (plus (times x2572 (div x2571 x2572)) (mod x2571 x2572))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le_to_lt_times. For all natural numbers $n$ and $m$ and $p$ and $q$, if $n$ is less than $m$, then if $p$ is less than or equal to $q$, then if $0$ is less than $q$, then the product of $n$ and $p$ is less than the product of $m$ and $q$.",
    "output": "postulate lt_to_le_to_lt_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt n m) -> (__1 : Leq p q) -> (__2 : Lt 0 q) -> Lt (times n p) (times m q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1075. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $bijf$ of $bijn$ of $f$ and the sum of $n$ and $1$, if $f$ applied to the sum of $n$ and $1$ is equal to the sum of $n$ and $1$, then for all natural numbers $i$, if $i$ is less than or equal to $n$, then for all natural numbers $a$, if $a$ is less than or equal to the sum of $n$ and $1$ and $f$ applied to $a$ is equal to $i$, then if $a$ is less than or equal to the sum of $n$ and $1$, then if $f$ applied to $a$ is equal to $i$, then if $a$ is equal to the sum of $n$ and $1$, then $i$ is equal to $a$.",
    "output": "postulate let_clause_1075 : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (bijf : bijn f (plus n 1)) -> (fS : Eq (f (plus n 1)) (plus n 1)) -> (i : Nat) -> (lein : Leq i n) -> (a : Nat) -> (_clearme : and (Leq a (plus n 1)) (Eq (f a) i)) -> (lean : Leq a (plus n 1)) -> (fa : Eq (f a) i) -> (Hc : Eq a (plus n 1)) -> Eq i a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_pi_p_primeb_divides_b. For all natural numbers $n$ and $m$, $bigop$ applied to $n$ and the function that maps $p$ to $andb$ applied to $primeb$ applied to $p$ and $dividesb$ applied to $p$ and $m$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $m$ and $p$ is equal to $bigop$ applied to $n$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $m$ and $p$.",
    "output": "postulate eq_pi_p_primeb_divides_b : (n : Nat) -> (m : Nat) -> Eq (bigop n (\\ p : Nat -> andb (primeb p) (dividesb p m)) Nat 1 times (\\ p : Nat -> pow p (ord m p))) (bigop n (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (ord m p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_aux. For all natural numbers $_p$ and $_m$ and $_n$, $Nat$.",
    "output": "postulate gcd_aux : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Invert_permut_body. Let $__$ be a natural number. Then for all functions $__1$ from natural numbers $__1$ to natural numbers, for all natural numbers $__2$, $Nat$.",
    "output": "postulate invert_permut_body : (_ : Nat) -> (__1 : (__1 : Nat) -> Nat) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp2. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1746$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1747$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp2 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1746 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1747 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type0_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_833$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to sets, for all functions $_H_div_mod_spec_intro$ from elements $x_835$ of $Lt$ of $_r$ and $_m$ and elements $x_834$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_835$ and $x_834$, for all elements $x_833$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_833$.",
    "output": "postulate div_mod_spec_rect_Type0_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_833 : div_mod_spec _n _m _q _r) -> Set) -> (_H_div_mod_spec_intro : (x_835 : Lt _r _m) -> (x_834 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_835 x_834)) -> (x_833 : div_mod_spec _n _m _q _r) -> Q_ x_833"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ and $_m$ and $_p$ be natural numbers. Then $congruent$ applied to $_n$ and $_m$ and $_p$ is a proposition.",
    "output": "postulate congruent : (_n : Nat) -> (_m : Nat) -> (_p : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_rem. Let $__$ and $__1$ be natural numbers. Then $Nat$.",
    "output": "postulate ord_rem : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_length_to_mem_all. For all natural numbers $n$, for all lists $l$ of natural numbers, if $length$ applied to $Nat$ and $l$ is equal to $n$, then for all elements $__1$ of $unique$ of $Nat$ and $l$, for all functions $__2$ from natural numbers $x$ and elements $__2$ of $mem$ of $Nat$ and $x$ and $l$ to elements of $Lt$ of $x$ and $n$, for all natural numbers $i$, if $i$ is less than $n$, then $mem$ holds for $Nat$ and $i$ and $l$.",
    "output": "postulate eq_length_to_mem_all : (n : Nat) -> (l : list Nat) -> (_ : Eq (length Nat l) n) -> (__1 : unique Nat l) -> (__2 : (x : Nat) -> (__2 : mem Nat x l) -> Lt x n) -> (i : Nat) -> (__3 : Lt i n) -> mem Nat i l"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp4. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z689$ to propositions, for all functions $_H1$ from elements $_z690$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_394$ and functions $_x_396$ from elements $_z690$ of $Eq$ of $Hterm$ and $x_394$ to elements of $P$ of $x_394$ and elements $_z690$ of $Eq$ of $Hterm$ and the sum of $x_394$ and $1$ to elements of $P$ of the sum of $x_394$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp4 : (Hterm : Nat) -> (P : (_z689 : Nat) -> Prop) -> (_H1 : (_z690 : Eq Hterm 0) -> P 0) -> (_H2 : (x_394 : Nat) -> (_x_396 : (_z690 : Eq Hterm x_394) -> P x_394) -> (_z690 : Eq Hterm (plus x_394 1)) -> P (plus x_394 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1648. Let $n$ and $q$ be natural numbers. Then if $0$ is less than $q$, then for all natural numbers $n1$, if $n1$ is equal to the sum of the product of $bigop$ applied to the sum of $n1$ and $1$ and the function that maps $m$ to $andb$ applied to $leb$ applied to $1$ and $m$ and $dividesb$ applied to $q$ and $m$ and $Nat$ and $0$ and $plus$ and the function that maps $m$ to $1$ and $q$ and $mod$ applied to $n1$ and $q$, then if $q$ is divisible by the sum of $n1$ and $1$ and the sum of $n1$ and $1$ is equal to the product of the sum of the quotient of $n1$ and $q$ and $1$ and $q$, then if $q$ is divisible by the sum of $n1$ and $1$, then if the sum of $n1$ and $1$ is equal to the product of the sum of the quotient of $n1$ and $q$ and $1$ and $q$, then the sum of $n1$ and $1$ is equal to the sum of $q$ and the product of $q$ and the quotient of $n1$ and $q$.",
    "output": "postulate let_clause_1648 : (n : Nat) -> (q : Nat) -> (posq : Lt 0 q) -> (n1 : Nat) -> (Hind : Eq n1 (plus (times (bigop (plus n1 1) (\\ m : Nat -> andb (leb 1 m) (dividesb q m)) Nat 0 plus (\\ m : Nat -> 1)) q) (mod n1 q))) -> (_clearme : and (divisible q (plus n1 1)) (Eq (plus n1 1) (times (plus (div n1 q) 1) q))) -> (divq : divisible q (plus n1 1)) -> (eqn1 : Eq (plus n1 1) (times (plus (div n1 q) 1) q)) -> Eq (plus n1 1) (plus q (times q (div n1 q)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example5. $primeb$ applied to $6$ is equal to absurdity.",
    "output": "postulate example5 : Eq (primeb 6) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound1. For all natural numbers $n$, $Nat$.",
    "output": "postulate let_upper_bound1 : (n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb. For all natural numbers $n$, if $0$ is less than $n$, then $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $n$ and $p$.",
    "output": "postulate pi_p_primeb : (n : Nat) -> (_ : Lt 0 n) -> Eq n (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (ord n p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_false_to_not_eq. For all natural numbers $n$ and $m$, if $eqb$ applied to $n$ and $m$ is equal to absurdity, then $n$ is not equal to $m$.",
    "output": "postulate eqb_false_to_not_eq : (n : Nat) -> (m : Nat) -> (_ : Eq (eqb n m) false) -> not (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_discr. Let $a1$ be a set. Then for all elements $x$ and $y$ of $range$ of $a1$, if $x$ is equal to $y$, then $match_range$ holds for $a1$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ and $t2$ to $match_range$ applied to $a1$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ and $u2$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $a1$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $a1$ and $t0$ and the function that maps $x0$ and $p0$ to $Nat$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $e1$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R2$ applied to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $a1$ and $t0$ and the function that maps $x0$ and $p0$ to $Nat$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $p1$ to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $bool$ and $t2$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and the function that maps $_e2$ to $P$ and the function that maps $_z59$ to $P$ and $y$ and $x$.",
    "output": "postulate range_discr : (a1 : Set) -> (x : range a1) -> (y : range a1) -> (_e : Eq x y) -> match_range a1 (plus Type2 1) (\\ _ : range a1 -> univ Type2) (\\ t0 : ((_ : Nat) -> a1) -> \\ t1 : Nat -> \\ t2 : ((_ : Nat) -> bool) -> match_range a1 (plus Type2 1) (\\ _ : range a1 -> univ Type2) (\\ u0 : ((_ : Nat) -> a1) -> \\ u1 : Nat -> \\ u2 : ((_ : Nat) -> bool) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (prod Set Set Nat (\\ _ : Nat -> a1)) t0) u0) (\\ e0 : Eq (R0 (prod Set Set Nat (\\ _ : Nat -> a1)) t0) u0 -> prod Prop Type1 (Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 u0 e0) u1) (\\ e1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 u0 e0) u1 -> prod Prop Type1 (Eq (R2 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : Nat -> \\ p1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x00 : ((_ : Nat) -> a1) -> \\ p00 : Eq t0 x00 -> Nat) t1 x0 p0) x1 -> prod Set Set Nat (\\ _ : Nat -> bool)) t2 u0 e0 u1 e1) u2) (\\ _e2 : Eq (R2 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : Nat -> \\ p1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x00 : ((_ : Nat) -> a1) -> \\ p00 : Eq t0 x00 -> Nat) t1 x0 p0) x1 -> prod Set Set Nat (\\ _ : Nat -> bool)) t2 u0 e0 u1 e1) u2 -> P)))) (\\ _z59 : ((e0 : Eq (R0 (prod Set Set Nat (\\ _ : Nat -> a1)) t0) u0) -> (e1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 u0 e0) u1) -> (_e2 : Eq (R2 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : Nat -> \\ p1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x00 : ((_ : Nat) -> a1) -> \\ p00 : Eq t0 x00 -> Nat) t1 x0 p0) x1 -> prod Set Set Nat (\\ _ : Nat -> bool)) t2 u0 e0 u1 e1) u2) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $p$ and $n$ and $q$ and $r$, if $0$ is less than $p$, then if $p$ is not divisible by $r$, then if $n$ is equal to the product of the exponentiation of $p$ and $q$ and $r$, then for all natural numbers $q0$ and $q1$, if the sum of $q1$ and $1$ is less than or equal to the exponentiation of $p$ and the sum of $q1$ and $1$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (p : Nat) -> (n : Nat) -> (q : Nat) -> (r : Nat) -> (posp : Lt 0 p) -> (ndivpr : not (divisible p r)) -> (Hn : Eq n (times (pow p q) r)) -> (q0 : Nat) -> (q1 : Nat) -> (Hind : Leq (plus q1 1) (pow p (plus q1 1))) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_Dop. For all sets $A$, for all elements $nil$ of $A$, for all elements $sum$ of $ACop$ of $A$ and $nil$, for all functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$, for all functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $nil$ and $nil$, for all functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$, $Dop$ holds for $A$ and $nil$.",
    "output": "postulate mk_Dop : (A : Set) -> (nil : A) -> (sum : ACop A nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a nil) nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A nil sum b c)) (aop__o__op A nil sum (prod a b) (prod a c))) -> Dop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B1_theta. For all natural numbers $n$, if $18$ is less than or equal to $n$, then for all elements $__1$ of $not_bertrand$ of $n$, $B1$ applied to the product of $2$ and $n$ is less than or equal to $theta$ applied to the quotient of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_B1_theta : (n : Nat) -> (_ : Leq 18 n) -> (__1 : not_bertrand n) -> Leq (B1 (times 2 n)) (theta (div (times 2 n) 3))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max'. For all natural numbers $__$, for all functions $__1$ from natural numbers $__1$ to booleans, for all natural numbers $__2$, $Nat$.",
    "output": "postulate max' : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus_plus_l. Let $x$ and $y$ and $h$ be natural numbers. Then the difference of the sum of $x$ and $h$ and the sum of $y$ and $h$ is equal to the difference of $x$ and $y$.",
    "output": "postulate minus_plus_plus_l : (x : Nat) -> (y : Nat) -> (h : Nat) -> Eq (minus (plus x h) (plus y h)) (minus x y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1545. Let $m$ and $n$ be natural numbers. Then if the greatest common divisor of $m$ and $n$ is equal to $0$, then if $0$ is divisible by $n$, then for all natural numbers $q1$, if $n$ is equal to the product of $0$ and $q1$, then if $0$ is divisible by $m$, then for all natural numbers $q2$, if $m$ is equal to the product of $0$ and $q2$, then $m$ is equal to $0$.",
    "output": "postulate let_clause_1545 : (m : Nat) -> (n : Nat) -> (H : Eq (gcd m n) 0) -> (_clearme : divisible 0 n) -> (q1 : Nat) -> (H1 : Eq n (times 0 q1)) -> (_clearme0 : divisible 0 m) -> (q2 : Nat) -> (H2 : Eq m (times 0 q2)) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_lt_O. Let $p$ be a natural number. Then if $p$ is prime, then $0$ is less than $p$.",
    "output": "postulate prime_to_lt_O : (p : Nat) -> (_ : prime p) -> Lt 0 p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_false_to_le_max. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $p$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$, for all functions $__1$ from natural numbers $m$ and elements $__1$ of $Lt$ of $p$ and $m$ to elements of $Eq$ of $f$ applied to $m$ and absurdity, $max$ applied to $n$ and $f$ is less than or equal to $p$.",
    "output": "postulate f_false_to_le_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (p : Nat) -> (_ : ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) -> (__1 : (m : Nat) -> (__1 : Lt p m) -> Eq (f m) false) -> Leq (max n f) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_O_to_eq_O. For all functions $h$ from natural numbers to natural numbers, for all elements $__$ of $permut$ of $h$ and $0$, $h$ applied to $0$ is equal to $0$.",
    "output": "postulate permut_O_to_eq_O : (h : (_ : Nat) -> Nat) -> (_ : permut h 0) -> Eq (h 0) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp3. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1740$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1741$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp3 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1740 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1741 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus_plus_plus_l. For all natural numbers $z$ and $x$ and $y$ and $h$, the difference of the sum of $z$ and the sum of $x$ and $h$ and the sum of $y$ and $h$ is equal to the difference of the sum of $z$ and $x$ and $y$.",
    "output": "postulate plus_minus_plus_plus_l : (z : Nat) -> (x : Nat) -> (y : Nat) -> (h : Nat) -> Eq (minus (plus z (plus x h)) (plus y h)) (minus (plus z x) y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type0. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1530$ of $Aop$ of $x1$ and $x2$ to sets, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1531$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1530 : Aop x1 x2) -> Set) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1531 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bool_to_nat_body. For all booleans $_b$, $Nat$.",
    "output": "postulate bool_to_nat_body : (_b : bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_73. Let $x$ and $y$ and $z$ and $x134$ and $x135$ and $x136$ be natural numbers. Then the sum of $x134$ and the sum of $x135$ and $x136$ is equal to the sum of $x135$ and the sum of $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (x : Nat) -> (y : Nat) -> (z : Nat) -> (x134 : Nat) -> (x135 : Nat) -> (x136 : Nat) -> Eq (plus x134 (plus x135 x136)) (plus x135 (plus x134 x136))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_nth_prime. Let $n$ be a natural number. Then $nth_prime$ applied to $n$ is prime.",
    "output": "postulate prime_nth_prime : (n : Nat) -> prime (nth_prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_minus_r. For all natural numbers $a$ and $b$ and $c$, if the sum of $a$ and $b$ is less than or equal to $c$, then $a$ is less than or equal to the difference of $c$ and $b$.",
    "output": "postulate le_plus_to_minus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Leq (plus a b) c) -> Leq a (minus c b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime. Let $__$ and $p$ be natural numbers. Then $Nat$.",
    "output": "postulate let_previous_prime : (_ : Nat) -> (p : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_divides_ord_rem. For all natural numbers $p$ and $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then $ord_rem$ applied to $n$ and $p$ is divisible by $ord_rem$ applied to $m$ and $p$.",
    "output": "postulate divides_to_divides_ord_rem : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> divisible (ord_rem n p) (ord_rem m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10334. Let $n$ be a natural number. Then if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10334 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primes_below_lop. Let $n$ be a natural number. Then $primes_below$ holds for $list_of_primes$ applied to $n$ and the sum of $n$ and $2$.",
    "output": "postulate primes_below_lop : (n : Nat) -> primes_below (list_of_primes n) (plus n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_exp_r. Let $b$ be a natural number. Then if $1$ is less than $b$, then $injective$ holds for $Nat$ and $Nat$ and the function that maps $i$ to the exponentiation of $b$ and $i$.",
    "output": "postulate injective_exp_r : (b : Nat) -> (_ : Lt 1 b) -> injective Nat Nat (\\ i : Nat -> pow b i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp2. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1482$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_851$ of $Lt$ of $x4$ and $x2$ and elements $x_850$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1483$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and $x_850$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and $x_850$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp2 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1482 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_851 : Lt x4 x2) -> (x_850 : Eq x1 (plus (times x3 x2) x4)) -> (_z1483 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_851 x_850)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_851 x_850)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_div. Let $m$ and $n$ and $q$ be natural numbers. Then if $0$ is less than $q$, then the sum of the quotient of $m$ and $q$ and the quotient of $n$ and $q$ is less than or equal to the quotient of the sum of $m$ and $n$ and $q$.",
    "output": "postulate le_plus_div : (m : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> Leq (plus (div m q) (div n q)) (div (plus m n) q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_plus_times. Let $m$ and $q$ and $r$ be natural numbers. Then if $r$ is less than $m$, then $mod$ applied to the sum of the product of $q$ and $m$ and $r$ and $m$ is equal to $r$.",
    "output": "postulate mod_plus_times : (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt r m) -> Eq (mod (plus (times q m) r) m) r"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_x_times_x. Let $x$ be a natural number. Then $x$ is less than or equal to the product of $x$ and $x$.",
    "output": "postulate le_x_times_x : (x : Nat) -> Leq x (times x x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt_to_lt_times_r. For all natural numbers $m$ and $n$, if the square root of $m$ is less than $n$, then $m$ is less than the product of $n$ and $n$.",
    "output": "postulate lt_sqrt_to_lt_times_r : (m : Nat) -> (n : Nat) -> (_ : Lt (sqrt m) n) -> Lt m (times n n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B_exp. For all natural numbers $n$, $B$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate le_B_exp : (n : Nat) -> Leq (B (times 2 n)) (pow 2 (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp4. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_875$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_875$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_875$.",
    "output": "postulate Aop_rect_CProp4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_875 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_875 : Aop A _nil) -> Q_ x_875"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_n_Sn. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $__$ of $bijn$ of $f$ and $n$, if $f$ applied to the sum of $n$ and $1$ is equal to the sum of $n$ and $1$, then $bijn$ holds for $f$ and the sum of $n$ and $1$.",
    "output": "postulate bijn_n_Sn : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : bijn f n) -> (__1 : Eq (f (plus n 1)) (plus n 1)) -> bijn f (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type4_body. For all sets $_A$, for all functions $Q_$ from elements $_x_917$ of $range$ of $_A$ to elements of $Type4$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_917$ of $range$ of $_A$, $Q_$ holds for $x_917$.",
    "output": "postulate range_rect_Type4_body : (_A : Set) -> (Q_ : (_x_917 : range _A) -> Type4) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_917 : range _A) -> Q_ x_917"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_minus_associative. For all natural numbers $x$ and $y$ and $z$, if $z$ is less than or equal to $y$, then if $y$ is less than or equal to $x$, then the difference of $x$ and the difference of $y$ and $z$ is equal to the sum of the difference of $x$ and $y$ and $z$.",
    "output": "postulate minus_minus_associative : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq z y) -> (__1 : Leq y x) -> Eq (minus x (minus y z)) (plus (minus x y) z)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ab_times_cd. For all natural numbers $a$ and $b$ and $c$ and $d$, the product of the product of $a$ and $b$ and the product of $c$ and $d$ is equal to the product of the product of $a$ and $c$ and the product of $b$ and $d$.",
    "output": "postulate ab_times_cd : (a : Nat) -> (b : Nat) -> (c : Nat) -> (d : Nat) -> Eq (times (times a b) (times c d)) (times (times a c) (times b d))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate mod : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_ind_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_943$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_943$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_943$.",
    "output": "postulate Dop_ind_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_943 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_943 : Dop A _nil) -> Q_ x_943"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distributive_times_plus. $distributive$ holds for $Nat$ and $times$ and $plus$.",
    "output": "postulate distributive_times_plus : distributive Nat times plus"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_n_1. For all natural numbers $n$, $n$ is equal to the product of $n$ and $1$.",
    "output": "postulate times_n_1 : (n : Nat) -> Eq n (times n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_mod_gcd. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then the greatest common divisor of $n$ and $mod$ applied to $m$ and $n$ is divisible by the greatest common divisor of $m$ and $n$.",
    "output": "postulate divides_mod_gcd : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> divisible (gcd n (mod m n)) (gcd m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp1. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_965$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_965$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_965$.",
    "output": "postulate Dop_rect_CProp1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_965 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_965 : Dop A _nil) -> Q_ x_965"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp3. For all sets $_A$, for all functions $Q_$ from elements $_x_933$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_933$ of $range$ of $_A$, $Q_$ holds for $x_933$.",
    "output": "postulate range_rect_CProp3 : (_A : Set) -> (Q_ : (_x_933 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_933 : range _A) -> Q_ x_933"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_minus. For all natural numbers $n$ and $m$ and $p$, if $n$ is less than or equal to the sum of $p$ and $m$, then the difference of $n$ and $m$ is less than or equal to $p$.",
    "output": "postulate le_plus_to_minus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq n (plus p m)) -> Leq (minus n m) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_ind. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z653$ to propositions, for all functions $_H1$ from elements $_z654$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_366$ and functions $_x_368$ from elements $_z654$ of $Eq$ of $Hterm$ and $x_366$ to elements of $P$ of $x_366$ and elements $_z654$ of $Eq$ of $Hterm$ and the sum of $x_366$ and $1$ to elements of $P$ of the sum of $x_366$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_ind : (Hterm : Nat) -> (P : (_z653 : Nat) -> Prop) -> (_H1 : (_z654 : Eq Hterm 0) -> P 0) -> (_H2 : (x_366 : Nat) -> (_x_368 : (_z654 : Eq Hterm x_366) -> P x_366) -> (_z654 : Eq Hterm (plus x_366 1)) -> P (plus x_366 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example2. $smallest_factor (4)= 2$.",
    "output": "postulate example2 : Eq (smallest_factor 4) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dpi1__o__aop__o__op. Let $x0$ be a set. Then for all elements $x1$ of $x0$, for all functions $x2$ from elements of $ACop$ of $x0$ and $x1$ to sets, for all elements $x3$ of $DPair$ of $ACop$ applied to $x0$ and $x1$ and $x2$, for all elements $_x_887$ and $_x_888$ of $x0$, $x0$.",
    "output": "postulate dpi1__o__aop__o__op : (x0 : Set) -> (x1 : x0) -> (x2 : (_ : ACop x0 x1) -> Set) -> (x3 : DPair (ACop x0 x1) x2) -> (_x_887 : x0) -> (_x_888 : x0) -> x0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_plus_to_le. Let $n$ and $m$ and $p$ be natural numbers. Then if $n$ is equal to the sum of $m$ and $p$, then $m$ is less than or equal to $n$.",
    "output": "postulate eq_plus_to_le : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Eq n (plus m p)) -> Leq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_M. For all natural numbers $m$, if $0$ is less than $m$, then $M$ applied to $m$ is less than the exponentiation of $2$ and the product of $2$ and $m$.",
    "output": "postulate lt_M : (m : Nat) -> (_ : Lt 0 m) -> Lt (M m) (pow 2 (times 2 m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_body. For all natural numbers $__$, $Nat$.",
    "output": "postulate fact_body : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Theta_pred. For all natural numbers $n$, if $1$ is less than $n$, then $theta$ applied to the product of $2$ and $n$ is equal to $theta$ applied to $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate theta_pred : (n : Nat) -> (_ : Lt 1 n) -> Eq (theta (times 2 n)) (theta (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_n_mod_n. For all natural numbers $n$ and $p$, if $0$ is less than $p$, then $congruent$ holds for $n$ and $mod$ applied to $n$ and $p$ and $p$.",
    "output": "postulate congruent_n_mod_n : (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> congruent n (mod n p) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp2. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_963$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_963$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_963$.",
    "output": "postulate Dop_rect_CProp2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_963 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_963 : Dop A _nil) -> Q_ x_963"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker_abl. Let $a$ and $b$ be natural numbers. Then for all lists $l$ of natural numbers, if $checker$ applied to $cons$ applied to $Nat$ and $a$ and $cons$ applied to $Nat$ and $b$ and $l$ is equal to $true$, then $a$ is less than $b$, $b$ is less than or equal to the product of $2$ and $a$ and $checker$ applied to $cons$ applied to $Nat$ and $b$ and $l$ is equal to $true$.",
    "output": "postulate checker_abl : (a : Nat) -> (b : Nat) -> (l : list Nat) -> (_ : Eq (checker (cons Nat a (cons Nat b l))) true) -> and (and (Lt a b) (Leq b (times 2 a))) (Eq (checker (cons Nat b l)) true)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_spec_ind. For all natural numbers $_n$ and $_b$, for all functions $_f$ from natural numbers to booleans, for all functions $Q_$ from natural numbers $x_1075$ and elements $_x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$ to propositions, for all functions $_H_found_min_spec$ from natural numbers $m$ and elements $x_1080$ of $Leq$ of $_b$ and $m$ and elements $x_1079$ of $Lt$ of $m$ and the sum of $_n$ and $_b$ and elements $x_1078$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $x_1077$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $m$ and $found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $m$ and $x_1080$ and $x_1079$ and $x_1078$ and $x_1077$, for all functions $_H_not_found_min_spec$ from functions $x_1081$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $_n$ and $_b$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of the sum of $_n$ and $_b$ and $not_found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $x_1081$, for all natural numbers $x_1075$, for all elements $x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$, $Q_$ holds for $x_1075$ and $x_1076$.",
    "output": "postulate min_spec_ind : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (Q_ : (x_1075 : Nat) -> (_x_1076 : min_spec _n _b _f x_1075) -> Prop) -> (_H_found_min_spec : (m : Nat) -> (x_1080 : Leq _b m) -> (x_1079 : Lt m (plus _n _b)) -> (x_1078 : Eq (_f m) true) -> (x_1077 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i m) -> Eq (_f i) false) -> Q_ m (found_min_spec _n _b _f m x_1080 x_1079 x_1078 x_1077)) -> (_H_not_found_min_spec : (x_1081 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i (plus _n _b)) -> Eq (_f i) false) -> Q_ (plus _n _b) (not_found_min_spec _n _b _f x_1081)) -> (x_1075 : Nat) -> (x_1076 : min_spec _n _b _f x_1075) -> Q_ x_1075 x_1076"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type0. For all sets $_A$, for all functions $Q_$ from elements $_x_927$ of $range$ of $_A$ to sets, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_927$ of $range$ of $_A$, $Q_$ holds for $x_927$.",
    "output": "postulate range_rect_Type0 : (_A : Set) -> (Q_ : (_x_927 : range _A) -> Set) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_927 : range _A) -> Q_ x_927"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_sigma_l. For all natural numbers $n$ and $a$, for all functions $p$ from natural numbers to booleans, for all functions $f$ from natural numbers to natural numbers, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $a$ and $f$ applied to $i$ is equal to the exponentiation of $a$ and $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate exp_sigma_l : (n : Nat) -> (a : Nat) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> Nat) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> pow a (f i))) (pow a (bigop n (\\ i : Nat -> p i) Nat 0 plus (\\ i : Nat -> f i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp5. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_905$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_905$.",
    "output": "postulate ACop_rect_CProp5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_905 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_905 : ACop A _nil) -> Q_ x_905"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1531. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $n$ is divisible by $m$, then for all natural numbers $d$, if $m$ is equal to the product of $n$ and $0$, then $m$ is equal to $0$.",
    "output": "postulate let_clause_1531 : (n : Nat) -> (m : Nat) -> (posm : Lt 0 m) -> (_clearme : divisible n m) -> (d : Nat) -> (eqm : Eq m (times n 0)) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_n_n. For all natural numbers $n$, $n$ is divisible by $n$.",
    "output": "postulate divides_n_n : (n : Nat) -> divisible n n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primeb. For all natural numbers $_n$, $bool$.",
    "output": "postulate primeb : (_n : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_true_to_eq. For all natural numbers $n$ and $m$, if $eqb$ applied to $n$ and $m$ is equal to $true$, then $n$ is equal to $m$.",
    "output": "postulate eqb_true_to_eq : (n : Nat) -> (m : Nat) -> (_ : Eq (eqb n m) true) -> Eq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_range. For all sets $A$, for all functions $_enum$ from natural numbers to elements of $A$, for all natural numbers $_upto$, for all functions $_filter$ from natural numbers to booleans, $range$ holds for $A$.",
    "output": "postulate mk_range : (A : Set) -> (_enum : (_ : Nat) -> A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> range A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp2. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1548$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1549$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp2 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1548 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1549 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_gcd. Let $m$ and $n$ be natural numbers. Then $ex$ holds for $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and the greatest common divisor of $n$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and the greatest common divisor of $n$ and $m$.",
    "output": "postulate eq_minus_gcd : (m : Nat) -> (n : Nat) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd n m)) (Eq (minus (times b m) (times a n)) (gcd n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_theta. Let $n$ be a natural number. Then $0$ is less than $theta$ applied to $n$.",
    "output": "postulate lt_O_theta : (n : Nat) -> Lt 0 (theta n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_squareS_exp. For all natural numbers $n$, if $5$ is less than $n$, then the exponentiation of the sum of $n$ and $1$ and $2$ is less than or equal to the exponentiation of $2$ and $n$.",
    "output": "postulate le_squareS_exp : (n : Nat) -> (_ : Lt 5 n) -> Leq (pow (plus n 1) 2) (pow 2 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_inv_plus_l. Let $x$ and $y$ and $z$ be natural numbers. Then if the sum of $x$ and $y$ is less than or equal to $z$, then $x$ is less than or equal to the difference of $z$ and $y$ and $y$ is less than or equal to $z$.",
    "output": "postulate le_inv_plus_l : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq (plus x y) z) -> and (Leq x (minus z y)) (Leq y z)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example12. $nth_prime (3)= 7$.",
    "output": "postulate example12 : Eq (nth_prime 3) 7"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_transpose. Let $i$ and $j$ and $n$ be natural numbers. Then $transpose$ applied to $i$ and $j$ and $transpose$ applied to $i$ and $j$ and $n$ is equal to $n$.",
    "output": "postulate transpose_transpose : (i : Nat) -> (j : Nat) -> (n : Nat) -> Eq (transpose i j (transpose i j n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ltransitive. For all sets $B$, $predicate$ holds for $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $relation$ applied to $B$.",
    "output": "postulate ltransitive : (B : Set) -> predicate (prod Set Set Nat (\\ _ : Nat -> relation B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_fact2. For all natural numbers $n$, if $0$ is less than $n$, then the product of the exponentiation of $2$ and the product of $2$ and $n$ and the exponentiation of the factorial of $n$ and $2$ is less than or equal to the product of the product of $2$ and $n$ and the factorial of the product of $2$ and $n$.",
    "output": "postulate exp_to_fact2 : (n : Nat) -> (_ : Lt 0 n) -> Leq (times (pow 2 (times 2 n)) (pow (factorial n) 2)) (times (times 2 n) (factorial (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_pi_p3. For all natural numbers $n$, the factorial of the product of $2$ and $n$ is equal to the product of $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and $mod$ applied to the quotient of the product of $2$ and $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate fact_pi_p3 : (n : Nat) -> Eq (factorial (times 2 n)) (times (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1))))))) (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (mod (div (times 2 n) (pow p (plus i 1))) 2)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_73. For all natural numbers $x$ and $y$ and $z$ and $x134$ and $x135$ and $x136$, the sum of $x134$ and the sum of $x135$ and $x136$ is equal to the sum of $x135$ and the sum of $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (x : Nat) -> (y : Nat) -> (z : Nat) -> (x134 : Nat) -> (x135 : Nat) -> (x136 : Nat) -> Eq (plus x134 (plus x135 x136)) (plus x135 (plus x134 x136))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $_nil$ be an element of $A$. Then $Dop$ applied to $A$ and $_nil$ is a set.",
    "output": "postulate Dop : (A : Set) -> (_nil : A) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp2_body. For all functions $Q_$ from natural numbers $_x_405$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_406$ and elements $_x_408$ of $Q_$ of $x_406$ to elements of $Q_$ of the sum of $x_406$ and $1$, for all natural numbers $x_405$, $Q_$ holds for $x_405$.",
    "output": "postulate nat_rect_CProp2_body : (Q_ : (_x_405 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_406 : Nat) -> (_x_408 : Q_ x_406) -> Q_ (plus x_406 1)) -> (x_405 : Nat) -> Q_ x_405"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_lop. Let $n$ be a natural number. Then if $1$ is less than or equal to $n$, then $list_of_primes$ applied to $n$ is equal to $cons$ applied to $Nat$ and $2$ and $tail$ applied to $Nat$ and $list_of_primes$ applied to $n$.",
    "output": "postulate eq_lop : (n : Nat) -> (_ : Leq 1 n) -> Eq (list_of_primes n) (cons Nat 2 (tail Nat (list_of_primes n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $_nil$ be an element of $A$. Then $ACop$ applied to $A$ and $_nil$ is a set.",
    "output": "postulate ACop : (A : Set) -> (_nil : A) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_to_exp1. For all natural numbers $n$, if $0$ is less than $n$, then the factorial of the product of $2$ and $n$ is less than or equal to the product of the product of the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$ and the factorial of $n$ and the factorial of $n$.",
    "output": "postulate fact_to_exp1 : (n : Nat) -> (_ : Lt 0 n) -> Leq (factorial (times 2 n)) (times (times (pow 2 (pred (times 2 n))) (factorial n)) (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_leb_true. Let $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $m$, then $leb$ applied to $n$ and $m$ is equal to $true$.",
    "output": "postulate le_to_leb_true : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Eq (leb n m) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_Aop. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Aop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $case_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $return_type$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $z$ of $Aop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate match_Aop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Aop A _nil) -> return_sort) -> (case_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> return_type (mk_Aop A _nil op _nill _nilr _assoc)) -> (z : Aop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_commute. Let $n$ and $m$ be natural numbers. Then for all functions $p11$ from natural numbers to booleans, for all functions $p12$ from natural numbers and natural numbers $__1$ to booleans, for all functions $p21$ from natural numbers to booleans, for all functions $p22$ from natural numbers and natural numbers $__1$ to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f$ from natural numbers and natural numbers $__1$ to elements of $B$, if $0$ is less than $n$, then if $0$ is less than $m$, then for all functions $__2$ from natural numbers $i$ and natural numbers $j$ and elements $__2$ of $Lt$ of $i$ and $n$ and elements $__3$ of $Lt$ of $j$ and $m$ to elements of $Eq$ of $andb$ applied to $p11$ applied to $i$ and $p12$ applied to $i$ and $j$ and $andb$ applied to $p21$ applied to $j$ and $p22$ applied to $i$ and $j$, $bigop$ applied to $n$ and the function that maps $i$ to $p11$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $bigop$ applied to $m$ and the function that maps $j$ to $p12$ applied to $i$ and $j$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $j$ to $f$ applied to $i$ and $j$ is equal to $bigop$ applied to $m$ and the function that maps $j$ to $p21$ applied to $j$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $j$ to $bigop$ applied to $n$ and the function that maps $i$ to $p22$ applied to $i$ and $j$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $j$.",
    "output": "postulate bigop_commute : (n : Nat) -> (m : Nat) -> (p11 : (_ : Nat) -> bool) -> (p12 : (_ : Nat) -> (__1 : Nat) -> bool) -> (p21 : (_ : Nat) -> bool) -> (p22 : (_ : Nat) -> (__1 : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f : (_ : Nat) -> (__1 : Nat) -> B) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : (i : Nat) -> (j : Nat) -> (__2 : Lt i n) -> (__3 : Lt j m) -> Eq (andb (p11 i) (p12 i j)) (andb (p21 j) (p22 i j))) -> Eq (bigop n (\\ i : Nat -> p11 i) B nil (aop__o__op B nil op) (\\ i : Nat -> bigop m (\\ j : Nat -> p12 i j) B nil (aop__o__op B nil op) (\\ j : Nat -> f i j))) (bigop m (\\ j : Nat -> p21 j) B nil (aop__o__op B nil op) (\\ j : Nat -> bigop n (\\ i : Nat -> p22 i j) B nil (aop__o__op B nil op) (\\ i : Nat -> f i j)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_plus_r. For all natural numbers $n$, $monotonic$ holds for $Nat$ and $Leq$ and the function that maps $m$ to the sum of $n$ and $m$.",
    "output": "postulate monotonic_le_plus_r : (n : Nat) -> monotonic Nat Leq (\\ m : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_div. For all natural numbers $n$ and $m$ and $d$, if $0$ is less than $d$, then if $d$ is divisible by $n$, then if $d$ is divisible by $m$, then the quotient of the sum of $n$ and $m$ and $d$ is equal to the sum of the quotient of $n$ and $d$ and the quotient of $m$ and $d$.",
    "output": "postulate plus_div : (n : Nat) -> (m : Nat) -> (d : Nat) -> (_ : Lt 0 d) -> (__1 : divisible d n) -> (__2 : divisible d m) -> Eq (div (plus n m) d) (plus (div n d) (div m d))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_transpose. For all natural numbers $i$ and $j$, $injective$ holds for $Nat$ and $Nat$ and $transpose$ applied to $i$ and $j$.",
    "output": "postulate injective_transpose : (i : Nat) -> (j : Nat) -> injective Nat Nat (transpose i j)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_pi_p. Let $n$ be a natural number. Then the factorial of $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$.",
    "output": "postulate fact_pi_p : (n : Nat) -> Eq (factorial n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (div n (pow p (plus i 1))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1034. Let $n$ and $m$ and $q$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of $mod$ applied to $x2515$ and $x2516$ and the product of $x2516$ and the quotient of $x2515$ and $x2516$.",
    "output": "postulate let_clause_1034 : (n : Nat) -> (m : Nat) -> (q : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (mod x2515 x2516) (times x2516 (div x2515 x2516)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Antisymmetric_divides. For all natural numbers $n$ and $m$, if $n$ is divisible by $m$, then if $m$ is divisible by $n$, then $n$ is equal to $m$.",
    "output": "postulate antisymmetric_divides : (n : Nat) -> (m : Nat) -> (_ : divisible n m) -> (__1 : divisible m n) -> Eq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sigma. For all natural numbers $n$, for all functions $p1$ and $p2$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$, for all functions $__1$ from natural numbers $i$ and elements $__1$ of $Lt$ of $i$ and $n$ and elements $__2$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, $bigop$ applied to $n$ and the function that maps $i$ to $p1$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g1$ applied to $i$ is less than or equal to $bigop$ applied to $n$ and the function that maps $i$ to $p2$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g2$ applied to $i$.",
    "output": "postulate le_sigma : (n : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (__1 : (i : Nat) -> (__1 : Lt i n) -> (__2 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n (\\ i : Nat -> p1 i) Nat 0 plus (\\ i : Nat -> g1 i)) (bigop n (\\ i : Nat -> p2 i) Nat 0 plus (\\ i : Nat -> g2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_transpose. For all natural numbers $n$ and $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then $bijn$ holds for $transpose$ applied to $i$ and $j$ and $n$.",
    "output": "postulate bijn_transpose : (n : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i n) -> (__1 : Leq j n) -> bijn (transpose i j) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ \\in N$. Then we can say that $not_zero$ holds for $__$.",
    "output": "postulate not_zero : (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Square_double. Let $n$ be a natural number. Then if $2$ is less than $n$, then the product of the sum of $n$ and $1$ and the sum of $n$ and $1$ is less than or equal to the product of the product of $2$ and $n$ and $n$.",
    "output": "postulate square_double : (n : Nat) -> (_ : Lt 2 n) -> Leq (times (plus n 1) (plus n 1)) (times (times 2 n) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_O_S. For all natural numbers $n$, $0$ is not equal to the sum of $n$ and $1$.",
    "output": "postulate not_eq_O_S : (n : Nat) -> not (Eq 0 (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type0_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_873$ of $Aop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_873$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_873$.",
    "output": "postulate Aop_rect_Type0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_873 : Aop A _nil) -> Set) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_873 : Aop A _nil) -> Q_ x_873"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_or_lt_eq. Let $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $m$, then $n$ is less than $m$ or $n$ is equal to $m$.",
    "output": "postulate le_to_or_lt_eq : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> or (Lt n m) (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_A$ be a set. Then $range (_A)$ is a set.",
    "output": "postulate range : (_A : Set) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_minus. For all natural numbers $n$ and $m$ and $p$, if $p$ is less than or equal to $m$, then if $m$ is less than or equal to $n$, then the sum of $p$ and the difference of $n$ and $m$ is equal to the difference of $n$ and the difference of $m$ and $p$.",
    "output": "postulate minus_minus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq p m) -> (__1 : Leq m n) -> Eq (plus p (minus n m)) (minus n (minus m p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp1_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_855$ of $Lt$ of $_r$ and $_m$ and elements $x_854$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_855$ and $x_854$, for all elements $x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_853$.",
    "output": "postulate div_mod_spec_rect_CProp1_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_853 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_855 : Lt _r _m) -> (x_854 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_855 x_854)) -> (x_853 : div_mod_spec _n _m _q _r) -> Q_ x_853"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_p_ord_q_O. Let $p$ and $n$ and $q$ be natural numbers. Then if $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $0$, then $n$ is equal to $0$ and $q$ is equal to $0$.",
    "output": "postulate eq_p_ord_q_O : (p : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Eq (p_ord n p) (mk_Prod Nat Nat q 0)) -> and (Eq n 0) (Eq q 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp4. For all functions $Q_$ from natural numbers $_x_393$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_394$ and elements $_x_396$ of $Q_$ of $x_394$ to elements of $Q_$ of the sum of $x_394$ and $1$, for all natural numbers $x_393$, $Q_$ holds for $x_393$.",
    "output": "postulate nat_rect_CProp4 : (Q_ : (_x_393 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_394 : Nat) -> (_x_396 : Q_ x_394) -> Q_ (plus x_394 1)) -> (x_393 : Nat) -> Q_ x_393"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type1_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_829$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type1$, for all functions $_H_div_mod_spec_intro$ from elements $x_831$ of $Lt$ of $_r$ and $_m$ and elements $x_830$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_831$ and $x_830$, for all elements $x_829$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_829$.",
    "output": "postulate div_mod_spec_rect_Type1_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_829 : div_mod_spec _n _m _q _r) -> Type1) -> (_H_div_mod_spec_intro : (x_831 : Lt _r _m) -> (x_830 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_831 x_830)) -> (x_829 : div_mod_spec _n _m _q _r) -> Q_ x_829"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log_S. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then the logarithm of $p$ and $n$ is less than or equal to the logarithm of $p$ and the sum of $n$ and $1$.",
    "output": "postulate le_log_S : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Leq (log p n) (log p (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp3_body. Let $Q_$ be a function from natural numbers $_x_401$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_402$ and elements $_x_404$ of $Q_$ of $x_402$ to elements of $Q_$ of the sum of $x_402$ and $1$, for all natural numbers $x_401$, $Q_$ holds for $x_401$.",
    "output": "postulate nat_rect_CProp3_body : (Q_ : (_x_401 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_402 : Nat) -> (_x_404 : Q_ x_402) -> Q_ (plus x_402 1)) -> (x_401 : Nat) -> Q_ x_401"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_S. For all natural numbers $n$ and $m$, if $n$ is not equal to $m$, then the sum of $n$ and $1$ is not equal to the sum of $m$ and $1$.",
    "output": "postulate not_eq_S : (n : Nat) -> (m : Nat) -> (_ : not (Eq n m)) -> not (Eq (plus n 1) (plus m 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_pi_p_M. Let $m$ be a natural number. Then $bigop$ applied to the sum of the product of $2$ and $m$ and $2$ and the function that maps $p$ to $andb$ applied to $leb$ applied to the sum of $m$ and $2$ and $p$ and $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$ is divisible by $M$ applied to $m$.",
    "output": "postulate divides_pi_p_M : (m : Nat) -> divisible (bigop (plus (times 2 m) 2) (\\ p : Nat -> andb (leb (plus m 2) p) (primeb p)) Nat 1 times (\\ p : Nat -> p)) (M m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1560. For all natural numbers $n$ and $m$, if $n$ is divisible by $m$, then if $0$ is equal to $n$, then for all natural numbers $d$, if $m$ is equal to the product of $0$ and $d$, then $n$ is equal to $0$.",
    "output": "postulate let_clause_1560 : (n : Nat) -> (m : Nat) -> (divnm : divisible n m) -> (H : Eq 0 n) -> (d : Nat) -> (auto : Eq m (times 0 d)) -> Eq n 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp4. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_929$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_929$ of $range$ of $_A$, $Q_$ holds for $x_929$.",
    "output": "postulate range_rect_CProp4 : (_A : Set) -> (Q_ : (_x_929 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_929 : range _A) -> Q_ x_929"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_theta_theta. For all natural numbers $m$, the quotient of $theta$ applied to the sum of the product of $2$ and $m$ and $1$ and $theta$ applied to the sum of $m$ and $1$ is equal to $bigop$ applied to the sum of the product of $2$ and $m$ and $2$ and the function that maps $p$ to $andb$ applied to $leb$ applied to the sum of $m$ and $2$ and $p$ and $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$.",
    "output": "postulate div_theta_theta : (m : Nat) -> Eq (div (theta (plus (times 2 m) 1)) (theta (plus m 1))) (bigop (plus (times 2 m) 2) (\\ p : Nat -> andb (leb (plus m 2) p) (primeb p)) Nat 1 times (\\ p : Nat -> p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type4_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_917$ of $range$ of $_A$ to elements of $Type4$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_917$ of $range$ of $_A$, $Q_$ holds for $x_917$.",
    "output": "postulate range_rect_Type4_body : (_A : Set) -> (Q_ : (_x_917 : range _A) -> Type4) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_917 : range _A) -> Q_ x_917"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_range. Let $_A$ be a set. Then for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $range$ of $_A$ to elements of $return_sort$, for all functions $case_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $return_type$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $z$ of $range$ of $_A$, $return_type$ holds for $z$.",
    "output": "postulate match_range : (_A : Set) -> (return_sort : Sort) -> (return_type : (z : range _A) -> return_sort) -> (case_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> return_type (mk_range _A _enum _upto _filter)) -> (z : range _A) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus_plus_plus_l. Let $z$ and $x$ and $y$ and $h$ be natural numbers. Then the difference of the sum of $z$ and the sum of $x$ and $h$ and the sum of $y$ and $h$ is equal to the difference of the sum of $z$ and $x$ and $y$.",
    "output": "postulate plus_minus_plus_plus_l : (z : Nat) -> (x : Nat) -> (y : Nat) -> (h : Nat) -> Eq (minus (plus z (plus x h)) (plus y h)) (minus (plus z x) y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_O_to_not_divides. For all natural numbers $n$ and $i$ and $r$, if $0$ is less than $n$, then if $p_ord$ applied to $n$ and $nth_prime$ applied to $i$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $0$ and $r$, then $nth_prime$ applied to $i$ is not divisible by $n$.",
    "output": "postulate p_ord_O_to_not_divides : (n : Nat) -> (i : Nat) -> (r : Nat) -> (_ : Lt 0 n) -> (__1 : Eq (p_ord n (nth_prime i)) (mk_Prod Nat Nat 0 r)) -> not (divisible (nth_prime i) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nth_prime. For all natural numbers $__$, $Nat$.",
    "output": "postulate nth_prime : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a function from natural numbers to natural numbers. Let $__1$ be a natural number. Then we can say that $injn$ holds for $__$ and $__1$.",
    "output": "postulate injn : (_ : (_ : Nat) -> Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_k. Let $n$ and $p$ be natural numbers. Then $k$ applied to $n$ and $p$ is less than or equal to the logarithm of $p$ and $n$.",
    "output": "postulate le_k : (n : Nat) -> (p : Nat) -> Leq (k n p) (log p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus_plus_l. For all natural numbers $x$ and $y$ and $h$, the difference of the sum of $x$ and $h$ and the sum of $y$ and $h$ is equal to the difference of $x$ and $y$.",
    "output": "postulate minus_plus_plus_l : (x : Nat) -> (y : Nat) -> (h : Nat) -> Eq (minus (plus x h) (plus y h)) (minus x y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_body. For all natural numbers $__$ and $__1$ and $__2$, $Prod$ holds for $Nat$ and $Nat$.",
    "output": "postulate p_ord_aux_body : (_ : Nat) -> (__1 : Nat) -> (__2 : Nat) -> Prod Nat Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type4. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_891$ of $ACop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_891$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_891$.",
    "output": "postulate ACop_rect_Type4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_891 : ACop A _nil) -> Type4) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_891 : ACop A _nil) -> Q_ x_891"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Or_div_mod. Let $n$ and $q$ be natural numbers. Then if $0$ is less than $q$, then the sum of $mod$ applied to $n$ and $q$ and $1$ is equal to $q$ and the sum of $n$ and $1$ is equal to the product of the sum of the quotient of $n$ and $q$ and $1$ and $q$ or the sum of $mod$ applied to $n$ and $q$ and $1$ is less than $q$ and the sum of $n$ and $1$ is equal to the sum of the product of the quotient of $n$ and $q$ and $q$ and the sum of $mod$ applied to $n$ and $q$ and $1$.",
    "output": "postulate or_div_mod : (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> or (and (Eq (plus (mod n q) 1) q) (Eq (plus n 1) (times (plus (div n q) 1) q))) (and (Lt (plus (mod n q) 1) q) (Eq (plus n 1) (plus (times (div n q) q) (plus (mod n q) 1))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_1. $Psi$ applied to $1$ is equal to $1$.",
    "output": "postulate Psi_1 : Eq (Psi 1) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime6. Let $n$ and $m$ be natural numbers. Then if $nth_prime$ applied to $n$ is less than $m$, then for all natural numbers $x$, $Nat$.",
    "output": "postulate let_previous_prime6 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp5_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_877$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_877$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_877$.",
    "output": "postulate Aop_rect_CProp5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_877 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_877 : Aop A _nil) -> Q_ x_877"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_primr. Let $n$ be a natural number. Then the exponentiation of $n$ and $prim$ applied to $n$ is less than or equal to the exponentiation of $2$ and the product of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_exp_primr : (n : Nat) -> Leq (pow n (prim n)) (pow 2 (times 2 (minus (times 2 n) 3)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Theta. Let $__$ be a natural number. Then $Nat$.",
    "output": "postulate theta : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Found_min_spec. For all natural numbers $n$ and $b$, for all functions $f$ from natural numbers to booleans, for all natural numbers $m$, if $b$ is less than or equal to $m$, then if $m$ is less than the sum of $n$ and $b$, then if $f$ applied to $m$ is equal to $true$, then for all functions $__3$ from natural numbers $i$ and elements $__3$ of $Leq$ of $b$ and $i$ and elements $__4$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $min_spec$ holds for $n$ and $b$ and $f$ and $m$.",
    "output": "postulate found_min_spec : (n : Nat) -> (b : Nat) -> (f : (_ : Nat) -> bool) -> (m : Nat) -> (_ : Leq b m) -> (__1 : Lt m (plus n b)) -> (__2 : Eq (f m) true) -> (__3 : (i : Nat) -> (__3 : Leq b i) -> (__4 : Lt i m) -> Eq (f i) false) -> min_spec n b f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16171. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to $1$, then the greatest common divisor of $p$ and $m$ is equal to the difference of the product of $m$ and $b$ and the product of $p$ and $a$.",
    "output": "postulate let_clause_16171 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times b m) (times a p)) (gcd p m)) -> (H0 : Eq (minus (times b m) (times a p)) 1) -> Eq (gcd p m) (minus (times m b) (times p a))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_false_to_not_le. Let $n$ and $m$ be natural numbers. Then if $leb$ applied to $n$ and $m$ is equal to absurdity, then $n$ is not less than or equal to $m$.",
    "output": "postulate leb_false_to_not_le : (n : Nat) -> (m : Nat) -> (_ : Eq (leb n m) false) -> not (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_false. Let $p$ and $n$ and $m$ and $a$ be natural numbers. Then if $mod$ applied to $n$ and $m$ is equal to the sum of $a$ and $1$, then $p_ord_aux$ applied to $p$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $0$ and $n$.",
    "output": "postulate p_ord_aux_false : (p : Nat) -> (n : Nat) -> (m : Nat) -> (a : Nat) -> (_ : Eq (mod n m) (plus a 1)) -> Eq (p_ord_aux p n m) (mk_Prod Nat Nat 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp3. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1608$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1609$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp3 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1608 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1609 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_lstar_r. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $lstar_r$ holds for $B$ and $R$ and $l$ and $b1$ and $b2$.",
    "output": "postulate lstar_lstar_r : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R l b1 b2) -> lstar_r B R l b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_SO_smallest_factor. Let $n$ be a natural number. Then if $1$ is less than $n$, then $1$ is less than $smallest_factor$ applied to $n$.",
    "output": "postulate lt_SO_smallest_factor : (n : Nat) -> (_ : Lt 1 n) -> Lt 1 (smallest_factor n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp0_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_939$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_939$ of $range$ of $_A$, $Q_$ holds for $x_939$.",
    "output": "postulate range_rect_CProp0_body : (_A : Set) -> (Q_ : (_x_939 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_939 : range _A) -> Q_ x_939"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_bertrand_to_le2. Let $n$ be a natural number. Then if the exponentiation of $2$ and $7$ is less than or equal to $n$, then for all elements $__1$ of $not_bertrand$ of $n$, the quotient of the product of $2$ and $n$ and $3$ is less than or equal to the product of the quotient of the square root of the product of $2$ and $n$ and $2$ and the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$.",
    "output": "postulate not_bertrand_to_le2 : (n : Nat) -> (_ : Leq (pow 2 7) n) -> (__1 : not_bertrand n) -> Leq (div (times 2 n) 3) (times (div (sqrt (times 2 n)) 2) (plus (log 2 (times 2 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bdef. Let $n$ be a natural number. Then $B$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and $mod$ applied to the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate Bdef : (n : Nat) -> Eq (B n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (mod (div n (pow p (plus i 1))) 2))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_theta. Let $m$ be a natural number. Then $theta$ applied to $m$ is less than or equal to the exponentiation of $2$ and the product of $2$ and $m$.",
    "output": "postulate le_theta : (m : Nat) -> Leq (theta m) (pow 2 (times 2 m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "S_pred. For all natural numbers $n$, if $0$ is less than $n$, then the sum of $pred$ applied to $n$ and $1$ is equal to $n$.",
    "output": "postulate S_pred : (n : Nat) -> (_ : Lt 0 n) -> Eq (plus (pred n) 1) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_to_bijn. For all natural numbers $n$, for all functions $f$ from natural numbers to natural numbers, for all elements $__$ of $permut$ of $f$ and $n$, $bijn$ holds for $f$ and $n$.",
    "output": "postulate permut_to_bijn : (n : Nat) -> (f : (_ : Nat) -> Nat) -> (_ : permut f n) -> bijn f n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1569. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the difference of the product of $n$ and $c$ and the product of $m$ and $d$ is equal to $1$.",
    "output": "postulate let_clause_1569 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (minus (times n c) (times m d)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "To_max. Let $i$ and $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $i$, then if $m$ is less than or equal to $i$, then $max$ applied to $n$ and $m$ is less than or equal to $i$.",
    "output": "postulate to_max : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq n i) -> (__1 : Leq m i) -> Leq (max n m) i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp2. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1548$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1549$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp2 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1548 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1549 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_Aop. For all sets $A$, for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Aop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $Aop$ of $A$ and $_nil$ to elements of $return_type$ of $z$, for all elements $z$ of $Aop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate filter_Aop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Aop A _nil) -> return_sort) -> (return : (z : Aop A _nil) -> return_type z) -> (z : Aop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_theta_M_theta. Let $m$ be a natural number. Then $theta$ applied to the sum of the product of $2$ and $m$ and $1$ is less than or equal to the product of $M$ applied to $m$ and $theta$ applied to the sum of $m$ and $1$.",
    "output": "postulate le_theta_M_theta : (m : Nat) -> Leq (theta (plus (times 2 m) 1)) (times (M m) (theta (plus m 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_Sfalse. Let $k$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $p$ applied to $k$ is equal to absurdity, then $bigop$ applied to the sum of $k$ and $1$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_Sfalse : (k : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Eq (p k) false) -> Eq (bigop (plus k 1) (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type1. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1590$ of $ACop$ of $x1$ and $x2$ to elements of $Type1$, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1591$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type1 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1590 : ACop x1 x2) -> Type1) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1591 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp4. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_957$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_957$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_957$.",
    "output": "postulate Dop_rect_CProp4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_957 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_957 : Dop A _nil) -> Q_ x_957"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16. For all natural numbers $n$ and $m$, if the sum of $n$ and $1$ is less than the sum of $m$ and $1$, then for all natural numbers $x32$, the sum of $x32$ and $1$ is equal to the sum of $x32$ and $1$.",
    "output": "postulate let_clause_16 : (n : Nat) -> (m : Nat) -> (auto : Lt (plus n 1) (plus m 1)) -> (x32 : Nat) -> Eq (plus x32 1) (plus x32 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1075. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $bijf$ of $bijn$ of $f$ and the sum of $n$ and $1$, if $f$ applied to the sum of $n$ and $1$ is equal to the sum of $n$ and $1$, then for all natural numbers $i$, if $i$ is less than or equal to $n$, then for all natural numbers $a$, if $a$ is less than or equal to the sum of $n$ and $1$ and $f$ applied to $a$ is equal to $i$, then if $a$ is less than or equal to the sum of $n$ and $1$, then if $f$ applied to $a$ is equal to $i$, then if $a$ is equal to the sum of $n$ and $1$, then $i$ is equal to $a$.",
    "output": "postulate let_clause_1075 : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (bijf : bijn f (plus n 1)) -> (fS : Eq (f (plus n 1)) (plus n 1)) -> (i : Nat) -> (lein : Leq i n) -> (a : Nat) -> (_clearme : and (Leq a (plus n 1)) (Eq (f a) i)) -> (lean : Leq a (plus n 1)) -> (fa : Eq (f a) i) -> (Hc : Eq a (plus n 1)) -> Eq i a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ be a natural number. Then we can say that $not_bertrand$ holds for $_n$.",
    "output": "postulate not_bertrand : (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pred. For all natural numbers $_n$, $Nat$.",
    "output": "postulate pred : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_Strue. Let $k$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $p$ applied to $k$ is equal to $true$, then $bigop$ applied to the sum of $k$ and $1$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $op$ applied to $f$ applied to $k$ and $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_Strue : (k : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Eq (p k) true) -> Eq (bigop (plus k 1) (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (op (f k) (bigop k (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_of_primes. For all natural numbers $_n$, $list$ holds for $Nat$.",
    "output": "postulate list_of_primes : (_n : Nat) -> list Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_true_to_eq. Let $n$ and $m$ be natural numbers. Then if $eqb$ applied to $n$ and $m$ is equal to $true$, then $n$ is equal to $m$.",
    "output": "postulate eqb_true_to_eq : (n : Nat) -> (m : Nat) -> (_ : Eq (eqb n m) true) -> Eq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_j_j. Let $i$ and $j$ be natural numbers. Then $transpose$ applied to $i$ and $j$ and $j$ is equal to $i$.",
    "output": "postulate transpose_i_j_j : (i : Nat) -> (j : Nat) -> Eq (transpose i j j) i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_S_S. Let $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $m$, then the sum of $n$ and $1$ is less than or equal to the sum of $m$ and $1$.",
    "output": "postulate le_S_S : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq (plus n 1) (plus m 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_priml1. For all natural numbers $n$, if $0$ is less than $n$, then the difference of the quotient of the product of $2$ and $n$ and the sum of the logarithm of $2$ and $n$ and $2$ and $1$ is less than or equal to $prim$ applied to the product of $2$ and $n$.",
    "output": "postulate le_priml1 : (n : Nat) -> (_ : Lt 0 n) -> Leq (minus (div (times 2 n) (plus (log 2 n) 2)) 1) (prim (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then we can say that $__$ is greater than or equal to $__1$.",
    "output": "postulate Geq : (_ : Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_div. For all natural numbers $n$ and $m$, if $n$ is divisible by $m$, then the product of the quotient of $m$ and $n$ and $n$ is equal to $m$.",
    "output": "postulate divides_to_div : (n : Nat) -> (m : Nat) -> (_ : divisible n m) -> Eq (times (div m n) n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primes_below_lop. For all natural numbers $n$, $primes_below$ holds for $list_of_primes$ applied to $n$ and the sum of $n$ and $2$.",
    "output": "postulate primes_below_lop : (n : Nat) -> primes_below (list_of_primes n) (plus n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $n$ and $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_theta_theta. Let $m$ be a natural number. Then the quotient of $theta$ applied to the sum of the product of $2$ and $m$ and $1$ and $theta$ applied to the sum of $m$ and $1$ is equal to $bigop$ applied to the sum of the product of $2$ and $m$ and $2$ and the function that maps $p$ to $andb$ applied to $leb$ applied to the sum of $m$ and $2$ and $p$ and $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$.",
    "output": "postulate div_theta_theta : (m : Nat) -> Eq (div (theta (plus (times 2 m) 1)) (theta (plus m 1))) (bigop (plus (times 2 m) 2) (\\ p : Nat -> andb (leb (plus m 2) p) (primeb p)) Nat 1 times (\\ p : Nat -> p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Smallest_factor_to_min. For all natural numbers $n$, if $1$ is less than $n$, then $smallest_factor$ applied to $n$ is equal to $min$ applied to $n$ and $2$ and the function that maps $m$ to $eqb$ applied to $mod$ applied to $n$ and $m$ and $0$.",
    "output": "postulate smallest_factor_to_min : (n : Nat) -> (_ : Lt 1 n) -> Eq (smallest_factor n) (min n 2 (\\ m : Nat -> eqb (mod n m) 0))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_times_l. Let $c$ be a natural number. Then if $0$ is less than $c$, then $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $t$ to the product of $t$ and $c$.",
    "output": "postulate monotonic_lt_times_l : (c : Nat) -> (_ : Lt 0 c) -> monotonic Nat Lt (\\ t : Nat -> times t c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_gcd. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then if $n$ is divisible by $m$, then the greatest common divisor of $n$ and $m$ is equal to $n$.",
    "output": "postulate divides_to_gcd : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : divisible n m) -> Eq (gcd n m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type3. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1644$ of $range$ of $x1$ to elements of $Type3$, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1645$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type3 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1644 : range x1) -> Type3) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1645 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_fact. Let $n$ and $i$ be natural numbers. Then if $0$ is less than $i$, then if $i$ is less than or equal to $n$, then $i$ is divisible by the factorial of $n$.",
    "output": "postulate divides_fact : (n : Nat) -> (i : Nat) -> (_ : Lt 0 i) -> (__1 : Leq i n) -> divisible i (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type2. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1584$ of $ACop$ of $x1$ and $x2$ to elements of $Type2$, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1585$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type2 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1584 : ACop x1 x2) -> Type2) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1585 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Upto. For all sets $A$, for all elements $_xxx$ of $range$ of $A$, $Nat$.",
    "output": "postulate upto : (A : Set) -> (_xxx : range A) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_not_exists. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max$ applied to $n$ and $f$ is equal to $0$.",
    "output": "postulate max_not_exists : (f : (_ : Nat) -> bool) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> Eq (f i) false) -> Eq (max n f) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_mop. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $R$ of $Dop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, for all elements $a$ and $_x_969$ and $_x_970$ of $B$, $B$.",
    "output": "postulate let_mop : (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (R : Dop B nil) -> (f : (_ : Nat) -> B) -> (a : B) -> (_x_969 : B) -> (_x_970 : B) -> B"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type3. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1710$ of $Dop$ of $x1$ and $x2$ to elements of $Type3$, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1711$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type3 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1710 : Dop x1 x2) -> Type3) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1711 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B_exp. Let $n$ be a natural number. Then $B$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate le_B_exp : (n : Nat) -> Leq (B (times 2 n)) (pow 2 (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair4. $cr_pair$ applied to $5$ and $7$ and $3$ and $2$ is equal to $23$.",
    "output": "postulate cr_pair4 : Eq (cr_pair 5 7 3 2) 23"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F3_ind. Let $A1$ and $A2$ and $A3$ be sets. Then for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ and elements $__2$ of $A3$ to natural numbers, for all elements $P$ of $relation3$ of $A1$ and $A2$ and $A3$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, for all elements $a3$ of $A3$, $P$ holds for $a1$ and $a2$ and $a3$.",
    "output": "postulate f3_ind : (A1 : Set) -> (A2 : Set) -> (A3 : Set) -> (f : (_ : A1) -> (__1 : A2) -> (__2 : A3) -> Nat) -> (P : relation3 A1 A2 A3) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (_ : Lt (f a1 a2 a3) n) -> P a1 a2 a3) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (__1 : Eq (f a1 a2 a3) n) -> P a1 a2 a3) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> P a1 a2 a3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_S. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b$ of $B$, for all elements $__$ of $lstar_r$ of $B$ and $R$ and $l$ and $b1$ and $b$, for all elements $b2$ of $B$, for all elements $__1$ of $R$ of $b$ and $b2$, $lstar_r$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_r_S : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b : B) -> (_ : lstar_r B R l b1 b) -> (b2 : B) -> (__1 : R b b2) -> lstar_r B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bertrand_down. Let $n$ be a natural number. Then if $0$ is less than $n$, then if $n$ is less than or equal to the exponentiation of $2$ and $8$, then $bertrand$ holds for $n$.",
    "output": "postulate bertrand_down : (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n (pow 2 8)) -> bertrand n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_to_le. Let $b$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $b$, then if the exponentiation of $b$ and $n$ is less than or equal to the exponentiation of $b$ and $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_exp_to_le : (b : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 b) -> (__1 : Leq (pow b n) (pow b m)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt_n. For all natural numbers $n$, if $1$ is less than $n$, then the square root of $n$ is less than $n$.",
    "output": "postulate lt_sqrt_n : (n : Nat) -> (_ : Lt 1 n) -> Lt (sqrt n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_1_to_lt_n. For all natural numbers $i$ and $n$, if $1$ is less than $n$, then if $i$ is less than or equal to $n$, then if the greatest common divisor of $i$ and $n$ is equal to $1$, then $i$ is less than $n$.",
    "output": "postulate gcd_1_to_lt_n : (i : Nat) -> (n : Nat) -> (_ : Lt 1 n) -> (__1 : Leq i n) -> (__2 : Eq (gcd i n) 1) -> Lt i n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound6. Let $n$ and $m$ be natural numbers. Then if $nth_prime$ applied to $n$ is less than $m$, then for all natural numbers $x$, $Nat$.",
    "output": "postulate let_upper_bound6 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_l_aux. Let $B$ be a set. Then for all functions $R$ from elements of $B$ and elements $__1$ of $B$ to propositions, for all elements $b2$ of $B$, for all elements $P$ of $relation2$ of $Nat$ and $B$, for all elements $__$ of $P$ of $0$ and $b2$, for all functions $__1$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements $__1$ of $R$ of $b1$ and $b$ and elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b$ and $b2$ and elements $__3$ of $P$ of $l$ and $b$ to elements of $P$ of the sum of $l$ and $1$ and $b1$, for all natural numbers $l$, for all elements $b1$ and $b$ of $B$, for all elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b$, if $b$ is equal to $b2$, then $P$ holds for $l$ and $b1$.",
    "output": "postulate lstar_ind_l_aux : (B : Set) -> (R : (_ : B) -> (__1 : B) -> Prop) -> (b2 : B) -> (P : relation2 Nat B) -> (_ : P 0 b2) -> (__1 : (l : Nat) -> (b1 : B) -> (b : B) -> (__1 : R b1 b) -> (__2 : lstar B R l b b2) -> (__3 : P l b) -> P (plus l 1) b1) -> (l : Nat) -> (b1 : B) -> (b : B) -> (__2 : lstar B R l b1 b) -> (__3 : Eq b b2) -> P l b1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp4. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1602$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1603$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp4 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1602 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1603 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exists_max_forall_false. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$, $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$ and $f$ applied to $max$ applied to $n$ and $f$ is equal to $true$ or $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n$ and the function that maps $__$ to $Eq$ applied to $f$ applied to $i$ and absurdity and $max$ applied to $n$ and $f$ is equal to $0$.",
    "output": "postulate exists_max_forall_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> or (and (ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) (Eq (f (max n f)) true)) (and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n) (\\ _ : Lt i n -> Eq (f i) false))) (Eq (max n f) 0))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_discr. Let $a1$ and $a2$ and $a3$ and $a4$ be natural numbers. Then for all elements $x$ and $y$ of $div_mod_spec$ of $a1$ and $a2$ and $a3$ and $a4$, if $x$ is equal to $y$, then $match_div_mod_spec$ holds for $a1$ and $a2$ and $a3$ and $a4$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ to $match_div_mod_spec$ applied to $a1$ and $a2$ and $a3$ and $a4$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $Lt$ applied to $a4$ and $a2$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $Lt$ applied to $a4$ and $a2$ and $t0$ and the function that maps $x_19$ and $_x_20$ to the function that maps $x0$ and $p0$ to $Eq$ applied to $a1$ and the sum of the product of $a3$ and $a2$ and $a4$ applied to $x_19$ and $_x_20$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $_e1$ to $P$ and the function that maps $_z53$ to $P$ and $y$ and $x$.",
    "output": "postulate div_mod_spec_discr : (a1 : Nat) -> (a2 : Nat) -> (a3 : Nat) -> (a4 : Nat) -> (x : div_mod_spec a1 a2 a3 a4) -> (y : div_mod_spec a1 a2 a3 a4) -> (_e : Eq x y) -> match_div_mod_spec a1 a2 a3 a4 (plus Type2 1) (\\ _ : div_mod_spec a1 a2 a3 a4 -> univ Type2) (\\ t0 : Lt a4 a2 -> \\ t1 : Eq a1 (plus (times a3 a2) a4) -> match_div_mod_spec a1 a2 a3 a4 (plus Type2 1) (\\ _ : div_mod_spec a1 a2 a3 a4 -> univ Type2) (\\ u0 : Lt a4 a2 -> \\ u1 : Eq a1 (plus (times a3 a2) a4) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (Lt a4 a2) t0) u0) (\\ e0 : Eq (R0 (Lt a4 a2) t0) u0 -> prod Prop Type1 (Eq (R1 (Lt a4 a2) t0 (\\ x_19 : Lt a4 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Lt a4 a2 -> \\ p0 : Eq t0 x0 -> Eq a1 (plus (times a3 a2) a4)) x_19 _x_20) t1 u0 e0) u1) (\\ _e1 : Eq (R1 (Lt a4 a2) t0 (\\ x_19 : Lt a4 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Lt a4 a2 -> \\ p0 : Eq t0 x0 -> Eq a1 (plus (times a3 a2) a4)) x_19 _x_20) t1 u0 e0) u1 -> P))) (\\ _z53 : ((e0 : Eq (R0 (Lt a4 a2) t0) u0) -> (_e1 : Eq (R1 (Lt a4 a2) t0 (\\ x_19 : Lt a4 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Lt a4 a2 -> \\ p0 : Eq t0 x0 -> Eq a1 (plus (times a3 a2) a4)) x_19 _x_20) t1 u0 e0) u1) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_Sm_elim. For all natural numbers $n$ and $m$, if $n$ is less than or equal to the sum of $m$ and $1$, then for all propositions $P$, for all functions $__1$ from elements $__1$ of $Leq$ of the sum of $n$ and $1$ and the sum of $m$ and $1$ to elements of $P$, for all functions $__2$ from elements $__2$ of $Eq$ of $n$ and the sum of $m$ and $1$ to elements of $P$, $P$.",
    "output": "postulate le_n_Sm_elim : (n : Nat) -> (m : Nat) -> (_ : Leq n (plus m 1)) -> (P : Prop) -> (__1 : (__1 : Leq (plus n 1) (plus m 1)) -> P) -> (__2 : (__2 : Eq n (plus m 1)) -> P) -> P"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_fn. Let $f$ be a function from natural numbers to natural numbers. Then for all elements $__$ of $increasing$ of $f$, for all natural numbers $n$, $n$ is less than or equal to $f$ applied to $n$.",
    "output": "postulate le_n_fn : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> (n : Nat) -> Leq n (f n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_4_to_fact. For all natural numbers $n$, if $4$ is less than $n$, then the factorial of the product of $2$ and $n$ is less than or equal to the product of the product of the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $2$ and the factorial of $n$ and the factorial of $n$.",
    "output": "postulate lt_4_to_fact : (n : Nat) -> (_ : Lt 4 n) -> Leq (factorial (times 2 n)) (times (times (pow 2 (minus (times 2 n) 2)) (factorial n)) (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_max_spec. Let $_n$ be a natural number. Then for all functions $_f$ from natural numbers to booleans, for all natural numbers $__$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$ to elements of $return_type$ of $z$, for all elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$, $return_type$ holds for $z$.",
    "output": "postulate filter_max_spec : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (_ : Nat) -> (return_sort : Sort) -> (return_type : (z : max_spec _n _f __) -> return_sort) -> (return : (z : max_spec _n _f __) -> return_type z) -> (z : max_spec _n _f __) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_mod_O. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $n$ is divisible by $m$, then $mod$ applied to $m$ and $n$ is equal to $0$.",
    "output": "postulate divides_to_mod_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : divisible n m) -> Eq (mod m n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_S_pred. Let $n$ and $m$ be natural numbers. Then the difference of $n$ and the sum of $m$ and $1$ is equal to $pred$ applied to the difference of $n$ and $m$.",
    "output": "postulate eq_minus_S_pred : (n : Nat) -> (m : Nat) -> Eq (minus n (plus m 1)) (pred (minus n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type0. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1464$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to sets, for all functions $_H1$ from elements $x_835$ of $Lt$ of $x4$ and $x2$ and elements $x_834$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1465$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_835$ and $x_834$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_835$ and $x_834$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type0 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1464 : div_mod_spec x1 x2 x3 x4) -> Set) -> (_H1 : (x_835 : Lt x4 x2) -> (x_834 : Eq x1 (plus (times x3 x2) x4)) -> (_z1465 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_835 x_834)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_835 x_834)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "To_min. For all natural numbers $i$ and $n$ and $m$, if $i$ is less than or equal to $n$, then if $i$ is less than or equal to $m$, then $i$ is less than or equal to $min$ applied to $n$ and $m$.",
    "output": "postulate to_min : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq i n) -> (__1 : Leq i m) -> Leq i (min n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16004. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_16004 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type4_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_813$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type4$, for all functions $_H_div_mod_spec_intro$ from elements $x_815$ of $Lt$ of $_r$ and $_m$ and elements $x_814$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_815$ and $x_814$, for all elements $x_813$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_813$.",
    "output": "postulate div_mod_spec_rect_Type4_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_813 : div_mod_spec _n _m _q _r) -> Type4) -> (_H_div_mod_spec_intro : (x_815 : Lt _r _m) -> (x_814 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_815 x_814)) -> (x_813 : div_mod_spec _n _m _q _r) -> Q_ x_813"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_n_r. For all natural numbers $n$ and $m$, $m$ is less than or equal to the sum of $m$ and $n$.",
    "output": "postulate le_plus_n_r : (n : Nat) -> (m : Nat) -> Leq m (plus m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb. For all natural numbers $__$ and $__1$, $bool$.",
    "output": "postulate leb : (_ : Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_le_minus_minus_comm. For all natural numbers $b$ and $c$ and $a$, if $c$ is less than or equal to $b$, then the difference of $a$ and the difference of $b$ and $c$ is equal to the difference of the sum of $a$ and $c$ and $b$.",
    "output": "postulate minus_le_minus_minus_comm : (b : Nat) -> (c : Nat) -> (a : Nat) -> (_ : Leq c b) -> Eq (minus a (minus b c)) (minus (plus a c) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_times. For all natural numbers $n$ and $m$ and $n1$ and $m1$ and $p$, if $0$ is less than $p$, then for all elements $__1$ of $congruent$ of $n$ and $n1$ and $p$, for all elements $__2$ of $congruent$ of $m$ and $m1$ and $p$, $congruent$ holds for the product of $n$ and $m$ and the product of $n1$ and $m1$ and $p$.",
    "output": "postulate congruent_times : (n : Nat) -> (m : Nat) -> (n1 : Nat) -> (m1 : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : congruent n n1 p) -> (__2 : congruent m m1 p) -> congruent (times n m) (times n1 m1) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type1_body. For all functions $Q_$ from natural numbers $_x_385$ to elements of $Type1$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_386$ and elements $_x_388$ of $Q_$ of $x_386$ to elements of $Q_$ of the sum of $x_386$ and $1$, for all natural numbers $x_385$, $Q_$ holds for $x_385$.",
    "output": "postulate nat_rect_Type1_body : (Q_ : (_x_385 : Nat) -> Type1) -> (_H_O : Q_ 0) -> (_H_S : (x_386 : Nat) -> (_x_388 : Q_ x_386) -> Q_ (plus x_386 1)) -> (x_385 : Nat) -> Q_ x_385"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bool_to_nat_body. Let $_b$ be a boolean. Then $Nat$.",
    "output": "postulate bool_to_nat_body : (_b : bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16003. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_16003 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker. Let $__$ be a list of natural numbers. Then $bool$.",
    "output": "postulate checker : (_ : list Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_smallest_factor_to_not_divides. For all natural numbers $n$ and $i$, if $1$ is less than $n$, then if $1$ is less than $i$, then if $i$ is less than $smallest_factor$ applied to $n$, then $i$ is not divisible by $n$.",
    "output": "postulate lt_smallest_factor_to_not_divides : (n : Nat) -> (i : Nat) -> (_ : Lt 1 n) -> (__1 : Lt 1 i) -> (__2 : Lt i (smallest_factor n)) -> not (divisible i n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_pi. Let $n$ and $m$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, for all functions $f$ from natural numbers to natural numbers, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $f$ applied to $i$ and $m$ is equal to the exponentiation of $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.",
    "output": "postulate exp_pi : (n : Nat) -> (m : Nat) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> Nat) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> pow (f i) m)) (pow (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> f i)) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nth_prime_body. For all natural numbers $__$, $Nat$.",
    "output": "postulate nth_prime_body : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_smallest_factor. For all natural numbers $n$, if $n$ is prime, then $smallest_factor$ applied to $n$ is equal to $n$.",
    "output": "postulate prime_to_smallest_factor : (n : Nat) -> (_ : prime n) -> Eq (smallest_factor n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_cr_pair. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $a$ is less than $m$, then if $b$ is less than $n$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then $mod$ applied to $cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $m$ is equal to $a$ and $mod$ applied to $cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $n$ is equal to $b$.",
    "output": "postulate mod_cr_pair : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (_ : Lt a m) -> (__1 : Lt b n) -> (__2 : Eq (gcd n m) 1) -> and (Eq (mod (cr_pair m n a b) m) a) (Eq (mod (cr_pair m n a b) n) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_max_spec. For all natural numbers $_n$, for all functions $_f$ from natural numbers to booleans, for all natural numbers $__$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$ to elements of $return_type$ of $z$, for all elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$, $return_type$ holds for $z$.",
    "output": "postulate filter_max_spec : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (_ : Nat) -> (return_sort : Sort) -> (return_type : (z : max_spec _n _f __) -> return_sort) -> (return : (z : max_spec _n _f __) -> return_type z) -> (z : max_spec _n _f __) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fmin_true. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$ and $b$, if $m$ is equal to $min$ applied to $n$ and $b$ and $f$, then if $m$ is less than the sum of $n$ and $b$, then $f$ applied to $m$ is equal to $true$.",
    "output": "postulate fmin_true : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (b : Nat) -> (_ : Eq m (min n b f)) -> (__1 : Lt m (plus n b)) -> Eq (f m) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_4. $Psi (4)= 12$.",
    "output": "postulate Psi_4 : Eq (Psi 4) 12"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_log_r. Let $b$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $b$, then if $n$ is less than $m$, then if the exponentiation of $b$ and $n$ is less than or equal to $m$, then $n$ is less than or equal to the logarithm of $b$ and $m$.",
    "output": "postulate exp_to_log_r : (b : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 b) -> (__1 : Lt n m) -> (__2 : Leq (pow b n) m) -> Leq n (log b m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sigma_const. Let $n$ be a natural number. Then $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$ is equal to $n$.",
    "output": "postulate sigma_const : (n : Nat) -> Eq (bigop n (\\ i : Nat -> true) Nat 0 plus (\\ i : Nat -> 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp3_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_907$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_907$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_907$.",
    "output": "postulate ACop_rect_CProp3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_907 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_907 : ACop A _nil) -> Q_ x_907"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Invert_permut_f. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$ and $m$, if $m$ is less than or equal to $n$, then for all elements $__1$ of $injn$ of $f$ and $n$, $invert_permut$ applied to $n$ and $f$ and $f$ applied to $m$ is equal to $m$.",
    "output": "postulate invert_permut_f : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> (__1 : injn f n) -> Eq (invert_permut n f (f m)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_ord. Let $p$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then $ord_rem$ applied to $n$ and $p$ is divisible by $ord_rem$ applied to $m$ and $p$ and $ord$ applied to $n$ and $p$ is less than or equal to $ord$ applied to $m$ and $p$.",
    "output": "postulate divides_to_ord : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> and (divisible (ord_rem n p) (ord_rem m p)) (Leq (ord n p) (ord m p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_bc. For all natural numbers $n$ and $m$, if $m$ is less than or equal to $n$, then $0$ is less than $bc$ applied to $n$ and $m$.",
    "output": "postulate lt_O_bc : (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> Lt 0 (bc n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp_log. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then $n$ is less than the exponentiation of $p$ and the sum of the logarithm of $p$ and $n$ and $1$.",
    "output": "postulate lt_exp_log : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Lt n (pow p (plus (log p n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_O_l. For all natural numbers $m$, the greatest common divisor of $0$ and $m$ is equal to $m$.",
    "output": "postulate gcd_O_l : (m : Nat) -> Eq (gcd 0 m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1648. For all natural numbers $n$ and $q$, if $0$ is less than $q$, then for all natural numbers $n1$, if $n1$ is equal to the sum of the product of $bigop$ applied to the sum of $n1$ and $1$ and the function that maps $m$ to $andb$ applied to $leb$ applied to $1$ and $m$ and $dividesb$ applied to $q$ and $m$ and $Nat$ and $0$ and $plus$ and the function that maps $m$ to $1$ and $q$ and $mod$ applied to $n1$ and $q$, then if $q$ is divisible by the sum of $n1$ and $1$ and the sum of $n1$ and $1$ is equal to the product of the sum of the quotient of $n1$ and $q$ and $1$ and $q$, then if $q$ is divisible by the sum of $n1$ and $1$, then if the sum of $n1$ and $1$ is equal to the product of the sum of the quotient of $n1$ and $q$ and $1$ and $q$, then the sum of $n1$ and $1$ is equal to the sum of $q$ and the product of $q$ and the quotient of $n1$ and $q$.",
    "output": "postulate let_clause_1648 : (n : Nat) -> (q : Nat) -> (posq : Lt 0 q) -> (n1 : Nat) -> (Hind : Eq n1 (plus (times (bigop (plus n1 1) (\\ m : Nat -> andb (leb 1 m) (dividesb q m)) Nat 0 plus (\\ m : Nat -> 1)) q) (mod n1 q))) -> (_clearme : and (divisible q (plus n1 1)) (Eq (plus n1 1) (times (plus (div n1 q) 1) q))) -> (divq : divisible q (plus n1 1)) -> (eqn1 : Eq (plus n1 1) (times (plus (div n1 q) 1) q)) -> Eq (plus n1 1) (plus q (times q (div n1 q)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_iter. Let $g$ be a function from natural numbers to natural numbers. Then for all natural numbers $a$ and $b$ and $i$, for all elements $__$ of $monotonic$ of $Nat$ and $Leq$ and $g$, if $a$ is less than or equal to $b$, then $iter$ applied to $Nat$ and $g$ and $i$ and $a$ is less than or equal to $iter$ applied to $Nat$ and $g$ and $i$ and $b$.",
    "output": "postulate monotonic_iter : (g : (_ : Nat) -> Nat) -> (a : Nat) -> (b : Nat) -> (i : Nat) -> (_ : monotonic Nat Leq g) -> (__1 : Leq a b) -> Leq (iter Nat g i a) (iter Nat g i b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_Psi_2_n. Let $n$ be a natural number. Then if $0$ is less than $n$, then $Psi$ applied to the product of $2$ and $n$ is equal to the product of $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and $bool_to_nat$ applied to $leb$ applied to the sum of $n$ and $1$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $Psi$ applied to $n$.",
    "output": "postulate eq_Psi_2_n : (n : Nat) -> (_ : Lt 0 n) -> Eq (Psi (times 2 n)) (times (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (bool_to_nat (leb (plus n 1) (pow p (plus i 1))))))) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sigma_p. For all natural numbers $n$, for all functions $p1$ and $p2$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$, for all functions $__1$ from natural numbers $i$ and elements $__1$ of $Lt$ of $i$ and $n$ and elements $__2$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, for all elements $__2$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and the disjunction of the conjunction of $Eq$ applied to $p1$ applied to $i$ and $true$ and $Lt$ applied to $g1$ applied to $i$ and $g2$ applied to $i$ and the conjunction of the conjunction of $Eq$ applied to $p1$ applied to $i$ and absurdity and $Eq$ applied to $p2$ applied to $i$ and $true$ and $Lt$ applied to $0$ and $g2$ applied to $i$, $bigop$ applied to $n$ and the function that maps $i$ to $p1$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g1$ applied to $i$ is less than $bigop$ applied to $n$ and the function that maps $i$ to $p2$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g2$ applied to $i$.",
    "output": "postulate lt_sigma_p : (n : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (__1 : (i : Nat) -> (__1 : Lt i n) -> (__2 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> (__2 : ex Nat (\\ i : Nat -> and (Lt i n) (or (and (Eq (p1 i) true) (Lt (g1 i) (g2 i))) (and (and (Eq (p1 i) false) (Eq (p2 i) true)) (Lt 0 (g2 i)))))) -> Lt (bigop n (\\ i : Nat -> p1 i) Nat 0 plus (\\ i : Nat -> g1 i)) (bigop n (\\ i : Nat -> p2 i) Nat 0 plus (\\ i : Nat -> g2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_spec_to_max. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, for all elements $__$ of $max_spec$ of $n$ and $f$ and $m$, $max$ applied to $n$ and $f$ is equal to $m$.",
    "output": "postulate max_spec_to_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : max_spec n f m) -> Eq (max n f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp0_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_913$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_913$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_913$.",
    "output": "postulate ACop_rect_CProp0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_913 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_913 : ACop A _nil) -> Q_ x_913"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1585. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $m$ is divisible by $n$, then for all natural numbers $d$, if $0$ is equal to $m$, then if $n$ is equal to the product of $m$ and $d$, then $0$ is equal to $n$.",
    "output": "postulate let_clause_1585 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (_clearme : divisible m n) -> (d : Nat) -> (auto : Eq 0 m) -> (auto' : Eq n (times m d)) -> Eq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_ind. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_861$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_861$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_861$.",
    "output": "postulate Aop_ind : (A : Set) -> (_nil : A) -> (Q_ : (_x_861 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_861 : Aop A _nil) -> Q_ x_861"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_elim2. Let $R$ be a function from natural numbers and natural numbers $__1$ to propositions. Then for all functions $__$ from natural numbers $n$ to elements of $R$ of $0$ and $n$, for all functions $__1$ from natural numbers $n$ to elements of $R$ of the sum of $n$ and $1$ and $0$, for all functions $__2$ from natural numbers $n$ and natural numbers $m$ and elements $__2$ of $R$ of $n$ and $m$ to elements of $R$ of the sum of $n$ and $1$ and the sum of $m$ and $1$, for all natural numbers $n$ and $m$, $R$ holds for $n$ and $m$.",
    "output": "postulate nat_elim2 : (R : (_ : Nat) -> (__1 : Nat) -> Prop) -> (_ : (n : Nat) -> R 0 n) -> (__1 : (n : Nat) -> R (plus n 1) 0) -> (__2 : (n : Nat) -> (m : Nat) -> (__2 : R n m) -> R (plus n 1) (plus m 1)) -> (n : Nat) -> (m : Nat) -> R n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lop_Strue. For all natural numbers $m$ and $i$, for all lists $acc$ of natural numbers, if $list_divides$ applied to $acc$ and $i$ is equal to $true$, then $lprim$ applied to the sum of $m$ and $1$ and $i$ and $acc$ is equal to $lprim$ applied to $m$ and the sum of $i$ and $1$ and $acc$.",
    "output": "postulate lop_Strue : (m : Nat) -> (i : Nat) -> (acc : list Nat) -> (_ : Eq (list_divides acc i) true) -> Eq (lprim (plus m 1) i acc) (lprim m (plus i 1) acc)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_I_gen. For all natural numbers $a$ and $b$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, if $a$ is less than or equal to $b$, then $bigop$ applied to the difference of $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$ is equal to $bigop$ applied to $b$ and the function that maps $i$ to $andb$ applied to $leb$ applied to $a$ and $i$ and $p$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_I_gen : (a : Nat) -> (b : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (_ : Leq a b) -> Eq (bigop (minus b a) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))) (bigop b (\\ i : Nat -> andb (leb a i) (p i)) B nil (op B nil op) (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sigma_p. Let $n$ be a natural number. Then for all functions $p1$ and $p2$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$, for all functions $__1$ from natural numbers $i$ and elements $__1$ of $Lt$ of $i$ and $n$ and elements $__2$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, for all elements $__2$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and the disjunction of the conjunction of $Eq$ applied to $p1$ applied to $i$ and $true$ and $Lt$ applied to $g1$ applied to $i$ and $g2$ applied to $i$ and the conjunction of the conjunction of $Eq$ applied to $p1$ applied to $i$ and absurdity and $Eq$ applied to $p2$ applied to $i$ and $true$ and $Lt$ applied to $0$ and $g2$ applied to $i$, $bigop$ applied to $n$ and the function that maps $i$ to $p1$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g1$ applied to $i$ is less than $bigop$ applied to $n$ and the function that maps $i$ to $p2$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g2$ applied to $i$.",
    "output": "postulate lt_sigma_p : (n : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (__1 : (i : Nat) -> (__1 : Lt i n) -> (__2 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> (__2 : ex Nat (\\ i : Nat -> and (Lt i n) (or (and (Eq (p1 i) true) (Lt (g1 i) (g2 i))) (and (and (Eq (p1 i) false) (Eq (p2 i) true)) (Lt 0 (g2 i)))))) -> Lt (bigop n (\\ i : Nat -> p1 i) Nat 0 plus (\\ i : Nat -> g1 i)) (bigop n (\\ i : Nat -> p2 i) Nat 0 plus (\\ i : Nat -> g2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_min_r. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, $min$ applied to $n$ and $b$ and $f$ is less than or equal to the sum of $n$ and $b$.",
    "output": "postulate le_min_r : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> Leq (min n b f) (plus n b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_2_fact. Let $n$ be a natural number. Then if $1$ is less than $n$, then $2$ is less than or equal to the factorial of $n$.",
    "output": "postulate le_2_fact : (n : Nat) -> (_ : Lt 1 n) -> Leq 2 (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_73. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then for all natural numbers $x134$ and $x135$ and $x136$, the sum of $x134$ and the sum of $x135$ and $x136$ is equal to the sum of $x135$ and the sum of $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (n : Nat) -> (m : Nat) -> (p : Nat) -> (posp : Lt 0 p) -> (x134 : Nat) -> (x135 : Nat) -> (x136 : Nat) -> Eq (plus x134 (plus x135 x136)) (plus x135 (plus x134 x136))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_fact_B. For all natural numbers $n$, if $1$ is less than $n$, then the factorial of the product of $2$ and $n$ is equal to the product of the exponentiation of the factorial of $n$ and $2$ and $B$ applied to the product of $2$ and $n$.",
    "output": "postulate eq_fact_B : (n : Nat) -> (_ : Lt 1 n) -> Eq (factorial (times 2 n)) (times (pow (factorial n) 2) (B (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_i. For all natural numbers $i$ and $n$, $transpose$ applied to $i$ and $i$ and $n$ is equal to $n$.",
    "output": "postulate transpose_i_i : (i : Nat) -> (n : Nat) -> Eq (transpose i i n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type5. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_865$ of $Aop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_865$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_865$.",
    "output": "postulate Aop_rect_Type5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_865 : Aop A _nil) -> Type5) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_865 : Aop A _nil) -> Q_ x_865"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_I. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, $bigop$ applied to the difference of $n$ and $0$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $0$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $0$ is equal to $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_I : (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> Eq (bigop (minus n 0) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i 0)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i 0))) (bigop n (\\ i : Nat -> p i) B nil (op B nil op) (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iter_iter. For all sets $A$, for all functions $g$ from elements of $A$ to elements of $A$, for all elements $a$ of $A$, for all natural numbers $b$ and $c$, $iter$ applied to $A$ and $g$ and $c$ and $iter$ applied to $A$ and $g$ and $b$ and $a$ is equal to $iter$ applied to $A$ and $g$ and the sum of $b$ and $c$ and $a$.",
    "output": "postulate iter_iter : (A : Set) -> (g : (_ : A) -> A) -> (a : A) -> (b : Nat) -> (c : Nat) -> Eq (iter A g c (iter A g b a)) (iter A g (plus b c) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_Sn_O. Let $n$ be a natural number. Then the sum of $n$ and $1$ is not less than or equal to $0$.",
    "output": "postulate not_le_Sn_O : (n : Nat) -> not (Leq (plus n 1) 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim. For all natural numbers $__$ and $__1$, for all lists $__2$ of natural numbers, $list$ holds for $Nat$.",
    "output": "postulate lprim : (_ : Nat) -> (__1 : Nat) -> (__2 : list Nat) -> list Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_plus_times. Let $m$ and $q$ and $r$ be natural numbers. Then if $r$ is less than $m$, then the quotient of the sum of the product of $q$ and $m$ and $r$ and $m$ is equal to $q$.",
    "output": "postulate div_plus_times : (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt r m) -> Eq (div (plus (times q m) r) m) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type1. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_829$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type1$, for all functions $_H_div_mod_spec_intro$ from elements $x_831$ of $Lt$ of $_r$ and $_m$ and elements $x_830$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_831$ and $x_830$, for all elements $x_829$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_829$.",
    "output": "postulate div_mod_spec_rect_Type1 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_829 : div_mod_spec _n _m _q _r) -> Type1) -> (_H_div_mod_spec_intro : (x_831 : Lt _r _m) -> (x_830 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_831 x_830)) -> (x_829 : div_mod_spec _n _m _q _r) -> Q_ x_829"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $_nil$ be an element of $A$. Then $Dop (A , _nil)$ is a set.",
    "output": "postulate Dop : (A : Set) -> (_nil : A) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_O. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all elements $b$ of $B$, $lstar_r$ holds for $B$ and $R$ and $0$ and $b$ and $b$.",
    "output": "postulate lstar_r_O : (B : Set) -> (R : relation B) -> (b : B) -> lstar_r B R 0 b b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_div_times_m. For all natural numbers $a$ and $i$ and $m$, if $0$ is less than $i$, then if $0$ is less than $m$, then the quotient of the product of $a$ and the quotient of $m$ and $i$ and $m$ is less than or equal to the quotient of $a$ and $i$.",
    "output": "postulate le_div_times_m : (a : Nat) -> (i : Nat) -> (m : Nat) -> (_ : Lt 0 i) -> (__1 : Lt 0 m) -> Leq (div (times a (div m i)) m) (div a i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_to_exp1. Let $p$ and $n$ and $q$ and $r$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then if $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $p$ is not divisible by $r$ and $n$ is equal to the product of the exponentiation of $p$ and $q$ and $r$.",
    "output": "postulate p_ord_to_exp1 : (p : Nat) -> (n : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> (__2 : Eq (p_ord n p) (mk_Prod Nat Nat q r)) -> and (not (divisible p r)) (Eq n (times (pow p q) r))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_body. Let $__$ and $__1$ and $__2$ be natural numbers. Then $Prod$ holds for $Nat$ and $Nat$.",
    "output": "postulate p_ord_aux_body : (_ : Nat) -> (__1 : Nat) -> (__2 : Nat) -> Prod Nat Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_step. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $1$ and $b1$ and $b2$, $R$ holds for $b1$ and $b2$.",
    "output": "postulate lstar_inv_step : (B : Set) -> (R : relation B) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R 1 b1 b2) -> R b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc2. Let $n$ and $k$ be natural numbers. Then if $k$ is less than or equal to $n$, then the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$ is divisible by the factorial of $n$.",
    "output": "postulate bc2 : (n : Nat) -> (k : Nat) -> (_ : Leq k n) -> divisible (times (factorial k) (factorial (minus n k))) (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type0_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_955$ of $Dop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_955$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_955$.",
    "output": "postulate Dop_rect_Type0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_955 : Dop A _nil) -> Set) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_955 : Dop A _nil) -> Q_ x_955"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_plus_l. For all natural numbers $n$, $injective$ holds for $Nat$ and $Nat$ and the function that maps $m$ to the sum of $m$ and $n$.",
    "output": "postulate injective_plus_l : (n : Nat) -> injective Nat Nat (\\ m : Nat -> plus m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_min_l. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, $b$ is less than or equal to $min$ applied to $n$ and $b$ and $f$.",
    "output": "postulate le_min_l : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> Leq b (min n b f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_sigma_pi_SO_n. Let $n$ be a natural number. Then $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$ is equal to $n$.",
    "output": "postulate eq_sigma_pi_SO_n : (n : Nat) -> Eq (bigop n (\\ i : Nat -> true) Nat 0 plus (\\ i : Nat -> 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_le_0. For all natural numbers $x$ and $y$, if the sum of $x$ and $y$ is less than or equal to $0$, then $x$ is equal to $0$ and $y$ is equal to $0$.",
    "output": "postulate plus_le_0 : (x : Nat) -> (y : Nat) -> (_ : Leq (plus x y) 0) -> and (Eq x 0) (Eq y 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "False_min. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, if $f$ applied to $b$ is equal to absurdity, then $min$ applied to the sum of $n$ and $1$ and $b$ and $f$ is equal to $min$ applied to $n$ and the sum of $b$ and $1$ and $f$.",
    "output": "postulate false_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : Eq (f b) false) -> Eq (min (plus n 1) b f) (min n (plus b 1) f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_B_Bk. Let $n$ be a natural number. Then $B$ applied to $n$ is equal to $Bk$ applied to $n$.",
    "output": "postulate eq_B_Bk : (n : Nat) -> Eq (B n) (Bk n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primeb. Let $_n$ be a natural number. Then $bool$.",
    "output": "postulate primeb : (_n : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nth_primeS. For all natural numbers $n$, $nth_prime$ applied to the sum of $n$ and $1$ is equal to $min$ applied to $let_upper_bound1$ applied to $n$ and the sum of $let_previous_prime1$ applied to $n$ and $1$ and $primeb$.",
    "output": "postulate nth_primeS : (n : Nat) -> Eq (nth_prime (plus n 1)) (min (let_upper_bound1 n) (plus (let_previous_prime1 n) 1) primeb)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type4_body. Let $Q_$ be a function from natural numbers $_x_369$ to elements of $Type4$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_370$ and elements $_x_372$ of $Q_$ of $x_370$ to elements of $Q_$ of the sum of $x_370$ and $1$, for all natural numbers $x_369$, $Q_$ holds for $x_369$.",
    "output": "postulate nat_rect_Type4_body : (Q_ : (_x_369 : Nat) -> Type4) -> (_H_O : Q_ 0) -> (_H_S : (x_370 : Nat) -> (_x_372 : Q_ x_370) -> Q_ (plus x_370 1)) -> (x_369 : Nat) -> Q_ x_369"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp0_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_885$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_885$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_885$.",
    "output": "postulate Aop_rect_CProp0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_885 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_885 : Aop A _nil) -> Q_ x_885"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp5_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_905$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_905$.",
    "output": "postulate ACop_rect_CProp5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_905 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_905 : ACop A _nil) -> Q_ x_905"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sum_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, $ACop$ holds for $A$ and $nil$.",
    "output": "postulate sum_body : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> ACop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_div_mod. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then $div_mod_spec$ holds for $n$ and $m$ and the quotient of $n$ and $m$ and $mod$ applied to $n$ and $m$.",
    "output": "postulate div_mod_spec_div_mod : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> div_mod_spec n m (div n m) (mod n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_op. For all natural numbers $k$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f$ and $g$ from natural numbers to elements of $B$, $aop__o__op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $aop__o__op$ applied to $B$ and $nil$ and $op$ and $f$ applied to $i$ and $g$ applied to $i$.",
    "output": "postulate bigop_op : (k : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f : (_ : Nat) -> B) -> (g : (_ : Nat) -> B) -> Eq (aop__o__op B nil op (bigop k (\\ i : Nat -> p i) B nil (aop__o__op B nil op) (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p i) B nil (aop__o__op B nil op) (\\ i : Nat -> g i))) (bigop k (\\ i : Nat -> p i) B nil (aop__o__op B nil op) (\\ i : Nat -> aop__o__op B nil op (f i) (g i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_iso. Let $n1$ and $n2$ be natural numbers. Then for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f1$ and $f2$ from natural numbers to elements of $B$, for all elements $__$ of $iso$ of $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, $bigop$ applied to $n1$ and the function that maps $i$ to $p1$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f1$ applied to $i$ is equal to $bigop$ applied to $n2$ and the function that maps $i$ to $p2$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f2$ applied to $i$.",
    "output": "postulate bigop_iso : (n1 : Nat) -> (n2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f1 : (_ : Nat) -> B) -> (f2 : (_ : Nat) -> B) -> (_ : iso B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2)) -> Eq (bigop n1 (\\ i : Nat -> p1 i) B nil (aop__o__op B nil op) (\\ i : Nat -> f1 i)) (bigop n2 (\\ i : Nat -> p2 i) B nil (aop__o__op B nil op) (\\ i : Nat -> f2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fst_p_ord_times. Let $p$ and $a$ and $b$ be natural numbers. Then if $p$ is prime, then if $0$ is less than $a$, then if $0$ is less than $b$, then $fst$ applied to $Nat$ and $Nat$ and $p_ord$ applied to the product of $a$ and $b$ and $p$ is equal to the sum of $fst$ applied to $Nat$ and $Nat$ and $p_ord$ applied to $a$ and $p$ and $fst$ applied to $Nat$ and $Nat$ and $p_ord$ applied to $b$ and $p$.",
    "output": "postulate fst_p_ord_times : (p : Nat) -> (a : Nat) -> (b : Nat) -> (_ : prime p) -> (__1 : Lt 0 a) -> (__2 : Lt 0 b) -> Eq (fst Nat Nat (p_ord (times a b) p)) (plus (fst Nat Nat (p_ord a p)) (fst Nat Nat (p_ord b p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n , _m , _p \\in N$. Then $congruent$ applied to $_n$ and $_m$ and $_p$ is a proposition.",
    "output": "postulate congruent : (_n : Nat) -> (_m : Nat) -> (_p : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_1_to_divides_times_to_divides. For all natural numbers $p$ and $n$ and $m$, if $0$ is less than $p$, then if the greatest common divisor of $p$ and $n$ is equal to $1$, then if $p$ is divisible by the product of $n$ and $m$, then $p$ is divisible by $m$.",
    "output": "postulate gcd_1_to_divides_times_to_divides : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 p) -> (__1 : Eq (gcd p n) 1) -> (__2 : divisible p (times n m)) -> divisible p m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_transpose_r. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $m$ and $i$ and $j$, if $i$ is less than or equal to $m$, then if $j$ is less than or equal to $m$, then for all elements $__2$ of $permut$ of $f$ and $m$, $permut$ holds for the function that maps $n$ to $f$ applied to $transpose$ applied to $i$ and $j$ and $n$ and $m$.",
    "output": "postulate permut_transpose_r : (f : (_ : Nat) -> Nat) -> (m : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i m) -> (__1 : Leq j m) -> (__2 : permut f m) -> permut (\\ n : Nat -> f (transpose i j n)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_body. Let $__$ and $__1$ be natural numbers. Then $bool$.",
    "output": "postulate eqb_body : (_ : Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Tech_log. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then if $0$ is less than $n$, then the logarithm of $p$ and $n$ is equal to $max$ applied to the sum of $n$ and $1$ and the function that maps $x$ to $leb$ applied to the exponentiation of $p$ and $x$ and $n$.",
    "output": "postulate tech_log : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Eq (log p n) (max (plus n 1) (\\ x : Nat -> leb (pow p x) n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "K. Let $_n$ and $_p$ be natural numbers. Then $Nat$.",
    "output": "postulate k : (_n : Nat) -> (_p : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_transpose. For all natural numbers $i$ and $j$ and $n$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then $permut$ holds for $transpose$ applied to $i$ and $j$ and $n$.",
    "output": "postulate permut_transpose : (i : Nat) -> (j : Nat) -> (n : Nat) -> (_ : Leq i n) -> (__1 : Leq j n) -> permut (transpose i j) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_Bk_B1_B2. Let $n$ be a natural number. Then $Bk$ applied to $n$ is equal to the product of $B1$ applied to $n$ and $B2$ applied to $n$.",
    "output": "postulate eq_Bk_B1_B2 : (n : Nat) -> Eq (Bk n) (times (B1 n) (B2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_pi_bc. Let $a$ and $b$ and $c$ be natural numbers. Then for all functions $f$ from natural numbers to natural numbers, the product of the exponentiation of $a$ and the difference of $c$ and $b$ and $bigop$ applied to the difference of $c$ and $b$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $b$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $b$ is equal to $bigop$ applied to the difference of $c$ and $b$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $b$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the function that maps $i0$ to the product of $a$ and $f$ applied to $i0$ applied to the sum of $i$ and $b$.",
    "output": "postulate exp_pi_bc : (a : Nat) -> (b : Nat) -> (c : Nat) -> (f : (_ : Nat) -> Nat) -> Eq (times (pow a (minus c b)) (bigop (minus c b) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i b)) Nat 1 times (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i b)))) (bigop (minus c b) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i b)) Nat 1 times (\\ i : Nat -> (\\ i0 : Nat -> times a (f i0)) (plus i b)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp3_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_847$ of $Lt$ of $_r$ and $_m$ and elements $x_846$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_847$ and $x_846$, for all elements $x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_845$.",
    "output": "postulate div_mod_spec_rect_CProp3_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_845 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_847 : Lt _r _m) -> (x_846 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_847 x_846)) -> (x_845 : div_mod_spec _n _m _q _r) -> Q_ x_845"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp4. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_875$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_875$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_875$.",
    "output": "postulate Aop_rect_CProp4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_875 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_875 : Aop A _nil) -> Q_ x_875"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1009. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $f$ applied to $n$ is equal to absurdity, then if $max$ applied to $m$ and $f$ is less than or equal to $n$, then if $max$ applied to $m$ and $f$ is equal to $n$, then if $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $m$ and the function that maps $__$ to $Eq$ applied to $f$ applied to $i$ and absurdity and $max$ applied to $m$ and $f$ is equal to $0$, then for all functions $auto$ from natural numbers $i$ and elements of $Lt$ of $i$ and $m$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, if $max$ applied to $m$ and $f$ is equal to $0$, then $0$ is equal to $n$.",
    "output": "postulate let_clause_1009 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (Hfn : Eq (f n) false) -> (Hmax : Leq (max m f) n) -> (Hmax0 : Eq (max m f) n) -> (_clearme : and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i m) (\\ _ : Lt i m -> Eq (f i) false))) (Eq (max m f) 0)) -> (auto : (i : Nat) -> (_ : Lt i m) -> Eq (f i) false) -> (auto' : Eq (max m f) 0) -> Eq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp4_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_837$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_839$ of $Lt$ of $_r$ and $_m$ and elements $x_838$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_839$ and $x_838$, for all elements $x_837$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_837$.",
    "output": "postulate div_mod_spec_rect_CProp4_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_837 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_839 : Lt _r _m) -> (x_838 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_839 x_838)) -> (x_837 : div_mod_spec _n _m _q _r) -> Q_ x_837"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_lstar. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all natural numbers $__$, for all elements $__1$ and $__2$ of $B$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_type$ of $z$, for all elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$, $return_type$ holds for $z$.",
    "output": "postulate filter_lstar : (B : Set) -> (_R : relation B) -> (_ : Nat) -> (__1 : B) -> (__2 : B) -> (return_sort : Sort) -> (return_type : (z : lstar B _R __ __1 __2) -> return_sort) -> (return : (z : lstar B _R __ __1 __2) -> return_type z) -> (z : lstar B _R __ __1 __2) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type3. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_867$ of $Aop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_867$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_867$.",
    "output": "postulate Aop_rect_Type3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_867 : Aop A _nil) -> Type3) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_867 : Aop A _nil) -> Q_ x_867"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all functions $Q_$ from natural numbers $x_1233$ and elements $x_1232$ of $B$ and elements $x_1231$ of $B$ and elements $_x_1234$ of $lstar$ of $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$ to propositions, for all functions $_H_lstar_O$ from elements $b$ of $B$ to elements of $Q_$ of $0$ and $b$ and $b$ and $lstar_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_S$ from elements $b1$ of $B$ and elements $b$ of $B$ and elements $x_1236$ of $_R$ of $b1$ and $b$ and natural numbers $l$ and elements $b2$ of $B$ and elements $x_1235$ of $lstar$ of $B$ and $_R$ and $l$ and $b$ and $b2$ and elements $_x_1238$ of $Q_$ of $l$ and $b$ and $b2$ and $x_1235$ to elements of $Q_$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_S$ applied to $B$ and $_R$ and $b1$ and $b$ and $x_1236$ and $l$ and $b2$ and $x_1235$, for all natural numbers $x_1233$, for all elements $x_1232$ and $x_1231$ of $B$, for all elements $x_1234$ of $lstar$ of $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$, $Q_$ holds for $x_1233$ and $x_1232$ and $x_1231$ and $x_1234$.",
    "output": "postulate lstar_ind : (B : Set) -> (_R : relation B) -> (Q_ : (x_1233 : Nat) -> (x_1232 : B) -> (x_1231 : B) -> (_x_1234 : lstar B _R x_1233 x_1232 x_1231) -> Prop) -> (_H_lstar_O : (b : B) -> Q_ 0 b b (lstar_O B _R b)) -> (_H_lstar_S : (b1 : B) -> (b : B) -> (x_1236 : _R b1 b) -> (l : Nat) -> (b2 : B) -> (x_1235 : lstar B _R l b b2) -> (_x_1238 : Q_ l b b2 x_1235) -> Q_ (plus l 1) b1 b2 (lstar_S B _R b1 b x_1236 l b2 x_1235)) -> (x_1233 : Nat) -> (x_1232 : B) -> (x_1231 : B) -> (x_1234 : lstar B _R x_1233 x_1232 x_1231) -> Q_ x_1233 x_1232 x_1231 x_1234"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_sigma. For all natural numbers $n$ and $a$, for all functions $p$ from natural numbers to booleans, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $a$ is equal to the exponentiation of $a$ and $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$.",
    "output": "postulate exp_sigma : (n : Nat) -> (a : Nat) -> (p : (_ : Nat) -> bool) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> a)) (pow a (bigop n (\\ i : Nat -> p i) Nat 0 plus (\\ i : Nat -> 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_to_minus. For all natural numbers $n$ and $m$ and $p$, if $m$ is less than or equal to $n$, then if $n$ is less than the sum of $p$ and $m$, then the difference of $n$ and $m$ is less than $p$.",
    "output": "postulate lt_plus_to_minus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq m n) -> (__1 : Lt n (plus p m)) -> Lt (minus n m) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_lt_O. For all natural numbers $p$, if $p$ is prime, then $0$ is less than $p$.",
    "output": "postulate prime_to_lt_O : (p : Nat) -> (_ : prime p) -> Lt 0 p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_S_S_to_le. Let $n$ and $m$ be natural numbers. Then if the sum of $n$ and $1$ is less than or equal to the sum of $m$ and $1$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_S_S_to_le : (n : Nat) -> (m : Nat) -> (_ : Leq (plus n 1) (plus m 1)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb. Let $n$ be a natural number. Then if $0$ is less than $n$, then $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $n$ and $p$.",
    "output": "postulate pi_p_primeb : (n : Nat) -> (_ : Lt 0 n) -> Eq n (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (ord n p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1068. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $permf$ of $permut$ of $f$ and $n$, for all natural numbers $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then for all natural numbers $a$, if $a$ is less than or equal to $n$ and $f$ applied to $a$ is equal to $i$, then if $a$ is less than or equal to $n$, then if $f$ applied to $a$ is equal to $i$, then for all natural numbers $b$, if $b$ is less than or equal to $n$ and $f$ applied to $b$ is equal to $j$, then if $b$ is less than or equal to $n$, then if $f$ applied to $b$ is equal to $j$, then for all functions $__$ from natural numbers $i0$ and elements of $Leq$ of $i0$ and $n$ to elements of $Leq$ of $f$ applied to $i0$ and $n$, for all elements $injf$ of $injn$ of $f$ and $n$, if $a$ is equal to $b$, then $f$ applied to $a$ is equal to $i$.",
    "output": "postulate let_clause_1068 : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (permf : permut f n) -> (i : Nat) -> (j : Nat) -> (lein : Leq i n) -> (lejn : Leq j n) -> (a : Nat) -> (_clearme : and (Leq a n) (Eq (f a) i)) -> (lean : Leq a n) -> (fa : Eq (f a) i) -> (b : Nat) -> (_clearme0 : and (Leq b n) (Eq (f b) j)) -> (lebn : Leq b n) -> (fb : Eq (f b) j) -> (_ : (i0 : Nat) -> (_ : Leq i0 n) -> Leq (f i0) n) -> (injf : injn f n) -> (auto : Eq a b) -> Eq (f a) i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_ord_O_to_divides. Let $p$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $p$ is prime, then if $ord$ applied to $m$ and $p$ is not equal to $0$, then $p$ is divisible by $m$.",
    "output": "postulate not_ord_O_to_divides : (p : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : not (Eq (ord m p) 0)) -> divisible p m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type0. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1464$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to sets, for all functions $_H1$ from elements $x_835$ of $Lt$ of $x4$ and $x2$ and elements $x_834$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1465$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_835$ and $x_834$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_835$ and $x_834$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type0 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1464 : div_mod_spec x1 x2 x3 x4) -> Set) -> (_H1 : (x_835 : Lt x4 x2) -> (x_834 : Eq x1 (plus (times x3 x2) x4)) -> (_z1465 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_835 x_834)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_835 x_834)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le_times_to_lt_S_to_div. Let $a$ and $c$ and $b$ be natural numbers. Then if $0$ is less than $b$, then if the product of $b$ and $c$ is less than or equal to $a$, then if $a$ is less than the product of $b$ and the sum of $c$ and $1$, then the quotient of $a$ and $b$ is equal to $c$.",
    "output": "postulate lt_to_le_times_to_lt_S_to_div : (a : Nat) -> (c : Nat) -> (b : Nat) -> (_ : Lt 0 b) -> (__1 : Leq (times b c) a) -> (__2 : Lt a (times b (plus c 1))) -> Eq (div a b) c"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_mod. Let $a$ and $b$ and $c$ be natural numbers. Then if $0$ is less than $c$, then if $0$ is less than $b$, then $mod$ applied to the product of $a$ and $c$ and the product of $b$ and $c$ is equal to the product of $c$ and $mod$ applied to $a$ and $b$.",
    "output": "postulate times_mod : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : Lt 0 b) -> Eq (mod (times a c) (times b c)) (times c (mod a b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max. Let $__$ and $__1$ be natural numbers. Then $Nat$.",
    "output": "postulate max : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime1. For all natural numbers $n$, $Nat$.",
    "output": "postulate let_previous_prime1 : (n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt. For all natural numbers $n$, $n$ is less than the exponentiation of the sum of the square root of $n$ and $1$ and $2$.",
    "output": "postulate lt_sqrt : (n : Nat) -> Lt n (pow (plus (sqrt n) 1) 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_spec_ind_body. Let $_n$ be a natural number. Then for all functions $_f$ from natural numbers to booleans, for all functions $Q_$ from natural numbers $x_971$ and elements $_x_972$ of $max_spec$ of $_n$ and $_f$ and $x_971$ to propositions, for all functions $_H_found_max_spec$ from natural numbers $m$ and elements $x_975$ of $Lt$ of $m$ and $_n$ and elements $x_974$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $x_973$ from natural numbers $i$ and elements of $Lt$ of $m$ and $i$ and elements $__1$ of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $m$ and $found_max_spec$ applied to $_n$ and $_f$ and $m$ and $x_975$ and $x_974$ and $x_973$, for all functions $_H_not_found_max_spec$ from functions $x_976$ from natural numbers $i$ and elements of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $0$ and $not_found_max_spec$ applied to $_n$ and $_f$ and $x_976$, for all natural numbers $x_971$, for all elements $x_972$ of $max_spec$ of $_n$ and $_f$ and $x_971$, $Q_$ holds for $x_971$ and $x_972$.",
    "output": "postulate max_spec_ind_body : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (Q_ : (x_971 : Nat) -> (_x_972 : max_spec _n _f x_971) -> Prop) -> (_H_found_max_spec : (m : Nat) -> (x_975 : Lt m _n) -> (x_974 : Eq (_f m) true) -> (x_973 : (i : Nat) -> (_ : Lt m i) -> (__1 : Lt i _n) -> Eq (_f i) false) -> Q_ m (found_max_spec _n _f m x_975 x_974 x_973)) -> (_H_not_found_max_spec : (x_976 : (i : Nat) -> (_ : Lt i _n) -> Eq (_f i) false) -> Q_ 0 (not_found_max_spec _n _f x_976)) -> (x_971 : Nat) -> (x_972 : max_spec _n _f x_971) -> Q_ x_971 x_972"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_smallest_factor. Let $n$ be a natural number. Then if $0$ is less than $n$, then $0$ is less than $smallest_factor$ applied to $n$.",
    "output": "postulate lt_O_smallest_factor : (n : Nat) -> (_ : Lt 0 n) -> Lt 0 (smallest_factor n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_S. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, for all natural numbers $l0$, if the sum of $l0$ and $1$ is equal to $l$, then $ex2$ holds for $B$ and the function that maps $b$ to $R$ applied to $b1$ and $b$ and the function that maps $b$ to $lstar$ applied to $B$ and $R$ and $l0$ and $b$ and $b2$.",
    "output": "postulate lstar_inv_S : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R l b1 b2) -> (l0 : Nat) -> (__1 : Eq (plus l0 1) l) -> ex2 B (\\ b : B -> R b1 b) (\\ b : B -> lstar B R l0 b b2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_exp. Let $n$ and $m$ and $p$ be natural numbers. Then the product of the exponentiation of $n$ and $p$ and the exponentiation of $m$ and $p$ is equal to the exponentiation of the product of $n$ and $m$ and $p$.",
    "output": "postulate times_exp : (n : Nat) -> (m : Nat) -> (p : Nat) -> Eq (times (pow n p) (pow m p)) (pow (times n m) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_plus_comm_23. For all natural numbers $x$ and $y$ and $z$, the sum of the sum of $x$ and $y$ and $z$ is equal to the sum of the sum of $x$ and $z$ and $y$.",
    "output": "postulate plus_plus_comm_23 : (x : Nat) -> (y : Nat) -> (z : Nat) -> Eq (plus (plus x y) z) (plus (plus x z) y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_S_S_to_not_le. For all natural numbers $n$ and $m$, if the sum of $n$ and $1$ is not less than or equal to the sum of $m$ and $1$, then $n$ is not less than or equal to $m$.",
    "output": "postulate not_le_S_S_to_not_le : (n : Nat) -> (m : Nat) -> (_ : not (Leq (plus n 1) (plus m 1))) -> not (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_b. Let $b$ and $n$ and $m$ be natural numbers. Then if the sum of $n$ and $b$ is less than or equal to $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_plus_b : (b : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (plus n b) m) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_not_le. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then $m$ is not less than or equal to $n$.",
    "output": "postulate lt_to_not_le : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> not (Leq m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_plus_r. Let $n$ be a natural number. Then $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $m$ to the sum of $n$ and $m$.",
    "output": "postulate monotonic_lt_plus_r : (n : Nat) -> monotonic Nat Lt (\\ m : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose. For all natural numbers $__$ and $__1$ and $__2$, $Nat$.",
    "output": "postulate transpose : (_ : Nat) -> (__1 : Nat) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_sigma. Let $n$ and $a$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $a$ is equal to the exponentiation of $a$ and $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$.",
    "output": "postulate exp_sigma : (n : Nat) -> (a : Nat) -> (p : (_ : Nat) -> bool) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> a)) (pow a (bigop n (\\ i : Nat -> p i) Nat 0 plus (\\ i : Nat -> 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then the greatest common divisor of $__$ and $__1$ is a natural number.",
    "output": "postulate gcd : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound7. Let $n$ and $m$ be natural numbers. Then if $nth_prime$ applied to $n$ is less than $m$, then $Nat$.",
    "output": "postulate let_upper_bound7 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $n$ be a natural number. Then if the exponentiation of $2$ and $4$ is less than or equal to $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (le_n : Leq (pow 2 4) n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb5. For all natural numbers $n$, if $1$ is less than $n$, then $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$.",
    "output": "postulate pi_p_primeb5 : (n : Nat) -> (_ : Lt 1 n) -> Eq (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1))))))) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1)))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_SO_smallest_factor. For all natural numbers $n$, if $n$ is less than or equal to $1$, then $smallest_factor$ applied to $n$ is equal to $n$.",
    "output": "postulate le_SO_smallest_factor : (n : Nat) -> (_ : Leq n 1) -> Eq (smallest_factor n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15621. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the difference of the product of $n$ and $c$ and the product of $m$ and $d$ is equal to $1$.",
    "output": "postulate let_clause_15621 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (minus (times n c) (times m d)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_to_not_mod_O. For all natural numbers $p$ and $n$ and $m$ and $q$ and $r$, if $1$ is less than $m$, then if $0$ is less than $n$, then if $n$ is less than or equal to $p$, then if $p_ord_aux$ applied to $p$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $mod$ applied to $r$ and $m$ is not equal to $0$.",
    "output": "postulate p_ord_aux_to_not_mod_O : (p : Nat) -> (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 1 m) -> (__1 : Lt 0 n) -> (__2 : Leq n p) -> (__3 : Eq (p_ord_aux p n m) (mk_Prod Nat Nat q r)) -> not (Eq (mod r m) 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_lt. For all natural numbers $n$ and $m$, $decidable$ holds for $Lt$ applied to $n$ and $m$.",
    "output": "postulate decidable_lt : (n : Nat) -> (m : Nat) -> decidable (Lt n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_to_le_to_lt. Let $n$ and $m$ be natural numbers. Then if $n$ is not equal to $m$, then if $n$ is less than or equal to $m$, then $n$ is less than $m$.",
    "output": "postulate not_eq_to_le_to_lt : (n : Nat) -> (m : Nat) -> (_ : not (Eq n m)) -> (__1 : Leq n m) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type2_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_869$ of $Aop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_869$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_869$.",
    "output": "postulate Aop_rect_Type2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_869 : Aop A _nil) -> Type2) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_869 : Aop A _nil) -> Q_ x_869"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Quotient. Let $n$ and $m$ and $q$ be natural numbers. Then if $m$ is equal to the product of $n$ and $q$, then $n$ is divisible by $m$.",
    "output": "postulate quotient : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Eq m (times n q)) -> divisible n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_false. Let $n$ be a natural number. Then for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, $bigop$ applied to $n$ and the function that maps $i$ to absurdity and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $nil$.",
    "output": "postulate bigop_false : (n : Nat) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> Eq (bigop n (\\ i : Nat -> false) B nil op (\\ i : Nat -> f i)) nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15691. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the difference of the product of $n$ and $c$ and the product of $m$ and $d$ is equal to $1$.",
    "output": "postulate let_clause_15691 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (minus (times n c) (times m d)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10334. For all natural numbers $n$, if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10334 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type0. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1596$ of $ACop$ of $x1$ and $x2$ to sets, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1597$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type0 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1596 : ACop x1 x2) -> Set) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1597 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "True_min. For all functions $f$ from natural numbers to booleans, for all natural numbers $b$, if $f$ applied to $b$ is equal to $true$, then for all natural numbers $n$, $min$ applied to $n$ and $b$ and $f$ is equal to $b$.",
    "output": "postulate true_min : (f : (_ : Nat) -> bool) -> (b : Nat) -> (_ : Eq (f b) true) -> (n : Nat) -> Eq (min n b f) b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_r. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all elements $b1$ of $B$, for all elements $P$ of $relation2$ of $Nat$ and $B$, for all elements $__$ of $P$ of $0$ and $b1$, for all functions $__1$ from natural numbers $l$ and elements $b$ of $B$ and elements $b2$ of $B$ and elements $__1$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $R$ of $b$ and $b2$ and elements $__3$ of $P$ of $l$ and $b$ to elements of $P$ of the sum of $l$ and $1$ and $b2$, for all natural numbers $l$, for all elements $b2$ of $B$, for all elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $P$ holds for $l$ and $b2$.",
    "output": "postulate lstar_ind_r : (B : Set) -> (R : relation B) -> (b1 : B) -> (P : relation2 Nat B) -> (_ : P 0 b1) -> (__1 : (l : Nat) -> (b : B) -> (b2 : B) -> (__1 : lstar B R l b1 b) -> (__2 : R b b2) -> (__3 : P l b) -> P (plus l 1) b2) -> (l : Nat) -> (b2 : B) -> (__2 : lstar B R l b1 b2) -> P l b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound6. For all natural numbers $n$ and $m$, if $nth_prime$ applied to $n$ is less than $m$, then for all natural numbers $x$, $Nat$.",
    "output": "postulate let_upper_bound6 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Smallest_factor_to_prime. Let $n$ be a natural number. Then if $1$ is less than $n$, then if $smallest_factor$ applied to $n$ is equal to $n$, then $n$ is prime.",
    "output": "postulate smallest_factor_to_prime : (n : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (smallest_factor n) n) -> prime n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_Psi_2_n. For all natural numbers $n$, if $0$ is less than $n$, then $Psi$ applied to the product of $2$ and $n$ is equal to the product of $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and $bool_to_nat$ applied to $leb$ applied to the sum of $n$ and $1$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $Psi$ applied to $n$.",
    "output": "postulate eq_Psi_2_n : (n : Nat) -> (_ : Lt 0 n) -> Eq (Psi (times 2 n)) (times (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (bool_to_nat (leb (plus n 1) (pow p (plus i 1))))))) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus_m_m. Let $n$ and $m$ be natural numbers. Then if $m$ is less than or equal to $n$, then $n$ is equal to the sum of the difference of $n$ and $m$ and $m$.",
    "output": "postulate plus_minus_m_m : (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> Eq n (plus (minus n m) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log_n_n. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then the logarithm of $p$ and $n$ is less than or equal to $n$.",
    "output": "postulate le_log_n_n : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Leq (log p n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp0. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_885$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_885$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_885$.",
    "output": "postulate Aop_rect_CProp0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_885 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_885 : Aop A _nil) -> Q_ x_885"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_to_lt_r. For all natural numbers $n$ and $p$ and $q$, if the sum of $n$ and $p$ is less than the sum of $n$ and $q$, then $p$ is less than $q$.",
    "output": "postulate lt_plus_to_lt_r : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (plus n p) (plus n q)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_div_true. Let $d$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if $dividesb$ applied to $d$ and $n$ is equal to $true$, then $dividesb$ applied to the quotient of $n$ and $d$ and $n$ is equal to $true$.",
    "output": "postulate dividesb_div_true : (d : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Eq (dividesb d n) true) -> Eq (dividesb (div n d) n) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "K_def. For all natural numbers $n$ and $p$, $k$ applied to $n$ and $p$ is equal to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $mod$ applied to the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate k_def : (n : Nat) -> (p : Nat) -> Eq (k n p) (bigop (log p n) (\\ i : Nat -> true) Nat 0 plus (\\ i : Nat -> mod (div n (pow p (plus i 1))) 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type2_body. For all functions $Q_$ from natural numbers $_x_381$ to elements of $Type2$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_382$ and elements $_x_384$ of $Q_$ of $x_382$ to elements of $Q_$ of the sum of $x_382$ and $1$, for all natural numbers $x_381$, $Q_$ holds for $x_381$.",
    "output": "postulate nat_rect_Type2_body : (Q_ : (_x_381 : Nat) -> Type2) -> (_H_O : Q_ 0) -> (_H_S : (x_382 : Nat) -> (_x_384 : Q_ x_382) -> Q_ (plus x_382 1)) -> (x_381 : Nat) -> Q_ x_381"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_BPsi1. Let $n$ be a natural number. Then if $0$ is less than $n$, then $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of $B$ applied to the product of $2$ and $n$ and $Psi$ applied to $n$.",
    "output": "postulate le_Psi_BPsi1 : (n : Nat) -> (_ : Lt 0 n) -> Leq (Psi (times 2 n)) (times (B (times 2 n)) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type5. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_947$ of $Dop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_947$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_947$.",
    "output": "postulate Dop_rect_Type5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_947 : Dop A _nil) -> Type5) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_947 : Dop A _nil) -> Q_ x_947"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_n_elim. Let $n$ be a natural number. Then if $0$ is less than $n$, then for all functions $P$ from natural numbers $__1$ to propositions, for all functions $__1$ from natural numbers $m$ to elements of $P$ of the sum of $m$ and $1$, $P$ holds for $n$.",
    "output": "postulate lt_O_n_elim : (n : Nat) -> (_ : Lt 0 n) -> (P : (__1 : Nat) -> Prop) -> (__1 : (m : Nat) -> P (plus m 1)) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_prim_prim_pred. For all natural numbers $n$, if $1$ is less than $n$, then $prim$ applied to the product of $2$ and $n$ is equal to $prim$ applied to $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate eq_prim_prim_pred : (n : Nat) -> (_ : Lt 1 n) -> Eq (prim (times 2 n)) (prim (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_divides_times. For all natural numbers $p$ and $q$ and $n$, if $p$ is prime, then if $p$ is not divisible by $q$, then if $p$ is divisible by $n$, then if $q$ is divisible by $n$, then the product of $p$ and $q$ is divisible by $n$.",
    "output": "postulate divides_to_divides_times : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : prime p) -> (__1 : not (divisible p q)) -> (__2 : divisible p n) -> (__3 : divisible q n) -> divisible (times p q) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_range. For all sets $_A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $range$ of $_A$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $range$ of $_A$ to elements of $return_type$ of $z$, for all elements $z$ of $range$ of $_A$, $return_type$ holds for $z$.",
    "output": "postulate filter_range : (_A : Set) -> (return_sort : Sort) -> (return_type : (z : range _A) -> return_sort) -> (return : (z : range _A) -> return_type z) -> (z : range _A) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_n. For all natural numbers $n$ and $m$, $m$ is less than or equal to the sum of $n$ and $m$.",
    "output": "postulate le_plus_n : (n : Nat) -> (m : Nat) -> Leq m (plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transitive_congruent. For all natural numbers $p$, $transitive$ holds for $Nat$ and the function that maps $n$ and $m$ to $congruent$ applied to $n$ and $m$ and $p$.",
    "output": "postulate transitive_congruent : (p : Nat) -> transitive Nat (\\ n : Nat -> \\ m : Nat -> congruent n m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_n_nth_prime_n. For all natural numbers $n$, $n$ is less than $nth_prime$ applied to $n$.",
    "output": "postulate lt_n_nth_prime_n : (n : Nat) -> Lt n (nth_prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_to_le_div. For all natural numbers $a$ and $b$ and $c$, if $0$ is less than $b$, then if the product of $b$ and $c$ is less than or equal to $a$, then $c$ is less than or equal to the quotient of $a$ and $b$.",
    "output": "postulate le_times_to_le_div : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt 0 b) -> (__1 : Leq (times b c) a) -> Leq c (div a b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prod. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, for all elements $_x_969$ and $_x_970$ of $A$, $A$.",
    "output": "postulate prod : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> (_x_969 : A) -> (_x_970 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B1. Let $_n$ be a natural number. Then $Nat$.",
    "output": "postulate B1 : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then we can say that $__$ is less than $__1$.",
    "output": "postulate Lt : (_ : Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_injective. Let $f$ be a function from natural numbers to natural numbers. Then for all elements $__$ of $increasing$ of $f$, $injective$ holds for $Nat$ and $Nat$ and $f$.",
    "output": "postulate increasing_to_injective : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> injective Nat Nat f"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_mod_to_divides. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $n$, then if $p$ is divisible by $mod$ applied to $m$ and $n$, then if $p$ is divisible by $n$, then $p$ is divisible by $m$.",
    "output": "postulate divides_mod_to_divides : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : divisible p (mod m n)) -> (__2 : divisible p n) -> divisible p m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type2_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type2$, for all functions $_H_div_mod_spec_intro$ from elements $x_827$ of $Lt$ of $_r$ and $_m$ and elements $x_826$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_827$ and $x_826$, for all elements $x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_825$.",
    "output": "postulate div_mod_spec_rect_Type2_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_825 : div_mod_spec _n _m _q _r) -> Type2) -> (_H_div_mod_spec_intro : (x_827 : Lt _r _m) -> (x_826 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_827 x_826)) -> (x_825 : div_mod_spec _n _m _q _r) -> Q_ x_825"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F3_ind. For all sets $A1$ and $A2$ and $A3$, for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ and elements $__2$ of $A3$ to natural numbers, for all elements $P$ of $relation3$ of $A1$ and $A2$ and $A3$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, for all elements $a3$ of $A3$, $P$ holds for $a1$ and $a2$ and $a3$.",
    "output": "postulate f3_ind : (A1 : Set) -> (A2 : Set) -> (A3 : Set) -> (f : (_ : A1) -> (__1 : A2) -> (__2 : A3) -> Nat) -> (P : relation3 A1 A2 A3) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (_ : Lt (f a1 a2 a3) n) -> P a1 a2 a3) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (__1 : Eq (f a1 a2 a3) n) -> P a1 a2 a3) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> P a1 a2 a3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sqrt_bound. Let $n$ be a natural number. Then if the exponentiation of $2$ and $8$ is less than or equal to $n$, then the product of $2$ and the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$ is less than or equal to the square root of the product of $2$ and $n$.",
    "output": "postulate sqrt_bound : (n : Nat) -> (_ : Leq (pow 2 8) n) -> Leq (times 2 (plus (log 2 (times 2 n)) 1)) (sqrt (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type4. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_945$ of $Dop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_945$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_945$.",
    "output": "postulate Dop_rect_Type4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_945 : Dop A _nil) -> Type4) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_945 : Dop A _nil) -> Q_ x_945"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_O_to_not_divides. Let $p$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $p$ is prime, then if $ord$ applied to $m$ and $p$ is equal to $0$, then $p$ is not divisible by $m$.",
    "output": "postulate ord_O_to_not_divides : (p : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : Eq (ord m p) 0) -> not (divisible p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Commutative_plus. $commutative$ holds for $Nat$ and $plus$.",
    "output": "postulate commutative_plus : commutative Nat plus"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp0_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_857$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_859$ of $Lt$ of $_r$ and $_m$ and elements $x_858$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_859$ and $x_858$, for all elements $x_857$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_857$.",
    "output": "postulate div_mod_spec_rect_CProp0_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_857 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_859 : Lt _r _m) -> (x_858 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_859 x_858)) -> (x_857 : div_mod_spec _n _m _q _r) -> Q_ x_857"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_ind. For all natural numbers $_n$, for all functions $Q_$ from natural numbers $x_417$ and elements $_x_418$ of $Leq$ of $_n$ and $x_417$ to propositions, for all elements $_H_le_n$ of $Q_$ of $_n$ and $le_n$ applied to $_n$, for all functions $_H_le_S$ from natural numbers $m$ and elements $x_419$ of $Leq$ of $_n$ and $m$ and elements $_x_421$ of $Q_$ of $m$ and $x_419$ to elements of $Q_$ of the sum of $m$ and $1$ and $le_S$ applied to $_n$ and $m$ and $x_419$, for all natural numbers $x_417$, if $_n$ is less than or equal to $x_417$, then $Q_$ holds for $x_417$ and $x_418$.",
    "output": "postulate le_ind : (_n : Nat) -> (Q_ : (x_417 : Nat) -> (_x_418 : Leq _n x_417) -> Prop) -> (_H_le_n : Q_ _n (le_n _n)) -> (_H_le_S : (m : Nat) -> (x_419 : Leq _n m) -> (_x_421 : Q_ m x_419) -> Q_ (plus m 1) (le_S _n m x_419)) -> (x_417 : Nat) -> (x_418 : Leq _n x_417) -> Q_ x_417 x_418"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max'. Let $__$ be a natural number. Then for all functions $__1$ from natural numbers $__1$ to booleans, for all natural numbers $__2$, $Nat$.",
    "output": "postulate max' : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_minus. For all natural numbers $n$ and $p$ and $q$, if $n$ is divisible by $p$, then if $n$ is divisible by $q$, then $n$ is divisible by the difference of $p$ and $q$.",
    "output": "postulate divides_minus : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : divisible n p) -> (__1 : divisible n q) -> divisible n (minus p q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "LePsi_prim. Let $n$ be a natural number. Then the exponentiation of $n$ and $prim$ applied to $n$ is less than or equal to the product of $Psi$ applied to $n$ and $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$.",
    "output": "postulate lePsi_prim : (n : Nat) -> Leq (pow n (prim n)) (times (Psi n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_not_exists. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $n$ and $b$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $min$ applied to $n$ and $b$ and $f$ is equal to the sum of $n$ and $b$.",
    "output": "postulate min_not_exists : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : (i : Nat) -> (_ : Leq b i) -> (__1 : Lt i (plus n b)) -> Eq (f i) false) -> Eq (min n b f) (plus n b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_ind. Let $Q_$ be a function from natural numbers $_x_365$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_366$ and elements $_x_368$ of $Q_$ of $x_366$ to elements of $Q_$ of the sum of $x_366$ and $1$, for all natural numbers $x_365$, $Q_$ holds for $x_365$.",
    "output": "postulate nat_ind : (Q_ : (_x_365 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_366 : Nat) -> (_x_368 : Q_ x_366) -> Q_ (plus x_366 1)) -> (x_365 : Nat) -> Q_ x_365"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp3. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1740$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1741$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp3 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1740 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1741 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop__o__op. Let $x0$ be a set. Then for all elements $x1$ of $x0$, for all elements $x2$ of $ACop$ of $x0$ and $x1$, for all elements $_x_887$ and $_x_888$ of $x0$, $x0$.",
    "output": "postulate aop__o__op : (x0 : Set) -> (x1 : x0) -> (x2 : ACop x0 x1) -> (_x_887 : x0) -> (_x_888 : x0) -> x0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_ind. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_943$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_943$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_943$.",
    "output": "postulate Dop_ind : (A : Set) -> (_nil : A) -> (Q_ : (_x_943 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_943 : Dop A _nil) -> Q_ x_943"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_exp_r. For all natural numbers $b$, if $1$ is less than $b$, then $injective$ holds for $Nat$ and $Nat$ and the function that maps $i$ to the exponentiation of $b$ and $i$.",
    "output": "postulate injective_exp_r : (b : Nat) -> (_ : Lt 1 b) -> injective Nat Nat (\\ i : Nat -> pow b i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1572. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then if the greatest common divisor of $m$ and $n$ is equal to $0$, then if $m$ is equal to $0$, then if $n$ is equal to $0$, then $m$ is equal to $0$.",
    "output": "postulate let_clause_1572 : (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (H : Eq (gcd m n) 0) -> (auto : Eq m 0) -> (auto' : Eq n 0) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times. For all natural numbers $n1$ and $n2$ and $m1$ and $m2$, if $n1$ is less than or equal to $n2$, then if $m1$ is less than or equal to $m2$, then the product of $n1$ and $m1$ is less than or equal to the product of $n2$ and $m2$.",
    "output": "postulate le_times : (n1 : Nat) -> (n2 : Nat) -> (m1 : Nat) -> (m2 : Nat) -> (_ : Leq n1 n2) -> (__1 : Leq m1 m2) -> Leq (times n1 m1) (times n2 m2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type3. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_895$ of $ACop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_895$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_895$.",
    "output": "postulate ACop_rect_Type3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_895 : ACop A _nil) -> Type3) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_895 : ACop A _nil) -> Q_ x_895"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_min_true. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of the conjunction of $Leq$ applied to $b$ and $i$ and $Lt$ applied to $i$ and the sum of $n$ and $b$ and $Eq$ applied to $f$ applied to $i$ and $true$, $f$ applied to $min$ applied to $n$ and $b$ and $f$ is equal to $true$.",
    "output": "postulate f_min_true : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : ex Nat (\\ i : Nat -> and (and (Leq b i) (Lt i (plus n b))) (Eq (f i) true))) -> Eq (f (min n b f)) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_prime. Let $n$ be a natural number. Then $decidable$ holds for $prime$ applied to $n$.",
    "output": "postulate decidable_prime : (n : Nat) -> decidable (prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_min_true. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of the conjunction of $Leq$ applied to $b$ and $i$ and $Lt$ applied to $i$ and the sum of $n$ and $b$ and $Eq$ applied to $f$ applied to $i$ and $true$, $f$ applied to $min$ applied to $n$ and $b$ and $f$ is equal to $true$.",
    "output": "postulate f_min_true : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : ex Nat (\\ i : Nat -> and (and (Leq b i) (Lt i (plus n b))) (Eq (f i) true))) -> Eq (f (min n b f)) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_ind. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_889$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_889$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_889$.",
    "output": "postulate ACop_ind : (A : Set) -> (_nil : A) -> (Q_ : (_x_889 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_889 : ACop A _nil) -> Q_ x_889"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp_to_lt. For all natural numbers $a$ and $n$ and $m$, if $0$ is less than $a$, then if the exponentiation of $a$ and $n$ is less than the exponentiation of $a$ and $m$, then $n$ is less than $m$.",
    "output": "postulate lt_exp_to_lt : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 a) -> (__1 : Lt (pow a n) (pow a m)) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_l. For all sets $B$, for all functions $R$ from elements of $B$ and elements $__1$ of $B$ to propositions, for all elements $b2$ of $B$, for all elements $P$ of $relation2$ of $Nat$ and $B$, for all elements $__$ of $P$ of $0$ and $b2$, for all functions $__1$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements $__1$ of $R$ of $b1$ and $b$ and elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b$ and $b2$ and elements $__3$ of $P$ of $l$ and $b$ to elements of $P$ of the sum of $l$ and $1$ and $b1$, for all natural numbers $l$, for all elements $b1$ of $B$, for all elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $P$ holds for $l$ and $b1$.",
    "output": "postulate lstar_ind_l : (B : Set) -> (R : (_ : B) -> (__1 : B) -> Prop) -> (b2 : B) -> (P : relation2 Nat B) -> (_ : P 0 b2) -> (__1 : (l : Nat) -> (b1 : B) -> (b : B) -> (__1 : R b1 b) -> (__2 : lstar B R l b b2) -> (__3 : P l b) -> P (plus l 1) b1) -> (l : Nat) -> (b1 : B) -> (__2 : lstar B R l b1 b2) -> P l b1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_ind. Let $x1$ be a set. Then for all elements $x2$ of $relation$ of $x1$, for all natural numbers $x3$, for all elements $x4$ and $x5$ of $x1$, for all elements $_Hterm$ of $lstar$ of $x1$ and $x2$ and $x3$ and $x4$ and $x5$, for all functions $P$ from natural numbers $_z2089$ and elements $_z2088$ of $x1$ and elements $_z2087$ of $x1$ to propositions, for all functions $_H1$ from elements $b$ of $x1$ and elements $_z2092$ of $Eq$ of $x3$ and $0$ and elements $_z2091$ of $Eq$ of $x4$ and $b$ and elements $_z2090$ of $Eq$ of $x5$ and $b$ to elements of $P$ of $0$ and $b$ and $b$, for all functions $_H2$ from elements $b1$ of $x1$ and elements $b$ of $x1$ and elements $_x_1236$ of $x2$ of $b1$ and $b$ and natural numbers $l$ and elements $b2$ of $x1$ and elements $_x_1235$ of $lstar$ of $x1$ and $x2$ and $l$ and $b$ and $b2$ and functions $_x_1238$ from elements $_z2092$ of $Eq$ of $x3$ and $l$ and elements $_z2091$ of $Eq$ of $x4$ and $b$ and elements $_z2090$ of $Eq$ of $x5$ and $b2$ to elements of $P$ of $l$ and $b$ and $b2$ and elements $_z2092$ of $Eq$ of $x3$ and the sum of $l$ and $1$ and elements $_z2091$ of $Eq$ of $x4$ and $b1$ and elements $_z2090$ of $Eq$ of $x5$ and $b2$ to elements of $P$ of the sum of $l$ and $1$ and $b1$ and $b2$, $P$ holds for $x3$ and $x4$ and $x5$.",
    "output": "postulate lstar_inv_ind : (x1 : Set) -> (x2 : relation x1) -> (x3 : Nat) -> (x4 : x1) -> (x5 : x1) -> (_Hterm : lstar x1 x2 x3 x4 x5) -> (P : (_z2089 : Nat) -> (_z2088 : x1) -> (_z2087 : x1) -> Prop) -> (_H1 : (b : x1) -> (_z2092 : Eq x3 0) -> (_z2091 : Eq x4 b) -> (_z2090 : Eq x5 b) -> P 0 b b) -> (_H2 : (b1 : x1) -> (b : x1) -> (_x_1236 : x2 b1 b) -> (l : Nat) -> (b2 : x1) -> (_x_1235 : lstar x1 x2 l b b2) -> (_x_1238 : (_z2092 : Eq x3 l) -> (_z2091 : Eq x4 b) -> (_z2090 : Eq x5 b2) -> P l b b2) -> (_z2092 : Eq x3 (plus l 1)) -> (_z2091 : Eq x4 b1) -> (_z2090 : Eq x5 b2) -> P (plus l 1) b1 b2) -> P x3 x4 x5"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair2. $cr_pair$ applied to $2$ and $3$ and $1$ and $0$ is equal to $3$.",
    "output": "postulate cr_pair2 : Eq (cr_pair 2 3 1 0) 3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_discr. For all sets $a1$, for all elements $x$ and $y$ of $range$ of $a1$, if $x$ is equal to $y$, then $match_range$ holds for $a1$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ and $t2$ to $match_range$ applied to $a1$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ and $u2$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $a1$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $a1$ and $t0$ and the function that maps $x0$ and $p0$ to $Nat$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $e1$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R2$ applied to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $a1$ and $t0$ and the function that maps $x0$ and $p0$ to $Nat$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $p1$ to $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $bool$ and $t2$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and the function that maps $_e2$ to $P$ and the function that maps $_z59$ to $P$ and $y$ and $x$.",
    "output": "postulate range_discr : (a1 : Set) -> (x : range a1) -> (y : range a1) -> (_e : Eq x y) -> match_range a1 (plus Type2 1) (\\ _ : range a1 -> univ Type2) (\\ t0 : ((_ : Nat) -> a1) -> \\ t1 : Nat -> \\ t2 : ((_ : Nat) -> bool) -> match_range a1 (plus Type2 1) (\\ _ : range a1 -> univ Type2) (\\ u0 : ((_ : Nat) -> a1) -> \\ u1 : Nat -> \\ u2 : ((_ : Nat) -> bool) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (prod Set Set Nat (\\ _ : Nat -> a1)) t0) u0) (\\ e0 : Eq (R0 (prod Set Set Nat (\\ _ : Nat -> a1)) t0) u0 -> prod Prop Type1 (Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 u0 e0) u1) (\\ e1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 u0 e0) u1 -> prod Prop Type1 (Eq (R2 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : Nat -> \\ p1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x00 : ((_ : Nat) -> a1) -> \\ p00 : Eq t0 x00 -> Nat) t1 x0 p0) x1 -> prod Set Set Nat (\\ _ : Nat -> bool)) t2 u0 e0 u1 e1) u2) (\\ _e2 : Eq (R2 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : Nat -> \\ p1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x00 : ((_ : Nat) -> a1) -> \\ p00 : Eq t0 x00 -> Nat) t1 x0 p0) x1 -> prod Set Set Nat (\\ _ : Nat -> bool)) t2 u0 e0 u1 e1) u2 -> P)))) (\\ _z59 : ((e0 : Eq (R0 (prod Set Set Nat (\\ _ : Nat -> a1)) t0) u0) -> (e1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 u0 e0) u1) -> (_e2 : Eq (R2 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> Nat) t1 (\\ x0 : ((_ : Nat) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : Nat -> \\ p1 : Eq (R1 (prod Set Set Nat (\\ _ : Nat -> a1)) t0 (\\ x00 : ((_ : Nat) -> a1) -> \\ p00 : Eq t0 x00 -> Nat) t1 x0 p0) x1 -> prod Set Set Nat (\\ _ : Nat -> bool)) t2 u0 e0 u1 e1) u2) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type4_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_813$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type4$, for all functions $_H_div_mod_spec_intro$ from elements $x_815$ of $Lt$ of $_r$ and $_m$ and elements $x_814$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_815$ and $x_814$, for all elements $x_813$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_813$.",
    "output": "postulate div_mod_spec_rect_Type4_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_813 : div_mod_spec _n _m _q _r) -> Type4) -> (_H_div_mod_spec_intro : (x_815 : Lt _r _m) -> (x_814 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_815 x_814)) -> (x_813 : div_mod_spec _n _m _q _r) -> Q_ x_813"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_maxl. For all natural numbers $i$ and $n$ and $m$, if $max$ applied to $n$ and $m$ is less than or equal to $i$, then $n$ is less than or equal to $i$.",
    "output": "postulate le_maxl : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (max n m) i) -> Leq n i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sigma_p_dividesb. Let $m$ and $n$ and $p$ be natural numbers. Then if $0$ is less than $n$, then if $p$ is prime, then if $p$ is not divisible by $n$, then $m$ is equal to $bigop$ applied to $m$ and the function that maps $i$ to $dividesb$ applied to the exponentiation of $p$ and the sum of $i$ and $1$ and the product of the exponentiation of $p$ and $m$ and $n$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$.",
    "output": "postulate sigma_p_dividesb : (m : Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 n) -> (__1 : prime p) -> (__2 : not (divisible p n)) -> Eq m (bigop m (\\ i : Nat -> dividesb (pow p (plus i 1)) (times (pow p m) n)) Nat 0 plus (\\ i : Nat -> 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_div_O. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then the quotient of $n$ and $m$ is equal to $0$.",
    "output": "postulate lt_to_div_O : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq (div n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp. Let $n$ be a natural number. Then $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$ and $Psi$ applied to $n$.",
    "output": "postulate le_Psi_exp : (n : Nat) -> Leq (Psi (times 2 n)) (times (pow 2 (pred (times 2 n))) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp1. For all natural numbers $n$ and $m$ and $a$, if $0$ is less than $a$, then if $n$ is less than or equal to $m$, then the exponentiation of $n$ and $a$ is less than or equal to the exponentiation of $m$ and $a$.",
    "output": "postulate le_exp1 : (n : Nat) -> (m : Nat) -> (a : Nat) -> (_ : Lt 0 a) -> (__1 : Leq n m) -> Leq (pow n a) (pow m a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_div. Let $a$ and $b$ and $c$ be natural numbers. Then if $0$ is less than $b$, then if $c$ is divisible by $b$, then the product of $a$ and the quotient of $b$ and $c$ is equal to the quotient of the product of $a$ and $b$ and $c$.",
    "output": "postulate times_div : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt 0 b) -> (__1 : divisible c b) -> Eq (times a (div b c)) (div (times a b) c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_to_exp. Let $p$ and $n$ and $m$ and $q$ and $r$ be natural numbers. Then if $0$ is less than $m$, then if $p_ord_aux$ applied to $p$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $n$ is equal to the product of the exponentiation of $m$ and $q$ and $r$.",
    "output": "postulate p_ord_aux_to_exp : (p : Nat) -> (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 0 m) -> (__1 : Eq (p_ord_aux p n m) (mk_Prod Nat Nat q r)) -> Eq n (times (pow m q) r)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Discr_minus_x_xy. Let $x$ and $y$ be natural numbers. Then if $x$ is equal to the difference of $x$ and $y$, then $x$ is equal to $0$ or $y$ is equal to $0$.",
    "output": "postulate discr_minus_x_xy : (x : Nat) -> (y : Nat) -> (_ : Eq x (minus x y)) -> or (Eq x 0) (Eq y 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus_associative. Let $x$ and $y$ and $z$ be natural numbers. Then if $z$ is less than or equal to $y$, then the sum of $x$ and the difference of $y$ and $z$ is equal to the difference of the sum of $x$ and $y$ and $z$.",
    "output": "postulate plus_minus_associative : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq z y) -> Eq (plus x (minus y z)) (minus (plus x y) z)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp3. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1608$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1609$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp3 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1608 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1609 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp2. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_909$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_909$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_909$.",
    "output": "postulate ACop_rect_CProp2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_909 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_909 : ACop A _nil) -> Q_ x_909"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_S_to_permut_transpose. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $m$, for all elements $__$ of $permut$ of $f$ and the sum of $m$ and $1$, $permut$ holds for the function that maps $n$ to $transpose$ applied to $f$ applied to the sum of $m$ and $1$ and the sum of $m$ and $1$ and $f$ applied to $n$ and $m$.",
    "output": "postulate permut_S_to_permut_transpose : (f : (_ : Nat) -> Nat) -> (m : Nat) -> (_ : permut f (plus m 1)) -> permut (\\ n : Nat -> transpose (f (plus m 1)) (plus m 1) (f n)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_minus_m_m. Let $n$ and $m$ be natural numbers. Then $n$ is less than or equal to the sum of the difference of $n$ and $m$ and $m$.",
    "output": "postulate le_plus_minus_m_m : (n : Nat) -> (m : Nat) -> Leq n (plus (minus n m) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type4. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1572$ of $ACop$ of $x1$ and $x2$ to elements of $Type4$, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1573$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type4 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1572 : ACop x1 x2) -> Type4) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1573 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_le. Let $_n$ be a natural number. Then for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $z$ of $Leq$ of $_n$ and $__$ to elements of $return_sort$, for all elements $case_le_n$ of $return_type$ of $_n$ and $le_n$ applied to $_n$, for all functions $case_le_S$ from natural numbers $m$ and elements of $Leq$ of $_n$ and $m$ to elements of $return_type$ of the sum of $m$ and $1$ and $le_S$ applied to $_n$ and $m$ and $__$, for all natural numbers $__$, if $_n$ is less than or equal to $__$, then $return_type$ holds for $__$ and $z$.",
    "output": "postulate match_le : (_n : Nat) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (z : Leq _n __) -> return_sort) -> (case_le_n : return_type _n (le_n _n)) -> (case_le_S : (m : Nat) -> (_ : Leq _n m) -> return_type (plus m 1) (le_S _n m __)) -> (_ : Nat) -> (z : Leq _n __) -> return_type __ z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_O. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all elements $b$ of $B$, $lstar_r$ holds for $B$ and $R$ and $0$ and $b$ and $b$.",
    "output": "postulate lstar_r_O : (B : Set) -> (R : relation B) -> (b : B) -> lstar_r B R 0 b b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_div. Let $n$ and $d$ be natural numbers. Then if $0$ is less than $n$, then if $d$ is divisible by $n$, then the quotient of $n$ and the quotient of $n$ and $d$ is equal to $d$.",
    "output": "postulate div_div : (n : Nat) -> (d : Nat) -> (_ : Lt 0 n) -> (__1 : divisible d n) -> Eq (div n (div n d)) d"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Same_bigop. For all natural numbers $k$, for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ and $g$ from natural numbers to elements of $B$, for all elements $__$ of $sameF_upto$ of $k$ and $bool$ and $p1$ and $p2$, for all elements $__1$ of $sameF_p$ of $k$ and $p1$ and $B$ and $f$ and $g$, $bigop$ applied to $k$ and the function that maps $i$ to $p1$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p2$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$.",
    "output": "postulate same_bigop : (k : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (g : (_ : Nat) -> B) -> (_ : sameF_upto k bool p1 p2) -> (__1 : sameF_p k p1 B f g) -> Eq (bigop k (\\ i : Nat -> p1 i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p2 i) B nil op (\\ i : Nat -> g i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then the sum of $__$ and $__1$ is a natural number.",
    "output": "postulate plus : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_times_to_divides. For all natural numbers $p$ and $n$ and $m$, if $p$ is prime, then if $p$ is divisible by the product of $n$ and $m$, then $p$ is divisible by $n$ or $p$ is divisible by $m$.",
    "output": "postulate divides_times_to_divides : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : divisible p (times n m)) -> or (divisible p n) (divisible p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_le. Let $n$ and $m$ be natural numbers. Then $decidable$ holds for $Leq$ applied to $n$ and $m$.",
    "output": "postulate decidable_le : (n : Nat) -> (m : Nat) -> decidable (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_ord_sigma_p. For all natural numbers $n$ and $m$ and $x$, if $0$ is less than $n$, then if $x$ is prime, then if the exponentiation of $x$ and $m$ is less than or equal to $n$, then if $n$ is less than the exponentiation of $x$ and the sum of $m$ and $1$, then $ord$ applied to $n$ and $x$ is equal to $bigop$ applied to $m$ and the function that maps $i$ to $dividesb$ applied to the exponentiation of $x$ and the sum of $i$ and $1$ and $n$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$.",
    "output": "postulate eq_ord_sigma_p : (n : Nat) -> (m : Nat) -> (x : Nat) -> (_ : Lt 0 n) -> (__1 : prime x) -> (__2 : Leq (pow x m) n) -> (__3 : Lt n (pow x (plus m 1))) -> Eq (ord n x) (bigop m (\\ i : Nat -> dividesb (pow x (plus i 1)) n) Nat 0 plus (\\ i : Nat -> 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_maxr. For all natural numbers $i$ and $n$ and $m$, if $max$ applied to $n$ and $m$ is less than or equal to $i$, then $m$ is less than or equal to $i$.",
    "output": "postulate le_maxr : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (max n m) i) -> Leq m i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nill_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $nil$ and $a$ is equal to $a$.",
    "output": "postulate nill_body : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx nil a) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_max_f_max_g. For all functions $f$ and $g$ from natural numbers to booleans, for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $f$ applied to $i$ and $true$ to elements of $Eq$ of $g$ applied to $i$ and $true$, $max$ applied to $n$ and $f$ is less than or equal to $max$ applied to $n$ and $g$.",
    "output": "postulate le_max_f_max_g : (f : (_ : Nat) -> bool) -> (g : (_ : Nat) -> bool) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (f i) true) -> Eq (g i) true) -> Leq (max n f) (max n g)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Theta_pi_p_theta. Let $m$ be a natural number. Then $theta$ applied to the sum of the product of $2$ and $m$ and $1$ is equal to the product of $bigop$ applied to the sum of the product of $2$ and $m$ and $2$ and the function that maps $p$ to $andb$ applied to $leb$ applied to the sum of $m$ and $2$ and $p$ and $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$ and $theta$ applied to the sum of $m$ and $1$.",
    "output": "postulate theta_pi_p_theta : (m : Nat) -> Eq (theta (plus (times 2 m) 1)) (times (bigop (plus (times 2 m) 2) (\\ p : Nat -> andb (leb (plus m 2) p) (primeb p)) Nat 1 times (\\ p : Nat -> p)) (theta (plus m 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_max_to_pi_p_primeb. Let $q$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $max$ applied to the sum of $m$ and $1$ and the function that maps $i$ to $andb$ applied to $primeb$ applied to $i$ and $dividesb$ applied to $i$ and $m$ is less than $q$, then $m$ is equal to $bigop$ applied to $q$ and the function that maps $p$ to $andb$ applied to $primeb$ applied to $p$ and $dividesb$ applied to $p$ and $m$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $m$ and $p$.",
    "output": "postulate lt_max_to_pi_p_primeb : (q : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Lt (max (plus m 1) (\\ i : Nat -> andb (primeb i) (dividesb i m))) q) -> Eq m (bigop q (\\ p : Nat -> andb (primeb p) (dividesb p m)) Nat 1 times (\\ p : Nat -> pow p (ord m p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Theta_def. For all natural numbers $n$, $theta$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$.",
    "output": "postulate theta_def : (n : Nat) -> Eq (theta n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_times_times. For all natural numbers $a$ and $b$ and $c$, if $0$ is less than $c$, then if $0$ is less than $b$, then the quotient of $a$ and $b$ is equal to the quotient of the product of $a$ and $c$ and the product of $b$ and $c$.",
    "output": "postulate div_times_times : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : Lt 0 b) -> Eq (div a b) (div (times a c) (times b c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_le_r. For all natural numbers $a$ and $n$ and $m$, if the sum of $n$ and $a$ is less than or equal to the sum of $m$ and $a$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_plus_to_le_r : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (plus n a) (plus m a)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_to_not_eq_O. Let $n$ and $m$ and $q$ and $r$ be natural numbers. Then for all elements $__$ of $div_mod_spec$ of $n$ and $m$ and $q$ and $r$, $m$ is not equal to $0$.",
    "output": "postulate div_mod_spec_to_not_eq_O : (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : div_mod_spec n m q r) -> not (Eq m 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primeb_true_to_prime. Let $n$ be a natural number. Then if $primeb$ applied to $n$ is equal to $true$, then $n$ is prime.",
    "output": "postulate primeb_true_to_prime : (n : Nat) -> (_ : Eq (primeb n) true) -> prime n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_pi. Let $n$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all functions $f$ and $g$ from natural numbers to natural numbers, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the product of $f$ applied to $i$ and $g$ applied to $i$ is equal to the product of $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g$ applied to $i$.",
    "output": "postulate times_pi : (n : Nat) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> times (f i) (g i))) (times (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> f i)) (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_pi_p2. Let $n$ be a natural number. Then the factorial of the product of $2$ and $n$ is equal to $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the product of the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and the exponentiation of $p$ and $mod$ applied to the quotient of the product of $2$ and $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate fact_pi_p2 : (n : Nat) -> Eq (factorial (times 2 n)) (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> times (pow p (times 2 (div n (pow p (plus i 1))))) (pow p (mod (div (times 2 n) (pow p (plus i 1))) 2)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10332. For all natural numbers $n$, if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10332 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_j_i. For all natural numbers $i$ and $j$, $transpose$ applied to $i$ and $j$ and $i$ is equal to $j$.",
    "output": "postulate transpose_i_j_i : (i : Nat) -> (j : Nat) -> Eq (transpose i j i) j"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Start_lprim. For all natural numbers $n$ and $m$ and $a$, for all lists $acc$ of natural numbers, $option_hd$ applied to $Nat$ and $lprim$ applied to $n$ and $m$ and $cons$ applied to $Nat$ and $a$ and $acc$ is equal to $Some$ applied to $Nat$ and $a$.",
    "output": "postulate start_lprim : (n : Nat) -> (m : Nat) -> (a : Nat) -> (acc : list Nat) -> Eq (option_hd Nat (lprim n m (cons Nat a acc))) (Some Nat a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_73. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then for all natural numbers $x134$ and $x135$ and $x136$, the sum of $x134$ and the sum of $x135$ and $x136$ is equal to the sum of $x135$ and the sum of $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (n : Nat) -> (m : Nat) -> (p : Nat) -> (posp : Lt 0 p) -> (x134 : Nat) -> (x135 : Nat) -> (x136 : Nat) -> Eq (plus x134 (plus x135 x136)) (plus x135 (plus x134 x136))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_div. Let $n$ and $m$ be natural numbers. Then if $n$ is divisible by $m$, then the product of the quotient of $m$ and $n$ and $n$ is equal to $m$.",
    "output": "postulate divides_to_div : (n : Nat) -> (m : Nat) -> (_ : divisible n m) -> Eq (times (div m n) n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi'. For all natural numbers $__$, $Nat$.",
    "output": "postulate Psi' : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_pi_p_primeb_divides_b. Let $n$ and $m$ be natural numbers. Then $bigop$ applied to $n$ and the function that maps $p$ to $andb$ applied to $primeb$ applied to $p$ and $dividesb$ applied to $p$ and $m$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $m$ and $p$ is equal to $bigop$ applied to $n$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $m$ and $p$.",
    "output": "postulate eq_pi_p_primeb_divides_b : (n : Nat) -> (m : Nat) -> Eq (bigop n (\\ p : Nat -> andb (primeb p) (dividesb p m)) Nat 1 times (\\ p : Nat -> pow p (ord m p))) (bigop n (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (ord m p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_primr. For all natural numbers $n$, the exponentiation of $n$ and $prim$ applied to $n$ is less than or equal to the exponentiation of $2$ and the product of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_exp_primr : (n : Nat) -> Leq (pow n (prim n)) (pow 2 (times 2 (minus (times 2 n) 3)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_2. $Psi$ applied to $2$ is equal to $2$.",
    "output": "postulate Psi_2 : Eq (Psi 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1561. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to $1$, then the difference of the product of $p$ and $a$ and the product of $m$ and $b$ is equal to $1$.",
    "output": "postulate let_clause_1561 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times a p) (times b m)) (gcd p m)) -> (H0 : Eq (minus (times a p) (times b m)) 1) -> Eq (minus (times p a) (times m b)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_0. For all natural numbers $n$, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, $bigop$ applied to the sum of $n$ and $1$ and the function that maps $i$ to $true$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to the sum of $i$ and $1$ and $f$ applied to $0$.",
    "output": "postulate bigop_0 : (n : Nat) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> Eq (bigop (plus n 1) (\\ i : Nat -> true) B nil (op B nil op) (\\ i : Nat -> f i)) (op B nil op (bigop n (\\ i : Nat -> true) B nil (op B nil op) (\\ i : Nat -> f (plus i 1))) (f 0))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_S_to_permut. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $m$, for all elements $__$ of $permut$ of $f$ and the sum of $m$ and $1$, if $f$ applied to the sum of $m$ and $1$ is equal to the sum of $m$ and $1$, then $permut$ holds for $f$ and $m$.",
    "output": "postulate permut_S_to_permut : (f : (_ : Nat) -> Nat) -> (m : Nat) -> (_ : permut f (plus m 1)) -> (__1 : Eq (f (plus m 1)) (plus m 1)) -> permut f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_not_lt. Let $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $m$, then $m$ is not less than $n$.",
    "output": "postulate le_to_not_lt : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> not (Lt m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type5_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_817$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type5$, for all functions $_H_div_mod_spec_intro$ from elements $x_819$ of $Lt$ of $_r$ and $_m$ and elements $x_818$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_819$ and $x_818$, for all elements $x_817$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_817$.",
    "output": "postulate div_mod_spec_rect_Type5_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_817 : div_mod_spec _n _m _q _r) -> Type5) -> (_H_div_mod_spec_intro : (x_819 : Lt _r _m) -> (x_818 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_819 x_818)) -> (x_817 : div_mod_spec _n _m _q _r) -> Q_ x_817"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15623. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15623 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_times. For all natural numbers $p$ and $n$ and $m$, if $1$ is less than $p$, then the logarithm of $p$ and the product of $n$ and $m$ is less than or equal to the sum of the sum of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$ and $1$.",
    "output": "postulate log_times : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> Leq (log p (times n m)) (plus (plus (log p n) (log p m)) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1258. For all natural numbers $b$, if $1$ is less than $b$, then for all natural numbers $n$, if the product of the exponentiation of $b$ and $n$ and $b$ is equal to $1$, then the product of $b$ and the exponentiation of $b$ and $n$ is equal to $1$.",
    "output": "postulate let_clause_1258 : (b : Nat) -> (lt1b : Lt 1 b) -> (n : Nat) -> (H : Eq (times (pow b n) b) 1) -> Eq (times b (pow b n)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_le_to_eq. For all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then if $m$ is less than or equal to $n$, then $n$ is equal to $m$.",
    "output": "postulate le_to_le_to_eq : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> (__1 : Leq m n) -> Eq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_div_div_div_div. Let $n$ and $m$ and $q$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then the quotient of the quotient of $q$ and $n$ and $m$ is equal to the quotient of the quotient of $q$ and $m$ and $n$.",
    "output": "postulate eq_div_div_div_div : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> Eq (div (div q n) m) (div (div q m) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nth_prime_body. Let $__$ be a natural number. Then $Nat$.",
    "output": "postulate nth_prime_body : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_monotonic. For all functions $f$ from natural numbers to natural numbers, for all elements $__$ of $increasing$ of $f$, $monotonic$ holds for $Nat$ and $Lt$ and $f$.",
    "output": "postulate increasing_to_monotonic : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> monotonic Nat Lt f"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type1_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_953$ of $Dop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_953$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_953$.",
    "output": "postulate Dop_rect_Type1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_953 : Dop A _nil) -> Type1) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_953 : Dop A _nil) -> Q_ x_953"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_times_div_minus_mod. Let $a$ and $b$ be natural numbers. Then the product of the quotient of $a$ and $b$ and $b$ is equal to the difference of $a$ and $mod$ applied to $a$ and $b$.",
    "output": "postulate eq_times_div_minus_mod : (a : Nat) -> (b : Nat) -> Eq (times (div a b) b) (minus a (mod a b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_n_n. For all natural numbers $n$, $0$ is equal to the difference of $n$ and $n$.",
    "output": "postulate minus_n_n : (n : Nat) -> Eq 0 (minus n n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_p_ord_inv. For all natural numbers $p$ and $m$ and $x$, $p_ord_inv$ applied to $p$ and $m$ and $x$ is equal to the sum of the product of $ord_rem$ applied to $x$ and $p$ and $m$ and $ord$ applied to $x$ and $p$.",
    "output": "postulate eq_p_ord_inv : (p : Nat) -> (m : Nat) -> (x : Nat) -> Eq (p_ord_inv p m x) (plus (times (ord_rem x p) m) (ord x p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp3. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1674$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1675$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp3 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1674 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1675 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_n_n. Let $n$ be a natural number. Then the greatest common divisor of $n$ and $n$ is equal to $n$.",
    "output": "postulate gcd_n_n : (n : Nat) -> Eq (gcd n n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp0. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1692$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1693$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp0 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1692 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1693 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_exists. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $m$ is less than $n$, then if $f$ applied to $m$ is equal to $true$, then for all functions $__2$ from natural numbers $i$ and elements $__2$ of $Lt$ of $m$ and $i$ and elements $__3$ of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max$ applied to $n$ and $f$ is equal to $m$.",
    "output": "postulate max_exists : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Eq (f m) true) -> (__2 : (i : Nat) -> (__2 : Lt m i) -> (__3 : Lt i n) -> Eq (f i) false) -> Eq (max n f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1686. Let $n$ and $m$ be natural numbers. Then for all functions $Hind$ from natural numbers $p$ and elements of $Lt$ of $p$ and $m$ and elements $__1$ of $Lt$ of $1$ and $p$ to elements of $Leq$ of $Psi$ applied to $p$ and the product of $pred$ applied to $p$ and the exponentiation of $2$ and the difference of the product of $2$ and $p$ and $3$, for all natural numbers $a$, if $m$ is equal to the product of $2$ and $a$ or $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $1$ is less than the sum of the product of $2$ and $a$ and $1$, then if $0$ is less than $a$, then $pred$ applied to $m$ is equal to the sum of $a$ and $a$.",
    "output": "postulate let_clause_1686 : (n : Nat) -> (m : Nat) -> (Hind : (p : Nat) -> (_ : Lt p m) -> (__1 : Lt 1 p) -> Leq (Psi p) (times (pred p) (pow 2 (minus (times 2 p) 3)))) -> (a : Nat) -> (_clearme : or (Eq m (times 2 a)) (Eq m (plus (times 2 a) 1))) -> (Hm : Eq m (plus (times 2 a) 1)) -> (Hlt : Lt 1 (plus (times 2 a) 1)) -> (Ha : Lt 0 a) -> Eq (pred m) (plus a a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_ord_rem. Let $m$ and $p$ be natural numbers. Then if $0$ is less than $m$, then if $1$ is less than $p$, then $p$ is not divisible by $ord_rem$ applied to $m$ and $p$.",
    "output": "postulate not_divides_ord_rem : (m : Nat) -> (p : Nat) -> (_ : Lt 0 m) -> (__1 : Lt 1 p) -> not (divisible p (ord_rem m p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Natural numbers are a basic type.",
    "output": "postulate Nat : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp0_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_857$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_859$ of $Lt$ of $_r$ and $_m$ and elements $x_858$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_859$ and $x_858$, for all elements $x_857$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_857$.",
    "output": "postulate div_mod_spec_rect_CProp0_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_857 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_859 : Lt _r _m) -> (x_858 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_859 x_858)) -> (x_857 : div_mod_spec _n _m _q _r) -> Q_ x_857"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sub_hk. For all functions $__$ from natural numbers to natural numbers, for all functions $__1$ from natural numbers $__1$ to natural numbers, for all sets $A$, $relation$ holds for $range$ applied to $A$.",
    "output": "postulate sub_hk : (_ : (_ : Nat) -> Nat) -> (__1 : (__1 : Nat) -> Nat) -> (A : Set) -> relation (range A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt_to_lt_times_l. Let $m$ and $n$ be natural numbers. Then if $n$ is less than the square root of $m$, then the product of $n$ and $n$ is less than $m$.",
    "output": "postulate lt_sqrt_to_lt_times_l : (m : Nat) -> (n : Nat) -> (_ : Lt n (sqrt m)) -> Lt (times n n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sqrt_to_le_times_l. For all natural numbers $m$ and $n$, if $n$ is less than or equal to the square root of $m$, then the product of $n$ and $n$ is less than or equal to $m$.",
    "output": "postulate le_sqrt_to_le_times_l : (m : Nat) -> (n : Nat) -> (_ : Leq n (sqrt m)) -> Leq (times n n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp4_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_929$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_929$ of $range$ of $_A$, $Q_$ holds for $x_929$.",
    "output": "postulate range_rect_CProp4_body : (_A : Set) -> (Q_ : (_x_929 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_929 : range _A) -> Q_ x_929"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type5. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_947$ of $Dop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_947$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_947$.",
    "output": "postulate Dop_rect_Type5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_947 : Dop A _nil) -> Type5) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_947 : Dop A _nil) -> Q_ x_947"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distributive_times_plus_r. For all natural numbers $a$ and $b$ and $c$, the product of the sum of $b$ and $c$ and $a$ is equal to the sum of the product of $b$ and $a$ and the product of $c$ and $a$.",
    "output": "postulate distributive_times_plus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> Eq (times (plus b c) a) (plus (times b a) (times c a))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_ind_body. Let $_n$ and $_m$ be natural numbers. Then for all functions $Q_$ from elements $_x_1192$ of $divisible$ of $_n$ and $_m$ to propositions, for all functions $_H_quotient$ from natural numbers $q$ and elements $x_1193$ of $Eq$ of $_m$ and the product of $_n$ and $q$ to elements of $Q_$ of $quotient$ applied to $_n$ and $_m$ and $q$ and $x_1193$, if $_n$ is divisible by $_m$, then $Q_$ holds for $x_1192$.",
    "output": "postulate divides_ind_body : (_n : Nat) -> (_m : Nat) -> (Q_ : (_x_1192 : divisible _n _m) -> Prop) -> (_H_quotient : (q : Nat) -> (x_1193 : Eq _m (times _n q)) -> Q_ (quotient _n _m q x_1193)) -> (x_1192 : divisible _n _m) -> Q_ x_1192"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim_invariant. For all natural numbers $n$ and $i$, for all lists $acc$ of natural numbers, if $1$ is less than $i$, then for all elements $__1$ of $primes_below$ of $acc$ and $i$, $primes_below$ holds for $lprim$ applied to $n$ and $i$ and $acc$ and the sum of $n$ and $i$.",
    "output": "postulate lprim_invariant : (n : Nat) -> (i : Nat) -> (acc : list Nat) -> (_ : Lt 1 i) -> (__1 : primes_below acc i) -> primes_below (lprim n i acc) (plus n i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_to_bijn. Let $f$ and $g$ be functions from natural numbers to natural numbers. Then for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and $g$ applied to $i$, for all elements $__1$ of $bijn$ of $f$ and $n$, $bijn$ holds for $g$ and $n$.",
    "output": "postulate eq_to_bijn : (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Leq i n) -> Eq (f i) (g i)) -> (__1 : bijn f n) -> bijn g n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_j_j_i. Let $i$ and $j$ and $n$ be natural numbers. Then $transpose$ applied to $i$ and $j$ and $n$ is equal to $transpose$ applied to $j$ and $i$ and $n$.",
    "output": "postulate transpose_i_j_j_i : (i : Nat) -> (j : Nat) -> (n : Nat) -> Eq (transpose i j n) (transpose j i n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F3_ind_aux. For all sets $A1$ and $A2$ and $A3$, for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ and elements $__2$ of $A3$ to natural numbers, for all elements $P$ of $relation3$ of $A1$ and $A2$ and $A3$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$, for all natural numbers $n$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, for all elements $a3$ of $A3$, if $f$ applied to $a1$ and $a2$ and $a3$ is equal to $n$, then $P$ holds for $a1$ and $a2$ and $a3$.",
    "output": "postulate f3_ind_aux : (A1 : Set) -> (A2 : Set) -> (A3 : Set) -> (f : (_ : A1) -> (__1 : A2) -> (__2 : A3) -> Nat) -> (P : relation3 A1 A2 A3) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (_ : Lt (f a1 a2 a3) n) -> P a1 a2 a3) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (__1 : Eq (f a1 a2 a3) n) -> P a1 a2 a3) -> (n : Nat) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (__1 : Eq (f a1 a2 a3) n) -> P a1 a2 a3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15491. For all natural numbers $m$ and $n$, if $0$ is equal to $n$, then for all natural numbers $x1106$, $x1106$ is equal to the difference of $x1106$ and $n$.",
    "output": "postulate let_clause_15491 : (m : Nat) -> (n : Nat) -> (eqn0 : Eq 0 n) -> (x1106 : Nat) -> Eq x1106 (minus x1106 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_div_div_div_div. For all natural numbers $n$ and $m$ and $q$, if $0$ is less than $n$, then if $0$ is less than $m$, then the quotient of the quotient of $q$ and $n$ and $m$ is equal to the quotient of the quotient of $q$ and $m$ and $n$.",
    "output": "postulate eq_div_div_div_div : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> Eq (div (div q n) m) (div (div q m) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_S_fact. Let $n$ and $i$ be natural numbers. Then if $1$ is less than $i$, then if $i$ is less than or equal to $n$, then $mod$ applied to the sum of the factorial of $n$ and $1$ and $i$ is equal to $1$.",
    "output": "postulate mod_S_fact : (n : Nat) -> (i : Nat) -> (_ : Lt 1 i) -> (__1 : Leq i n) -> Eq (mod (plus (factorial n) 1) i) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_pred_pred. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then the difference of $pred$ applied to $n$ and $pred$ applied to $m$ is equal to the difference of $n$ and $m$.",
    "output": "postulate minus_pred_pred : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> Eq (minus (pred n) (pred m)) (minus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type1. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_899$ of $ACop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_899$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_899$.",
    "output": "postulate ACop_rect_Type1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_899 : ACop A _nil) -> Type1) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_899 : ACop A _nil) -> Q_ x_899"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nth_primeS. Let $n$ be a natural number. Then $nth_prime$ applied to the sum of $n$ and $1$ is equal to $min$ applied to $let_upper_bound1$ applied to $n$ and the sum of $let_previous_prime1$ applied to $n$ and $1$ and $primeb$.",
    "output": "postulate nth_primeS : (n : Nat) -> Eq (nth_prime (plus n 1)) (min (let_upper_bound1 n) (plus (let_previous_prime1 n) 1) primeb)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le. For all natural numbers $x$ and $y$, if $x$ is less than $y$, then $x$ is less than or equal to $y$.",
    "output": "postulate lt_to_le : (x : Nat) -> (y : Nat) -> (_ : Lt x y) -> Leq x y"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F2_ind_aux. Let $A1$ and $A2$ be sets. Then for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ to natural numbers, for all elements $P$ of $relation2$ of $A1$ and $A2$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$, for all natural numbers $n$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, if $f$ applied to $a1$ and $a2$ is equal to $n$, then $P$ holds for $a1$ and $a2$.",
    "output": "postulate f2_ind_aux : (A1 : Set) -> (A2 : Set) -> (f : (_ : A1) -> (__1 : A2) -> Nat) -> (P : relation2 A1 A2) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (_ : Lt (f a1 a2) n) -> P a1 a2) -> (a1 : A1) -> (a2 : A2) -> (__1 : Eq (f a1 a2) n) -> P a1 a2) -> (n : Nat) -> (a1 : A1) -> (a2 : A2) -> (__1 : Eq (f a1 a2) n) -> P a1 a2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_O_to_not_divides. For all natural numbers $p$ and $m$, if $0$ is less than $m$, then if $p$ is prime, then if $ord$ applied to $m$ and $p$ is equal to $0$, then $p$ is not divisible by $m$.",
    "output": "postulate ord_O_to_not_divides : (p : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : Eq (ord m p) 0) -> not (divisible p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sub_hkO. Let $h$ and $k$ be functions from natural numbers to natural numbers. Then for all sets $A$, for all elements $I$ and $J$ of $range$ of $A$, if $upto$ applied to $A$ and $I$ is equal to $0$, then $sub_hk$ holds for $h$ and $k$ and $A$ and $I$ and $J$.",
    "output": "postulate sub_hkO : (h : (_ : Nat) -> Nat) -> (k : (_ : Nat) -> Nat) -> (A : Set) -> (I : range A) -> (J : range A) -> (_ : Eq (upto A I) 0) -> sub_hk h k A I J"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sigma. Let $n$ be a natural number. Then for all functions $p1$ and $p2$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$, for all functions $__1$ from natural numbers $i$ and elements $__1$ of $Lt$ of $i$ and $n$ and elements $__2$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, $bigop$ applied to $n$ and the function that maps $i$ to $p1$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g1$ applied to $i$ is less than or equal to $bigop$ applied to $n$ and the function that maps $i$ to $p2$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g2$ applied to $i$.",
    "output": "postulate le_sigma : (n : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (__1 : (i : Nat) -> (__1 : Lt i n) -> (__2 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n (\\ i : Nat -> p1 i) Nat 0 plus (\\ i : Nat -> g1 i)) (bigop n (\\ i : Nat -> p2 i) Nat 0 plus (\\ i : Nat -> g2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp0. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1758$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1759$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1758 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1759 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_l. Let $n$ and $m$ be natural numbers. Then the greatest common divisor of $n$ and $m$ is divisible by $n$.",
    "output": "postulate divides_gcd_l : (n : Nat) -> (m : Nat) -> divisible (gcd n m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_1_fact. For all natural numbers $n$, $1$ is less than or equal to the factorial of $n$.",
    "output": "postulate le_1_fact : (n : Nat) -> Leq 1 (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_1_n. Let $n$ be a natural number. Then $1$ is equal to the exponentiation of $1$ and $n$.",
    "output": "postulate exp_1_n : (n : Nat) -> Eq 1 (pow 1 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then the sum of $__$ and $__1$ is a natural number.",
    "output": "postulate plus : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_lt_O. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $n$ is divisible by $m$, then $0$ is less than $n$.",
    "output": "postulate divides_to_lt_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : divisible n m) -> Lt 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_ind_body. Let $_n$ be a natural number. Then for all functions $Q_$ from natural numbers $x_417$ and elements $_x_418$ of $Leq$ of $_n$ and $x_417$ to propositions, for all elements $_H_le_n$ of $Q_$ of $_n$ and $le_n$ applied to $_n$, for all functions $_H_le_S$ from natural numbers $m$ and elements $x_419$ of $Leq$ of $_n$ and $m$ and elements $_x_421$ of $Q_$ of $m$ and $x_419$ to elements of $Q_$ of the sum of $m$ and $1$ and $le_S$ applied to $_n$ and $m$ and $x_419$, for all natural numbers $x_417$, if $_n$ is less than or equal to $x_417$, then $Q_$ holds for $x_417$ and $x_418$.",
    "output": "postulate le_ind_body : (_n : Nat) -> (Q_ : (x_417 : Nat) -> (_x_418 : Leq _n x_417) -> Prop) -> (_H_le_n : Q_ _n (le_n _n)) -> (_H_le_S : (m : Nat) -> (x_419 : Leq _n m) -> (_x_421 : Q_ m x_419) -> Q_ (plus m 1) (le_S _n m x_419)) -> (x_417 : Nat) -> (x_418 : Leq _n x_417) -> Q_ x_417 x_418"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound2. For all natural numbers $n$ and $m$, $Nat$.",
    "output": "postulate let_upper_bound2 : (n : Nat) -> (m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_n3. Let $n$ be a natural number. Then if $15$ is less than or equal to $n$, then $prim$ applied to $n$ is less than or equal to $pred$ applied to the quotient of $n$ and $2$.",
    "output": "postulate le_prim_n3 : (n : Nat) -> (_ : Leq 15 n) -> Leq (prim n) (pred (div n 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_minus_l. Let $p$ and $q$ and $n$ be natural numbers. Then if $n$ is less than or equal to $q$, then if $q$ is less than $p$, then the difference of $q$ and $n$ is less than the difference of $p$ and $n$.",
    "output": "postulate monotonic_lt_minus_l : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : Leq n q) -> (__1 : Lt q p) -> Lt (minus q n) (minus p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_leb_true. For all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $leb$ applied to $n$ and $m$ is equal to $true$.",
    "output": "postulate le_to_leb_true : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Eq (leb n m) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exists_forall_lt. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$, $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$ or $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n$ and the function that maps $__$ to $Eq$ applied to $f$ applied to $i$ and absurdity.",
    "output": "postulate exists_forall_lt : (f : (_ : Nat) -> bool) -> (n : Nat) -> or (ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n) (\\ _ : Lt i n -> Eq (f i) false)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bdef. For all natural numbers $n$, $B$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and $mod$ applied to the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate Bdef : (n : Nat) -> Eq (B n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (mod (div n (pow p (plus i 1))) 2))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_plus_l. Let $n$ be a natural number. Then $injective$ holds for $Nat$ and $Nat$ and the function that maps $m$ to the sum of $m$ and $n$.",
    "output": "postulate injective_plus_l : (n : Nat) -> injective Nat Nat (\\ m : Nat -> plus m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides_false. Let $l$ be a list of natural numbers. Then for all natural numbers $n$, if $list_divides$ applied to $l$ and $n$ is equal to absurdity, then for all natural numbers $p$, for all elements $__1$ of $mem$ of $Nat$ and $p$ and $l$, $p$ is not divisible by $n$.",
    "output": "postulate list_divides_false : (l : list Nat) -> (n : Nat) -> (_ : Eq (list_divides l n) false) -> (p : Nat) -> (__1 : mem Nat p l) -> not (divisible p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times_n_to_lt_l. Let $n$ and $p$ and $q$ be natural numbers. Then if the product of $p$ and $n$ is less than the product of $q$ and $n$, then $p$ is less than $q$.",
    "output": "postulate lt_times_n_to_lt_l : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (times p n) (times q n)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type1. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_953$ of $Dop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_953$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_953$.",
    "output": "postulate Dop_rect_Type1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_953 : Dop A _nil) -> Type1) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_953 : Dop A _nil) -> Q_ x_953"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_smallest_factor_n. For all natural numbers $n$, $smallest_factor$ applied to $n$ is less than or equal to $n$.",
    "output": "postulate le_smallest_factor_n : (n : Nat) -> Leq (smallest_factor n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type4. For all functions $Q_$ from natural numbers $_x_369$ to elements of $Type4$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_370$ and elements $_x_372$ of $Q_$ of $x_370$ to elements of $Q_$ of the sum of $x_370$ and $1$, for all natural numbers $x_369$, $Q_$ holds for $x_369$.",
    "output": "postulate nat_rect_Type4 : (Q_ : (_x_369 : Nat) -> Type4) -> (_H_O : Q_ 0) -> (_H_S : (x_370 : Nat) -> (_x_372 : Q_ x_370) -> Q_ (plus x_370 1)) -> (x_369 : Nat) -> Q_ x_369"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_S. For all natural numbers $n$, $0$ is less than the sum of $n$ and $1$.",
    "output": "postulate lt_O_S : (n : Nat) -> Lt 0 (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_O_to_eq_O. Let $h$ be a function from natural numbers to natural numbers. Then for all elements $__$ of $permut$ of $h$ and $0$, $h$ applied to $0$ is equal to $0$.",
    "output": "postulate permut_O_to_eq_O : (h : (_ : Nat) -> Nat) -> (_ : permut h 0) -> Eq (h 0) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_O_n. Let $n$ be a natural number. Then $0$ is less than or equal to $n$.",
    "output": "postulate le_O_n : (n : Nat) -> Leq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_eq_mod. For all natural numbers $n$ and $m$, if $n$ is less than $m$, then $mod$ applied to $n$ and $m$ is equal to $n$.",
    "output": "postulate lt_to_eq_mod : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq (mod n m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_exp_to_divides. Let $p$ and $n$ and $m$ be natural numbers. Then if $p$ is prime, then if $p$ is divisible by the exponentiation of $n$ and $m$, then $p$ is divisible by $n$.",
    "output": "postulate divides_exp_to_divides : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : divisible p (pow n m)) -> divisible p n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp1. For all functions $Q_$ from natural numbers $_x_409$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_410$ and elements $_x_412$ of $Q_$ of $x_410$ to elements of $Q_$ of the sum of $x_410$ and $1$, for all natural numbers $x_409$, $Q_$ holds for $x_409$.",
    "output": "postulate nat_rect_CProp1 : (Q_ : (_x_409 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_410 : Nat) -> (_x_412 : Q_ x_410) -> Q_ (plus x_410 1)) -> (x_409 : Nat) -> Q_ x_409"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_nth_prime. For all natural numbers $p$, if $p$ is prime, then $ex$ holds for $Nat$ and the function that maps $i$ to $Eq$ applied to $nth_prime$ applied to $i$ and $p$.",
    "output": "postulate prime_to_nth_prime : (p : Nat) -> (_ : prime p) -> ex Nat (\\ i : Nat -> Eq (nth_prime i) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_length_to_mem. Let $n$ be a natural number. Then for all lists $l$ of natural numbers, if $length$ applied to $Nat$ and $l$ is equal to the sum of $n$ and $1$, then for all elements $__1$ of $unique$ of $Nat$ and $l$, for all functions $__2$ from natural numbers $x$ and elements $__2$ of $mem$ of $Nat$ and $x$ and $l$ to elements of $Leq$ of $x$ and $n$, $mem$ holds for $Nat$ and $n$ and $l$.",
    "output": "postulate eq_length_to_mem : (n : Nat) -> (l : list Nat) -> (_ : Eq (length Nat l) (plus n 1)) -> (__1 : unique Nat l) -> (__2 : (x : Nat) -> (__2 : mem Nat x l) -> Leq x n) -> mem Nat n l"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type2. For all functions $Q_$ from natural numbers $_x_381$ to elements of $Type2$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_382$ and elements $_x_384$ of $Q_$ of $x_382$ to elements of $Q_$ of the sum of $x_382$ and $1$, for all natural numbers $x_381$, $Q_$ holds for $x_381$.",
    "output": "postulate nat_rect_Type2 : (Q_ : (_x_381 : Nat) -> Type2) -> (_H_O : Q_ 0) -> (_H_S : (x_382 : Nat) -> (_x_384 : Q_ x_382) -> Q_ (plus x_382 1)) -> (x_381 : Nat) -> Q_ x_381"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_inv_ind. Let $x1$ and $x2$ be natural numbers. Then if $x1$ is less than or equal to $x2$, then for all functions $P$ from natural numbers $_z724$ to propositions, for all functions $_H1$ from elements $_z725$ of $Eq$ of $x2$ and $x1$ to elements of $P$ of $x1$, for all functions $_H2$ from natural numbers $m$ and elements $_x_419$ of $Leq$ of $x1$ and $m$ and functions $_x_421$ from elements $_z725$ of $Eq$ of $x2$ and $m$ to elements of $P$ of $m$ and elements $_z725$ of $Eq$ of $x2$ and the sum of $m$ and $1$ to elements of $P$ of the sum of $m$ and $1$, $P$ holds for $x2$.",
    "output": "postulate le_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (_Hterm : Leq x1 x2) -> (P : (_z724 : Nat) -> Prop) -> (_H1 : (_z725 : Eq x2 x1) -> P x1) -> (_H2 : (m : Nat) -> (_x_419 : Leq x1 m) -> (_x_421 : (_z725 : Eq x2 m) -> P m) -> (_z725 : Eq x2 (plus m 1)) -> P (plus m 1)) -> P x2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_ord. For all natural numbers $p$ and $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then $ord_rem$ applied to $n$ and $p$ is divisible by $ord_rem$ applied to $m$ and $p$ and $ord$ applied to $n$ and $p$ is less than or equal to $ord$ applied to $m$ and $p$.",
    "output": "postulate divides_to_ord : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> and (divisible (ord_rem n p) (ord_rem m p)) (Leq (ord n p) (ord m p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log. Let $p$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $p$, then if $n$ is less than or equal to $m$, then the logarithm of $p$ and $n$ is less than or equal to the logarithm of $p$ and $m$.",
    "output": "postulate le_log : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Leq n m) -> Leq (log p n) (log p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n \\in N$. Then we can say that $not_bertrand$ holds for $_n$.",
    "output": "postulate not_bertrand : (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_S_S. For all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then the sum of $n$ and $1$ is less than or equal to the sum of $m$ and $1$.",
    "output": "postulate le_S_S : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq (plus n 1) (plus m 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type1. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_871$ of $Aop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_871$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_871$.",
    "output": "postulate Aop_rect_Type1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_871 : Aop A _nil) -> Type1) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_871 : Aop A _nil) -> Q_ x_871"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_gcd. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then $0$ is less than the greatest common divisor of $m$ and $n$.",
    "output": "postulate lt_O_gcd : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> Lt 0 (gcd m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_invert_permut. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$ and $m$, if $m$ is less than or equal to $n$, then for all elements $__1$ of $permut$ of $f$ and $n$, $f$ applied to $invert_permut$ applied to $n$ and $f$ and $m$ is equal to $m$.",
    "output": "postulate f_invert_permut : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> (__1 : permut f n) -> Eq (f (invert_permut n f m)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_O_S. Let $n$ be a natural number. Then $0$ is not equal to the sum of $n$ and $1$.",
    "output": "postulate not_eq_O_S : (n : Nat) -> not (Eq 0 (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type0_body. Let $Q_$ be a function from natural numbers $_x_389$ to sets. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_390$ and elements $_x_392$ of $Q_$ of $x_390$ to elements of $Q_$ of the sum of $x_390$ and $1$, for all natural numbers $x_389$, $Q_$ holds for $x_389$.",
    "output": "postulate nat_rect_Type0_body : (Q_ : (_x_389 : Nat) -> Set) -> (_H_O : Q_ 0) -> (_H_S : (x_390 : Nat) -> (_x_392 : Q_ x_390) -> Q_ (plus x_390 1)) -> (x_389 : Nat) -> Q_ x_389"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_ind. Let $_n$ be a natural number. Then for all functions $Q_$ from natural numbers $x_417$ and elements $_x_418$ of $Leq$ of $_n$ and $x_417$ to propositions, for all elements $_H_le_n$ of $Q_$ of $_n$ and $le_n$ applied to $_n$, for all functions $_H_le_S$ from natural numbers $m$ and elements $x_419$ of $Leq$ of $_n$ and $m$ and elements $_x_421$ of $Q_$ of $m$ and $x_419$ to elements of $Q_$ of the sum of $m$ and $1$ and $le_S$ applied to $_n$ and $m$ and $x_419$, for all natural numbers $x_417$, if $_n$ is less than or equal to $x_417$, then $Q_$ holds for $x_417$ and $x_418$.",
    "output": "postulate le_ind : (_n : Nat) -> (Q_ : (x_417 : Nat) -> (_x_418 : Leq _n x_417) -> Prop) -> (_H_le_n : Q_ _n (le_n _n)) -> (_H_le_S : (m : Nat) -> (x_419 : Leq _n m) -> (_x_421 : Q_ m x_419) -> Q_ (plus m 1) (le_S _n m x_419)) -> (x_417 : Nat) -> (x_418 : Leq _n x_417) -> Q_ x_417 x_418"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp2. Let $Q_$ be a function from natural numbers $_x_405$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_406$ and elements $_x_408$ of $Q_$ of $x_406$ to elements of $Q_$ of the sum of $x_406$ and $1$, for all natural numbers $x_405$, $Q_$ holds for $x_405$.",
    "output": "postulate nat_rect_CProp2 : (Q_ : (_x_405 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_406 : Nat) -> (_x_408 : Q_ x_406) -> Q_ (plus x_406 1)) -> (x_405 : Nat) -> Q_ x_405"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. For all natural numbers $p$ and $n$ and $n1$ and $q$ and $p1$ and $p2$ and $qa$ and $ra$, if $p_ord_aux$ applied to the sum of $n1$ and $1$ and the sum of $n1$ and $1$ and the sum of $p2$ and $2$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $qa$ and $ra$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (p : Nat) -> (n : Nat) -> (n1 : Nat) -> (q : Nat) -> (p1 : Nat) -> (p2 : Nat) -> (qa : Nat) -> (ra : Nat) -> (H : Eq (p_ord_aux (plus n1 1) (plus n1 1) (plus p2 2)) (mk_Prod Nat Nat qa ra)) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp5. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_877$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_877$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_877$.",
    "output": "postulate Aop_rect_CProp5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_877 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_877 : Aop A _nil) -> Q_ x_877"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type0. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1728$ of $Dop$ of $x1$ and $x2$ to sets, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1729$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1728 : Dop x1 x2) -> Set) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1729 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_discr. Let $x$ and $y$ be natural numbers. Then if $x$ is equal to $y$, then $match_nat$ holds for the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and $match_nat$ applied to the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $P$ and the function that maps $_z23$ to $P$ and the function that maps $u0$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $P$ and $y$ and the function that maps $t0$ to $match_nat$ applied to the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $P$ and the function that maps $u0$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $Nat$ and $t0$ and $u0$ and the function that maps $_e0$ to $P$ and the function that maps $_z24$ to $P$ and $y$ and $x$.",
    "output": "postulate nat_discr : (x : Nat) -> (y : Nat) -> (_e : Eq x y) -> match_nat (plus Type2 1) (\\ _ : Nat -> univ Type2) (match_nat (plus Type2 1) (\\ _ : Nat -> univ Type2) (prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 P (\\ _z23 : P -> P))) (\\ u0 : Nat -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> P)) y) (\\ t0 : Nat -> match_nat (plus Type2 1) (\\ _ : Nat -> univ Type2) (prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> P)) (\\ u0 : Nat -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 Nat t0) u0) (\\ _e0 : Eq (R0 Nat t0) u0 -> P)) (\\ _z24 : ((_e0 : Eq (R0 Nat t0) u0) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_plus. Let $n$ and $p$ and $q$ be natural numbers. Then if $n$ is divisible by $p$, then if $n$ is divisible by $q$, then $n$ is divisible by the sum of $p$ and $q$.",
    "output": "postulate divides_plus : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : divisible n p) -> (__1 : divisible n q) -> divisible n (plus p q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker_spec. For all lists $tl$ of natural numbers, for all natural numbers $a$, for all lists $l$ of natural numbers, if $checker$ applied to $l$ is equal to $true$, then if $l$ is equal to $cons$ applied to $Nat$ and $a$ and $tl$, then for all natural numbers $p$, for all elements $__2$ of $mem$ of $Nat$ and $p$ and $tl$, $ex$ holds for $Nat$ and the function that maps $pp$ to the conjunction of the conjunction of $mem$ applied to $Nat$ and $pp$ and $l$ and $Lt$ applied to $pp$ and $p$ and $Leq$ applied to $p$ and the product of $2$ and $pp$.",
    "output": "postulate checker_spec : (tl : list Nat) -> (a : Nat) -> (l : list Nat) -> (_ : Eq (checker l) true) -> (__1 : Eq l (cons Nat a tl)) -> (p : Nat) -> (__2 : mem Nat p tl) -> ex Nat (\\ pp : Nat -> and (and (mem Nat pp l) (Lt pp p)) (Leq p (times 2 pp)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type1. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1656$ of $range$ of $x1$ to elements of $Type1$, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1657$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type1 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1656 : range x1) -> Type1) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1657 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp0. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1494$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_859$ of $Lt$ of $x4$ and $x2$ and elements $x_858$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1495$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_859$ and $x_858$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_859$ and $x_858$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp0 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1494 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_859 : Lt x4 x2) -> (x_858 : Eq x1 (plus (times x3 x2) x4)) -> (_z1495 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_859 x_858)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_859 x_858)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_n. For all natural numbers $n$, $prim$ applied to $n$ is less than or equal to $n$.",
    "output": "postulate le_prim_n : (n : Nat) -> Leq (prim n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_n1. For all natural numbers $n$, if $4$ is less than or equal to $n$, then $prim$ applied to the sum of the product of $2$ and $n$ and $1$ is less than or equal to $n$.",
    "output": "postulate le_prim_n1 : (n : Nat) -> (_ : Leq 4 n) -> Leq (prim (plus (times 2 n) 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_73. Let $n$ be a natural number. Then if $2$ is less than $n$, then for all natural numbers $x134$ and $x135$ and $x136$, the sum of $x134$ and the sum of $x135$ and $x136$ is equal to the sum of $x135$ and the sum of $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (n : Nat) -> (posn : Lt 2 n) -> (x134 : Nat) -> (x135 : Nat) -> (x136 : Nat) -> Eq (plus x134 (plus x135 x136)) (plus x135 (plus x134 x136))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_n_nth_prime_n. Let $n$ be a natural number. Then $n$ is less than $nth_prime$ applied to $n$.",
    "output": "postulate lt_n_nth_prime_n : (n : Nat) -> Lt n (nth_prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp4. Let $Q_$ be a function from natural numbers $_x_393$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_394$ and elements $_x_396$ of $Q_$ of $x_394$ to elements of $Q_$ of the sum of $x_394$ and $1$, for all natural numbers $x_393$, $Q_$ holds for $x_393$.",
    "output": "postulate nat_rect_CProp4 : (Q_ : (_x_393 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_394 : Nat) -> (_x_396 : Q_ x_394) -> Q_ (plus x_394 1)) -> (x_393 : Nat) -> Q_ x_393"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides_false. For all lists $l$ of natural numbers, for all natural numbers $n$, if $list_divides$ applied to $l$ and $n$ is equal to absurdity, then for all natural numbers $p$, for all elements $__1$ of $mem$ of $Nat$ and $p$ and $l$, $p$ is not divisible by $n$.",
    "output": "postulate list_divides_false : (l : list Nat) -> (n : Nat) -> (_ : Eq (list_divides l n) false) -> (p : Nat) -> (__1 : mem Nat p l) -> not (divisible p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_primr. For all natural numbers $n$, if $1$ is less than $n$, then $prim$ applied to $n$ is less than or equal to the quotient of the product of $2$ and the difference of the product of $2$ and $n$ and $3$ and the logarithm of $2$ and $n$.",
    "output": "postulate le_primr : (n : Nat) -> (_ : Lt 1 n) -> Leq (prim n) (div (times 2 (minus (times 2 n) 3)) (log 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_73. For all natural numbers $n$, if $2$ is less than $n$, then for all natural numbers $x134$ and $x135$ and $x136$, the sum of $x134$ and the sum of $x135$ and $x136$ is equal to the sum of $x135$ and the sum of $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (n : Nat) -> (posn : Lt 2 n) -> (x134 : Nat) -> (x135 : Nat) -> (x136 : Nat) -> Eq (plus x134 (plus x135 x136)) (plus x135 (plus x134 x136))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_ind_plus. Let $R$ be an element of $predicate$ of $Nat$. Then for all elements $__$ of $R$ of $0$, for all functions $__1$ from natural numbers $n$ and elements $__1$ of $R$ of $n$ to elements of $R$ of the sum of $n$ and $1$, for all natural numbers $n$, $R$ holds for $n$.",
    "output": "postulate nat_ind_plus : (R : predicate Nat) -> (_ : R 0) -> (__1 : (n : Nat) -> (__1 : R n) -> R (plus n 1)) -> (n : Nat) -> R n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_length_to_mem_all. Let $n$ be a natural number. Then for all lists $l$ of natural numbers, if $length$ applied to $Nat$ and $l$ is equal to $n$, then for all elements $__1$ of $unique$ of $Nat$ and $l$, for all functions $__2$ from natural numbers $x$ and elements $__2$ of $mem$ of $Nat$ and $x$ and $l$ to elements of $Lt$ of $x$ and $n$, for all natural numbers $i$, if $i$ is less than $n$, then $mem$ holds for $Nat$ and $i$ and $l$.",
    "output": "postulate eq_length_to_mem_all : (n : Nat) -> (l : list Nat) -> (_ : Eq (length Nat l) n) -> (__1 : unique Nat l) -> (__2 : (x : Nat) -> (__2 : mem Nat x l) -> Lt x n) -> (i : Nat) -> (__3 : Lt i n) -> mem Nat i l"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_M. Let $m$ be a natural number. Then if $0$ is less than $m$, then $M$ applied to $m$ is less than the exponentiation of $2$ and the product of $2$ and $m$.",
    "output": "postulate lt_M : (m : Nat) -> (_ : Lt 0 m) -> Lt (M m) (pow 2 (times 2 m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker_spec. Let $tl$ be a list of natural numbers. Then for all natural numbers $a$, for all lists $l$ of natural numbers, if $checker$ applied to $l$ is equal to $true$, then if $l$ is equal to $cons$ applied to $Nat$ and $a$ and $tl$, then for all natural numbers $p$, for all elements $__2$ of $mem$ of $Nat$ and $p$ and $tl$, $ex$ holds for $Nat$ and the function that maps $pp$ to the conjunction of the conjunction of $mem$ applied to $Nat$ and $pp$ and $l$ and $Lt$ applied to $pp$ and $p$ and $Leq$ applied to $p$ and the product of $2$ and $pp$.",
    "output": "postulate checker_spec : (tl : list Nat) -> (a : Nat) -> (l : list Nat) -> (_ : Eq (checker l) true) -> (__1 : Eq l (cons Nat a tl)) -> (p : Nat) -> (__2 : mem Nat p tl) -> ex Nat (\\ pp : Nat -> and (and (mem Nat pp l) (Lt pp p)) (Leq p (times 2 pp)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_inv. Let $_p$ and $_m$ and $_x$ be natural numbers. Then $Nat$.",
    "output": "postulate p_ord_inv : (_p : Nat) -> (_m : Nat) -> (_x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_le_ord. Let $p$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then $ord$ applied to $n$ and $p$ is less than or equal to $ord$ applied to $m$ and $p$.",
    "output": "postulate divides_to_le_ord : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> Leq (ord n p) (ord m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp2. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_881$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_881$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_881$.",
    "output": "postulate Aop_rect_CProp2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_881 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_881 : Aop A _nil) -> Q_ x_881"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_not_divides_fact. For all natural numbers $p$, if $p$ is prime, then for all natural numbers $n$, if $n$ is less than $p$, then $p$ is not divisible by the factorial of $n$.",
    "output": "postulate prime_to_not_divides_fact : (p : Nat) -> (_ : prime p) -> (n : Nat) -> (__1 : Lt n p) -> not (divisible p (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_times. Let $n$ and $m$ and $p$ and $q$ be natural numbers. Then if $n$ is divisible by $p$, then if $m$ is divisible by $q$, then the product of $n$ and $m$ is divisible by the product of $p$ and $q$.",
    "output": "postulate divides_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (_ : divisible n p) -> (__1 : divisible m q) -> divisible (times n m) (times p q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_log. For all natural numbers $p$ and $n$, if $1$ is less than $n$, then if $p$ is less than or equal to $n$, then $0$ is less than the logarithm of $p$ and $n$.",
    "output": "postulate lt_O_log : (p : Nat) -> (n : Nat) -> (_ : Lt 1 n) -> (__1 : Leq p n) -> Lt 0 (log p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_to_ord_O. For all natural numbers $p$ and $m$, if $p$ is prime, then if $p$ is not divisible by $m$, then $ord$ applied to $m$ and $p$ is equal to $0$.",
    "output": "postulate not_divides_to_ord_O : (p : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : not (divisible p m)) -> Eq (ord m p) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_l$ be a list of natural numbers. Let $_n$ be a natural number. Then we can say that $all_below$ holds for $_l$ and $_n$.",
    "output": "postulate all_below : (_l : list Nat) -> (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_plus_r. Let $n$ be a natural number. Then $monotonic$ holds for $Nat$ and $Leq$ and the function that maps $m$ to the sum of $n$ and $m$.",
    "output": "postulate monotonic_le_plus_r : (n : Nat) -> monotonic Nat Leq (\\ m : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp0_body. For all functions $Q_$ from natural numbers $_x_413$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_414$ and elements $_x_416$ of $Q_$ of $x_414$ to elements of $Q_$ of the sum of $x_414$ and $1$, for all natural numbers $x_413$, $Q_$ holds for $x_413$.",
    "output": "postulate nat_rect_CProp0_body : (Q_ : (_x_413 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_414 : Nat) -> (_x_416 : Q_ x_414) -> Q_ (plus x_414 1)) -> (x_413 : Nat) -> Q_ x_413"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example3. $smallest_factor$ applied to $7$ is equal to $7$.",
    "output": "postulate example3 : Eq (smallest_factor 7) 7"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord. Let $_n$ and $_m$ be natural numbers. Then $Prod$ holds for $Nat$ and $Nat$.",
    "output": "postulate p_ord : (_n : Nat) -> (_m : Nat) -> Prod Nat Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_discr. For all natural numbers $a1$ and $a2$ and $a3$ and $a4$, for all elements $x$ and $y$ of $div_mod_spec$ of $a1$ and $a2$ and $a3$ and $a4$, if $x$ is equal to $y$, then $match_div_mod_spec$ holds for $a1$ and $a2$ and $a3$ and $a4$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ to $match_div_mod_spec$ applied to $a1$ and $a2$ and $a3$ and $a4$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $Lt$ applied to $a4$ and $a2$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $Lt$ applied to $a4$ and $a2$ and $t0$ and the function that maps $x_19$ and $_x_20$ to the function that maps $x0$ and $p0$ to $Eq$ applied to $a1$ and the sum of the product of $a3$ and $a2$ and $a4$ applied to $x_19$ and $_x_20$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $_e1$ to $P$ and the function that maps $_z53$ to $P$ and $y$ and $x$.",
    "output": "postulate div_mod_spec_discr : (a1 : Nat) -> (a2 : Nat) -> (a3 : Nat) -> (a4 : Nat) -> (x : div_mod_spec a1 a2 a3 a4) -> (y : div_mod_spec a1 a2 a3 a4) -> (_e : Eq x y) -> match_div_mod_spec a1 a2 a3 a4 (plus Type2 1) (\\ _ : div_mod_spec a1 a2 a3 a4 -> univ Type2) (\\ t0 : Lt a4 a2 -> \\ t1 : Eq a1 (plus (times a3 a2) a4) -> match_div_mod_spec a1 a2 a3 a4 (plus Type2 1) (\\ _ : div_mod_spec a1 a2 a3 a4 -> univ Type2) (\\ u0 : Lt a4 a2 -> \\ u1 : Eq a1 (plus (times a3 a2) a4) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (Lt a4 a2) t0) u0) (\\ e0 : Eq (R0 (Lt a4 a2) t0) u0 -> prod Prop Type1 (Eq (R1 (Lt a4 a2) t0 (\\ x_19 : Lt a4 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Lt a4 a2 -> \\ p0 : Eq t0 x0 -> Eq a1 (plus (times a3 a2) a4)) x_19 _x_20) t1 u0 e0) u1) (\\ _e1 : Eq (R1 (Lt a4 a2) t0 (\\ x_19 : Lt a4 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Lt a4 a2 -> \\ p0 : Eq t0 x0 -> Eq a1 (plus (times a3 a2) a4)) x_19 _x_20) t1 u0 e0) u1 -> P))) (\\ _z53 : ((e0 : Eq (R0 (Lt a4 a2) t0) u0) -> (_e1 : Eq (R1 (Lt a4 a2) t0 (\\ x_19 : Lt a4 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Lt a4 a2 -> \\ p0 : Eq t0 x0 -> Eq a1 (plus (times a3 a2) a4)) x_19 _x_20) t1 u0 e0) u1) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Smallest_factor. For all natural numbers $__$, $Nat$.",
    "output": "postulate smallest_factor : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime3. Let $n$ and $m$ and $x$ be natural numbers. Then $Nat$.",
    "output": "postulate let_previous_prime3 : (n : Nat) -> (m : Nat) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_minus_r. Let $p$ and $q$ and $n$ be natural numbers. Then if $q$ is less than or equal to $p$, then the difference of $n$ and $p$ is less than or equal to the difference of $n$ and $q$.",
    "output": "postulate monotonic_le_minus_r : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : Leq q p) -> Leq (minus n p) (minus n q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min. Let $__$ and $__1$ be natural numbers. Then for all functions $__2$ from natural numbers $__2$ to booleans, $Nat$.",
    "output": "postulate min : (_ : Nat) -> (__1 : Nat) -> (__2 : (__2 : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_Psil. Let $n$ be a natural number. Then if $0$ is less than $n$, then the exponentiation of $2$ and $n$ is less than or equal to $Psi$ applied to the product of $2$ and $n$.",
    "output": "postulate le_exp_Psil : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 n) (Psi (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_pi_p2. For all natural numbers $n$, the factorial of the product of $2$ and $n$ is equal to $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the product of the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and the exponentiation of $p$ and $mod$ applied to the quotient of the product of $2$ and $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate fact_pi_p2 : (n : Nat) -> Eq (factorial (times 2 n)) (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> times (pow p (times 2 (div n (pow p (plus i 1))))) (pow p (mod (div (times 2 n) (pow p (plus i 1))) 2)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_times_gcd_aux. For all natural numbers $p$ and $m$ and $n$ and $d$ and $c$, if $0$ is less than $c$, then if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then if $d$ is divisible by the product of $c$ and $m$, then if $d$ is divisible by the product of $c$ and $n$, then $d$ is divisible by the product of $c$ and $gcd_aux$ applied to $p$ and $m$ and $n$.",
    "output": "postulate divides_times_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (d : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : Lt 0 n) -> (__2 : Leq n m) -> (__3 : Leq n p) -> (__4 : divisible d (times c m)) -> (__5 : divisible d (times c n)) -> divisible d (times c (gcd_aux p m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_div. For all natural numbers $a$ and $b$ and $c$, if $0$ is less than $b$, then if $c$ is divisible by $b$, then the product of $a$ and the quotient of $b$ and $c$ is equal to the quotient of the product of $a$ and $b$ and $c$.",
    "output": "postulate times_div : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt 0 b) -> (__1 : divisible c b) -> Eq (times a (div b c)) (div (times a b) c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10335. For all natural numbers $n$, if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10335 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_mod_to_divides. Let $n$ and $m$ and $q$ be natural numbers. Then if $0$ is less than $q$, then if $mod$ applied to $n$ and $q$ is equal to $mod$ applied to $m$ and $q$, then $q$ is divisible by the difference of $n$ and $m$.",
    "output": "postulate eq_mod_to_divides : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> (__1 : Eq (mod n q) (mod m q)) -> divisible q (minus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15622. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15622 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp5_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_841$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_843$ of $Lt$ of $_r$ and $_m$ and elements $x_842$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_843$ and $x_842$, for all elements $x_841$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_841$.",
    "output": "postulate div_mod_spec_rect_CProp5_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_841 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_843 : Lt _r _m) -> (x_842 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_843 x_842)) -> (x_841 : div_mod_spec _n _m _q _r) -> Q_ x_841"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_minus_m_m. For all natural numbers $m$ and $n$, if $n$ is less than or equal to $m$, then the difference of $m$ and the difference of $m$ and $n$ is equal to $n$.",
    "output": "postulate minus_minus_m_m : (m : Nat) -> (n : Nat) -> (_ : Leq n m) -> Eq (minus m (minus m n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_div. For all natural numbers $p$ and $n$ and $m$, if $1$ is less than $p$, then if $0$ is less than $m$, then if $m$ is less than or equal to $n$, then the logarithm of $p$ and the quotient of $n$ and $m$ is less than or equal to the difference of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$.",
    "output": "postulate log_div : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 m) -> (__2 : Leq m n) -> Leq (log p (div n m)) (minus (log p n) (log p m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pos_div. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $0$ is less than $n$, then if $mod$ applied to $n$ and $m$ is equal to $0$, then $0$ is less than the quotient of $n$ and $m$.",
    "output": "postulate pos_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Lt 0 n) -> (__2 : Eq (mod n m) 0) -> Lt 0 (div n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp2_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_881$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_881$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_881$.",
    "output": "postulate Aop_rect_CProp2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_881 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_881 : Aop A _nil) -> Q_ x_881"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type2. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_897$ of $ACop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_897$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_897$.",
    "output": "postulate ACop_rect_Type2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_897 : ACop A _nil) -> Type2) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_897 : ACop A _nil) -> Q_ x_897"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_minus_l. For all natural numbers $p$ and $q$ and $n$, if $q$ is less than or equal to $p$, then the difference of $q$ and $n$ is less than or equal to the difference of $p$ and $n$.",
    "output": "postulate monotonic_le_minus_l : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : Leq q p) -> Leq (minus q n) (minus p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp1. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1686$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1687$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp1 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1686 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1687 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type0. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1596$ of $ACop$ of $x1$ and $x2$ to sets, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1597$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type0 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1596 : ACop x1 x2) -> Set) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1597 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_n_O. Let $n$ be a natural number. Then $n$ is divisible by $0$.",
    "output": "postulate divides_n_O : (n : Nat) -> divisible n 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1062. For all natural numbers $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$, for all elements $_clearme$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, if $r$ is less than $b$, then if $a$ is equal to the sum of the product of $q$ and $b$ and $r$, then for all elements $_clearme0$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, if $r1$ is less than $b$, then if $a$ is equal to the sum of the product of $q1$ and $b$ and $r1$, then if $q$ is not less than or equal to $q1$, then $a$ is equal to the sum of $r1$ and the product of $b$ and $q1$.",
    "output": "postulate let_clause_1062 : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_clearme : div_mod_spec a b q r) -> (ltrb : Lt r b) -> (spec : Eq a (plus (times q b) r)) -> (_clearme0 : div_mod_spec a b q1 r1) -> (ltr1b : Lt r1 b) -> (spec1 : Eq a (plus (times q1 b) r1)) -> (leqq1 : not (Leq q q1)) -> Eq a (plus r1 (times b q1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Upto_body. Let $A$ be a set. Then for all elements $_xxx$ of $range$ of $A$, $Nat$.",
    "output": "postulate upto_body : (A : Set) -> (_xxx : range A) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus. Let $m$ and $n$ and $p$ be natural numbers. Then if $m$ is less than or equal to $n$, then the sum of the difference of $n$ and $m$ and $p$ is equal to the difference of the sum of $n$ and $p$ and $m$.",
    "output": "postulate plus_minus : (m : Nat) -> (n : Nat) -> (p : Nat) -> (_ : Leq m n) -> Eq (plus (minus n m) p) (minus (plus n p) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_gcd_times_1. Let $p$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $p$ and $n$ is equal to $1$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then the greatest common divisor of $p$ and the product of $n$ and $m$ is equal to $1$.",
    "output": "postulate eq_gcd_times_1 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : Eq (gcd p n) 1) -> (__3 : Eq (gcd p m) 1) -> Eq (gcd p (times n m)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log_S. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then the logarithm of $p$ and $n$ is less than or equal to the logarithm of $p$ and the sum of $n$ and $1$.",
    "output": "postulate le_log_S : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Leq (log p n) (log p (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_false_to_not_divides. Let $n$ and $m$ be natural numbers. Then if $dividesb$ applied to $n$ and $m$ is equal to absurdity, then $n$ is not divisible by $m$.",
    "output": "postulate dividesb_false_to_not_divides : (n : Nat) -> (m : Nat) -> (_ : Eq (dividesb n m) false) -> not (divisible n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_p. Let $p$ be a natural number. Then if $1$ is less than $p$, then $p_ord$ applied to $p$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $1$ and $1$.",
    "output": "postulate p_ord_p : (p : Nat) -> (_ : Lt 1 p) -> Eq (p_ord p p) (mk_Prod Nat Nat 1 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_body. Let $__$ and $__1$ be natural numbers. Then $bool$.",
    "output": "postulate leb_body : (_ : Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_plus. For all natural numbers $n$ and $p$ and $q$, if $n$ is divisible by $p$, then if $n$ is divisible by $q$, then $n$ is divisible by the sum of $p$ and $q$.",
    "output": "postulate divides_plus : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : divisible n p) -> (__1 : divisible n q) -> divisible n (plus p q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sqrt_log_n. For all natural numbers $n$ and $b$, if $2$ is less than $b$, then the product of the square root of $n$ and the logarithm of $b$ and $n$ is less than or equal to $n$.",
    "output": "postulate le_sqrt_log_n : (n : Nat) -> (b : Nat) -> (_ : Lt 2 b) -> Leq (times (sqrt n) (log b n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime6. For all natural numbers $n$ and $m$, if $nth_prime$ applied to $n$ is less than $m$, then for all natural numbers $x$, $Nat$.",
    "output": "postulate let_previous_prime6 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_divides. For all natural numbers $n$ and $m$, $decidable$ holds for $divisible$ applied to $n$ and $m$.",
    "output": "postulate decidable_divides : (n : Nat) -> (m : Nat) -> decidable (divisible n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Op_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $Aop$ of $A$ and $nil$, for all elements $_x_887$ and $_x_888$ of $A$, $A$.",
    "output": "postulate op_body : (A : Set) -> (nil : A) -> (_xxx : Aop A nil) -> (_x_887 : A) -> (_x_888 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_Dop. For all sets $A$, for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Dop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $Dop$ of $A$ and $_nil$ to elements of $return_type$ of $z$, for all elements $z$ of $Dop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate filter_Dop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Dop A _nil) -> return_sort) -> (return : (z : Dop A _nil) -> return_type z) -> (z : Dop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_lstar. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all natural numbers $__$, for all elements $__1$ and $__2$ of $B$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_type$ of $z$, for all elements $z$ of $lstar$ of $B$ and $_R$ and $__$ and $__1$ and $__2$, $return_type$ holds for $z$.",
    "output": "postulate filter_lstar : (B : Set) -> (_R : relation B) -> (_ : Nat) -> (__1 : B) -> (__2 : B) -> (return_sort : Sort) -> (return_type : (z : lstar B _R __ __1 __2) -> return_sort) -> (return : (z : lstar B _R __ __1 __2) -> return_type z) -> (z : lstar B _R __ __1 __2) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_to_bijn. For all functions $f$ and $g$ from natural numbers to natural numbers, for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and $g$ applied to $i$, for all elements $__1$ of $bijn$ of $f$ and $n$, $bijn$ holds for $g$ and $n$.",
    "output": "postulate eq_to_bijn : (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Leq i n) -> Eq (f i) (g i)) -> (__1 : bijn f n) -> bijn g n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1551. Let $m$ and $n$ be natural numbers. Then if $0$ is equal to $n$, then for all natural numbers $x347$, $n$ is equal to the product of $x347$ and $n$.",
    "output": "postulate let_clause_1551 : (m : Nat) -> (n : Nat) -> (eqn0 : Eq 0 n) -> (x347 : Nat) -> Eq n (times x347 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_O_n. Let $n$ be a natural number. Then $n$ is equal to the sum of $0$ and $n$.",
    "output": "postulate plus_O_n : (n : Nat) -> Eq n (plus 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_sqrt. Let $n$ be a natural number. Then the square root of the product of $n$ and $n$ is equal to $n$.",
    "output": "postulate eq_sqrt : (n : Nat) -> Eq (sqrt (times n n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Assoc_plus1. Let $a$ and $b$ and $c$ be natural numbers. Then the sum of $c$ and the sum of $b$ and $a$ is equal to the sum of the sum of $b$ and $c$ and $a$.",
    "output": "postulate assoc_plus1 : (a : Nat) -> (b : Nat) -> (c : Nat) -> Eq (plus c (plus b a)) (plus (plus b c) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_to_not_eq_O. Let $n$ and $p$ and $q$ and $r$ be natural numbers. Then if $1$ is less than $n$, then if $p_ord$ applied to $n$ and $nth_prime$ applied to $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $r$ is not equal to $0$.",
    "output": "postulate p_ord_to_not_eq_O : (n : Nat) -> (p : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (p_ord n (nth_prime p)) (mk_Prod Nat Nat q r)) -> not (Eq r 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pad_bigop. Let $k$ and $n$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $n$ is less than or equal to $k$, then $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $match_bool$ applied to $Set$ and the function that maps $_0$ to $bool$ and absurdity and $p$ applied to $i$ and $leb$ applied to $n$ and $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate pad_bigop : (k : Nat) -> (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Leq n k) -> Eq (bigop n (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> match_bool Set (\\ _0 : bool -> bool) false (p i) (leb n i)) B nil op (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_divides. Let $n$ and $m$ be natural numbers. Then $decidable$ holds for $divisible$ applied to $n$ and $m$.",
    "output": "postulate decidable_divides : (n : Nat) -> (m : Nat) -> decidable (divisible n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp4. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1536$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1537$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1536 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1537 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_aux_body. For all natural numbers $_p$ and $_m$ and $_n$, $Nat$.",
    "output": "postulate mod_aux_body : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sum_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, $ACop$ holds for $A$ and $nil$.",
    "output": "postulate sum_body : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> ACop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example13. $nth_prime (4)= 11$.",
    "output": "postulate example13 : Eq (nth_prime 4) 11"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_to_p_ord_O. For all natural numbers $n$ and $i$, if $nth_prime$ applied to $i$ is not divisible by $n$, then $p_ord$ applied to $n$ and $nth_prime$ applied to $i$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $0$ and $n$.",
    "output": "postulate not_divides_to_p_ord_O : (n : Nat) -> (i : Nat) -> (_ : not (divisible (nth_prime i) n)) -> Eq (p_ord n (nth_prime i)) (mk_Prod Nat Nat 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp2_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_963$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_963$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_963$.",
    "output": "postulate Dop_rect_CProp2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_963 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_963 : Dop A _nil) -> Q_ x_963"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides. For all lists $__$ of natural numbers, for all natural numbers $__1$, $bool$.",
    "output": "postulate list_divides : (_ : list Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distr_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Dop$ of $A$ and $nil$, for all elements $a$ and $b$ and $c$ of $A$, $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ is equal to $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $c$.",
    "output": "postulate distr_body : (A : Set) -> (nil : A) -> (xxx : Dop A nil) -> (a : A) -> (b : A) -> (c : A) -> Eq (prod A nil xxx a (aop__o__op A nil (sum A nil xxx) b c)) (aop__o__op A nil (sum A nil xxx) (prod A nil xxx a b) (prod A nil xxx a c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp0. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1494$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_859$ of $Lt$ of $x4$ and $x2$ and elements $x_858$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1495$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_859$ and $x_858$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_859$ and $x_858$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp0 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1494 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_859 : Lt x4 x2) -> (x_858 : Eq x1 (plus (times x3 x2) x4)) -> (_z1495 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_859 x_858)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_859 x_858)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type2_body. Let $Q_$ be a function from natural numbers $_x_381$ to elements of $Type2$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_382$ and elements $_x_384$ of $Q_$ of $x_382$ to elements of $Q_$ of the sum of $x_382$ and $1$, for all natural numbers $x_381$, $Q_$ holds for $x_381$.",
    "output": "postulate nat_rect_Type2_body : (Q_ : (_x_381 : Nat) -> Type2) -> (_H_O : Q_ 0) -> (_H_S : (x_382 : Nat) -> (_x_384 : Q_ x_382) -> Q_ (plus x_382 1)) -> (x_381 : Nat) -> Q_ x_381"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_times_mod. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then if $0$ is less than $m$, then $mod$ applied to $n$ and $p$ is equal to $mod$ applied to $mod$ applied to $n$ and the product of $m$ and $p$ and $p$.",
    "output": "postulate mod_times_mod : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Lt 0 m) -> Eq (mod n p) (mod (mod n (times m p)) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primeb_false_to_not_prime. Let $n$ be a natural number. Then if $primeb$ applied to $n$ is equal to absurdity, then $n$ is not prime.",
    "output": "postulate primeb_false_to_not_prime : (n : Nat) -> (_ : Eq (primeb n) false) -> not (prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc. For all natural numbers $_n$ and $_k$, $Nat$.",
    "output": "postulate bc : (_n : Nat) -> (_k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_inv_lstar. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar_r$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $lstar$ holds for $B$ and $R$ and $l$ and $b1$ and $b2$.",
    "output": "postulate lstar_r_inv_lstar : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar_r B R l b1 b2) -> lstar B R l b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_Sn_m. For all natural numbers $m$ and $n$, if $m$ is less than or equal to $n$, then the difference of the sum of $n$ and $1$ and $m$ is equal to the sum of the difference of $n$ and $m$ and $1$.",
    "output": "postulate minus_Sn_m : (m : Nat) -> (n : Nat) -> (_ : Leq m n) -> Eq (minus (plus n 1) m) (plus (minus n m) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type0. Let $Q_$ be a function from natural numbers $_x_389$ to sets. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_390$ and elements $_x_392$ of $Q_$ of $x_390$ to elements of $Q_$ of the sum of $x_390$ and $1$, for all natural numbers $x_389$, $Q_$ holds for $x_389$.",
    "output": "postulate nat_rect_Type0 : (Q_ : (_x_389 : Nat) -> Set) -> (_H_O : Q_ 0) -> (_H_S : (x_390 : Nat) -> (_x_392 : Q_ x_390) -> Q_ (plus x_390 1)) -> (x_389 : Nat) -> Q_ x_389"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_max_true. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$, $f$ applied to $max$ applied to $n$ and $f$ is equal to $true$.",
    "output": "postulate f_max_true : (f : (_ : Nat) -> bool) -> (n : Nat) -> (_ : ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) -> Eq (f (max n f)) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_1_to_divides_times_to_divides. Let $p$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $p$, then if the greatest common divisor of $p$ and $n$ is equal to $1$, then if $p$ is divisible by the product of $n$ and $m$, then $p$ is divisible by $m$.",
    "output": "postulate gcd_1_to_divides_times_to_divides : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 p) -> (__1 : Eq (gcd p n) 1) -> (__2 : divisible p (times n m)) -> divisible p m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_not_lt. For all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $m$ is not less than $n$.",
    "output": "postulate le_to_not_lt : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> not (Lt m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_transpose. Let $i$ and $j$ be natural numbers. Then $injective$ holds for $Nat$ and $Nat$ and $transpose$ applied to $i$ and $j$.",
    "output": "postulate injective_transpose : (i : Nat) -> (j : Nat) -> injective Nat Nat (transpose i j)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_commute. For all natural numbers $n$ and $m$, for all functions $p11$ from natural numbers to booleans, for all functions $p12$ from natural numbers and natural numbers $__1$ to booleans, for all functions $p21$ from natural numbers to booleans, for all functions $p22$ from natural numbers and natural numbers $__1$ to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f$ from natural numbers and natural numbers $__1$ to elements of $B$, if $0$ is less than $n$, then if $0$ is less than $m$, then for all functions $__2$ from natural numbers $i$ and natural numbers $j$ and elements $__2$ of $Lt$ of $i$ and $n$ and elements $__3$ of $Lt$ of $j$ and $m$ to elements of $Eq$ of $andb$ applied to $p11$ applied to $i$ and $p12$ applied to $i$ and $j$ and $andb$ applied to $p21$ applied to $j$ and $p22$ applied to $i$ and $j$, $bigop$ applied to $n$ and the function that maps $i$ to $p11$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $bigop$ applied to $m$ and the function that maps $j$ to $p12$ applied to $i$ and $j$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $j$ to $f$ applied to $i$ and $j$ is equal to $bigop$ applied to $m$ and the function that maps $j$ to $p21$ applied to $j$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $j$ to $bigop$ applied to $n$ and the function that maps $i$ to $p22$ applied to $i$ and $j$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $j$.",
    "output": "postulate bigop_commute : (n : Nat) -> (m : Nat) -> (p11 : (_ : Nat) -> bool) -> (p12 : (_ : Nat) -> (__1 : Nat) -> bool) -> (p21 : (_ : Nat) -> bool) -> (p22 : (_ : Nat) -> (__1 : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f : (_ : Nat) -> (__1 : Nat) -> B) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : (i : Nat) -> (j : Nat) -> (__2 : Lt i n) -> (__3 : Lt j m) -> Eq (andb (p11 i) (p12 i j)) (andb (p21 j) (p22 i j))) -> Eq (bigop n (\\ i : Nat -> p11 i) B nil (aop__o__op B nil op) (\\ i : Nat -> bigop m (\\ j : Nat -> p12 i j) B nil (aop__o__op B nil op) (\\ j : Nat -> f i j))) (bigop m (\\ j : Nat -> p21 j) B nil (aop__o__op B nil op) (\\ j : Nat -> bigop n (\\ i : Nat -> p22 i j) B nil (aop__o__op B nil op) (\\ i : Nat -> f i j)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_4. $Psi$ applied to $4$ is equal to $12$.",
    "output": "postulate Psi_4 : Eq (Psi 4) 12"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Theta. For all natural numbers $__$, $Nat$.",
    "output": "postulate theta : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_priml. For all natural numbers $n$, if $0$ is less than $n$, then the product of $2$ and $n$ is less than or equal to the product of the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$ and the sum of $prim$ applied to the product of $2$ and $n$ and $1$.",
    "output": "postulate le_priml : (n : Nat) -> (_ : Lt 0 n) -> Leq (times 2 n) (times (plus (log 2 (times 2 n)) 1) (plus (prim (times 2 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "FactS. Let $n$ be a natural number. Then the factorial of the sum of $n$ and $1$ is equal to the product of the sum of $n$ and $1$ and the factorial of $n$.",
    "output": "postulate factS : (n : Nat) -> Eq (factorial (plus n 1)) (times (plus n 1) (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_times_SO_to_gcd_SO. For all natural numbers $m$ and $n$ and $p$, if $0$ is less than $n$, then if $0$ is less than $p$, then if the greatest common divisor of $m$ and the product of $n$ and $p$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to $1$.",
    "output": "postulate gcd_times_SO_to_gcd_SO : (m : Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 p) -> (__2 : Eq (gcd m (times n p)) 1) -> Eq (gcd m n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_le2. For all functions $f$ from natural numbers to natural numbers, for all elements $__$ of $increasing$ of $f$, for all natural numbers $m$, if $f$ applied to $0$ is less than or equal to $m$, then $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Leq$ applied to $f$ applied to $i$ and $m$ and $Lt$ applied to $m$ and $f$ applied to the sum of $i$ and $1$.",
    "output": "postulate increasing_to_le2 : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> (m : Nat) -> (__1 : Leq (f 0) m) -> ex Nat (\\ i : Nat -> and (Leq (f i) m) (Lt m (f (plus i 1))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp1. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1488$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_855$ of $Lt$ of $x4$ and $x2$ and elements $x_854$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1489$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_855$ and $x_854$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_855$ and $x_854$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp1 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1488 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_855 : Lt x4 x2) -> (x_854 : Eq x1 (plus (times x3 x2) x4)) -> (_z1489 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_855 x_854)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_855 x_854)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B2_def. For all natural numbers $n$, $B2$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and the product of $bool_to_nat$ applied to $leb$ applied to $2$ and $k$ applied to $n$ and $p$ and $k$ applied to $n$ and $p$.",
    "output": "postulate B2_def : (n : Nat) -> Eq (B2 n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (times (bool_to_nat (leb 2 (k n p))) (k n p))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1549. Let $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is equal to $m$, then for all natural numbers $x1106$, $x1106$ is equal to the difference of $x1106$ and $m$.",
    "output": "postulate let_clause_1549 : (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (eqm0 : Eq 0 m) -> (x1106 : Nat) -> Eq x1106 (minus x1106 m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_sum. For all natural numbers $k1$ and $k2$, for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ and $g$ from natural numbers to elements of $B$, $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to $k1$ and the function that maps $i$ to $p1$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $k2$ and the function that maps $i$ to $p2$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$ is equal to $bigop$ applied to the sum of $k1$ and $k2$ and the function that maps $i$ to $match_bool$ applied to $Set$ and the function that maps $__$ to $bool$ and $p1$ applied to the difference of $i$ and $k2$ and $p2$ applied to $i$ and $leb$ applied to $k2$ and $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $match_bool$ applied to $Set$ and the function that maps $__$ to $B$ and $f$ applied to the difference of $i$ and $k2$ and $g$ applied to $i$ and $leb$ applied to $k2$ and $i$.",
    "output": "postulate bigop_sum : (k1 : Nat) -> (k2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (g : (_ : Nat) -> B) -> Eq (op B nil op (bigop k1 (\\ i : Nat -> p1 i) B nil (op B nil op) (\\ i : Nat -> f i)) (bigop k2 (\\ i : Nat -> p2 i) B nil (op B nil op) (\\ i : Nat -> g i))) (bigop (plus k1 k2) (\\ i : Nat -> match_bool Set (\\ _ : bool -> bool) (p1 (minus i k2)) (p2 i) (leb k2 i)) B nil (op B nil op) (\\ i : Nat -> match_bool Set (\\ _ : bool -> B) (f (minus i k2)) (g i) (leb k2 i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type1_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_899$ of $ACop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_899$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_899$.",
    "output": "postulate ACop_rect_Type1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_899 : ACop A _nil) -> Type1) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_899 : ACop A _nil) -> Q_ x_899"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_intro. Let $n$ and $m$ and $q$ and $r$ be natural numbers. Then if $r$ is less than $m$, then if $n$ is equal to the sum of the product of $q$ and $m$ and $r$, then $div_mod_spec$ holds for $n$ and $m$ and $q$ and $r$.",
    "output": "postulate div_mod_spec_intro : (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt r m) -> (__1 : Eq n (plus (times q m) r)) -> div_mod_spec n m q r"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_SO_nth_prime_n. For all natural numbers $n$, $1$ is less than $nth_prime$ applied to $n$.",
    "output": "postulate lt_SO_nth_prime_n : (n : Nat) -> Lt 1 (nth_prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_or. Let $P$ and $Q$ be propositions. Then for all elements $__$ of $decidable$ of $P$, for all elements $__1$ of $decidable$ of $Q$, $decidable$ holds for the disjunction of $P$ and $Q$.",
    "output": "postulate decidable_or : (P : Prop) -> (Q : Prop) -> (_ : decidable P) -> (__1 : decidable Q) -> decidable (or P Q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then the quotient of $__$ and $__1$ is a natural number.",
    "output": "postulate div : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1078. For all natural numbers $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$, for all elements $_clearme$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, if $r$ is less than $b$, then if $a$ is equal to the sum of the product of $q$ and $b$ and $r$, then for all elements $_clearme0$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, if $r1$ is less than $b$, then if $a$ is equal to the sum of the product of $q1$ and $b$ and $r1$, then if $q$ is less than or equal to $q1$, then if $q$ is less than $q1$, then $a$ is equal to the sum of $r$ and the product of $b$ and $q$.",
    "output": "postulate let_clause_1078 : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_clearme : div_mod_spec a b q r) -> (ltrb : Lt r b) -> (spec : Eq a (plus (times q b) r)) -> (_clearme0 : div_mod_spec a b q1 r1) -> (ltr1b : Lt r1 b) -> (spec1 : Eq a (plus (times q1 b) r1)) -> (leqq1 : Leq q q1) -> (ltqq1 : Lt q q1) -> Eq a (plus r (times b q))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_lt_to_lt. Let $n$ and $m$ and $p$ be natural numbers. Then if $n$ is less than or equal to $m$, then if $m$ is less than $p$, then $n$ is less than $p$.",
    "output": "postulate le_to_lt_to_lt : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq n m) -> (__1 : Lt m p) -> Lt n p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_minus_to_plus. For all natural numbers $n$ and $m$ and $p$, if the difference of $n$ and $m$ is less than or equal to $p$, then $n$ is less than or equal to the sum of $p$ and $m$.",
    "output": "postulate le_minus_to_plus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq (minus n m) p) -> Leq n (plus p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_n_elim. For all natural numbers $n$, if $0$ is less than $n$, then for all functions $P$ from natural numbers $__1$ to propositions, for all functions $__1$ from natural numbers $m$ to elements of $P$ of the sum of $m$ and $1$, $P$ holds for $n$.",
    "output": "postulate lt_O_n_elim : (n : Nat) -> (_ : Lt 0 n) -> (P : (__1 : Nat) -> Prop) -> (__1 : (m : Nat) -> P (plus m 1)) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B_Psi. For all natural numbers $n$, $B$ applied to $n$ is less than or equal to $Psi$ applied to $n$.",
    "output": "postulate le_B_Psi : (n : Nat) -> Leq (B n) (Psi n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1258. Let $b$ be a natural number. Then if $1$ is less than $b$, then for all natural numbers $n$, if the product of the exponentiation of $b$ and $n$ and $b$ is equal to $1$, then the product of $b$ and the exponentiation of $b$ and $n$ is equal to $1$.",
    "output": "postulate let_clause_1258 : (b : Nat) -> (lt1b : Lt 1 b) -> (n : Nat) -> (H : Eq (times (pow b n) b) 1) -> Eq (times b (pow b n)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_minl. Let $i$ and $n$ and $m$ be natural numbers. Then if $i$ is less than or equal to $min$ applied to $n$ and $m$, then $i$ is less than or equal to $n$.",
    "output": "postulate le_minl : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq i (min n m)) -> Leq i n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_pred. $monotonic$ holds for $Nat$ and $Leq$ and $pred$.",
    "output": "postulate monotonic_pred : monotonic Nat Leq pred"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times_n_to_lt_r. For all natural numbers $n$ and $p$ and $q$, if the product of $n$ and $p$ is less than the product of $n$ and $q$, then $p$ is less than $q$.",
    "output": "postulate lt_times_n_to_lt_r : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (times n p) (times n q)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $ACop$ of $A$ and $nil$, $Aop$ holds for $A$ and $nil$.",
    "output": "postulate aop : (A : Set) -> (nil : A) -> (_xxx : ACop A nil) -> Aop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "SameF_p_le. Let $A$ be a set. Then for all functions $p$ from natural numbers to booleans, for all functions $f$ and $g$ from natural numbers to elements of $A$, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then for all elements $__1$ of $sameF_p$ of $m$ and $p$ and $A$ and $f$ and $g$, $sameF_p$ holds for $n$ and $p$ and $A$ and $f$ and $g$.",
    "output": "postulate sameF_p_le : (A : Set) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> A) -> (g : (_ : Nat) -> A) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> (__1 : sameF_p m p A f g) -> sameF_p n p A f g"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type1. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_871$ of $Aop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_871$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_871$.",
    "output": "postulate Aop_rect_Type1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_871 : Aop A _nil) -> Type1) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_871 : Aop A _nil) -> Q_ x_871"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_iter. Let $g$ be a function from natural numbers to natural numbers. Then for all natural numbers $a$, for all functions $__$ from natural numbers $x$ to elements of $Leq$ of $x$ and $g$ applied to $x$, for all natural numbers $i$, $a$ is less than or equal to $iter$ applied to $Nat$ and $g$ and $i$ and $a$.",
    "output": "postulate le_iter : (g : (_ : Nat) -> Nat) -> (a : Nat) -> (_ : (x : Nat) -> Leq x (g x)) -> (i : Nat) -> Leq a (iter Nat g i a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp5. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_959$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_959$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_959$.",
    "output": "postulate Dop_rect_CProp5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_959 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_959 : Dop A _nil) -> Q_ x_959"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_n_1. Let $n$ be a natural number. Then $n$ is equal to the exponentiation of $n$ and $1$.",
    "output": "postulate exp_n_1 : (n : Nat) -> Eq n (pow n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type5_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_865$ of $Aop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_865$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_865$.",
    "output": "postulate Aop_rect_Type5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_865 : Aop A _nil) -> Type5) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_865 : Aop A _nil) -> Q_ x_865"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Associative_plus. $associative$ holds for $Nat$ and $plus$.",
    "output": "postulate associative_plus : associative Nat plus"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then if $n$ is less than or equal to $m$, then the exponentiation of $p$ and $n$ is less than or equal to the exponentiation of $p$ and $m$.",
    "output": "postulate le_exp : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Leq n m) -> Leq (pow p n) (pow p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B1. For all natural numbers $_n$, $Nat$.",
    "output": "postulate B1 : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_sigma_l. Let $n$ and $a$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, for all functions $f$ from natural numbers to natural numbers, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $a$ and $f$ applied to $i$ is equal to the exponentiation of $a$ and $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate exp_sigma_l : (n : Nat) -> (a : Nat) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> Nat) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> pow a (f i))) (pow a (bigop n (\\ i : Nat -> p i) Nat 0 plus (\\ i : Nat -> f i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim_ex. $lprim$ applied to $8$ and $2$ and $nil$ applied to $Nat$ is equal to $cons$ applied to $Nat$ and $2$ and $cons$ applied to $Nat$ and $3$ and $cons$ applied to $Nat$ and $5$ and $cons$ applied to $Nat$ and $7$ and $nil$ applied to $Nat$.",
    "output": "postulate lprim_ex : Eq (lprim 8 2 (nil Nat)) (cons Nat 2 (cons Nat 3 (cons Nat 5 (cons Nat 7 (nil Nat)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_le. For all natural numbers $_n$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $z$ of $Leq$ of $_n$ and $__$ to elements of $return_sort$, for all elements $case_le_n$ of $return_type$ of $_n$ and $le_n$ applied to $_n$, for all functions $case_le_S$ from natural numbers $m$ and elements of $Leq$ of $_n$ and $m$ to elements of $return_type$ of the sum of $m$ and $1$ and $le_S$ applied to $_n$ and $m$ and $__$, for all natural numbers $__$, if $_n$ is less than or equal to $__$, then $return_type$ holds for $__$ and $z$.",
    "output": "postulate match_le : (_n : Nat) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (z : Leq _n __) -> return_sort) -> (case_le_n : return_type _n (le_n _n)) -> (case_le_S : (m : Nat) -> (_ : Leq _n m) -> return_type (plus m 1) (le_S _n m __)) -> (_ : Nat) -> (z : Leq _n __) -> return_type __ z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_S. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if the sum of $mod$ applied to $n$ and $m$ and $1$ is less than $m$, then $mod$ applied to the sum of $n$ and $1$ and $m$ is equal to the sum of $mod$ applied to $n$ and $m$ and $1$.",
    "output": "postulate mod_S : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Lt (plus (mod n m) 1) m) -> Eq (mod (plus n 1) m) (plus (mod n m) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_prime_SO. $1$ is not prime.",
    "output": "postulate not_prime_SO : not (prime 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_not_ord_O. Let $p$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $p$ is prime, then if $p$ is divisible by $m$, then $ord$ applied to $m$ and $p$ is not equal to $0$.",
    "output": "postulate divides_to_not_ord_O : (p : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : divisible p m) -> not (Eq (ord m p) 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_eq_mod. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then $mod$ applied to $n$ and $m$ is equal to $n$.",
    "output": "postulate lt_to_eq_mod : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq (mod n m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sub0_to_false. Let $h$ and $k$ be functions from natural numbers to natural numbers. Then for all sets $A$, for all elements $I$ and $J$ of $range$ of $A$, if $upto$ applied to $A$ and $I$ is equal to $0$, then for all elements $__1$ of $sub_hk$ of $h$ and $k$ and $A$ and $J$ and $I$, for all natural numbers $i$, if $i$ is less than $upto$ applied to $A$ and $J$, then $filter$ applied to $A$ and $J$ and $i$ is equal to absurdity.",
    "output": "postulate sub0_to_false : (h : (_ : Nat) -> Nat) -> (k : (_ : Nat) -> Nat) -> (A : Set) -> (I : range A) -> (J : range A) -> (_ : Eq (upto A I) 0) -> (__1 : sub_hk h k A J I) -> (i : Nat) -> (__2 : Lt i (upto A J)) -> Eq (filter A J i) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp4. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1536$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1537$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1536 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1537 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus. For all natural numbers $n$ and $m$ and $p$ and $q$, if $n$ is less than $m$, then if $p$ is less than $q$, then the sum of $n$ and $p$ is less than the sum of $m$ and $q$.",
    "output": "postulate lt_plus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt n m) -> (__1 : Lt p q) -> Lt (plus n p) (plus m q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_SO_to_le_B_exp. Let $n$ be a natural number. Then if $1$ is less than $n$, then $B$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate lt_SO_to_le_B_exp : (n : Nat) -> (_ : Lt 1 n) -> Leq (B (times 2 n)) (pow 2 (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_fact1. Let $n$ be a natural number. Then if $0$ is less than $n$, then the product of the product of the exponentiation of $2$ and the product of $2$ and $n$ and the factorial of $n$ and the factorial of $n$ is less than the factorial of the sum of the product of $2$ and $n$ and $1$.",
    "output": "postulate exp_to_fact1 : (n : Nat) -> (_ : Lt 0 n) -> Lt (times (times (pow 2 (times 2 n)) (factorial n)) (factorial n)) (factorial (plus (times 2 n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_transpose_l. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$ and $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then for all elements $__2$ of $bijn$ of $f$ and $n$, $bijn$ holds for the function that maps $p$ to $transpose$ applied to $i$ and $j$ and $f$ applied to $p$ and $n$.",
    "output": "postulate bijn_transpose_l : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i n) -> (__1 : Leq j n) -> (__2 : bijn f n) -> bijn (\\ p : Nat -> transpose i j (f p)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_false_to_not_eq. Let $n$ and $m$ be natural numbers. Then if $eqb$ applied to $n$ and $m$ is equal to absurdity, then $n$ is not equal to $m$.",
    "output": "postulate eqb_false_to_not_eq : (n : Nat) -> (m : Nat) -> (_ : Eq (eqb n m) false) -> not (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp4. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1734$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1735$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1734 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1735 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_l$ be a list of natural numbers. Let $_n \\in N$. Then we can say that $primes_below$ holds for $_l$ and $_n$.",
    "output": "postulate primes_below : (_l : list Nat) -> (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times_n. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then $m$ is less than or equal to the product of $n$ and $m$.",
    "output": "postulate lt_times_n : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> Leq m (times n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp. For all natural numbers $n$ and $m$ and $p$, if $1$ is less than $p$, then if $n$ is less than $m$, then the exponentiation of $p$ and $n$ is less than the exponentiation of $p$ and $m$.",
    "output": "postulate lt_exp : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 1 p) -> (__1 : Lt n m) -> Lt (pow p n) (pow p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate max : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1034. For all natural numbers $n$ and $m$ and $q$, if $0$ is less than $n$, then if $0$ is less than $m$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of $mod$ applied to $x2515$ and $x2516$ and the product of $x2516$ and the quotient of $x2515$ and $x2516$.",
    "output": "postulate let_clause_1034 : (n : Nat) -> (m : Nat) -> (q : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (mod x2515 x2516) (times x2516 (div x2515 x2516)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sqrt_nl. Let $n$ and $m$ be natural numbers. Then if $3$ is less than $n$, then the product of the product of $m$ and $pred$ applied to $m$ and $n$ is less than or equal to the exponentiation of the square root of the product of the exponentiation of $m$ and $2$ and $n$ and $2$.",
    "output": "postulate le_sqrt_nl : (n : Nat) -> (m : Nat) -> (_ : Lt 3 n) -> Leq (times (times m (pred m)) n) (pow (sqrt (times (pow m 2) n)) 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp1_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_883$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_883$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_883$.",
    "output": "postulate Aop_rect_CProp1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_883 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_883 : Aop A _nil) -> Q_ x_883"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_fact_to_divides. For all natural numbers $p$ and $n$, if $p$ is prime, then if $p$ is divisible by the factorial of $n$, then $ex$ holds for $Nat$ and the function that maps $m$ to the conjunction of the conjunction of $Lt$ applied to $0$ and $m$ and $Leq$ applied to $m$ and $n$ and $divisible$ applied to $p$ and $m$.",
    "output": "postulate divides_fact_to_divides : (p : Nat) -> (n : Nat) -> (_ : prime p) -> (__1 : divisible p (factorial n)) -> ex Nat (\\ m : Nat -> and (and (Lt 0 m) (Leq m n)) (divisible p m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type3_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_867$ of $Aop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_867$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_867$.",
    "output": "postulate Aop_rect_Type3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_867 : Aop A _nil) -> Type3) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_867 : Aop A _nil) -> Q_ x_867"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_nm. For all natural numbers $n$ and $m$, the greatest common divisor of $n$ and $m$ is divisible by $m$ and the greatest common divisor of $n$ and $m$ is divisible by $n$.",
    "output": "postulate divides_gcd_nm : (n : Nat) -> (m : Nat) -> and (divisible (gcd n m) m) (divisible (gcd n m) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_S. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all elements $b1$ and $b$ of $B$, for all elements $__$ of $R$ of $b1$ and $b$, for all natural numbers $l$, for all elements $b2$ of $B$, for all elements $__1$ of $lstar$ of $B$ and $R$ and $l$ and $b$ and $b2$, $lstar$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_S : (B : Set) -> (R : relation B) -> (b1 : B) -> (b : B) -> (_ : R b1 b) -> (l : Nat) -> (b2 : B) -> (__1 : lstar B R l b b2) -> lstar B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_S_S_to_le. For all natural numbers $n$ and $m$, if the sum of $n$ and $1$ is less than or equal to the sum of $m$ and $1$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_S_S_to_le : (n : Nat) -> (m : Nat) -> (_ : Leq (plus n 1) (plus m 1)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_ind_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_889$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_889$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_889$.",
    "output": "postulate ACop_ind_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_889 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_889 : ACop A _nil) -> Q_ x_889"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type3. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1446$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to elements of $Type3$, for all functions $_H1$ from elements $x_823$ of $Lt$ of $x4$ and $x2$ and elements $x_822$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1447$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_823$ and $x_822$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_823$ and $x_822$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type3 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1446 : div_mod_spec x1 x2 x3 x4) -> Type3) -> (_H1 : (x_823 : Lt x4 x2) -> (x_822 : Eq x1 (plus (times x3 x2) x4)) -> (_z1447 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_823 x_822)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_823 x_822)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_to_le. For all natural numbers $a$ and $n$ and $m$, if $0$ is less than $a$, then if the product of $a$ and $n$ is less than or equal to the product of $a$ and $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_times_to_le : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 a) -> (__1 : Leq (times a n) (times a m)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example2. $smallest_factor$ applied to $4$ is equal to $2$.",
    "output": "postulate example2 : Eq (smallest_factor 4) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_smallest_factor_n. For all natural numbers $n$, if $1$ is less than $n$, then $smallest_factor$ applied to $n$ is prime.",
    "output": "postulate prime_smallest_factor_n : (n : Nat) -> (_ : Lt 1 n) -> prime (smallest_factor n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. For all natural numbers $n$, if the exponentiation of $2$ and $8$ is less than or equal to $n$, then for all natural numbers $m$, if $3$ is less than or equal to $m$, then if the sum of the logarithm of $2$ and $m$ and $2$ is less than or equal to $m$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : Nat) -> (len : Leq (pow 2 8) n) -> (m : Nat) -> (lt2m : Leq 3 m) -> (Hind : Leq (plus (log 2 m) 2) m) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod. Let $n$ and $m$ be natural numbers. Then $n$ is equal to the sum of the product of the quotient of $n$ and $m$ and $m$ and $mod$ applied to $n$ and $m$.",
    "output": "postulate div_mod : (n : Nat) -> (m : Nat) -> Eq n (plus (times (div n m) m) (mod n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_n_fact_n. Let $n$ be a natural number. Then if $2$ is less than $n$, then $n$ is less than the factorial of $n$.",
    "output": "postulate lt_n_fact_n : (n : Nat) -> (_ : Lt 2 n) -> Lt n (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type0. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1662$ of $range$ of $x1$ to sets, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1663$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type0 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1662 : range x1) -> Set) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1663 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_sigma_p_div. For all natural numbers $n$ and $q$, if $0$ is less than $q$, then $bigop$ applied to the sum of $n$ and $1$ and the function that maps $m$ to $andb$ applied to $leb$ applied to $1$ and $m$ and $dividesb$ applied to $q$ and $m$ and $Nat$ and $0$ and $plus$ and the function that maps $m$ to $1$ is equal to the quotient of $n$ and $q$.",
    "output": "postulate eq_sigma_p_div : (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> Eq (bigop (plus n 1) (\\ m : Nat -> andb (leb 1 m) (dividesb q m)) Nat 0 plus (\\ m : Nat -> 1)) (div n q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter. Let $A$ be a set. Then for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_941$, $bool$.",
    "output": "postulate filter : (A : Set) -> (_xxx : range A) -> (_x_941 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_n_O. For all natural numbers $n$, $n$ is divisible by $0$.",
    "output": "postulate divides_n_O : (n : Nat) -> divisible n 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1561. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to $1$, then the difference of the product of $p$ and $a$ and the product of $m$ and $b$ is equal to $1$.",
    "output": "postulate let_clause_1561 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times a p) (times b m)) (gcd p m)) -> (H0 : Eq (minus (times a p) (times b m)) 1) -> Eq (minus (times p a) (times m b)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iso. Let $A$ be a set. Then $relation$ holds for $range$ applied to $A$.",
    "output": "postulate iso : (A : Set) -> relation (range A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_aop. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $R$ of $Dop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, for all elements $a$ of $B$, $ACop$ holds for $B$ and $nil$.",
    "output": "postulate let_aop : (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (R : Dop B nil) -> (f : (_ : Nat) -> B) -> (a : B) -> ACop B nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prod. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, for all elements $_x_969$ and $_x_970$ of $A$, $A$.",
    "output": "postulate prod : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> (_x_969 : A) -> (_x_970 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type3. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_949$ of $Dop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_949$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_949$.",
    "output": "postulate Dop_rect_Type3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_949 : Dop A _nil) -> Type3) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_949 : Dop A _nil) -> Q_ x_949"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type3. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1578$ of $ACop$ of $x1$ and $x2$ to elements of $Type3$, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1579$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type3 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1578 : ACop x1 x2) -> Type3) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1579 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then the exponentiation of $__$ and $__1$ is a natural number.",
    "output": "postulate pow : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSSO. $B$ applied to $6$ is equal to $20$.",
    "output": "postulate B_SSSSSSO : Eq (B 6) 20"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type1. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z677$ to elements of $Type1$, for all functions $_H1$ from elements $_z678$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_386$ and functions $_x_388$ from elements $_z678$ of $Eq$ of $Hterm$ and $x_386$ to elements of $P$ of $x_386$ and elements $_z678$ of $Eq$ of $Hterm$ and the sum of $x_386$ and $1$ to elements of $P$ of the sum of $x_386$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type1 : (Hterm : Nat) -> (P : (_z677 : Nat) -> Type1) -> (_H1 : (_z678 : Eq Hterm 0) -> P 0) -> (_H2 : (x_386 : Nat) -> (_x_388 : (_z678 : Eq Hterm x_386) -> P x_386) -> (_z678 : Eq Hterm (plus x_386 1)) -> P (plus x_386 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_to_minus_r. Let $a$ and $b$ and $c$ be natural numbers. Then if the sum of $a$ and $b$ is less than $c$, then $a$ is less than the difference of $c$ and $b$.",
    "output": "postulate lt_plus_to_minus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt (plus a b) c) -> Lt a (minus c b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1573. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $m$ is divisible by $n$, then for all natural numbers $d$, if $0$ is equal to $m$, then if $n$ is equal to the product of $m$ and $d$, then $n$ is equal to $m$.",
    "output": "postulate let_clause_1573 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (_clearme : divisible m n) -> (d : Nat) -> (auto : Eq 0 m) -> (auto' : Eq n (times m d)) -> Eq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_log_n_n. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then the logarithm of $p$ and $n$ is less than $n$.",
    "output": "postulate lt_log_n_n : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Lt (log p n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_body. Let $__$ be a natural number. Then $Nat$.",
    "output": "postulate fact_body : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_pi_bc. For all natural numbers $a$ and $b$ and $c$, for all functions $f$ from natural numbers to natural numbers, the product of the exponentiation of $a$ and the difference of $c$ and $b$ and $bigop$ applied to the difference of $c$ and $b$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $b$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $b$ is equal to $bigop$ applied to the difference of $c$ and $b$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $b$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the function that maps $i0$ to the product of $a$ and $f$ applied to $i0$ applied to the sum of $i$ and $b$.",
    "output": "postulate exp_pi_bc : (a : Nat) -> (b : Nat) -> (c : Nat) -> (f : (_ : Nat) -> Nat) -> Eq (times (pow a (minus c b)) (bigop (minus c b) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i b)) Nat 1 times (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i b)))) (bigop (minus c b) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i b)) Nat 1 times (\\ i : Nat -> (\\ i0 : Nat -> times a (f i0)) (plus i b)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp5_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_877$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_877$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_877$.",
    "output": "postulate Aop_rect_CProp5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_877 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_877 : Aop A _nil) -> Q_ x_877"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp3_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_961$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_961$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_961$.",
    "output": "postulate Dop_rect_CProp3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_961 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_961 : Dop A _nil) -> Q_ x_961"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psil1. Let $n$ be a natural number. Then $Psi$ applied to $n$ is less than or equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $n$.",
    "output": "postulate le_Psil1 : (n : Nat) -> Leq (Psi n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_l. Let $B$ be a set. Then for all functions $R$ from elements of $B$ and elements $__1$ of $B$ to propositions, for all elements $b2$ of $B$, for all elements $P$ of $relation2$ of $Nat$ and $B$, for all elements $__$ of $P$ of $0$ and $b2$, for all functions $__1$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements $__1$ of $R$ of $b1$ and $b$ and elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b$ and $b2$ and elements $__3$ of $P$ of $l$ and $b$ to elements of $P$ of the sum of $l$ and $1$ and $b1$, for all natural numbers $l$, for all elements $b1$ of $B$, for all elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $P$ holds for $l$ and $b1$.",
    "output": "postulate lstar_ind_l : (B : Set) -> (R : (_ : B) -> (__1 : B) -> Prop) -> (b2 : B) -> (P : relation2 Nat B) -> (_ : P 0 b2) -> (__1 : (l : Nat) -> (b1 : B) -> (b : B) -> (__1 : R b1 b) -> (__2 : lstar B R l b b2) -> (__3 : P l b) -> P (plus l 1) b1) -> (l : Nat) -> (b1 : B) -> (__2 : lstar B R l b1 b2) -> P l b1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_to_not_le_S_S. Let $n$ and $m$ be natural numbers. Then if $n$ is not less than or equal to $m$, then the sum of $n$ and $1$ is not less than or equal to the sum of $m$ and $1$.",
    "output": "postulate not_le_to_not_le_S_S : (n : Nat) -> (m : Nat) -> (_ : not (Leq n m)) -> not (Leq (plus n 1) (plus m 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16004. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_16004 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10131. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$ and $n0$, if $max$ applied to the sum of $n0$ and $1$ and $f$ is equal to $m$, then if $f$ applied to $m$ is equal to absurdity, then for all natural numbers $i$ and $j$, if the sum of $j$ and $1$ is less than the sum of $n0$ and $1$, then for all natural numbers $x7$, $x7$ is equal to the sum of $m$ and $x7$.",
    "output": "postulate let_clause_10131 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (n0 : Nat) -> (eqm : Eq (max (plus n0 1) f) m) -> (fm : Eq (f m) false) -> (i : Nat) -> (j : Nat) -> (ltj : Lt (plus j 1) (plus n0 1)) -> (x7 : Nat) -> Eq x7 (plus m x7)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus_m_m. For all natural numbers $n$ and $m$, if $m$ is less than or equal to $n$, then $n$ is equal to the sum of the difference of $n$ and $m$ and $m$.",
    "output": "postulate plus_minus_m_m : (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> Eq n (plus (minus n m) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_max_to_pi_p_primeb. For all natural numbers $q$ and $m$, if $0$ is less than $m$, then if $max$ applied to the sum of $m$ and $1$ and the function that maps $i$ to $andb$ applied to $primeb$ applied to $i$ and $dividesb$ applied to $i$ and $m$ is less than $q$, then $m$ is equal to $bigop$ applied to $q$ and the function that maps $p$ to $andb$ applied to $primeb$ applied to $p$ and $dividesb$ applied to $p$ and $m$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $m$ and $p$.",
    "output": "postulate lt_max_to_pi_p_primeb : (q : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Lt (max (plus m 1) (\\ i : Nat -> andb (primeb i) (dividesb i m))) q) -> Eq m (bigop q (\\ p : Nat -> andb (primeb p) (dividesb p m)) Nat 1 times (\\ p : Nat -> pow p (ord m p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_exp1. For all natural numbers $p$ and $n$ and $q$ and $r$, if $0$ is less than $p$, then if $p$ is not divisible by $r$, then if $n$ is equal to the product of the exponentiation of $p$ and $q$ and $r$, then $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$.",
    "output": "postulate p_ord_exp1 : (p : Nat) -> (n : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 0 p) -> (__1 : not (divisible p r)) -> (__2 : Eq n (times (pow p q) r)) -> Eq (p_ord n p) (mk_Prod Nat Nat q r)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15441. For all natural numbers $p$ and $q$, for all functions $Hind$ from natural numbers $m$ and natural numbers $n$ and elements of $Lt$ of $0$ and $n$ and elements $__1$ of $Leq$ of $n$ and $m$ and elements $__2$ of $Leq$ of $n$ and $q$ to elements of $ex$ of $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and $gcd_aux$ applied to $q$ and $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and $gcd_aux$ applied to $q$ and $m$ and $n$, for all natural numbers $m$ and $n$, if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to the sum of $q$ and $1$, then if $n$ is not divisible by $m$, then for all natural numbers $a$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, for all natural numbers $b$, if the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ or the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then if the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then the difference of the product of $n$ and $b$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate let_clause_15441 : (p : Nat) -> (q : Nat) -> (Hind : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n q) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd_aux q m n)) (Eq (minus (times b m) (times a n)) (gcd_aux q m n))))) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (lenm : Leq n m) -> (lenS : Leq n (plus q 1)) -> (ndivnm : not (divisible n m)) -> (a : Nat) -> (_clearme : ex Nat (\\ b : Nat -> or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n))))) -> (b : Nat) -> (_clearme0 : or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n)))) -> (H : Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n))) -> Eq (minus (times n b) (times a (mod m n))) (gcd_aux q n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_case. For all natural numbers $n$, for all functions $P$ from natural numbers to propositions, for all functions $__$ from elements of $Eq$ of $n$ and $0$ to elements of $P$ of $0$, for all functions $__1$ from natural numbers $m$ and elements $__1$ of $Eq$ of $n$ and the sum of $m$ and $1$ to elements of $P$ of the sum of $m$ and $1$, $P$ holds for $n$.",
    "output": "postulate nat_case : (n : Nat) -> (P : (_ : Nat) -> Prop) -> (_ : (_ : Eq n 0) -> P 0) -> (__1 : (m : Nat) -> (__1 : Eq n (plus m 1)) -> P (plus m 1)) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_Dop. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Dop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $case_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $return_type$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $z$ of $Dop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate match_Dop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Dop A _nil) -> return_sort) -> (case_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> return_type (mk_Dop A _nil sum prod _null _distr)) -> (z : Dop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_p_ord_q_O. For all natural numbers $p$ and $n$ and $q$, if $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $0$, then $n$ is equal to $0$ and $q$ is equal to $0$.",
    "output": "postulate eq_p_ord_q_O : (p : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Eq (p_ord n p) (mk_Prod Nat Nat q 0)) -> and (Eq n 0) (Eq q 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_step. Let $B$ be a set. Then for all functions $R$ from elements of $B$ and elements $__1$ of $B$ to propositions, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $R$ of $b1$ and $b2$, $lstar$ holds for $B$ and $R$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_step : (B : Set) -> (R : (_ : B) -> (__1 : B) -> Prop) -> (b1 : B) -> (b2 : B) -> (_ : R b1 b2) -> lstar B R 1 b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type2. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_869$ of $Aop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_869$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_869$.",
    "output": "postulate Aop_rect_Type2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_869 : Aop A _nil) -> Type2) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_869 : Aop A _nil) -> Q_ x_869"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_ind_body. For all functions $Q_$ from natural numbers $_x_365$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_366$ and elements $_x_368$ of $Q_$ of $x_366$ to elements of $Q_$ of the sum of $x_366$ and $1$, for all natural numbers $x_365$, $Q_$ holds for $x_365$.",
    "output": "postulate nat_ind_body : (Q_ : (_x_365 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_366 : Nat) -> (_x_368 : Q_ x_366) -> Q_ (plus x_366 1)) -> (x_365 : Nat) -> Q_ x_365"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_discr. Let $a1$ be a set. Then for all elements $a2$ of $a1$, for all elements $x$ and $y$ of $Dop$ of $a1$ and $a2$, if $x$ is equal to $y$, then $match_Dop$ holds for $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ and $t2$ and $t3$ to $match_Dop$ applied to $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ and $u2$ and $u3$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $e1$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R2$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x11$ applied to $a$ and $a2$ and $a2$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and the function that maps $e2$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R3$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x11$ applied to $a$ and $a2$ and $a2$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and the function that maps $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p11$ and $x21$ and $p2$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $b$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $c$ to $Eq$ applied to $x11$ applied to $a$ and $aop__o__op$ applied to $a1$ and $a2$ and $x01$ and $b$ and $c$ and $aop__o__op$ applied to $a1$ and $a2$ and $x01$ and $x11$ applied to $a$ and $b$ and $x11$ applied to $a$ and $c$ applied to $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ and $t3$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and $e2$ and $u3$ and the function that maps $_e3$ to $P$ and the function that maps $_z61$ to $P$ and $y$ and $x$.",
    "output": "postulate Dop_discr : (a1 : Set) -> (a2 : a1) -> (x : Dop a1 a2) -> (y : Dop a1 a2) -> (_e : Eq x y) -> match_Dop a1 a2 (plus Type2 1) (\\ _ : Dop a1 a2 -> univ Type2) (\\ t0 : ACop a1 a2 -> \\ t1 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ t2 : ((a : a1) -> Eq (t1 a a2) a2) -> \\ t3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (t1 a (aop__o__op a1 a2 t0 b c)) (aop__o__op a1 a2 t0 (t1 a b) (t1 a c))) -> match_Dop a1 a2 (plus Type2 1) (\\ _ : Dop a1 a2 -> univ Type2) (\\ u0 : ACop a1 a2 -> \\ u1 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ u2 : ((a : a1) -> Eq (u1 a a2) a2) -> \\ u3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (u1 a (aop__o__op a1 a2 u0 b c)) (aop__o__op a1 a2 u0 (u1 a b) (u1 a c))) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (ACop a1 a2) t0) u0) (\\ e0 : Eq (R0 (ACop a1 a2) t0) u0 -> prod Prop Type1 (Eq (R1 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 u0 e0) u1) (\\ e1 : Eq (R1 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 u0 e0) u1 -> prod Prop Type1 (Eq (R2 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) (\\ e2 : Eq (R2 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2 -> prod Prop Type1 (Eq (R3 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x01 p01 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x12 a a2) a2)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x11 a a2) a2) -> \\ p2 : Eq (R2 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) x02 p02 -> \\ __1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> \\ x10 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p10 : Eq (R1 (ACop a1 a2) t0 (\\ x011 : ACop a1 a2 -> \\ p011 : Eq t0 x011 -> prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x10 a a2) a2)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x11 a (aop__o__op a1 a2 x01 b c)) (aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) (\\ _e3 : Eq (R3 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x01 p01 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x12 a a2) a2)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x11 a a2) a2) -> \\ p2 : Eq (R2 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) x02 p02 -> \\ __1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> \\ x10 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p10 : Eq (R1 (ACop a1 a2) t0 (\\ x011 : ACop a1 a2 -> \\ p011 : Eq t0 x011 -> prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x10 a a2) a2)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x11 a (aop__o__op a1 a2 x01 b c)) (aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3 -> P))))) (\\ _z61 : ((e0 : Eq (R0 (ACop a1 a2) t0) u0) -> (e1 : Eq (R1 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 u0 e0) u1) -> (e2 : Eq (R2 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) -> (_e3 : Eq (R3 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x01 p01 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x12 a a2) a2)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x11 a a2) a2) -> \\ p2 : Eq (R2 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) x02 p02 -> \\ __1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> \\ x10 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p10 : Eq (R1 (ACop a1 a2) t0 (\\ x011 : ACop a1 a2 -> \\ p011 : Eq t0 x011 -> prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x10 a a2) a2)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x11 a (aop__o__op a1 a2 x01 b c)) (aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_div_S_div. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if the exponentiation of $m$ and $2$ is less than or equal to $n$, then the quotient of $n$ and the sum of $m$ and $1$ is less than the quotient of $n$ and $m$.",
    "output": "postulate lt_div_S_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Leq (pow m 2) n) -> Lt (div n (plus m 1)) (div n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min0. Let $_n$ be a natural number. Then for all functions $_f$ from natural numbers to booleans, $Nat$.",
    "output": "postulate min0 : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp_to_lt1. For all natural numbers $a$ and $n$ and $m$, if $0$ is less than $a$, then if the exponentiation of $n$ and $a$ is less than the exponentiation of $m$ and $a$, then $n$ is less than $m$.",
    "output": "postulate lt_exp_to_lt1 : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 a) -> (__1 : Lt (pow n a) (pow m a)) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_1_max_prime. Let $n$ be a natural number. Then if $1$ is less than $n$, then $1$ is less than $max$ applied to the sum of $n$ and $1$ and the function that maps $i$ to $andb$ applied to $primeb$ applied to $i$ and $dividesb$ applied to $i$ and $n$.",
    "output": "postulate lt_1_max_prime : (n : Nat) -> (_ : Lt 1 n) -> Lt 1 (max (plus n 1) (\\ i : Nat -> andb (primeb i) (dividesb i n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times_to_lt_div. For all natural numbers $m$ and $n$ and $q$, if $n$ is less than the product of $m$ and $q$, then the quotient of $n$ and $q$ is less than $m$.",
    "output": "postulate lt_times_to_lt_div : (m : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Lt n (times m q)) -> Lt (div n q) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_S_S_to_lt. Let $n$ and $m$ be natural numbers. Then if the sum of $n$ and $1$ is less than the sum of $m$ and $1$, then $n$ is less than $m$.",
    "output": "postulate lt_S_S_to_lt : (n : Nat) -> (m : Nat) -> (_ : Lt (plus n 1) (plus m 1)) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type3. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type3$, for all functions $_H_div_mod_spec_intro$ from elements $x_823$ of $Lt$ of $_r$ and $_m$ and elements $x_822$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_823$ and $x_822$, for all elements $x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_821$.",
    "output": "postulate div_mod_spec_rect_Type3 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_821 : div_mod_spec _n _m _q _r) -> Type3) -> (_H_div_mod_spec_intro : (x_823 : Lt _r _m) -> (x_822 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_823 x_822)) -> (x_821 : div_mod_spec _n _m _q _r) -> Q_ x_821"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_gcd. Let $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then $0$ is less than the greatest common divisor of $m$ and $n$.",
    "output": "postulate lt_O_gcd : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> Lt 0 (gcd m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_S_fact. Let $n$ and $i$ be natural numbers. Then if $1$ is less than $i$, then if $i$ is less than or equal to $n$, then $i$ is not divisible by the sum of the factorial of $n$ and $1$.",
    "output": "postulate not_divides_S_fact : (n : Nat) -> (i : Nat) -> (_ : Lt 1 i) -> (__1 : Leq i n) -> not (divisible i (plus (factorial n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_dx. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b$, for all elements $b2$ of $B$, for all elements $__1$ of $R$ of $b$ and $b2$, $lstar$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_dx : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b : B) -> (_ : lstar B R l b1 b) -> (b2 : B) -> (__1 : R b b2) -> lstar B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Comm. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $ACop$ of $A$ and $nil$, for all elements $a$ and $b$ of $A$, $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ is equal to $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.",
    "output": "postulate comm : (A : Set) -> (nil : A) -> (xxx : ACop A nil) -> (a : A) -> (b : A) -> Eq (op A nil (aop A nil xxx) a b) (op A nil (aop A nil xxx) b a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then we can say that $__$ is greater than $__1$.",
    "output": "postulate Gt : (_ : Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker_ab. Let $a$ and $b$ be natural numbers. Then for all lists $l$ of natural numbers, $checker$ applied to $cons$ applied to $Nat$ and $a$ and $cons$ applied to $Nat$ and $b$ and $l$ is equal to $andb$ applied to $andb$ applied to $leb$ applied to the sum of $a$ and $1$ and $b$ and $leb$ applied to $b$ and the product of $2$ and $a$ and $checker$ applied to $cons$ applied to $Nat$ and $b$ and $l$.",
    "output": "postulate checker_ab : (a : Nat) -> (b : Nat) -> (l : list Nat) -> Eq (checker (cons Nat a (cons Nat b l))) (andb (andb (leb (plus a 1) b) (leb b (times 2 a))) (checker (cons Nat b l)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound5. For all natural numbers $n$ and $m$, if $nth_prime$ applied to $n$ is less than $m$, then $Nat$.",
    "output": "postulate let_upper_bound5 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_Strue. Let $n$ and $m$ and $p$ and $q$ and $r$ be natural numbers. Then if $mod$ applied to $n$ and $m$ is equal to $0$, then if $p_ord_aux$ applied to $p$ and the quotient of $n$ and $m$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $p_ord_aux$ applied to the sum of $p$ and $1$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and the sum of $q$ and $1$ and $r$.",
    "output": "postulate p_ord_aux_Strue : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Eq (mod n m) 0) -> (__1 : Eq (p_ord_aux p (div n m) m) (mk_Prod Nat Nat q r)) -> Eq (p_ord_aux (plus p 1) n m) (mk_Prod Nat Nat (plus q 1) r)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15621. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the difference of the product of $n$ and $c$ and the product of $m$ and $d$ is equal to $1$.",
    "output": "postulate let_clause_15621 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (minus (times n c) (times m d)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_ord_log. For all natural numbers $n$ and $p$, if $0$ is less than $n$, then if $1$ is less than $p$, then $ord$ applied to $n$ and $p$ is less than or equal to the logarithm of $p$ and $n$.",
    "output": "postulate le_ord_log : (n : Nat) -> (p : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 1 p) -> Leq (ord n p) (log p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ltransitive. Let $B$ be a set. Then $predicate$ holds for $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $relation$ applied to $B$.",
    "output": "postulate ltransitive : (B : Set) -> predicate (prod Set Set Nat (\\ _ : Nat -> relation B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp1. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then if $n$ is less than $m$, then the exponentiation of $n$ and $p$ is less than the exponentiation of $m$ and $p$.",
    "output": "postulate lt_exp1 : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Lt n m) -> Lt (pow n p) (pow m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_found_max_spec. Let $n$ be a natural number. Then for all functions $f$ from natural numbers to booleans, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max_spec$ holds for $n$ and $f$ and $0$.",
    "output": "postulate not_found_max_spec : (n : Nat) -> (f : (_ : Nat) -> bool) -> (_ : (i : Nat) -> (_ : Lt i n) -> Eq (f i) false) -> max_spec n f 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_exists. For all functions $f$ from natural numbers to booleans, for all natural numbers $t$ and $m$, if $m$ is less than $t$, then if $f$ applied to $m$ is equal to $true$, then for all natural numbers $k$ and $b$, if $b$ is less than or equal to $m$, then for all functions $__3$ from natural numbers $i$ and elements $__3$ of $Leq$ of $b$ and $i$ and elements $__4$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, if $t$ is equal to the sum of $k$ and $b$, then $min$ applied to $k$ and $b$ and $f$ is equal to $m$.",
    "output": "postulate min_exists : (f : (_ : Nat) -> bool) -> (t : Nat) -> (m : Nat) -> (_ : Lt m t) -> (__1 : Eq (f m) true) -> (k : Nat) -> (b : Nat) -> (__2 : Leq b m) -> (__3 : (i : Nat) -> (__3 : Leq b i) -> (__4 : Lt i m) -> Eq (f i) false) -> (__4 : Eq t (plus k b)) -> Eq (min k b f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_2. Let $n$ be a natural number. Then the exponentiation of $n$ and $2$ is equal to the product of $n$ and $n$.",
    "output": "postulate exp_2 : (n : Nat) -> Eq (pow n 2) (times n n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSO. $B (5)= 30$.",
    "output": "postulate B_SSSSSO : Eq (B 5) 30"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp2. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_909$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_909$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_909$.",
    "output": "postulate ACop_rect_CProp2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_909 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_909 : ACop A _nil) -> Q_ x_909"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n. For all natural numbers $n$, $n$ is less than or equal to $n$.",
    "output": "postulate le_n : (n : Nat) -> Leq n n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_maxr. Let $i$ and $n$ and $m$ be natural numbers. Then if $max$ applied to $n$ and $m$ is less than or equal to $i$, then $m$ is less than or equal to $i$.",
    "output": "postulate le_maxr : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (max n m) i) -> Leq m i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_n_r. Let $n$ and $m$ be natural numbers. Then $m$ is less than or equal to the sum of $m$ and $n$.",
    "output": "postulate le_plus_n_r : (n : Nat) -> (m : Nat) -> Leq m (plus m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_spec_inv_ind. For all natural numbers $x1$, for all functions $x2$ from natural numbers to booleans, for all natural numbers $x3$, for all elements $_Hterm$ of $max_spec$ of $x1$ and $x2$ and $x3$, for all functions $P$ from natural numbers $_z1769$ to propositions, for all functions $_H1$ from natural numbers $m$ and elements $_x_975$ of $Lt$ of $m$ and $x1$ and elements $_x_974$ of $Eq$ of $x2$ applied to $m$ and $true$ and functions $_x_973$ from natural numbers $i$ and elements of $Lt$ of $m$ and $i$ and elements $__1$ of $Lt$ of $i$ and $x1$ to elements of $Eq$ of $x2$ applied to $i$ and absurdity and elements $_z1770$ of $Eq$ of $x3$ and $m$ to elements of $P$ of $m$, for all functions $_H2$ from functions $_x_976$ from natural numbers $i$ and elements of $Lt$ of $i$ and $x1$ to elements of $Eq$ of $x2$ applied to $i$ and absurdity and elements $_z1770$ of $Eq$ of $x3$ and $0$ to elements of $P$ of $0$, $P$ holds for $x3$.",
    "output": "postulate max_spec_inv_ind : (x1 : Nat) -> (x2 : (_ : Nat) -> bool) -> (x3 : Nat) -> (_Hterm : max_spec x1 x2 x3) -> (P : (_z1769 : Nat) -> Prop) -> (_H1 : (m : Nat) -> (_x_975 : Lt m x1) -> (_x_974 : Eq (x2 m) true) -> (_x_973 : (i : Nat) -> (_ : Lt m i) -> (__1 : Lt i x1) -> Eq (x2 i) false) -> (_z1770 : Eq x3 m) -> P m) -> (_H2 : (_x_976 : (i : Nat) -> (_ : Lt i x1) -> Eq (x2 i) false) -> (_z1770 : Eq x3 0) -> P 0) -> P x3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_I. Let $n$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, $bigop$ applied to the difference of $n$ and $0$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $0$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $0$ is equal to $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_I : (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> Eq (bigop (minus n 0) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i 0)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i 0))) (bigop n (\\ i : Nat -> p i) B nil (op B nil op) (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_div_mod_spec. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $return_sort$, for all functions $case_div_mod_spec_intro$ from elements of $Lt$ of $_r$ and $_m$ and elements $__1$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $return_type$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $__$ and $__1$, for all elements $z$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $return_type$ holds for $z$.",
    "output": "postulate match_div_mod_spec : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (return_sort : Sort) -> (return_type : (z : div_mod_spec _n _m _q _r) -> return_sort) -> (case_div_mod_spec_intro : (_ : Lt _r _m) -> (__1 : Eq _n (plus (times _q _m) _r)) -> return_type (div_mod_spec_intro _n _m _q _r __ __1)) -> (z : div_mod_spec _n _m _q _r) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_times_l. For all natural numbers $c$, if $0$ is less than $c$, then $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $t$ to the product of $t$ and $c$.",
    "output": "postulate monotonic_lt_times_l : (c : Nat) -> (_ : Lt 0 c) -> monotonic Nat Lt (\\ t : Nat -> times t c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSSSO. $B$ applied to $7$ is equal to $140$.",
    "output": "postulate B_SSSSSSSO : Eq (B 7) 140"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_gcd_1. For all natural numbers $n$ and $m$, if $n$ is prime, then if $n$ is not divisible by $m$, then the greatest common divisor of $n$ and $m$ is equal to $1$.",
    "output": "postulate prime_to_gcd_1 : (n : Nat) -> (m : Nat) -> (_ : prime n) -> (__1 : not (divisible n m)) -> Eq (gcd n m) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type3. For all functions $Q_$ from natural numbers $_x_377$ to elements of $Type3$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_378$ and elements $_x_380$ of $Q_$ of $x_378$ to elements of $Q_$ of the sum of $x_378$ and $1$, for all natural numbers $x_377$, $Q_$ holds for $x_377$.",
    "output": "postulate nat_rect_Type3 : (Q_ : (_x_377 : Nat) -> Type3) -> (_H_O : Q_ 0) -> (_H_S : (x_378 : Nat) -> (_x_380 : Q_ x_378) -> Q_ (plus x_378 1)) -> (x_377 : Nat) -> Q_ x_377"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1575. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then for all natural numbers $x1029$, $x1029$ is equal to the product of $x1029$ and the difference of the product of $n$ and $c$ and the product of $m$ and $d$.",
    "output": "postulate let_clause_1575 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> (x1029 : Nat) -> Eq x1029 (times x1029 (minus (times n c) (times m d)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker_abl. For all natural numbers $a$ and $b$, for all lists $l$ of natural numbers, if $checker$ applied to $cons$ applied to $Nat$ and $a$ and $cons$ applied to $Nat$ and $b$ and $l$ is equal to $true$, then $a$ is less than $b$, $b$ is less than or equal to the product of $2$ and $a$ and $checker$ applied to $cons$ applied to $Nat$ and $b$ and $l$ is equal to $true$.",
    "output": "postulate checker_abl : (a : Nat) -> (b : Nat) -> (l : list Nat) -> (_ : Eq (checker (cons Nat a (cons Nat b l))) true) -> and (and (Lt a b) (Leq b (times 2 a))) (Eq (checker (cons Nat b l)) true)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp3_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_907$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_907$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_907$.",
    "output": "postulate ACop_rect_CProp3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_907 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_907 : ACop A _nil) -> Q_ x_907"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_exp1. Let $p$ and $n$ and $q$ and $r$ be natural numbers. Then if $0$ is less than $p$, then if $p$ is not divisible by $r$, then if $n$ is equal to the product of the exponentiation of $p$ and $q$ and $r$, then $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$.",
    "output": "postulate p_ord_exp1 : (p : Nat) -> (n : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 0 p) -> (__1 : not (divisible p r)) -> (__2 : Eq n (times (pow p q) r)) -> Eq (p_ord n p) (mk_Prod Nat Nat q r)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp1. For all natural numbers $n$, $Psi$ applied to the exponentiation of $2$ and $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and the exponentiation of $2$ and $n$ and the sum of $n$ and $2$.",
    "output": "postulate le_Psi_exp1 : (n : Nat) -> Leq (Psi (pow 2 n)) (pow 2 (minus (times 2 (pow 2 n)) (plus n 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_n_mod_n. Let $n$ and $p$ be natural numbers. Then if $0$ is less than $p$, then $congruent$ holds for $n$ and $mod$ applied to $n$ and $p$ and $p$.",
    "output": "postulate congruent_n_mod_n : (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> congruent n (mod n p) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_divides_M. For all natural numbers $m$ and $p$, if $p$ is prime, then if the sum of $m$ and $1$ is less than $p$, then if $p$ is less than or equal to the sum of the product of $2$ and $m$ and $1$, then $p$ is divisible by $M$ applied to $m$.",
    "output": "postulate prime_to_divides_M : (m : Nat) -> (p : Nat) -> (_ : prime p) -> (__1 : Lt (plus m 1) p) -> (__2 : Leq p (plus (times 2 m) 1)) -> divisible p (M m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_Sn. For all natural numbers $b$ and $n$, the exponentiation of $b$ and the sum of $n$ and $1$ is equal to the product of $b$ and the exponentiation of $b$ and $n$.",
    "output": "postulate exp_Sn : (b : Nat) -> (n : Nat) -> Eq (pow b (plus n 1)) (times b (pow b n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_mop. Let $n$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $R$ of $Dop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, for all elements $a$ and $_x_969$ and $_x_970$ of $B$, $B$.",
    "output": "postulate let_mop : (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (R : Dop B nil) -> (f : (_ : Nat) -> B) -> (a : B) -> (_x_969 : B) -> (_x_970 : B) -> B"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_mod. Let $n$ and $p$ be natural numbers. Then if $0$ is less than $p$, then $mod$ applied to $n$ and $p$ is equal to $mod$ applied to $mod$ applied to $n$ and $p$ and $p$.",
    "output": "postulate mod_mod : (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> Eq (mod n p) (mod (mod n p) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15622. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15622 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_ind. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1698$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1699$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_ind : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1698 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1699 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_div. Let $d$ and $n$ be natural numbers. Then if $d$ is divisible by $n$, then the quotient of $n$ and $d$ is divisible by $n$.",
    "output": "postulate divides_div : (d : Nat) -> (n : Nat) -> (_ : divisible d n) -> divisible (div n d) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_ind. For all functions $Q_$ from natural numbers $_x_365$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_366$ and elements $_x_368$ of $Q_$ of $x_366$ to elements of $Q_$ of the sum of $x_366$ and $1$, for all natural numbers $x_365$, $Q_$ holds for $x_365$.",
    "output": "postulate nat_ind : (Q_ : (_x_365 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_366 : Nat) -> (_x_368 : Q_ x_366) -> Q_ (plus x_366 1)) -> (x_365 : Nat) -> Q_ x_365"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt_to_lt_times_r. Let $m$ and $n$ be natural numbers. Then if the square root of $m$ is less than $n$, then $m$ is less than the product of $n$ and $n$.",
    "output": "postulate lt_sqrt_to_lt_times_r : (m : Nat) -> (n : Nat) -> (_ : Lt (sqrt m) n) -> Lt m (times n n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type1. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1458$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to elements of $Type1$, for all functions $_H1$ from elements $x_831$ of $Lt$ of $x4$ and $x2$ and elements $x_830$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1459$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_831$ and $x_830$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_831$ and $x_830$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type1 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1458 : div_mod_spec x1 x2 x3 x4) -> Type1) -> (_H1 : (x_831 : Lt x4 x2) -> (x_830 : Eq x1 (plus (times x3 x2) x4)) -> (_z1459 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_831 x_830)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_831 x_830)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp4_body. Let $Q_$ be a function from natural numbers $_x_393$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_394$ and elements $_x_396$ of $Q_$ of $x_394$ to elements of $Q_$ of the sum of $x_394$ and $1$, for all natural numbers $x_393$, $Q_$ holds for $x_393$.",
    "output": "postulate nat_rect_CProp4_body : (Q_ : (_x_393 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_394 : Nat) -> (_x_396 : Q_ x_394) -> Q_ (plus x_394 1)) -> (x_393 : Nat) -> Q_ x_393"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_degenerate. Let $p$ and $n$ be natural numbers. Then $p_ord_aux$ applied to $p$ and $n$ and $1$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $p$ and $n$.",
    "output": "postulate p_ord_degenerate : (p : Nat) -> (n : Nat) -> Eq (p_ord_aux p n 1) (mk_Prod Nat Nat p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_n_to_le. For all functions $h$ from natural numbers to natural numbers, for all natural numbers $k$ and $n$, if $k$ is less than or equal to $n$, then for all elements $__1$ of $permut$ of $h$ and $n$, for all functions $__2$ from natural numbers $m$ and elements $__2$ of $Lt$ of $m$ and $k$ to elements of $Eq$ of $h$ applied to $m$ and $m$, for all natural numbers $j$, if $k$ is less than or equal to $j$, then if $j$ is less than or equal to $n$, then $k$ is less than or equal to $h$ applied to $j$.",
    "output": "postulate permut_n_to_le : (h : (_ : Nat) -> Nat) -> (k : Nat) -> (n : Nat) -> (_ : Leq k n) -> (__1 : permut h n) -> (__2 : (m : Nat) -> (__2 : Lt m k) -> Eq (h m) m) -> (j : Nat) -> (__3 : Leq k j) -> (__4 : Leq j n) -> Leq k (h j)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_pi. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$ and $p$, if $0$ is less than $p$, then $congruent$ holds for $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $mod$ applied to $f$ applied to $i$ and $p$ and $p$.",
    "output": "postulate congruent_pi : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> congruent (bigop n (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> f i)) (bigop n (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> mod (f i) p)) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distributive_times_plus_r. Let $a$ and $b$ and $c$ be natural numbers. Then the product of the sum of $b$ and $c$ and $a$ is equal to the sum of the product of $b$ and $a$ and the product of $c$ and $a$.",
    "output": "postulate distributive_times_plus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> Eq (times (plus b c) a) (plus (times b a) (times c a))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_div_m_m. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then the product of the quotient of $n$ and $m$ and $m$ is less than or equal to $n$.",
    "output": "postulate le_times_div_m_m : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Leq (times (div n m) m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log. For all natural numbers $p$ and $n$ and $m$, if $1$ is less than $p$, then if $n$ is less than or equal to $m$, then the logarithm of $p$ and $n$ is less than or equal to the logarithm of $p$ and $m$.",
    "output": "postulate le_log : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Leq n m) -> Leq (log p n) (log p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus1. For all natural numbers $a$ and $b$ and $c$, if $c$ is less than or equal to $b$, then the sum of $a$ and the difference of $b$ and $c$ is equal to the difference of the sum of $a$ and $b$ and $c$.",
    "output": "postulate plus_minus1 : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Leq c b) -> Eq (plus a (minus b c)) (minus (plus a b) c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp1. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_937$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_937$ of $range$ of $_A$, $Q_$ holds for $x_937$.",
    "output": "postulate range_rect_CProp1 : (_A : Set) -> (Q_ : (_x_937 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_937 : range _A) -> Q_ x_937"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_body. For all natural numbers $__$ and $__1$, for all functions $__2$ from natural numbers $__2$ to booleans, $Nat$.",
    "output": "postulate min_body : (_ : Nat) -> (__1 : Nat) -> (__2 : (__2 : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_minus_to_plus. For all natural numbers $a$ and $b$ and $c$, if the difference of $a$ and $b$ is less than $c$, then $a$ is less than the sum of $c$ and $b$.",
    "output": "postulate lt_minus_to_plus : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt (minus a b) c) -> Lt a (plus c b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_ACop. For all sets $A$, for all elements $nil$ of $A$, for all elements $aop$ of $Aop$ of $A$ and $nil$, for all functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $nil$ and $aop$ and $b$ and $a$, $ACop$ holds for $A$ and $nil$.",
    "output": "postulate mk_ACop : (A : Set) -> (nil : A) -> (aop : Aop A nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A nil aop a b) (op A nil aop b a)) -> ACop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_div. For all natural numbers $d$ and $n$, if $d$ is divisible by $n$, then the quotient of $n$ and $d$ is divisible by $n$.",
    "output": "postulate divides_div : (d : Nat) -> (n : Nat) -> (_ : divisible d n) -> divisible (div n d) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp4. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_837$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_839$ of $Lt$ of $_r$ and $_m$ and elements $x_838$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_839$ and $x_838$, for all elements $x_837$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_837$.",
    "output": "postulate div_mod_spec_rect_CProp4 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_837 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_839 : Lt _r _m) -> (x_838 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_839 x_838)) -> (x_837 : div_mod_spec _n _m _q _r) -> Q_ x_837"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_fact_pi_p. Let $n$ be a natural number. Then the factorial of $n$ is equal to $bigop$ applied to the difference of the sum of $n$ and $1$ and $1$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $1$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the function that maps $i0$ to $i0$ applied to the sum of $i$ and $1$.",
    "output": "postulate eq_fact_pi_p : (n : Nat) -> Eq (factorial n) (bigop (minus (plus n 1) 1) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i 1)) Nat 1 times (\\ i : Nat -> (\\ i0 : Nat -> i0) (plus i 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_fwd_plus_plus_ge. Let $m1$ and $m2$ be natural numbers. Then if $m2$ is less than or equal to $m1$, then for all natural numbers $n1$ and $n2$, if the sum of $m1$ and $n1$ is less than or equal to the sum of $m2$ and $n2$, then $n1$ is less than or equal to $n2$.",
    "output": "postulate le_fwd_plus_plus_ge : (m1 : Nat) -> (m2 : Nat) -> (_ : Leq m2 m1) -> (n1 : Nat) -> (n2 : Nat) -> (__1 : Leq (plus m1 n1) (plus m2 n2)) -> Leq n1 n2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_2. $Psi (2)= 2$.",
    "output": "postulate Psi_2 : Eq (Psi 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp1_body. Let $Q_$ be a function from natural numbers $_x_409$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_410$ and elements $_x_412$ of $Q_$ of $x_410$ to elements of $Q_$ of the sum of $x_410$ and $1$, for all natural numbers $x_409$, $Q_$ holds for $x_409$.",
    "output": "postulate nat_rect_CProp1_body : (Q_ : (_x_409 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_410 : Nat) -> (_x_412 : Q_ x_410) -> Q_ (plus x_410 1)) -> (x_409 : Nat) -> Q_ x_409"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_to_le1. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then if the exponentiation of $n$ and $p$ is less than or equal to the exponentiation of $m$ and $p$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_exp_to_le1 : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Leq (pow n p) (pow m p)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sqrt_n1. For all natural numbers $n$, the difference of $n$ and the product of $2$ and the square root of $n$ is less than or equal to the exponentiation of the square root of $n$ and $2$.",
    "output": "postulate le_sqrt_n1 : (n : Nat) -> Leq (minus n (times 2 (sqrt n))) (pow (sqrt n) 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound7. For all natural numbers $n$ and $m$, if $nth_prime$ applied to $n$ is less than $m$, then $Nat$.",
    "output": "postulate let_upper_bound7 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_times_r. Let $n$ be a natural number. Then $monotonic$ holds for $Nat$ and $Leq$ and the function that maps $m$ to the product of $n$ and $m$.",
    "output": "postulate monotonic_le_times_r : (n : Nat) -> monotonic Nat Leq (\\ m : Nat -> times n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus. For all natural numbers $n$ and $m$ and $p$, the difference of the difference of $n$ and $m$ and $p$ is equal to the difference of $n$ and the sum of $m$ and $p$.",
    "output": "postulate minus_plus : (n : Nat) -> (m : Nat) -> (p : Nat) -> Eq (minus (minus n m) p) (minus n (plus m p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Op. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $Aop$ of $A$ and $nil$, for all elements $_x_887$ and $_x_888$ of $A$, $A$.",
    "output": "postulate op : (A : Set) -> (nil : A) -> (_xxx : Aop A nil) -> (_x_887 : A) -> (_x_888 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10131. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$ and $n0$, if $max$ applied to the sum of $n0$ and $1$ and $f$ is equal to $m$, then if $f$ applied to $m$ is equal to absurdity, then for all natural numbers $i$ and $j$, if the sum of $j$ and $1$ is less than the sum of $n0$ and $1$, then for all natural numbers $x7$, $x7$ is equal to the sum of $m$ and $x7$.",
    "output": "postulate let_clause_10131 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (n0 : Nat) -> (eqm : Eq (max (plus n0 1) f) m) -> (fm : Eq (f m) false) -> (i : Nat) -> (j : Nat) -> (ltj : Lt (plus j 1) (plus n0 1)) -> (x7 : Nat) -> Eq x7 (plus m x7)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type3. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1446$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to elements of $Type3$, for all functions $_H1$ from elements $x_823$ of $Lt$ of $x4$ and $x2$ and elements $x_822$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1447$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_823$ and $x_822$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_823$ and $x_822$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type3 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1446 : div_mod_spec x1 x2 x3 x4) -> Type3) -> (_H1 : (x_823 : Lt x4 x2) -> (x_822 : Eq x1 (plus (times x3 x2) x4)) -> (_z1447 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_823 x_822)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_823 x_822)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_times_mod. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then if $0$ is less than $m$, then $mod$ applied to $n$ and $p$ is equal to $mod$ applied to $mod$ applied to $n$ and the product of $m$ and $p$ and $p$.",
    "output": "postulate mod_times_mod : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Lt 0 m) -> Eq (mod n p) (mod (mod n (times m p)) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type2. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1584$ of $ACop$ of $x1$ and $x2$ to elements of $Type2$, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1585$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type2 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1584 : ACop x1 x2) -> Type2) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1585 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_to_not_eq_O. For all natural numbers $n$ and $m$ and $q$ and $r$, for all elements $__$ of $div_mod_spec$ of $n$ and $m$ and $q$ and $r$, $m$ is not equal to $0$.",
    "output": "postulate div_mod_spec_to_not_eq_O : (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : div_mod_spec n m q r) -> not (Eq m 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sqrt_log. Let $n$ and $b$ be natural numbers. Then if $2$ is less than $b$, then the logarithm of $b$ and $n$ is less than or equal to the square root of $n$.",
    "output": "postulate le_sqrt_log : (n : Nat) -> (b : Nat) -> (_ : Lt 2 b) -> Leq (log b n) (sqrt n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_n_n. Let $n$ and $p$ be natural numbers. Then $congruent$ holds for $n$ and $n$ and $p$.",
    "output": "postulate congruent_n_n : (n : Nat) -> (p : Nat) -> congruent n n p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_0. Let $n$ and $m$ be natural numbers. Then $p_ord_aux$ applied to $0$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $0$ and $n$.",
    "output": "postulate p_ord_aux_0 : (n : Nat) -> (m : Nat) -> Eq (p_ord_aux 0 n m) (mk_Prod Nat Nat 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log2_sqrt. Let $n$ be a natural number. Then if the exponentiation of $2$ and $4$ is less than or equal to $n$, then the logarithm of $2$ and $n$ is less than or equal to the square root of $n$.",
    "output": "postulate le_log2_sqrt : (n : Nat) -> (_ : Leq (pow 2 4) n) -> Leq (log 2 n) (sqrt n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_minus_associative. For all natural numbers $x$ and $y$ and $z$, if $z$ is less than or equal to $y$, then the sum of $x$ and the difference of $y$ and $z$ is equal to the difference of the sum of $x$ and $y$ and $z$.",
    "output": "postulate plus_minus_associative : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq z y) -> Eq (plus x (minus y z)) (minus (plus x y) z)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ltn_to_ltO. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then $0$ is less than $m$.",
    "output": "postulate ltn_to_ltO : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Lt 0 m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_transpose_l. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$ and $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then for all elements $__2$ of $bijn$ of $f$ and $n$, $bijn$ holds for the function that maps $p$ to $transpose$ applied to $i$ and $j$ and $f$ applied to $p$ and $n$.",
    "output": "postulate bijn_transpose_l : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i n) -> (__1 : Leq j n) -> (__2 : bijn f n) -> bijn (\\ p : Nat -> transpose i j (f p)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_not_eq. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then $n$ is not equal to $m$.",
    "output": "postulate lt_to_not_eq : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> not (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type4. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1506$ of $Aop$ of $x1$ and $x2$ to elements of $Type4$, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1507$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1506 : Aop x1 x2) -> Type4) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1507 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B2. For all natural numbers $_n$, $Nat$.",
    "output": "postulate B2 : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. For all natural numbers $n$, if $5$ is less than $n$, then for all natural numbers $m$, if $6$ is less than or equal to $m$, then if the exponentiation of the sum of $m$ and $1$ and $2$ is less than or equal to the exponentiation of $2$ and $m$, then for all natural numbers $a$, if $6$ is less than or equal to $a$, then if the sum of the product of $2$ and the sum of $a$ and $1$ and $1$ is less than or equal to the exponentiation of $2$ and $a$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : Nat) -> (lt4n : Lt 5 n) -> (m : Nat) -> (le4m : Leq 6 m) -> (Hind : Leq (pow (plus m 1) 2) (pow 2 m)) -> (a : Nat) -> (lea : Leq 6 a) -> (Hinda : Leq (plus (times 2 (plus a 1)) 1) (pow 2 a)) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1063. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $permf$ of $permut$ of $f$ and $n$, for all natural numbers $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then for all natural numbers $a$, if $a$ is less than or equal to $n$ and $f$ applied to $a$ is equal to $i$, then if $a$ is less than or equal to $n$, then if $f$ applied to $a$ is equal to $i$, then for all natural numbers $b$, if $b$ is less than or equal to $n$ and $f$ applied to $b$ is equal to $j$, then if $b$ is less than or equal to $n$, then if $f$ applied to $b$ is equal to $j$, then for all functions $__$ from natural numbers $i0$ and elements of $Leq$ of $i0$ and $n$ to elements of $Leq$ of $f$ applied to $i0$ and $n$, for all elements $injf$ of $injn$ of $f$ and $n$, if $a$ is equal to $b$, then $f$ applied to $a$ is equal to $j$.",
    "output": "postulate let_clause_1063 : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (permf : permut f n) -> (i : Nat) -> (j : Nat) -> (lein : Leq i n) -> (lejn : Leq j n) -> (a : Nat) -> (_clearme : and (Leq a n) (Eq (f a) i)) -> (lean : Leq a n) -> (fa : Eq (f a) i) -> (b : Nat) -> (_clearme0 : and (Leq b n) (Eq (f b) j)) -> (lebn : Leq b n) -> (fb : Eq (f b) j) -> (_ : (i0 : Nat) -> (_ : Leq i0 n) -> Leq (f i0) n) -> (injf : injn f n) -> (auto : Eq a b) -> Eq (f a) j"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1553. Let $n$ and $n0$ be natural numbers. Then for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $a$ to the disjunction of $Eq$ applied to $n0$ and the product of $2$ and $a$ and $Eq$ applied to $n0$ and the sum of the product of $2$ and $a$ and $1$, for all natural numbers $a$, if $n0$ is equal to the product of $2$ and $a$ or $n0$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $n0$ is equal to the sum of the product of $2$ and $a$ and $1$, then $n0$ is equal to the sum of $a$ and the sum of $a$ and $1$.",
    "output": "postulate let_clause_1553 : (n : Nat) -> (n0 : Nat) -> (_clearme : ex Nat (\\ a : Nat -> or (Eq n0 (times 2 a)) (Eq n0 (plus (times 2 a) 1)))) -> (a : Nat) -> (_clearme0 : or (Eq n0 (times 2 a)) (Eq n0 (plus (times 2 a) 1))) -> (Hn : Eq n0 (plus (times 2 a) 1)) -> Eq n0 (plus a (plus a 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Binomial_law. Let $a$ and $b$ and $n$ be natural numbers. Then the exponentiation of the sum of $a$ and $b$ and $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $k$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $k$ to the product of the product of $bc$ applied to $n$ and $k$ and the exponentiation of $a$ and the difference of $n$ and $k$ and the exponentiation of $b$ and $k$.",
    "output": "postulate binomial_law : (a : Nat) -> (b : Nat) -> (n : Nat) -> Eq (pow (plus a b) n) (bigop (plus n 1) (\\ k : Nat -> true) Nat 0 plus (\\ k : Nat -> times (times (bc n k) (pow a (minus n k))) (pow b k)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb1. Let $n$ be a natural number. Then if $0$ is less than $n$, then $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $dividesb$ applied to the exponentiation of $p$ and the sum of $i$ and $1$ and $n$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $p$.",
    "output": "postulate pi_p_primeb1 : (n : Nat) -> (_ : Lt 0 n) -> Eq n (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> dividesb (pow p (plus i 1)) n) Nat 1 times (\\ i : Nat -> p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_Aop. For all sets $A$, for all elements $nil$ of $A$, for all functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$, for all functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $nil$ and $a$ and $a$, for all functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $nil$ and $a$, for all functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$, $Aop$ holds for $A$ and $nil$.",
    "output": "postulate mk_Aop : (A : Set) -> (nil : A) -> (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op nil a) a) -> (_nilr : (a : A) -> Eq (op a nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Aop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_d_times_gcd. Let $m$ and $n$ and $d$ and $c$ be natural numbers. Then if $0$ is less than $c$, then if $d$ is divisible by the product of $c$ and $m$, then if $d$ is divisible by the product of $c$ and $n$, then $d$ is divisible by the product of $c$ and the greatest common divisor of $n$ and $m$.",
    "output": "postulate divides_d_times_gcd : (m : Nat) -> (n : Nat) -> (d : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : divisible d (times c m)) -> (__2 : divisible d (times c n)) -> divisible d (times c (gcd n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "False_to_lt_max. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $f$ applied to $n$ is equal to absurdity, then if $max$ applied to $m$ and $f$ is less than or equal to $n$, then $max$ applied to $m$ and $f$ is less than $n$.",
    "output": "postulate false_to_lt_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Eq (f n) false) -> (__2 : Leq (max m f) n) -> Lt (max m f) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type1. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1590$ of $ACop$ of $x1$ and $x2$ to elements of $Type1$, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1591$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type1 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1590 : ACop x1 x2) -> Type1) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1591 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transitive_sub. Let $h1$ and $k1$ and $h2$ and $k2$ be functions from natural numbers to natural numbers. Then for all sets $A$, for all elements $I$ and $J$ and $K$ of $range$ of $A$, for all elements $__$ of $sub_hk$ of $h1$ and $k1$ and $A$ and $I$ and $J$, for all elements $__1$ of $sub_hk$ of $h2$ and $k2$ and $A$ and $J$ and $K$, $sub_hk$ holds for the function that maps $x$ to $h2$ applied to $h1$ applied to $x$ and the function that maps $x$ to $k1$ applied to $k2$ applied to $x$ and $A$ and $I$ and $K$.",
    "output": "postulate transitive_sub : (h1 : (_ : Nat) -> Nat) -> (k1 : (_ : Nat) -> Nat) -> (h2 : (_ : Nat) -> Nat) -> (k2 : (_ : Nat) -> Nat) -> (A : Set) -> (I : range A) -> (J : range A) -> (K : range A) -> (_ : sub_hk h1 k1 A I J) -> (__1 : sub_hk h2 k2 A J K) -> sub_hk (\\ x : Nat -> h2 (h1 x)) (\\ x : Nat -> k1 (k2 x)) A I K"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_Strue. For all natural numbers $n$ and $m$ and $p$ and $q$ and $r$, if $mod$ applied to $n$ and $m$ is equal to $0$, then if $p_ord_aux$ applied to $p$ and the quotient of $n$ and $m$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $p_ord_aux$ applied to the sum of $p$ and $1$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and the sum of $q$ and $1$ and $r$.",
    "output": "postulate p_ord_aux_Strue : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Eq (mod n m) 0) -> (__1 : Eq (p_ord_aux p (div n m) m) (mk_Prod Nat Nat q r)) -> Eq (p_ord_aux (plus p 1) n m) (mk_Prod Nat Nat (plus q 1) r)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_x_times_x. For all natural numbers $x$, $x$ is less than or equal to the product of $x$ and $x$.",
    "output": "postulate le_x_times_x : (x : Nat) -> Leq x (times x x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type5. For all sets $_A$, for all functions $Q_$ from elements $_x_919$ of $range$ of $_A$ to elements of $Type5$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_919$ of $range$ of $_A$, $Q_$ holds for $x_919$.",
    "output": "postulate range_rect_Type5 : (_A : Set) -> (Q_ : (_x_919 : range _A) -> Type5) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_919 : range _A) -> Q_ x_919"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ltransitive. For all sets $B$, for all elements $R$ of $relation$ of $B$, $ltransitive$ holds for $B$ and $lstar$ applied to $B$ and $R$.",
    "output": "postulate lstar_ltransitive : (B : Set) -> (R : relation B) -> ltransitive B (lstar B R)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Or_div_mod1. For all natural numbers $n$ and $q$, if $0$ is less than $q$, then $q$ is divisible by the sum of $n$ and $1$ and the sum of $n$ and $1$ is equal to the product of the sum of the quotient of $n$ and $q$ and $1$ and $q$ or $q$ is not divisible by the sum of $n$ and $1$ and the sum of $n$ and $1$ is equal to the sum of the product of the quotient of $n$ and $q$ and $q$ and the sum of $mod$ applied to $n$ and $q$ and $1$.",
    "output": "postulate or_div_mod1 : (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> or (and (divisible q (plus n 1)) (Eq (plus n 1) (times (plus (div n q) 1) q))) (and (not (divisible q (plus n 1))) (Eq (plus n 1) (plus (times (div n q) q) (plus (mod n q) 1))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_step. For all sets $B$, for all functions $R$ from elements of $B$ and elements $__1$ of $B$ to propositions, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $R$ of $b1$ and $b2$, $lstar$ holds for $B$ and $R$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_step : (B : Set) -> (R : (_ : B) -> (__1 : B) -> Prop) -> (b1 : B) -> (b2 : B) -> (_ : R b1 b2) -> lstar B R 1 b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "To_min. Let $i$ and $n$ and $m$ be natural numbers. Then if $i$ is less than or equal to $n$, then if $i$ is less than or equal to $m$, then $i$ is less than or equal to $min$ applied to $n$ and $m$.",
    "output": "postulate to_min : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq i n) -> (__1 : Leq i m) -> Leq i (min n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log_n_n. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then the logarithm of $p$ and $n$ is less than or equal to $n$.",
    "output": "postulate le_log_n_n : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Leq (log p n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc_n_O. Let $n$ be a natural number. Then $bc$ applied to $n$ and $0$ is equal to $1$.",
    "output": "postulate bc_n_O : (n : Nat) -> Eq (bc n 0) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_to_injn. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $injective$ of $Nat$ and $Nat$ and $f$, $injn$ holds for $f$ and $n$.",
    "output": "postulate injective_to_injn : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : injective Nat Nat f) -> injn f n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Invert_permut_f. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$ and $m$, if $m$ is less than or equal to $n$, then for all elements $__1$ of $injn$ of $f$ and $n$, $invert_permut$ applied to $n$ and $f$ and $f$ applied to $m$ is equal to $m$.",
    "output": "postulate invert_permut_f : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> (__1 : injn f n) -> Eq (invert_permut n f (f m)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_2. For all natural numbers $n$, the exponentiation of $n$ and $2$ is equal to the product of $n$ and $n$.",
    "output": "postulate exp_2 : (n : Nat) -> Eq (pow n 2) (times n n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_n_Sn. Let $n$ be a natural number. Then $n$ is not equal to the sum of $n$ and $1$.",
    "output": "postulate not_eq_n_Sn : (n : Nat) -> not (Eq n (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp0. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_967$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_967$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_967$.",
    "output": "postulate Dop_rect_CProp0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_967 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_967 : Dop A _nil) -> Q_ x_967"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_range. Let $_A$ be a set. Then for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $range$ of $_A$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $range$ of $_A$ to elements of $return_type$ of $z$, for all elements $z$ of $range$ of $_A$, $return_type$ holds for $z$.",
    "output": "postulate filter_range : (_A : Set) -> (return_sort : Sort) -> (return_type : (z : range _A) -> return_sort) -> (return : (z : range _A) -> return_type z) -> (z : range _A) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_body. Let $__$ and $__1$ be natural numbers. Then $Nat$.",
    "output": "postulate minus_body : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_Psi_Psi'. Let $n$ be a natural number. Then $Psi$ applied to $n$ is equal to $Psi'$ applied to $n$.",
    "output": "postulate eq_Psi_Psi' : (n : Nat) -> Eq (Psi n) (Psi' n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Assoc_body. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ and $b$ and $c$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $op$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ is equal to $op$ applied to $A$ and $nil$ and $xxx$ and $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $c$.",
    "output": "postulate assoc_body : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> (b : A) -> (c : A) -> Eq (op A nil xxx a (op A nil xxx b c)) (op A nil xxx (op A nil xxx a b) c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type4_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_863$ of $Aop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_863$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_863$.",
    "output": "postulate Aop_rect_Type4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_863 : Aop A _nil) -> Type4) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_863 : Aop A _nil) -> Q_ x_863"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Commutative_times. $commutative$ holds for $Nat$ and $times$.",
    "output": "postulate commutative_times : commutative Nat times"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1009. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $f$ applied to $n$ is equal to absurdity, then if $max$ applied to $m$ and $f$ is less than or equal to $n$, then if $max$ applied to $m$ and $f$ is equal to $n$, then if $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $m$ and the function that maps $__$ to $Eq$ applied to $f$ applied to $i$ and absurdity and $max$ applied to $m$ and $f$ is equal to $0$, then for all functions $auto$ from natural numbers $i$ and elements of $Lt$ of $i$ and $m$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, if $max$ applied to $m$ and $f$ is equal to $0$, then $0$ is equal to $n$.",
    "output": "postulate let_clause_1009 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (Hfn : Eq (f n) false) -> (Hmax : Leq (max m f) n) -> (Hmax0 : Eq (max m f) n) -> (_clearme : and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i m) (\\ _ : Lt i m -> Eq (f i) false))) (Eq (max m f) 0)) -> (auto : (i : Nat) -> (_ : Lt i m) -> Eq (f i) false) -> (auto' : Eq (max m f) 0) -> Eq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_aux. Let $_p$ and $_m$ and $_n$ be natural numbers. Then $Nat$.",
    "output": "postulate gcd_aux : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_A$ be a set. Then $range$ applied to $_A$ is a set.",
    "output": "postulate range : (_A : Set) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type2. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_951$ of $Dop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_951$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_951$.",
    "output": "postulate Dop_rect_Type2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_951 : Dop A _nil) -> Type2) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_951 : Dop A _nil) -> Q_ x_951"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_O. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, if $0$ is equal to $l$, then $b1$ is equal to $b2$.",
    "output": "postulate lstar_inv_O : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R l b1 b2) -> (__1 : Eq 0 l) -> Eq b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_to_exp. For all natural numbers $p$ and $n$ and $m$ and $q$ and $r$, if $0$ is less than $m$, then if $p_ord_aux$ applied to $p$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $n$ is equal to the product of the exponentiation of $m$ and $q$ and $r$.",
    "output": "postulate p_ord_aux_to_exp : (p : Nat) -> (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 0 m) -> (__1 : Eq (p_ord_aux p n m) (mk_Prod Nat Nat q r)) -> Eq n (times (pow m q) r)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp0. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1560$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1561$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1560 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1561 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_divides_times. Let $p$ and $q$ and $n$ be natural numbers. Then if $p$ is prime, then if $p$ is not divisible by $q$, then if $p$ is divisible by $n$, then if $q$ is divisible by $n$, then the product of $p$ and $q$ is divisible by $n$.",
    "output": "postulate divides_to_divides_times : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : prime p) -> (__1 : not (divisible p q)) -> (__2 : divisible p n) -> (__3 : divisible q n) -> divisible (times p q) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nth_prime. Let $__$ be a natural number. Then $Nat$.",
    "output": "postulate nth_prime : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_fact_2. For all natural numbers $n$, the exponentiation of the factorial of $n$ and $2$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$.",
    "output": "postulate exp_fact_2 : (n : Nat) -> Eq (pow (factorial n) 2) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1)))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ \\in N$. Then the successor of $__$ is a natural number.",
    "output": "postulate succ : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_pi_p. For all natural numbers $n$, the factorial of $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$.",
    "output": "postulate fact_pi_p : (n : Nat) -> Eq (factorial n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (div n (pow p (plus i 1))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc1. Let $n$ and $k$ be natural numbers. Then if $k$ is less than $n$, then $bc$ applied to the sum of $n$ and $1$ and the sum of $k$ and $1$ is equal to the sum of $bc$ applied to $n$ and $k$ and $bc$ applied to $n$ and the sum of $k$ and $1$.",
    "output": "postulate bc1 : (n : Nat) -> (k : Nat) -> (_ : Lt k n) -> Eq (bc (plus n 1) (plus k 1)) (plus (bc n k) (bc n (plus k 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair5. $cr_pair (3 , 7 , 0 , 4)= 18$.",
    "output": "postulate cr_pair5 : Eq (cr_pair 3 7 0 4) 18"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "S_pred. Let $n$ be a natural number. Then if $0$ is less than $n$, then the sum of $pred$ applied to $n$ and $1$ is equal to $n$.",
    "output": "postulate S_pred : (n : Nat) -> (_ : Lt 0 n) -> Eq (plus (pred n) 1) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_prime_O. $0$ is not prime.",
    "output": "postulate not_prime_O : not (prime 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_n. Let $n$ and $m$ be natural numbers. Then $m$ is less than or equal to the sum of $n$ and $m$.",
    "output": "postulate le_plus_n : (n : Nat) -> (m : Nat) -> Leq m (plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp4_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_875$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_875$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_875$.",
    "output": "postulate Aop_rect_CProp4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_875 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_875 : Aop A _nil) -> Q_ x_875"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le_to_lt_times. Let $n$ and $m$ and $p$ and $q$ be natural numbers. Then if $n$ is less than $m$, then if $p$ is less than or equal to $q$, then if $0$ is less than $q$, then the product of $n$ and $p$ is less than the product of $m$ and $q$.",
    "output": "postulate lt_to_le_to_lt_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt n m) -> (__1 : Leq p q) -> (__2 : Lt 0 q) -> Lt (times n p) (times m q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times. Let $n1$ and $n2$ and $m1$ and $m2$ be natural numbers. Then if $n1$ is less than or equal to $n2$, then if $m1$ is less than or equal to $m2$, then the product of $n1$ and $m1$ is less than or equal to the product of $n2$ and $m2$.",
    "output": "postulate le_times : (n1 : Nat) -> (n2 : Nat) -> (m1 : Nat) -> (m2 : Nat) -> (_ : Leq n1 n2) -> (__1 : Leq m1 m2) -> Leq (times n1 m1) (times n2 m2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_ind. For all sets $x1$, for all elements $x2$ of $relation$ of $x1$, for all natural numbers $x3$, for all elements $x4$ and $x5$ of $x1$, for all elements $_Hterm$ of $lstar$ of $x1$ and $x2$ and $x3$ and $x4$ and $x5$, for all functions $P$ from natural numbers $_z2089$ and elements $_z2088$ of $x1$ and elements $_z2087$ of $x1$ to propositions, for all functions $_H1$ from elements $b$ of $x1$ and elements $_z2092$ of $Eq$ of $x3$ and $0$ and elements $_z2091$ of $Eq$ of $x4$ and $b$ and elements $_z2090$ of $Eq$ of $x5$ and $b$ to elements of $P$ of $0$ and $b$ and $b$, for all functions $_H2$ from elements $b1$ of $x1$ and elements $b$ of $x1$ and elements $_x_1236$ of $x2$ of $b1$ and $b$ and natural numbers $l$ and elements $b2$ of $x1$ and elements $_x_1235$ of $lstar$ of $x1$ and $x2$ and $l$ and $b$ and $b2$ and functions $_x_1238$ from elements $_z2092$ of $Eq$ of $x3$ and $l$ and elements $_z2091$ of $Eq$ of $x4$ and $b$ and elements $_z2090$ of $Eq$ of $x5$ and $b2$ to elements of $P$ of $l$ and $b$ and $b2$ and elements $_z2092$ of $Eq$ of $x3$ and the sum of $l$ and $1$ and elements $_z2091$ of $Eq$ of $x4$ and $b1$ and elements $_z2090$ of $Eq$ of $x5$ and $b2$ to elements of $P$ of the sum of $l$ and $1$ and $b1$ and $b2$, $P$ holds for $x3$ and $x4$ and $x5$.",
    "output": "postulate lstar_inv_ind : (x1 : Set) -> (x2 : relation x1) -> (x3 : Nat) -> (x4 : x1) -> (x5 : x1) -> (_Hterm : lstar x1 x2 x3 x4 x5) -> (P : (_z2089 : Nat) -> (_z2088 : x1) -> (_z2087 : x1) -> Prop) -> (_H1 : (b : x1) -> (_z2092 : Eq x3 0) -> (_z2091 : Eq x4 b) -> (_z2090 : Eq x5 b) -> P 0 b b) -> (_H2 : (b1 : x1) -> (b : x1) -> (_x_1236 : x2 b1 b) -> (l : Nat) -> (b2 : x1) -> (_x_1235 : lstar x1 x2 l b b2) -> (_x_1238 : (_z2092 : Eq x3 l) -> (_z2091 : Eq x4 b) -> (_z2090 : Eq x5 b2) -> P l b b2) -> (_z2092 : Eq x3 (plus l 1)) -> (_z2091 : Eq x4 b1) -> (_z2090 : Eq x5 b2) -> P (plus l 1) b1 b2) -> P x3 x4 x5"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp1_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_911$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_911$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_911$.",
    "output": "postulate ACop_rect_CProp1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_911 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_911 : ACop A _nil) -> Q_ x_911"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_le_r. Let $a$ and $n$ and $m$ be natural numbers. Then if the sum of $n$ and $a$ is less than or equal to the sum of $m$ and $a$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_plus_to_le_r : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (plus n a) (plus m a)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_times. Let $p$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $p$, then the logarithm of $p$ and the product of $n$ and $m$ is less than or equal to the sum of the sum of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$ and $1$.",
    "output": "postulate log_times : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> Leq (log p (times n m)) (plus (plus (log p n) (log p m)) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_injective. For all functions $f$ from natural numbers to natural numbers, for all elements $__$ of $increasing$ of $f$, $injective$ holds for $Nat$ and $Nat$ and $f$.",
    "output": "postulate increasing_to_injective : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> injective Nat Nat f"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_minus_to_plus. Let $a$ and $b$ and $c$ be natural numbers. Then if the difference of $a$ and $b$ is less than $c$, then $a$ is less than the sum of $c$ and $b$.",
    "output": "postulate lt_minus_to_plus : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt (minus a b) c) -> Lt a (plus c b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSO. $B (3)= 6$.",
    "output": "postulate B_SSSO : Eq (B 3) 6"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_found_min_spec. For all natural numbers $n$ and $b$, for all functions $f$ from natural numbers to booleans, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $n$ and $b$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $min_spec$ holds for $n$ and $b$ and $f$ and the sum of $n$ and $b$.",
    "output": "postulate not_found_min_spec : (n : Nat) -> (b : Nat) -> (f : (_ : Nat) -> bool) -> (_ : (i : Nat) -> (_ : Leq b i) -> (__1 : Lt i (plus n b)) -> Eq (f i) false) -> min_spec n b f (plus n b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10335. Let $n$ be a natural number. Then if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10335 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_le2. Let $f$ be a function from natural numbers to natural numbers. Then for all elements $__$ of $increasing$ of $f$, for all natural numbers $m$, if $f$ applied to $0$ is less than or equal to $m$, then $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Leq$ applied to $f$ applied to $i$ and $m$ and $Lt$ applied to $m$ and $f$ applied to the sum of $i$ and $1$.",
    "output": "postulate increasing_to_le2 : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> (m : Nat) -> (__1 : Leq (f 0) m) -> ex Nat (\\ i : Nat -> and (Leq (f i) m) (Lt m (f (plus i 1))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times_to_lt_div. Let $m$ and $n$ and $q$ be natural numbers. Then if $n$ is less than the product of $m$ and $q$, then the quotient of $n$ and $q$ is less than $m$.",
    "output": "postulate lt_times_to_lt_div : (m : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Lt n (times m q)) -> Lt (div n q) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_S_S_to_lt. For all natural numbers $n$ and $m$, if the sum of $n$ and $1$ is less than the sum of $m$ and $1$, then $n$ is less than $m$.",
    "output": "postulate lt_S_S_to_lt : (n : Nat) -> (m : Nat) -> (_ : Lt (plus n 1) (plus m 1)) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp2_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_909$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_909$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_909$.",
    "output": "postulate ACop_rect_CProp2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_909 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_909 : ACop A _nil) -> Q_ x_909"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_max_to_false. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $m$ is less than $n$, then if $max$ applied to $n$ and $f$ is less than $m$, then $f$ applied to $m$ is equal to absurdity.",
    "output": "postulate lt_max_to_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Lt (max n f) m) -> Eq (f m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_inv_ind. For all natural numbers $x1$ and $x2$, if $x1$ is divisible by $x2$, then for all functions $P$ from elements $_z2006$ of $divisible$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from natural numbers $q$ and elements $x_1193$ of $Eq$ of $x2$ and the product of $x1$ and $q$ and elements $_z2007$ of $Eq$ of $Hterm$ and $quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$ to elements of $P$ of $quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$, $P$ holds for $Hterm$.",
    "output": "postulate divides_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (Hterm : divisible x1 x2) -> (P : (_z2006 : divisible x1 x2) -> Prop) -> (_H1 : (q : Nat) -> (x_1193 : Eq x2 (times x1 q)) -> (_z2007 : Eq Hterm (quotient x1 x2 q x_1193)) -> P (quotient x1 x2 q x_1193)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ld_to_prime. Let $i$ be a natural number. Then for all lists $acc$ of natural numbers, if $1$ is less than $i$, then for all elements $__1$ of $primes_below$ of $acc$ and $i$, if $list_divides$ applied to $acc$ and $i$ is equal to absurdity, then $i$ is prime.",
    "output": "postulate ld_to_prime : (i : Nat) -> (acc : list Nat) -> (_ : Lt 1 i) -> (__1 : primes_below acc i) -> (__2 : Eq (list_divides acc i) false) -> prime i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp2. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_881$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_881$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_881$.",
    "output": "postulate Aop_rect_CProp2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_881 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_881 : Aop A _nil) -> Q_ x_881"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nill. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $nil$ and $a$ is equal to $a$.",
    "output": "postulate nill : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx nil a) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_rem_eq. Let $n$ and $p$ be natural numbers. Then $ord_rem$ applied to $n$ and $p$ is equal to $snd$ applied to $Nat$ and $Nat$ and $p_ord$ applied to $n$ and $p$.",
    "output": "postulate ord_rem_eq : (n : Nat) -> (p : Nat) -> Eq (ord_rem n p) (snd Nat Nat (p_ord n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_discr. For all sets $a1$, for all elements $a2$ of $a1$, for all elements $x$ and $y$ of $ACop$ of $a1$ and $a2$, if $x$ is equal to $y$, then $match_ACop$ holds for $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ to $match_ACop$ applied to $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $Aop$ applied to $a1$ and $a2$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $Aop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x_19$ and $_x_20$ to the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $b$ to $Eq$ applied to $op$ applied to $a1$ and $a2$ and $x0$ and $a$ and $b$ and $op$ applied to $a1$ and $a2$ and $x0$ and $b$ and $a$ applied to $x_19$ and $_x_20$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $_e1$ to $P$ and the function that maps $_z57$ to $P$ and $y$ and $x$.",
    "output": "postulate ACop_discr : (a1 : Set) -> (a2 : a1) -> (x : ACop a1 a2) -> (y : ACop a1 a2) -> (_e : Eq x y) -> match_ACop a1 a2 (plus Type2 1) (\\ _ : ACop a1 a2 -> univ Type2) (\\ t0 : Aop a1 a2 -> \\ t1 : ((a : a1) -> (b : a1) -> Eq (op a1 a2 t0 a b) (op a1 a2 t0 b a)) -> match_ACop a1 a2 (plus Type2 1) (\\ _ : ACop a1 a2 -> univ Type2) (\\ u0 : Aop a1 a2 -> \\ u1 : ((a : a1) -> (b : a1) -> Eq (op a1 a2 u0 a b) (op a1 a2 u0 b a)) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (Aop a1 a2) t0) u0) (\\ e0 : Eq (R0 (Aop a1 a2) t0) u0 -> prod Prop Type1 (Eq (R1 (Aop a1 a2) t0 (\\ x_19 : Aop a1 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Aop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> Eq (op a1 a2 x0 a b) (op a1 a2 x0 b a)))) x_19 _x_20) t1 u0 e0) u1) (\\ _e1 : Eq (R1 (Aop a1 a2) t0 (\\ x_19 : Aop a1 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Aop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> Eq (op a1 a2 x0 a b) (op a1 a2 x0 b a)))) x_19 _x_20) t1 u0 e0) u1 -> P))) (\\ _z57 : ((e0 : Eq (R0 (Aop a1 a2) t0) u0) -> (_e1 : Eq (R1 (Aop a1 a2) t0 (\\ x_19 : Aop a1 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Aop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> Eq (op a1 a2 x0 a b) (op a1 a2 x0 b a)))) x_19 _x_20) t1 u0 e0) u1) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime4. For all natural numbers $n$ and $m$, $Nat$.",
    "output": "postulate let_previous_prime4 : (n : Nat) -> (m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_gcd_times. For all natural numbers $m$ and $n$ and $p$, if $0$ is less than $p$, then the greatest common divisor of $m$ and $n$ is less than or equal to the greatest common divisor of $m$ and the product of $n$ and $p$.",
    "output": "postulate le_gcd_times : (m : Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> Leq (gcd m n) (gcd m (times n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod. Let $__$ and $__1$ be natural numbers. Then $Nat$.",
    "output": "postulate mod : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dpi1__o__op. Let $x0$ be a set. Then for all elements $x1$ of $x0$, for all functions $x2$ from elements of $Aop$ of $x0$ and $x1$ to sets, for all elements $x3$ of $DPair$ of $Aop$ applied to $x0$ and $x1$ and $x2$, for all elements $_x_887$ and $_x_888$ of $x0$, $x0$.",
    "output": "postulate dpi1__o__op : (x0 : Set) -> (x1 : x0) -> (x2 : (_ : Aop x0 x1) -> Set) -> (x3 : DPair (Aop x0 x1) x2) -> (_x_887 : x0) -> (_x_888 : x0) -> x0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_elim2. For all functions $R$ from natural numbers and natural numbers $__1$ to propositions, for all functions $__$ from natural numbers $n$ to elements of $R$ of $0$ and $n$, for all functions $__1$ from natural numbers $n$ to elements of $R$ of the sum of $n$ and $1$ and $0$, for all functions $__2$ from natural numbers $n$ and natural numbers $m$ and elements $__2$ of $R$ of $n$ and $m$ to elements of $R$ of the sum of $n$ and $1$ and the sum of $m$ and $1$, for all natural numbers $n$ and $m$, $R$ holds for $n$ and $m$.",
    "output": "postulate nat_elim2 : (R : (_ : Nat) -> (__1 : Nat) -> Prop) -> (_ : (n : Nat) -> R 0 n) -> (__1 : (n : Nat) -> R (plus n 1) 0) -> (__2 : (n : Nat) -> (m : Nat) -> (__2 : R n m) -> R (plus n 1) (plus m 1)) -> (n : Nat) -> (m : Nat) -> R n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_def. Let $n$ be a natural number. Then $Psi$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and the logarithm of $p$ and $n$.",
    "output": "postulate psi_def : (n : Nat) -> Eq (Psi n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (log p n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then if $n$ is less than or equal to $m$, then the exponentiation of $p$ and $n$ is less than or equal to the exponentiation of $p$ and $m$.",
    "output": "postulate le_exp : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Leq n m) -> Leq (pow p n) (pow p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type3_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_867$ of $Aop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_867$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_867$.",
    "output": "postulate Aop_rect_Type3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_867 : Aop A _nil) -> Type3) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_867 : Aop A _nil) -> Q_ x_867"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_times_div_minus_mod. For all natural numbers $a$ and $b$, the product of the quotient of $a$ and $b$ and $b$ is equal to the difference of $a$ and $mod$ applied to $a$ and $b$.",
    "output": "postulate eq_times_div_minus_mod : (a : Nat) -> (b : Nat) -> Eq (times (div a b) b) (minus a (mod a b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Inv_ltransitive. For all sets $B$, $predicate$ holds for $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $relation$ applied to $B$.",
    "output": "postulate inv_ltransitive : (B : Set) -> predicate (prod Set Set Nat (\\ _ : Nat -> relation B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le_to_lt. Let $n$ and $m$ and $p$ be natural numbers. Then if $n$ is less than $m$, then if $m$ is less than or equal to $p$, then $n$ is less than $p$.",
    "output": "postulate lt_to_le_to_lt : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt n m) -> (__1 : Leq m p) -> Lt n p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSO. $B$ applied to $4$ is equal to $6$.",
    "output": "postulate B_SSSSO : Eq (B 4) 6"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_i_2n. Let $n$ and $i$ be natural numbers. Then if $1$ is less than $n$, then if $n$ is less than $i$, then if $i$ is less than or equal to the product of $2$ and $n$, then the logarithm of $i$ and the product of $2$ and $n$ is equal to $1$.",
    "output": "postulate log_i_2n : (n : Nat) -> (i : Nat) -> (_ : Lt 1 n) -> (__1 : Lt n i) -> (__2 : Leq i (times 2 n)) -> Eq (log i (times 2 n)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_S_mod. For all natural numbers $n$, $permut$ holds for $S_mod$ applied to the sum of $n$ and $1$ and $n$.",
    "output": "postulate permut_S_mod : (n : Nat) -> permut (S_mod (plus n 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ and $_m$ be natural numbers. Then we can say that $_n$ is divisible by $_m$.",
    "output": "postulate divisible : (_n : Nat) -> (_m : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B. For all natural numbers $_n$, $Nat$.",
    "output": "postulate B : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1013. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$ and $i$, for all functions $Hind$ from elements of $Eq$ of $max$ applied to $i$ and $f$ and $m$ and elements $__1$ of $Eq$ of $f$ applied to $m$ and absurdity to elements of $Eq$ of $m$ and $0$, if $f$ applied to $i$ is equal to $true$, then if $i$ is equal to $m$, then if $f$ applied to $m$ is equal to absurdity, then absurdity is equal to $true$.",
    "output": "postulate let_clause_1013 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (i : Nat) -> (Hind : (_ : Eq (max i f) m) -> (__1 : Eq (f m) false) -> Eq m 0) -> (fi : Eq (f i) true) -> (eqm : Eq i m) -> (fm : Eq (f m) false) -> Eq false true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_range. Let $A$ be a set. Then for all functions $_enum$ from natural numbers to elements of $A$, for all natural numbers $_upto$, for all functions $_filter$ from natural numbers to booleans, $range$ holds for $A$.",
    "output": "postulate mk_range : (A : Set) -> (_enum : (_ : Nat) -> A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> range A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_to_le_div2. Let $m$ and $n$ and $q$ be natural numbers. Then if $0$ is less than $q$, then if $n$ is less than or equal to the product of $m$ and $q$, then the quotient of $n$ and $q$ is less than or equal to $m$.",
    "output": "postulate le_times_to_le_div2 : (m : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> (__1 : Leq n (times m q)) -> Leq (div n q) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ and $_b$ be natural numbers. Let $_f$ be a function from natural numbers to booleans. Let $__$ be a natural number. Then $min_spec$ applied to $_n$ and $_b$ and $_f$ and $__$ is a proposition.",
    "output": "postulate min_spec : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_nth_prime. For all natural numbers $n$, $nth_prime$ applied to $n$ is less than $nth_prime$ applied to the sum of $n$ and $1$.",
    "output": "postulate increasing_nth_prime : (n : Nat) -> Lt (nth_prime n) (nth_prime (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp. For all natural numbers $n$, $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$ and $Psi$ applied to $n$.",
    "output": "postulate le_Psi_exp : (n : Nat) -> Leq (Psi (times 2 n)) (times (pow 2 (pred (times 2 n))) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primeb_true_to_prime. For all natural numbers $n$, if $primeb$ applied to $n$ is equal to $true$, then $n$ is prime.",
    "output": "postulate primeb_true_to_prime : (n : Nat) -> (_ : Eq (primeb n) true) -> prime n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_l. For all natural numbers $n$ and $m$, the greatest common divisor of $n$ and $m$ is divisible by $n$.",
    "output": "postulate divides_gcd_l : (n : Nat) -> (m : Nat) -> divisible (gcd n m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_true_to_le. For all natural numbers $n$ and $m$, if $leb$ applied to $n$ and $m$ is equal to $true$, then $n$ is less than or equal to $m$.",
    "output": "postulate leb_true_to_le : (n : Nat) -> (m : Nat) -> (_ : Eq (leb n m) true) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_2_pred. Let $n$ be a natural number. Then the product of $2$ and $pred$ applied to $n$ is less than or equal to $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate times_2_pred : (n : Nat) -> Leq (times 2 (pred n)) (pred (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type3_body. For all functions $Q_$ from natural numbers $_x_377$ to elements of $Type3$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_378$ and elements $_x_380$ of $Q_$ of $x_378$ to elements of $Q_$ of the sum of $x_378$ and $1$, for all natural numbers $x_377$, $Q_$ holds for $x_377$.",
    "output": "postulate nat_rect_Type3_body : (Q_ : (_x_377 : Nat) -> Type3) -> (_H_O : Q_ 0) -> (_H_S : (x_378 : Nat) -> (_x_380 : Q_ x_378) -> Q_ (plus x_378 1)) -> (x_377 : Nat) -> Q_ x_377"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp4_body. For all sets $_A$, for all functions $Q_$ from elements $_x_929$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_929$ of $range$ of $_A$, $Q_$ holds for $x_929$.",
    "output": "postulate range_rect_CProp4_body : (_A : Set) -> (Q_ : (_x_929 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_929 : range _A) -> Q_ x_929"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_ACop. For all sets $A$, for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $ACop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $ACop$ of $A$ and $_nil$ to elements of $return_type$ of $z$, for all elements $z$ of $ACop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate filter_ACop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : ACop A _nil) -> return_sort) -> (return : (z : ACop A _nil) -> return_type z) -> (z : ACop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_le_min. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then for all natural numbers $b$, $min$ applied to $n$ and $b$ and $f$ is less than or equal to $min$ applied to $m$ and $b$ and $f$.",
    "output": "postulate le_to_le_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> (b : Nat) -> Leq (min n b f) (min m b f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type4. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z659$ to elements of $Type4$, for all functions $_H1$ from elements $_z660$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_370$ and functions $_x_372$ from elements $_z660$ of $Eq$ of $Hterm$ and $x_370$ to elements of $P$ of $x_370$ and elements $_z660$ of $Eq$ of $Hterm$ and the sum of $x_370$ and $1$ to elements of $P$ of the sum of $x_370$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type4 : (Hterm : Nat) -> (P : (_z659 : Nat) -> Type4) -> (_H1 : (_z660 : Eq Hterm 0) -> P 0) -> (_H2 : (x_370 : Nat) -> (_x_372 : (_z660 : Eq Hterm x_370) -> P x_370) -> (_z660 : Eq Hterm (plus x_370 1)) -> P (plus x_370 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_le_max. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $max$ applied to $n$ and $f$ is less than or equal to $max$ applied to $m$ and $f$.",
    "output": "postulate le_to_le_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq (max n f) (max m f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_plus_r. For all natural numbers $n$, $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $m$ to the sum of $n$ and $m$.",
    "output": "postulate monotonic_lt_plus_r : (n : Nat) -> monotonic Nat Lt (\\ m : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example6. $primeb (11)= true$.",
    "output": "postulate example6 : Eq (primeb 11) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "K. For all natural numbers $_n$ and $_p$, $Nat$.",
    "output": "postulate k : (_n : Nat) -> (_p : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp3. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1674$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1675$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp3 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1674 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1675 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F2_ind. Let $A1$ and $A2$ be sets. Then for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ to natural numbers, for all elements $P$ of $relation2$ of $A1$ and $A2$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, $P$ holds for $a1$ and $a2$.",
    "output": "postulate f2_ind : (A1 : Set) -> (A2 : Set) -> (f : (_ : A1) -> (__1 : A2) -> Nat) -> (P : relation2 A1 A2) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (_ : Lt (f a1 a2) n) -> P a1 a2) -> (a1 : A1) -> (a2 : A2) -> (__1 : Eq (f a1 a2) n) -> P a1 a2) -> (a1 : A1) -> (a2 : A2) -> P a1 a2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_ind. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1434$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_811$ of $Lt$ of $x4$ and $x2$ and elements $x_810$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1435$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_811$ and $x_810$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_811$ and $x_810$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1434 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_811 : Lt x4 x2) -> (x_810 : Eq x1 (plus (times x3 x2) x4)) -> (_z1435 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_811 x_810)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_811 x_810)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16171. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to $1$, then the greatest common divisor of $p$ and $m$ is equal to the difference of the product of $m$ and $b$ and the product of $p$ and $a$.",
    "output": "postulate let_clause_16171 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times b m) (times a p)) (gcd p m)) -> (H0 : Eq (minus (times b m) (times a p)) 1) -> Eq (gcd p m) (minus (times m b) (times p a))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb4. Let $n$ be a natural number. Then if $1$ is less than $n$, then $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$.",
    "output": "postulate pi_p_primeb4 : (n : Nat) -> (_ : Lt 1 n) -> Eq (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1))))))) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1)))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_SO_smallest_factor. For all natural numbers $n$, if $1$ is less than $n$, then $1$ is less than $smallest_factor$ applied to $n$.",
    "output": "postulate lt_SO_smallest_factor : (n : Nat) -> (_ : Lt 1 n) -> Lt 1 (smallest_factor n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type3. For all sets $_A$, for all functions $Q_$ from elements $_x_921$ of $range$ of $_A$ to elements of $Type3$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_921$ of $range$ of $_A$, $Q_$ holds for $x_921$.",
    "output": "postulate range_rect_Type3 : (_A : Set) -> (Q_ : (_x_921 : range _A) -> Type3) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_921 : range _A) -> Q_ x_921"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp3_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_961$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_961$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_961$.",
    "output": "postulate Dop_rect_CProp3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_961 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_961 : Dop A _nil) -> Q_ x_961"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10471. Let $n1$ and $n2$ be natural numbers. Then for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f1$ and $f2$ from natural numbers to elements of $B$, for all elements $_clearme$ of $iso$ of $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, for all functions $h$ from natural numbers to natural numbers, for all elements $_clearme0$ of $ex$ of $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $Nat$ and the function that maps $k$ to the conjunction of the conjunction of $prod$ applied to $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n1$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Eq$ applied to $p1$ applied to $i$ and $true$ and the function that maps $__1$ to $Eq$ applied to $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$ and $sub_hk$ applied to $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $sub_hk$ applied to $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$, for all functions $k$ from natural numbers to natural numbers, if $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n1$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Eq$ applied to $p1$ applied to $i$ and $true$ and the function that maps $__1$ to $Eq$ applied to $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$, $sub_hk$ holds for $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $sub_hk$ holds for $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$, then if $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n1$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Eq$ applied to $p1$ applied to $i$ and $true$ and the function that maps $__1$ to $Eq$ applied to $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$ and $sub_hk$ holds for $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, then for all functions $same$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$, for all natural numbers $i$ and $m$, for all functions $Hind$ from functions $f$ from natural numbers to booleans and elements of $Leq$ of $0$ and $n1$ and elements $__1$ of $sub_hk$ of $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $m$ and $f$ and elements $__2$ of $sub_hk$ of $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and $m$ and $f$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$ to elements of $Eq$ of $bigop$ applied to $0$ and the function that maps $i0$ to $p1$ applied to $i0$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i0$ to $f1$ applied to $i0$ and $bigop$ applied to $m$ and the function that maps $i0$ to $f$ applied to $i0$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i0$ to $f2$ applied to $i0$, for all functions $p20$ from natural numbers to booleans, if $0$ is less than or equal to $n1$, then for all elements $sub1$ of $sub_hk$ of $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and the sum of $m$ and $1$ and $p20$, for all elements $sub2$ of $sub_hk$ of $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and the sum of $m$ and $1$ and $p20$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$, for all natural numbers $x2571$ and $x2572$, $x2571$ is equal to the sum of the product of $x2572$ and the quotient of $x2571$ and $x2572$ and $mod$ applied to $x2571$ and $x2572$.",
    "output": "postulate let_clause_10471 : (n1 : Nat) -> (n2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f1 : (_ : Nat) -> B) -> (f2 : (_ : Nat) -> B) -> (_clearme : iso B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2)) -> (h : (_ : Nat) -> Nat) -> (_clearme0 : ex (prod Set Set Nat (\\ _ : Nat -> Nat)) (\\ k : ((_ : Nat) -> Nat) -> and (and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n1) (\\ _ : Lt i n1 -> prod Prop Prop (Eq (p1 i) true) (\\ __1 : Eq (p1 i) true -> Eq (f1 i) (f2 (h i)))))) (sub_hk h k B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2))) (sub_hk k h B (mk_range B f2 n2 p2) (mk_range B f1 n1 p1)))) -> (k : (_ : Nat) -> Nat) -> (_clearme1 : and (and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n1) (\\ _ : Lt i n1 -> prod Prop Prop (Eq (p1 i) true) (\\ __1 : Eq (p1 i) true -> Eq (f1 i) (f2 (h i)))))) (sub_hk h k B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2))) (sub_hk k h B (mk_range B f2 n2 p2) (mk_range B f1 n1 p1))) -> (_clearme2 : and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n1) (\\ _ : Lt i n1 -> prod Prop Prop (Eq (p1 i) true) (\\ __1 : Eq (p1 i) true -> Eq (f1 i) (f2 (h i)))))) (sub_hk h k B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2))) -> (same : (i : Nat) -> (_ : Lt i n1) -> (__1 : Eq (p1 i) true) -> Eq (f1 i) (f2 (h i))) -> (i : Nat) -> (m : Nat) -> (Hind : (f : (_ : Nat) -> bool) -> (_ : Leq 0 n1) -> (__1 : sub_hk h k B (mk_range B f1 0 p1) (mk_range B f2 m f)) -> (__2 : sub_hk k h B (mk_range B f2 m f) (mk_range B f1 0 p1)) -> Eq (bigop 0 (\\ i0 : Nat -> p1 i0) B nil (aop__o__op B nil op) (\\ i0 : Nat -> f1 i0)) (bigop m (\\ i0 : Nat -> f i0) B nil (aop__o__op B nil op) (\\ i0 : Nat -> f2 i0))) -> (p20 : (_ : Nat) -> bool) -> (_ : Leq 0 n1) -> (sub1 : sub_hk h k B (mk_range B f1 0 p1) (mk_range B f2 (plus m 1) p20)) -> (sub2 : sub_hk k h B (mk_range B f2 (plus m 1) p20) (mk_range B f1 0 p1)) -> (x2571 : Nat) -> (x2572 : Nat) -> Eq x2571 (plus (times x2572 (div x2571 x2572)) (mod x2571 x2572))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_times. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $m$, then if $0$ is less than $n$, then if $p$ is prime, then $ord$ applied to the product of $m$ and $n$ and $p$ is equal to the sum of $ord$ applied to $m$ and $p$ and $ord$ applied to $n$ and $p$.",
    "output": "postulate ord_times : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 m) -> (__1 : Lt 0 n) -> (__2 : prime p) -> Eq (ord (times m n) p) (plus (ord m p) (ord n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_eq_nat. Let $n$ and $m$ be natural numbers. Then $decidable$ holds for $Eq$ applied to $n$ and $m$.",
    "output": "postulate decidable_eq_nat : (n : Nat) -> (m : Nat) -> decidable (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate min : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp4. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_903$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_903$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_903$.",
    "output": "postulate ACop_rect_CProp4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_903 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_903 : ACop A _nil) -> Q_ x_903"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type5_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_919$ of $range$ of $_A$ to elements of $Type5$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_919$ of $range$ of $_A$, $Q_$ holds for $x_919$.",
    "output": "postulate range_rect_Type5_body : (_A : Set) -> (Q_ : (_x_919 : range _A) -> Type5) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_919 : range _A) -> Q_ x_919"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_pi_p3. Let $n$ be a natural number. Then the factorial of the product of $2$ and $n$ is equal to the product of $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and the product of $2$ and the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $bigop$ applied to the sum of the product of $2$ and $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and the product of $2$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $p$ and $mod$ applied to the quotient of the product of $2$ and $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate fact_pi_p3 : (n : Nat) -> Eq (factorial (times 2 n)) (times (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (times 2 (div n (pow p (plus i 1))))))) (bigop (plus (times 2 n) 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p (times 2 n)) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> pow p (mod (div (times 2 n) (pow p (plus i 1))) 2)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_to_exp. Let $n$ be a natural number. Then the factorial of the product of $2$ and $n$ is less than or equal to the product of the product of the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$ and the factorial of $n$ and the factorial of $n$.",
    "output": "postulate fact_to_exp : (n : Nat) -> Leq (factorial (times 2 n)) (times (times (pow 2 (pred (times 2 n))) (factorial n)) (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp5. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_877$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_877$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_877$.",
    "output": "postulate Aop_rect_CProp5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_877 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_877 : Aop A _nil) -> Q_ x_877"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n , _m \\in N$. Then we can say that $_n$ is divisible by $_m$.",
    "output": "postulate divisible : (_n : Nat) -> (_m : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primes_below_to_bertrand. For all natural numbers $pm$, for all lists $l$ of natural numbers, if $pm$ is prime, then for all elements $__1$ of $primes_below$ of $l$ and the sum of $pm$ and $1$, for all functions $__2$ from natural numbers $p$ and elements $__2$ of $mem$ of $Nat$ and $p$ and $l$ and elements $__3$ of $Lt$ of $2$ and $p$ to elements of $ex$ of $Nat$ and the function that maps $pp$ to the conjunction of the conjunction of $mem$ applied to $Nat$ and $pp$ and $l$ and $Lt$ applied to $pp$ and $p$ and $Leq$ applied to $p$ and the product of $2$ and $pp$, for all natural numbers $n$, if $0$ is less than $n$, then if $n$ is less than $pm$, then $bertrand$ holds for $n$.",
    "output": "postulate primes_below_to_bertrand : (pm : Nat) -> (l : list Nat) -> (_ : prime pm) -> (__1 : primes_below l (plus pm 1)) -> (__2 : (p : Nat) -> (__2 : mem Nat p l) -> (__3 : Lt 2 p) -> ex Nat (\\ pp : Nat -> and (and (mem Nat pp l) (Lt pp p)) (Leq p (times 2 pp)))) -> (n : Nat) -> (__3 : Lt 0 n) -> (__4 : Lt n pm) -> bertrand n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp1. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_883$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_883$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_883$.",
    "output": "postulate Aop_rect_CProp1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_883 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_883 : Aop A _nil) -> Q_ x_883"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp2_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_909$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_909$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_909$.",
    "output": "postulate ACop_rect_CProp2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_909 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_909 : ACop A _nil) -> Q_ x_909"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. Let $n$ be a natural number. Then if $5$ is less than $n$, then for all natural numbers $m$, if $6$ is less than or equal to $m$, then if the exponentiation of the sum of $m$ and $1$ and $2$ is less than or equal to the exponentiation of $2$ and $m$, then for all natural numbers $a$, if $6$ is less than or equal to $a$, then if the sum of the product of $2$ and the sum of $a$ and $1$ and $1$ is less than or equal to the exponentiation of $2$ and $a$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : Nat) -> (lt4n : Lt 5 n) -> (m : Nat) -> (le4m : Leq 6 m) -> (Hind : Leq (pow (plus m 1) 2) (pow 2 m)) -> (a : Nat) -> (lea : Leq 6 a) -> (Hinda : Leq (plus (times 2 (plus a 1)) 1) (pow 2 a)) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_exists_to_forall. Let $P$ be a function from natural numbers to propositions. Then for all natural numbers $n$, if it is not the case that $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $P$ applied to $i$, then for all natural numbers $i$, if $i$ is less than $n$, then it is not the case that $P$ holds for $i$.",
    "output": "postulate not_exists_to_forall : (P : (_ : Nat) -> Prop) -> (n : Nat) -> (_ : not (ex Nat (\\ i : Nat -> and (Lt i n) (P i)))) -> (i : Nat) -> (__1 : Lt i n) -> not (P i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type2. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_951$ of $Dop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_951$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_951$.",
    "output": "postulate Dop_rect_Type2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_951 : Dop A _nil) -> Type2) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_951 : Dop A _nil) -> Q_ x_951"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_leb_false. For all natural numbers $n$ and $m$, if $m$ is less than $n$, then $leb$ applied to $n$ and $m$ is equal to absurdity.",
    "output": "postulate lt_to_leb_false : (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> Eq (leb n m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb_dividesb. Let $n$ be a natural number. Then if $0$ is less than $n$, then $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $andb$ applied to $primeb$ applied to $p$ and $dividesb$ applied to $p$ and $n$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $n$ and $p$.",
    "output": "postulate pi_p_primeb_dividesb : (n : Nat) -> (_ : Lt 0 n) -> Eq n (bigop (plus n 1) (\\ p : Nat -> andb (primeb p) (dividesb p n)) Nat 1 times (\\ p : Nat -> pow p (ord n p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_S. Let $n$ be a natural number. Then $0$ is less than the sum of $n$ and $1$.",
    "output": "postulate lt_O_S : (n : Nat) -> Lt 0 (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc. Let $_n$ and $_k$ be natural numbers. Then $Nat$.",
    "output": "postulate bc : (_n : Nat) -> (_k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bertrand_up. Let $n$ be a natural number. Then if the exponentiation of $2$ and $8$ is less than or equal to $n$, then $bertrand$ holds for $n$.",
    "output": "postulate bertrand_up : (n : Nat) -> (_ : Leq (pow 2 8) n) -> bertrand n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp2_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_849$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_851$ of $Lt$ of $_r$ and $_m$ and elements $x_850$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_851$ and $x_850$, for all elements $x_849$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_849$.",
    "output": "postulate div_mod_spec_rect_CProp2_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_849 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_851 : Lt _r _m) -> (x_850 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_851 x_850)) -> (x_849 : div_mod_spec _n _m _q _r) -> Q_ x_849"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type2. Let $Q_$ be a function from natural numbers $_x_381$ to elements of $Type2$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_382$ and elements $_x_384$ of $Q_$ of $x_382$ to elements of $Q_$ of the sum of $x_382$ and $1$, for all natural numbers $x_381$, $Q_$ holds for $x_381$.",
    "output": "postulate nat_rect_Type2 : (Q_ : (_x_381 : Nat) -> Type2) -> (_H_O : Q_ 0) -> (_H_S : (x_382 : Nat) -> (_x_384 : Q_ x_382) -> Q_ (plus x_382 1)) -> (x_381 : Nat) -> Q_ x_381"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ex_prime. For all natural numbers $n$, if $1$ is less than or equal to $n$, then $ex$ holds for $Nat$ and the function that maps $m$ to the conjunction of the conjunction of $Lt$ applied to $n$ and $m$ and $Leq$ applied to $m$ and the sum of the factorial of $n$ and $1$ and $prime$ applied to $m$.",
    "output": "postulate ex_prime : (n : Nat) -> (_ : Leq 1 n) -> ex Nat (\\ m : Nat -> and (and (Lt n m) (Leq m (plus (factorial n) 1))) (prime m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15611. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to $1$, then the difference of the product of $m$ and $b$ and the product of $p$ and $a$ is equal to $1$.",
    "output": "postulate let_clause_15611 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times b m) (times a p)) (gcd p m)) -> (H0 : Eq (minus (times b m) (times a p)) 1) -> Eq (minus (times m b) (times p a)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_Sfalse. For all natural numbers $k$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $p$ applied to $k$ is equal to absurdity, then $bigop$ applied to the sum of $k$ and $1$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_Sfalse : (k : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Eq (p k) false) -> Eq (bigop (plus k 1) (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_le_0. Let $x$ and $y$ be natural numbers. Then if the sum of $x$ and $y$ is less than or equal to $0$, then $x$ is equal to $0$ and $y$ is equal to $0$.",
    "output": "postulate plus_le_0 : (x : Nat) -> (y : Nat) -> (_ : Leq (plus x y) 0) -> and (Eq x 0) (Eq y 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_4_to_le_Psi_exp. For all natural numbers $n$, if $4$ is less than $n$, then $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $2$ and $Psi$ applied to $n$.",
    "output": "postulate lt_4_to_le_Psi_exp : (n : Nat) -> (_ : Lt 4 n) -> Leq (Psi (times 2 n)) (times (pow 2 (minus (times 2 n) 2)) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type5. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_865$ of $Aop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_865$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_865$.",
    "output": "postulate Aop_rect_Type5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_865 : Aop A _nil) -> Type5) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_865 : Aop A _nil) -> Q_ x_865"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lop_Sfalse. Let $m$ and $i$ be natural numbers. Then for all lists $acc$ of natural numbers, if $list_divides$ applied to $acc$ and $i$ is equal to absurdity, then $lprim$ applied to the sum of $m$ and $1$ and $i$ and $acc$ is equal to $lprim$ applied to $m$ and the sum of $i$ and $1$ and $append$ applied to $Nat$ and $acc$ and $cons$ applied to $Nat$ and $i$ and $nil$ applied to $Nat$.",
    "output": "postulate lop_Sfalse : (m : Nat) -> (i : Nat) -> (acc : list Nat) -> (_ : Eq (list_divides acc i) false) -> Eq (lprim (plus m 1) i acc) (lprim m (plus i 1) (append Nat acc (cons Nat i (nil Nat))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_of_primes_def. For all natural numbers $n$, $list_of_primes$ applied to $n$ is equal to $lprim$ applied to $n$ and $2$ and $nil$ applied to $Nat$.",
    "output": "postulate list_of_primes_def : (n : Nat) -> Eq (list_of_primes n) (lprim n 2 (nil Nat))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_fact_n. For all natural numbers $n$, $n$ is less than or equal to the factorial of $n$.",
    "output": "postulate le_n_fact_n : (n : Nat) -> Leq n (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_fact_pi_p. Let $n$ be a natural number. Then the factorial of $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $i$ to $leb$ applied to $1$ and $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $i$.",
    "output": "postulate eq_fact_pi_p : (n : Nat) -> Eq (factorial n) (bigop (plus n 1) (\\ i : Nat -> leb 1 i) Nat 1 times (\\ i : Nat -> i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all natural numbers $__$, $relation$ holds for $B$.",
    "output": "postulate lstar : (B : Set) -> (_R : relation B) -> (_ : Nat) -> relation B"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_B. Let $n$ be a natural number. Then if $0$ is less than $n$, then the exponentiation of $2$ and the product of $2$ and $n$ is less than or equal to the product of the product of $2$ and $n$ and $B$ applied to the product of $2$ and $n$.",
    "output": "postulate le_exp_B : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 (times 2 n)) (times (times 2 n) (B (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_bc. Let $n$ and $m$ be natural numbers. Then if $m$ is less than or equal to $n$, then $0$ is less than $bc$ applied to $n$ and $m$.",
    "output": "postulate lt_O_bc : (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> Lt 0 (bc n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime3. For all natural numbers $n$ and $m$ and $x$, $Nat$.",
    "output": "postulate let_previous_prime3 : (n : Nat) -> (m : Nat) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type3_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type3$, for all functions $_H_div_mod_spec_intro$ from elements $x_823$ of $Lt$ of $_r$ and $_m$ and elements $x_822$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_823$ and $x_822$, for all elements $x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_821$.",
    "output": "postulate div_mod_spec_rect_Type3_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_821 : div_mod_spec _n _m _q _r) -> Type3) -> (_H_div_mod_spec_intro : (x_823 : Lt _r _m) -> (x_822 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_823 x_822)) -> (x_821 : div_mod_spec _n _m _q _r) -> Q_ x_821"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_pi. For all natural numbers $n$ and $m$, for all functions $p$ from natural numbers to booleans, for all functions $f$ from natural numbers to natural numbers, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the exponentiation of $f$ applied to $i$ and $m$ is equal to the exponentiation of $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.",
    "output": "postulate exp_pi : (n : Nat) -> (m : Nat) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> Nat) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> pow (f i) m)) (pow (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> f i)) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp5_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_959$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_959$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_959$.",
    "output": "postulate Dop_rect_CProp5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_959 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_959 : Dop A _nil) -> Q_ x_959"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_l$ be a list of natural numbers. Let $_n$ be a natural number. Then we can say that $primes_all$ holds for $_l$ and $_n$.",
    "output": "postulate primes_all : (_l : list Nat) -> (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_log_exp. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then the logarithm of $p$ and the exponentiation of $p$ and $n$ is equal to $n$.",
    "output": "postulate eq_log_exp : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Eq (log p (pow p n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "False_to_lt_max. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $f$ applied to $n$ is equal to absurdity, then if $max$ applied to $m$ and $f$ is less than or equal to $n$, then $max$ applied to $m$ and $f$ is less than $n$.",
    "output": "postulate false_to_lt_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Eq (f n) false) -> (__2 : Leq (max m f) n) -> Lt (max m f) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16001. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $n$ and $c$ and the product of $m$ and $d$.",
    "output": "postulate let_clause_16001 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (gcd m n) (minus (times n c) (times m d))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Start_lop. Let $n$ be a natural number. Then if $1$ is less than or equal to $n$, then $option_hd$ applied to $Nat$ and $list_of_primes$ applied to $n$ is equal to $Some$ applied to $Nat$ and $2$.",
    "output": "postulate start_lop : (n : Nat) -> (_ : Leq 1 n) -> Eq (option_hd Nat (list_of_primes n)) (Some Nat 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_fact_pi_p. For all natural numbers $n$, the factorial of $n$ is equal to $bigop$ applied to the difference of the sum of $n$ and $1$ and $1$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $1$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the function that maps $i0$ to $i0$ applied to the sum of $i$ and $1$.",
    "output": "postulate eq_fact_pi_p : (n : Nat) -> Eq (factorial n) (bigop (minus (plus n 1) 1) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i 1)) Nat 1 times (\\ i : Nat -> (\\ i0 : Nat -> i0) (plus i 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_to_le_theta_exp_theta. Let $m$ be a natural number. Then if $0$ is less than $m$, then $theta$ applied to the sum of the product of $2$ and $m$ and $1$ is less than the product of the exponentiation of $2$ and the product of $2$ and $m$ and $theta$ applied to the sum of $m$ and $1$.",
    "output": "postulate lt_O_to_le_theta_exp_theta : (m : Nat) -> (_ : Lt 0 m) -> Lt (theta (plus (times 2 m) 1)) (times (pow 2 (times 2 m)) (theta (plus m 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair2. $cr_pair (2 , 3 , 1 , 0)= 3$.",
    "output": "postulate cr_pair2 : Eq (cr_pair 2 3 1 0) 3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp3. For all functions $Q_$ from natural numbers $_x_401$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_402$ and elements $_x_404$ of $Q_$ of $x_402$ to elements of $Q_$ of the sum of $x_402$ and $1$, for all natural numbers $x_401$, $Q_$ holds for $x_401$.",
    "output": "postulate nat_rect_CProp3 : (Q_ : (_x_401 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_402 : Nat) -> (_x_404 : Q_ x_402) -> Q_ (plus x_402 1)) -> (x_401 : Nat) -> Q_ x_401"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_ind. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1632$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1633$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_ind : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1632 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1633 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_mod. For all natural numbers $a$ and $b$ and $c$, if $0$ is less than $c$, then if $0$ is less than $b$, then $mod$ applied to the product of $a$ and $c$ and the product of $b$ and $c$ is equal to the product of $c$ and $mod$ applied to $a$ and $b$.",
    "output": "postulate times_mod : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : Lt 0 b) -> Eq (mod (times a c) (times b c)) (times c (mod a b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_Conf3. For all sets $A$ and $B$, for all elements $succ$ of $relation2$ of $A$ and $B$, for all elements $R$ of $relation$ of $A$, for all elements $__$ of $Conf3$ of $A$ and $B$ and $succ$ and $R$, for all natural numbers $l$, $Conf3$ holds for $A$ and $B$ and $succ$ and $lstar$ applied to $A$ and $R$ and $l$.",
    "output": "postulate lstar_Conf3 : (A : Set) -> (B : Set) -> (succ : relation2 A B) -> (R : relation A) -> (_ : Conf3 A B succ R) -> (l : Nat) -> Conf3 A B succ (lstar A R l)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Discr_plus_xy_minus_xz. For all natural numbers $x$ and $z$ and $y$, if the sum of $x$ and $y$ is equal to the difference of $x$ and $z$, then $y$ is equal to $0$.",
    "output": "postulate discr_plus_xy_minus_xz : (x : Nat) -> (z : Nat) -> (y : Nat) -> (_ : Eq (plus x y) (minus x z)) -> Eq y 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Same_bigop. Let $k$ be a natural number. Then for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ and $g$ from natural numbers to elements of $B$, for all elements $__$ of $sameF_upto$ of $k$ and $bool$ and $p1$ and $p2$, for all elements $__1$ of $sameF_p$ of $k$ and $p1$ and $B$ and $f$ and $g$, $bigop$ applied to $k$ and the function that maps $i$ to $p1$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p2$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$.",
    "output": "postulate same_bigop : (k : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (g : (_ : Nat) -> B) -> (_ : sameF_upto k bool p1 p2) -> (__1 : sameF_p k p1 B f g) -> Eq (bigop k (\\ i : Nat -> p1 i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p2 i) B nil op (\\ i : Nat -> g i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_fg. For all functions $f$ and $g$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $__$ of $permut$ of $f$ and $n$, for all elements $__1$ of $permut$ of $g$ and $n$, $permut$ holds for the function that maps $m$ to $f$ applied to $g$ applied to $m$ and $n$.",
    "output": "postulate permut_fg : (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : permut f n) -> (__1 : permut g n) -> permut (\\ m : Nat -> f (g m)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Commutative_min. $commutative$ holds for $Nat$ and $min$.",
    "output": "postulate commutative_min : commutative Nat min"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_prim. For all natural numbers $n$, $ex$ holds for $Nat$ and the function that maps $p$ to the conjunction of the conjunction of $Lt$ applied to $n$ and $p$ and $prime$ applied to $p$ and $prod$ applied to $Set$ and $Prop$ and $Nat$ and the function that maps $q$ to $prod$ applied to $Prop$ and $Prop$ and $prime$ applied to $q$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $q$ and $p$ and the function that maps $__1$ to $Leq$ applied to $q$ and $n$.",
    "output": "postulate min_prim : (n : Nat) -> ex Nat (\\ p : Nat -> and (and (Lt n p) (prime p)) (prod Set Prop Nat (\\ q : Nat -> prod Prop Prop (prime q) (\\ _ : prime q -> prod Prop Prop (Lt q p) (\\ __1 : Lt q p -> Leq q n)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_times. Let $n$ and $m$ and $n1$ and $m1$ and $p$ be natural numbers. Then if $0$ is less than $p$, then for all elements $__1$ of $congruent$ of $n$ and $n1$ and $p$, for all elements $__2$ of $congruent$ of $m$ and $m1$ and $p$, $congruent$ holds for the product of $n$ and $m$ and the product of $n1$ and $m1$ and $p$.",
    "output": "postulate congruent_times : (n : Nat) -> (m : Nat) -> (n1 : Nat) -> (m1 : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : congruent n n1 p) -> (__2 : congruent m m1 p) -> congruent (times n m) (times n1 m1) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc_n_n. Let $n$ be a natural number. Then $bc$ applied to $n$ and $n$ is equal to $1$.",
    "output": "postulate bc_n_n : (n : Nat) -> Eq (bc n n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp5_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_931$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_931$ of $range$ of $_A$, $Q_$ holds for $x_931$.",
    "output": "postulate range_rect_CProp5_body : (_A : Set) -> (Q_ : (_x_931 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_931 : range _A) -> Q_ x_931"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ab_times_cd. Let $a$ and $b$ and $c$ and $d$ be natural numbers. Then the product of the product of $a$ and $b$ and the product of $c$ and $d$ is equal to the product of the product of $a$ and $c$ and the product of $b$ and $d$.",
    "output": "postulate ab_times_cd : (a : Nat) -> (b : Nat) -> (c : Nat) -> (d : Nat) -> Eq (times (times a b) (times c d)) (times (times a c) (times b d))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp1. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_855$ of $Lt$ of $_r$ and $_m$ and elements $x_854$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_855$ and $x_854$, for all elements $x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_853$.",
    "output": "postulate div_mod_spec_rect_CProp1 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_853 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_855 : Lt _r _m) -> (x_854 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_855 x_854)) -> (x_853 : div_mod_spec _n _m _q _r) -> Q_ x_853"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "M. Let $_m$ be a natural number. Then $Nat$.",
    "output": "postulate M : (_m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_n_n. For all natural numbers $n$, the greatest common divisor of $n$ and $n$ is equal to $n$.",
    "output": "postulate gcd_n_n : (n : Nat) -> Eq (gcd n n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B_Psi. Let $n$ be a natural number. Then $B$ applied to $n$ is less than or equal to $Psi$ applied to $n$.",
    "output": "postulate le_B_Psi : (n : Nat) -> Leq (B n) (Psi n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_nat. Let $return_sort$ be an element of $Sort$. Then for all functions $return_type$ from natural numbers $z$ to elements of $return_sort$, for all elements $case_O$ of $return_type$ of $0$, for all functions $case_S$ from natural numbers to elements of $return_type$ of the sum of $__$ and $1$, for all natural numbers $z$, $return_type$ holds for $z$.",
    "output": "postulate match_nat : (return_sort : Sort) -> (return_type : (z : Nat) -> return_sort) -> (case_O : return_type 0) -> (case_S : (_ : Nat) -> return_type (plus __ 1)) -> (z : Nat) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type4. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_891$ of $ACop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_891$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_891$.",
    "output": "postulate ACop_rect_Type4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_891 : ACop A _nil) -> Type4) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_891 : ACop A _nil) -> Q_ x_891"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_max_f_max_g. Let $f$ and $g$ be functions from natural numbers to booleans. Then for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $f$ applied to $i$ and $true$ to elements of $Eq$ of $g$ applied to $i$ and $true$, $max$ applied to $n$ and $f$ is less than or equal to $max$ applied to $n$ and $g$.",
    "output": "postulate le_max_f_max_g : (f : (_ : Nat) -> bool) -> (g : (_ : Nat) -> bool) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (f i) true) -> Eq (g i) true) -> Leq (max n f) (max n g)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iso. For all sets $A$, $relation$ holds for $range$ applied to $A$.",
    "output": "postulate iso : (A : Set) -> relation (range A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_Dop. For all sets $A$, for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Dop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $case_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $return_type$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $z$ of $Dop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate match_Dop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Dop A _nil) -> return_sort) -> (case_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> return_type (mk_Dop A _nil sum prod _null _distr)) -> (z : Dop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_plus_to_le. For all natural numbers $n$ and $m$ and $p$, if $n$ is equal to the sum of $m$ and $p$, then $m$ is less than or equal to $n$.",
    "output": "postulate eq_plus_to_le : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Eq n (plus m p)) -> Leq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_found_max_spec. For all natural numbers $n$, for all functions $f$ from natural numbers to booleans, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max_spec$ holds for $n$ and $f$ and $0$.",
    "output": "postulate not_found_max_spec : (n : Nat) -> (f : (_ : Nat) -> bool) -> (_ : (i : Nat) -> (_ : Lt i n) -> Eq (f i) false) -> max_spec n f 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then the product of $__$ and $__1$ is a natural number.",
    "output": "postulate times : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16921. For all natural numbers $m$, if $0$ is less than $m$, then for all natural numbers $a$ and $x358$ and $x359$, $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x358$ and the product of $x358$ and $x359$ is equal to the product of $x358$ and the sum of $x359$ and $1$.",
    "output": "postulate let_clause_16921 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x358 : Nat) -> (x359 : Nat) -> Eq (aop__o__op Nat 0 plusAC x358 (times x358 x359)) (times x358 (plus x359 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp2. For all sets $_A$, for all functions $Q_$ from elements $_x_935$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_935$ of $range$ of $_A$, $Q_$ holds for $x_935$.",
    "output": "postulate range_rect_CProp2 : (_A : Set) -> (Q_ : (_x_935 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_935 : range _A) -> Q_ x_935"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16002. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_16002 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSSSO. $B (7)= 140$.",
    "output": "postulate B_SSSSSSSO : Eq (B 7) 140"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_S_to_permut. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $m$, for all elements $__$ of $permut$ of $f$ and the sum of $m$ and $1$, if $f$ applied to the sum of $m$ and $1$ is equal to the sum of $m$ and $1$, then $permut$ holds for $f$ and $m$.",
    "output": "postulate permut_S_to_permut : (f : (_ : Nat) -> Nat) -> (m : Nat) -> (_ : permut f (plus m 1)) -> (__1 : Eq (f (plus m 1)) (plus m 1)) -> permut f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_of_primes. Let $_n$ be a natural number. Then $list$ holds for $Nat$.",
    "output": "postulate list_of_primes : (_n : Nat) -> list Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type0. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1530$ of $Aop$ of $x1$ and $x2$ to sets, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1531$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1530 : Aop x1 x2) -> Set) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1531 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Even_or_odd. For all natural numbers $n$, $ex$ holds for $Nat$ and the function that maps $a$ to the disjunction of $Eq$ applied to $n$ and the product of $2$ and $a$ and $Eq$ applied to $n$ and the sum of the product of $2$ and $a$ and $1$.",
    "output": "postulate even_or_odd : (n : Nat) -> ex Nat (\\ a : Nat -> or (Eq n (times 2 a)) (Eq n (plus (times 2 a) 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nill_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $nil$ and $a$ is equal to $a$.",
    "output": "postulate nill_body : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx nil a) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_Sn_m. Let $n$ and $m$ be natural numbers. Then the sum of $m$ and the product of $n$ and $m$ is equal to the product of the sum of $n$ and $1$ and $m$.",
    "output": "postulate times_Sn_m : (n : Nat) -> (m : Nat) -> Eq (plus m (times n m)) (times (plus n 1) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_lop. For all natural numbers $n$, if $1$ is less than or equal to $n$, then $list_of_primes$ applied to $n$ is equal to $cons$ applied to $Nat$ and $2$ and $tail$ applied to $Nat$ and $list_of_primes$ applied to $n$.",
    "output": "postulate eq_lop : (n : Nat) -> (_ : Leq 1 n) -> Eq (list_of_primes n) (cons Nat 2 (tail Nat (list_of_primes n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp1. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1686$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1687$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp1 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1686 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1687 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair4. $cr_pair (5 , 7 , 3 , 2)= 23$.",
    "output": "postulate cr_pair4 : Eq (cr_pair 5 7 3 2) 23"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sqrt_n. Let $n$ be a natural number. Then the square root of $n$ is less than or equal to $n$.",
    "output": "postulate le_sqrt_n : (n : Nat) -> Leq (sqrt n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_exp_to_eq. For all natural numbers $p$ and $q$ and $m$, if $p$ is prime, then if $q$ is prime, then if $p$ is divisible by the exponentiation of $q$ and $m$, then $p$ is equal to $q$.",
    "output": "postulate divides_exp_to_eq : (p : Nat) -> (q : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : prime q) -> (__2 : divisible p (pow q m)) -> Eq p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp1. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_911$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_911$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_911$.",
    "output": "postulate ACop_rect_CProp1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_911 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_911 : ACop A _nil) -> Q_ x_911"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15624. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15624 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp4. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_903$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_903$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_903$.",
    "output": "postulate ACop_rect_CProp4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_903 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_903 : ACop A _nil) -> Q_ x_903"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp1. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z707$ to propositions, for all functions $_H1$ from elements $_z708$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_410$ and functions $_x_412$ from elements $_z708$ of $Eq$ of $Hterm$ and $x_410$ to elements of $P$ of $x_410$ and elements $_z708$ of $Eq$ of $Hterm$ and the sum of $x_410$ and $1$ to elements of $P$ of the sum of $x_410$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp1 : (Hterm : Nat) -> (P : (_z707 : Nat) -> Prop) -> (_H1 : (_z708 : Eq Hterm 0) -> P 0) -> (_H2 : (x_410 : Nat) -> (_x_412 : (_z708 : Eq Hterm x_410) -> P x_410) -> (_z708 : Eq Hterm (plus x_410 1)) -> P (plus x_410 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides. Let $__$ be a list of natural numbers. Then for all natural numbers $__1$, $bool$.",
    "output": "postulate list_divides : (_ : list Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime7. For all natural numbers $n$ and $m$, if $nth_prime$ applied to $n$ is less than $m$, then $Nat$.",
    "output": "postulate let_previous_prime7 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_minus_l. For all natural numbers $p$ and $q$ and $n$, if $n$ is less than or equal to $q$, then if $q$ is less than $p$, then the difference of $q$ and $n$ is less than the difference of $p$ and $n$.",
    "output": "postulate monotonic_lt_minus_l : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : Leq n q) -> (__1 : Lt q p) -> Lt (minus q n) (minus p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16. Let $n$ and $m$ be natural numbers. Then if the sum of $n$ and $1$ is less than the sum of $m$ and $1$, then for all natural numbers $x32$, the sum of $x32$ and $1$ is equal to the sum of $x32$ and $1$.",
    "output": "postulate let_clause_16 : (n : Nat) -> (m : Nat) -> (auto : Lt (plus n 1) (plus m 1)) -> (x32 : Nat) -> Eq (plus x32 1) (plus x32 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1571. Let $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if the greatest common divisor of $m$ and $n$ is equal to $0$, then if $m$ is equal to $0$, then if $n$ is equal to $0$, then $m$ is equal to $n$.",
    "output": "postulate let_clause_1571 : (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (H : Eq (gcd m n) 0) -> (auto : Eq m 0) -> (auto' : Eq n 0) -> Eq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp3. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_879$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_879$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_879$.",
    "output": "postulate Aop_rect_CProp3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_879 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_879 : Aop A _nil) -> Q_ x_879"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pos_div. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $0$ is less than $n$, then if $mod$ applied to $n$ and $m$ is equal to $0$, then $0$ is less than the quotient of $n$ and $m$.",
    "output": "postulate pos_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Lt 0 n) -> (__2 : Eq (mod n m) 0) -> Lt 0 (div n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. Let $p$ and $n$ and $n1$ and $q$ and $p1$ and $p2$ and $qa$ and $ra$ be natural numbers. Then if $p_ord_aux$ applied to the sum of $n1$ and $1$ and the sum of $n1$ and $1$ and the sum of $p2$ and $2$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $qa$ and $ra$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (p : Nat) -> (n : Nat) -> (n1 : Nat) -> (q : Nat) -> (p1 : Nat) -> (p2 : Nat) -> (qa : Nat) -> (ra : Nat) -> (H : Eq (p_ord_aux (plus n1 1) (plus n1 1) (plus p2 2)) (mk_Prod Nat Nat qa ra)) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_O. Let $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $m$, then the difference of $n$ and $m$ is equal to $0$.",
    "output": "postulate eq_minus_O : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Eq (minus n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prim. For all natural numbers $_n$, $Nat$.",
    "output": "postulate prim : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_ord. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then $n$ is equal to the product of the exponentiation of $p$ and $ord$ applied to $n$ and $p$ and $ord_rem$ applied to $n$ and $p$.",
    "output": "postulate exp_ord : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Eq n (times (pow p (ord n p)) (ord_rem n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a function from natural numbers to natural numbers. Let $__1 \\in N$. Then we can say that $permut$ holds for $__$ and $__1$.",
    "output": "postulate permut : (_ : (_ : Nat) -> Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psil1. For all natural numbers $n$, $Psi$ applied to $n$ is less than or equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $n$.",
    "output": "postulate le_Psil1 : (n : Nat) -> Leq (Psi n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_nat. For all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers $z$ to elements of $return_sort$, for all elements $case_O$ of $return_type$ of $0$, for all functions $case_S$ from natural numbers to elements of $return_type$ of the sum of $__$ and $1$, for all natural numbers $z$, $return_type$ holds for $z$.",
    "output": "postulate match_nat : (return_sort : Sort) -> (return_type : (z : Nat) -> return_sort) -> (case_O : return_type 0) -> (case_S : (_ : Nat) -> return_type (plus __ 1)) -> (z : Nat) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Tech_log. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then the logarithm of $p$ and $n$ is equal to $max$ applied to the sum of $n$ and $1$ and the function that maps $x$ to $leb$ applied to the exponentiation of $p$ and $x$ and $n$.",
    "output": "postulate tech_log : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Eq (log p n) (max (plus n 1) (\\ x : Nat -> leb (pow p x) n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_S_fact. For all natural numbers $n$ and $i$, if $1$ is less than $i$, then if $i$ is less than or equal to $n$, then $mod$ applied to the sum of the factorial of $n$ and $1$ and $i$ is equal to $1$.",
    "output": "postulate mod_S_fact : (n : Nat) -> (i : Nat) -> (_ : Lt 1 i) -> (__1 : Leq i n) -> Eq (mod (plus (factorial n) 1) i) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_smallest_factor_n. Let $n$ be a natural number. Then if $0$ is less than $n$, then $smallest_factor$ applied to $n$ is divisible by $n$.",
    "output": "postulate divides_smallest_factor_n : (n : Nat) -> (_ : Lt 0 n) -> divisible (smallest_factor n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_fact_to_le. Let $p$ and $n$ be natural numbers. Then if $p$ is prime, then if $p$ is divisible by the factorial of $n$, then $p$ is less than or equal to $n$.",
    "output": "postulate divides_fact_to_le : (p : Nat) -> (n : Nat) -> (_ : prime p) -> (__1 : divisible p (factorial n)) -> Leq p n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_n_to_eq_n. Let $h$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $permut$ of $h$ and $n$, for all functions $__1$ from natural numbers $m$ and elements $__1$ of $Lt$ of $m$ and $n$ to elements of $Eq$ of $h$ applied to $m$ and $m$, $h$ applied to $n$ is equal to $n$.",
    "output": "postulate permut_n_to_eq_n : (h : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : permut h n) -> (__1 : (m : Nat) -> (__1 : Lt m n) -> Eq (h m) m) -> Eq (h n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pred_Sn. For all natural numbers $n$, $n$ is equal to $pred$ applied to the sum of $n$ and $1$.",
    "output": "postulate pred_Sn : (n : Nat) -> Eq n (pred (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_to_injn. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $__$ of $injective$ of $Nat$ and $Nat$ and $f$, $injn$ holds for $f$ and $n$.",
    "output": "postulate injective_to_injn : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : injective Nat Nat f) -> injn f n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Upto_body. For all sets $A$, for all elements $_xxx$ of $range$ of $A$, $Nat$.",
    "output": "postulate upto_body : (A : Set) -> (_xxx : range A) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_log. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $n$, then if $p$ is less than or equal to $n$, then $0$ is less than the logarithm of $p$ and $n$.",
    "output": "postulate lt_O_log : (p : Nat) -> (n : Nat) -> (_ : Lt 1 n) -> (__1 : Leq p n) -> Lt 0 (log p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_Psi2. For all natural numbers $n$, if $1$ is less than $n$, then the exponentiation of $2$ and the quotient of $n$ and $2$ is less than or equal to $Psi$ applied to $n$.",
    "output": "postulate le_exp_Psi2 : (n : Nat) -> (_ : Lt 1 n) -> Leq (pow 2 (div n 2)) (Psi n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp3. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_933$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_933$ of $range$ of $_A$, $Q_$ holds for $x_933$.",
    "output": "postulate range_rect_CProp3 : (_A : Set) -> (Q_ : (_x_933 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_933 : range _A) -> Q_ x_933"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_Aop. Let $A$ be a set. Then for all elements $nil$ of $A$, for all functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$, for all functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $nil$ and $a$ and $a$, for all functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $nil$ and $a$, for all functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$, $Aop$ holds for $A$ and $nil$.",
    "output": "postulate mk_Aop : (A : Set) -> (nil : A) -> (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op nil a) a) -> (_nilr : (a : A) -> Eq (op a nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Aop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_spec_inv_ind. For all natural numbers $x1$ and $x2$, for all functions $x3$ from natural numbers to booleans, for all natural numbers $x4$, for all elements $_Hterm$ of $min_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from natural numbers $_z1890$ to propositions, for all functions $_H1$ from natural numbers $m$ and elements $_x_1080$ of $Leq$ of $x2$ and $m$ and elements $_x_1079$ of $Lt$ of $m$ and the sum of $x1$ and $x2$ and elements $_x_1078$ of $Eq$ of $x3$ applied to $m$ and $true$ and functions $_x_1077$ from natural numbers $i$ and elements of $Leq$ of $x2$ and $i$ and elements $__1$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $x3$ applied to $i$ and absurdity and elements $_z1891$ of $Eq$ of $x4$ and $m$ to elements of $P$ of $m$, for all functions $_H2$ from functions $_x_1081$ from natural numbers $i$ and elements of $Leq$ of $x2$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $x1$ and $x2$ to elements of $Eq$ of $x3$ applied to $i$ and absurdity and elements $_z1891$ of $Eq$ of $x4$ and the sum of $x1$ and $x2$ to elements of $P$ of the sum of $x1$ and $x2$, $P$ holds for $x4$.",
    "output": "postulate min_spec_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (x3 : (_ : Nat) -> bool) -> (x4 : Nat) -> (_Hterm : min_spec x1 x2 x3 x4) -> (P : (_z1890 : Nat) -> Prop) -> (_H1 : (m : Nat) -> (_x_1080 : Leq x2 m) -> (_x_1079 : Lt m (plus x1 x2)) -> (_x_1078 : Eq (x3 m) true) -> (_x_1077 : (i : Nat) -> (_ : Leq x2 i) -> (__1 : Lt i m) -> Eq (x3 i) false) -> (_z1891 : Eq x4 m) -> P m) -> (_H2 : (_x_1081 : (i : Nat) -> (_ : Leq x2 i) -> (__1 : Lt i (plus x1 x2)) -> Eq (x3 i) false) -> (_z1891 : Eq x4 (plus x1 x2)) -> P (plus x1 x2)) -> P x4"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_O_n. For all natural numbers $n$, $mod$ applied to $0$ and $n$ is equal to $0$.",
    "output": "postulate mod_O_n : (n : Nat) -> Eq (mod 0 n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp0. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_913$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_913$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_913$.",
    "output": "postulate ACop_rect_CProp0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_913 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_913 : ACop A _nil) -> Q_ x_913"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair1. $cr_pair$ applied to $2$ and $3$ and $0$ and $0$ is equal to $0$.",
    "output": "postulate cr_pair1 : Eq (cr_pair 2 3 0 0) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_mod_O. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $n$ is divisible by $m$, then $mod$ applied to $m$ and $n$ is equal to $0$.",
    "output": "postulate divides_to_mod_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : divisible n m) -> Eq (mod m n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi'. Let $__$ be a natural number. Then $Nat$.",
    "output": "postulate Psi' : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_exp_pred_SO. Let $p$ and $a$ be natural numbers. Then if $p$ is prime, then if $p$ is not divisible by $a$, then $congruent$ holds for the exponentiation of $a$ and $pred$ applied to $p$ and $1$ and $p$.",
    "output": "postulate congruent_exp_pred_SO : (p : Nat) -> (a : Nat) -> (_ : prime p) -> (__1 : not (divisible p a)) -> congruent (pow a (pred p)) 1 p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_fg. Let $f$ and $g$ be functions from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $bijn$ of $f$ and $n$, for all elements $__1$ of $bijn$ of $g$ and $n$, $bijn$ holds for the function that maps $p$ to $f$ applied to $g$ applied to $p$ and $n$.",
    "output": "postulate bijn_fg : (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : bijn f n) -> (__1 : bijn g n) -> bijn (\\ p : Nat -> f (g p)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type3. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z665$ to elements of $Type3$, for all functions $_H1$ from elements $_z666$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_378$ and functions $_x_380$ from elements $_z666$ of $Eq$ of $Hterm$ and $x_378$ to elements of $P$ of $x_378$ and elements $_z666$ of $Eq$ of $Hterm$ and the sum of $x_378$ and $1$ to elements of $P$ of the sum of $x_378$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type3 : (Hterm : Nat) -> (P : (_z665 : Nat) -> Type3) -> (_H1 : (_z666 : Eq Hterm 0) -> P 0) -> (_H2 : (x_378 : Nat) -> (_x_380 : (_z666 : Eq Hterm x_378) -> P x_378) -> (_z666 : Eq Hterm (plus x_378 1)) -> P (plus x_378 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1013. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$ and $i$, for all functions $Hind$ from elements of $Eq$ of $max$ applied to $i$ and $f$ and $m$ and elements $__1$ of $Eq$ of $f$ applied to $m$ and absurdity to elements of $Eq$ of $m$ and $0$, if $f$ applied to $i$ is equal to $true$, then if $i$ is equal to $m$, then if $f$ applied to $m$ is equal to absurdity, then absurdity is equal to $true$.",
    "output": "postulate let_clause_1013 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (i : Nat) -> (Hind : (_ : Eq (max i f) m) -> (__1 : Eq (f m) false) -> Eq m 0) -> (fi : Eq (f i) true) -> (eqm : Eq i m) -> (fm : Eq (f m) false) -> Eq false true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example4. $primeb (3)= true$.",
    "output": "postulate example4 : Eq (primeb 3) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Enum. Let $A$ be a set. Then for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_942$, $A$.",
    "output": "postulate enum : (A : Set) -> (_xxx : range A) -> (_x_942 : Nat) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_log_O. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $m$ is less than $n$, then the logarithm of $n$ and $m$ is equal to $0$.",
    "output": "postulate lt_to_log_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Lt m n) -> Eq (log n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then the difference of $__$ and $__1$ is a natural number.",
    "output": "postulate minus : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10333. For all natural numbers $n$, if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10333 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_B. For all natural numbers $n$, if $0$ is less than $n$, then the exponentiation of $2$ and the product of $2$ and $n$ is less than or equal to the product of the product of $2$ and $n$ and $B$ applied to the product of $2$ and $n$.",
    "output": "postulate le_exp_B : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 (times 2 n)) (times (times 2 n) (B (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example6. $primeb$ applied to $11$ is equal to $true$.",
    "output": "postulate example6 : Eq (primeb 11) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_n. Let $n$ be a natural number. Then $prim$ applied to $n$ is less than or equal to $n$.",
    "output": "postulate le_prim_n : (n : Nat) -> Leq (prim n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Op. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $Aop$ of $A$ and $nil$, for all elements $_x_887$ and $_x_888$ of $A$, $A$.",
    "output": "postulate op : (A : Set) -> (nil : A) -> (_xxx : Aop A nil) -> (_x_887 : A) -> (_x_888 : A) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_sigma_pi_SO_n. For all natural numbers $n$, $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$ is equal to $n$.",
    "output": "postulate eq_sigma_pi_SO_n : (n : Nat) -> Eq (bigop n (\\ i : Nat -> true) Nat 0 plus (\\ i : Nat -> 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ and $_b$ be natural numbers. Let $_f$ be a function from natural numbers to booleans. Let $__ \\in N$. Then $min_spec$ applied to $_n$ and $_b$ and $_f$ and $__$ is a proposition.",
    "output": "postulate min_spec : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times_n_to_lt_l. For all natural numbers $n$ and $p$ and $q$, if the product of $p$ and $n$ is less than the product of $q$ and $n$, then $p$ is less than $q$.",
    "output": "postulate lt_times_n_to_lt_l : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (times p n) (times q n)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "FactS. For all natural numbers $n$, the factorial of the sum of $n$ and $1$ is equal to the product of the sum of $n$ and $1$ and the factorial of $n$.",
    "output": "postulate factS : (n : Nat) -> Eq (factorial (plus n 1)) (times (plus n 1) (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_O. For all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then the difference of $n$ and $m$ is equal to $0$.",
    "output": "postulate eq_minus_O : (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Eq (minus n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_to_dividesb_false. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $n$ is not divisible by $m$, then $dividesb$ applied to $n$ and $m$ is equal to absurdity.",
    "output": "postulate not_divides_to_dividesb_false : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : not (divisible n m)) -> Eq (dividesb n m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_n1. Let $n$ be a natural number. Then if $4$ is less than or equal to $n$, then $prim$ applied to the sum of the product of $2$ and $n$ and $1$ is less than or equal to $n$.",
    "output": "postulate le_prim_n1 : (n : Nat) -> (_ : Leq 4 n) -> Leq (prim (plus (times 2 n) 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord. For all natural numbers $_n$ and $_m$, $Prod$ holds for $Nat$ and $Nat$.",
    "output": "postulate p_ord : (_n : Nat) -> (_m : Nat) -> Prod Nat Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_SO_to_le_B_exp. For all natural numbers $n$, if $1$ is less than $n$, then $B$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of $2$ and $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate lt_SO_to_le_B_exp : (n : Nat) -> (_ : Lt 1 n) -> Leq (B (times 2 n)) (pow 2 (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_div_div_div_times. Let $n$ and $m$ and $q$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then the quotient of the quotient of $q$ and $n$ and $m$ is equal to the quotient of $q$ and the product of $n$ and $m$.",
    "output": "postulate eq_div_div_div_times : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> Eq (div (div q n) m) (div q (times n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_to_minus. For all natural numbers $n$ and $m$ and $p$, if $n$ is equal to the sum of $m$ and $p$, then the difference of $n$ and $m$ is equal to $p$.",
    "output": "postulate plus_to_minus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Eq n (plus m p)) -> Eq (minus n m) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psidef. For all natural numbers $n$, $Psi'$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $p$.",
    "output": "postulate Psidef : (n : Nat) -> Eq (Psi' n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> bigop (log p n) (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_to_le_theta_exp_theta. For all natural numbers $m$, if $0$ is less than $m$, then $theta$ applied to the sum of the product of $2$ and $m$ and $1$ is less than the product of the exponentiation of $2$ and the product of $2$ and $m$ and $theta$ applied to the sum of $m$ and $1$.",
    "output": "postulate lt_O_to_le_theta_exp_theta : (m : Nat) -> (_ : Lt 0 m) -> Lt (theta (plus (times 2 m) 1)) (times (pow 2 (times 2 m)) (theta (plus m 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n , __ \\in N$. Then we can say that $_n$ is less than or equal to $__$.",
    "output": "postulate Leq : (_n : Nat) -> (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_div_div_times. For all natural numbers $a$ and $n$ and $m$, if $0$ is less than $m$, then the product of $a$ and the quotient of $n$ and $m$ is less than or equal to the quotient of the product of $a$ and $n$ and $m$.",
    "output": "postulate le_times_div_div_times : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Leq (times a (div n m)) (div (times a n) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10332. For all natural numbers $n$, if the exponentiation of $2$ and $6$ is less than or equal to $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10332 : (n : Nat) -> (le_n : Leq (pow 2 6) n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp1_body. For all sets $_A$, for all functions $Q_$ from elements $_x_937$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_937$ of $range$ of $_A$, $Q_$ holds for $x_937$.",
    "output": "postulate range_rect_CProp1_body : (_A : Set) -> (Q_ : (_x_937 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_937 : range _A) -> Q_ x_937"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_false. For all natural numbers $p$ and $n$ and $m$ and $a$, if $mod$ applied to $n$ and $m$ is equal to the sum of $a$ and $1$, then $p_ord_aux$ applied to $p$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $0$ and $n$.",
    "output": "postulate p_ord_aux_false : (p : Nat) -> (n : Nat) -> (m : Nat) -> (a : Nat) -> (_ : Eq (mod n m) (plus a 1)) -> Eq (p_ord_aux p n m) (mk_Prod Nat Nat 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_times_l. For all natural numbers $p$ and $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then if $1$ is less than $p$, then the sum of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$ is less than or equal to the logarithm of $p$ and the product of $n$ and $m$.",
    "output": "postulate log_times_l : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : Lt 1 p) -> Leq (plus (log p n) (log p m)) (log p (times n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_fact1. For all natural numbers $n$, if $0$ is less than $n$, then the product of the product of the exponentiation of $2$ and the product of $2$ and $n$ and the factorial of $n$ and the factorial of $n$ is less than the factorial of the sum of the product of $2$ and $n$ and $1$.",
    "output": "postulate exp_to_fact1 : (n : Nat) -> (_ : Lt 0 n) -> Lt (times (times (pow 2 (times 2 n)) (factorial n)) (factorial n)) (factorial (plus (times 2 n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_not_zero. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then $not_zero$ holds for $m$.",
    "output": "postulate lt_to_not_zero : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> not_zero m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus_m_m. For all natural numbers $n$ and $m$, $n$ is equal to the difference of the sum of $n$ and $m$ and $m$.",
    "output": "postulate minus_plus_m_m : (n : Nat) -> (m : Nat) -> Eq n (minus (plus n m) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_min_spec. For all natural numbers $_n$ and $_b$, for all functions $_f$ from natural numbers to booleans, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $z$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $__$ to elements of $return_sort$, for all functions $case_found_min_spec$ from natural numbers $m$ and elements of $Leq$ of $_b$ and $m$ and elements $__1$ of $Lt$ of $m$ and the sum of $_n$ and $_b$ and elements $__2$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $__3$ from natural numbers $i$ and elements $__3$ of $Leq$ of $_b$ and $i$ and elements $__4$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $return_type$ of $m$ and $found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $m$ and $__$ and $__1$ and $__2$ and $__3$, for all functions $case_not_found_min_spec$ from functions from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $_n$ and $_b$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $return_type$ of the sum of $_n$ and $_b$ and $not_found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $__$, for all natural numbers $__$, for all elements $z$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $__$, $return_type$ holds for $__$ and $z$.",
    "output": "postulate match_min_spec : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (z : min_spec _n _b _f __) -> return_sort) -> (case_found_min_spec : (m : Nat) -> (_ : Leq _b m) -> (__1 : Lt m (plus _n _b)) -> (__2 : Eq (_f m) true) -> (__3 : (i : Nat) -> (__3 : Leq _b i) -> (__4 : Lt i m) -> Eq (_f i) false) -> return_type m (found_min_spec _n _b _f m __ __1 __2 __3)) -> (case_not_found_min_spec : (_ : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i (plus _n _b)) -> Eq (_f i) false) -> return_type (plus _n _b) (not_found_min_spec _n _b _f __)) -> (_ : Nat) -> (z : min_spec _n _b _f __) -> return_type __ z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_spec_to_min. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$ and $m$, for all elements $__$ of $min_spec$ of $n$ and $b$ and $f$ and $m$, $min$ applied to $n$ and $b$ and $f$ is equal to $m$.",
    "output": "postulate min_spec_to_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (m : Nat) -> (_ : min_spec n b f m) -> Eq (min n b f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_Bk_B1_B2. For all natural numbers $n$, $Bk$ applied to $n$ is equal to the product of $B1$ applied to $n$ and $B2$ applied to $n$.",
    "output": "postulate eq_Bk_B1_B2 : (n : Nat) -> Eq (Bk n) (times (B1 n) (B2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp4. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1470$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_839$ of $Lt$ of $x4$ and $x2$ and elements $x_838$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1471$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_839$ and $x_838$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_839$ and $x_838$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp4 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1470 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_839 : Lt x4 x2) -> (x_838 : Eq x1 (plus (times x3 x2) x4)) -> (_z1471 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_839 x_838)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_839 x_838)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_pi_p_M1. For all natural numbers $m$ and $i$, if $i$ is less than or equal to the sum of the product of $2$ and $m$ and $2$, then $bigop$ applied to $i$ and the function that maps $p$ to $andb$ applied to $leb$ applied to the sum of $m$ and $2$ and $p$ and $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$ is divisible by $M$ applied to $m$.",
    "output": "postulate divides_pi_p_M1 : (m : Nat) -> (i : Nat) -> (_ : Leq i (plus (times 2 m) 2)) -> divisible (bigop i (\\ p : Nat -> andb (leb (plus m 2) p) (primeb p)) Nat 1 times (\\ p : Nat -> p)) (M m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_le. For all functions $f$ from natural numbers to natural numbers, for all elements $__$ of $increasing$ of $f$, for all natural numbers $m$, $ex$ holds for $Nat$ and the function that maps $i$ to $Leq$ applied to $m$ and $f$ applied to $i$.",
    "output": "postulate increasing_to_le : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> (m : Nat) -> ex Nat (\\ i : Nat -> Leq m (f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_Sn_m. For all natural numbers $n$ and $m$, the sum of $m$ and the product of $n$ and $m$ is equal to the product of the sum of $n$ and $1$ and $m$.",
    "output": "postulate times_Sn_m : (n : Nat) -> (m : Nat) -> Eq (plus m (times n m)) (times (plus n 1) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_a. For all natural numbers $a$ and $b$, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, if $a$ is less than or equal to $b$, then $bigop$ applied to the difference of the sum of $b$ and $1$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$ is equal to $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to the difference of $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $true$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to the successor of $i0$ applied to the sum of $i$ and $a$ and $f$ applied to $a$.",
    "output": "postulate bigop_a : (a : Nat) -> (b : Nat) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (_ : Leq a b) -> Eq (bigop (minus (plus b 1) a) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))) (op B nil op (bigop (minus b a) (\\ i : Nat -> (\\ i0 : Nat -> true) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f (succ i0)) (plus i a))) (f a))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type1. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_925$ of $range$ of $_A$ to elements of $Type1$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_925$ of $range$ of $_A$, $Q_$ holds for $x_925$.",
    "output": "postulate range_rect_Type1 : (_A : Set) -> (Q_ : (_x_925 : range _A) -> Type1) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_925 : range _A) -> Q_ x_925"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp4. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1470$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_839$ of $Lt$ of $x4$ and $x2$ and elements $x_838$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1471$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_839$ and $x_838$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_839$ and $x_838$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp4 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1470 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_839 : Lt x4 x2) -> (x_838 : Eq x1 (plus (times x3 x2) x4)) -> (_z1471 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_839 x_838)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_839 x_838)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_to_gcd_aux. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $n$, then if $n$ is not divisible by $m$, then $gcd_aux$ applied to the sum of $p$ and $1$ and $m$ and $n$ is equal to $gcd_aux$ applied to $p$ and $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate not_divides_to_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : not (divisible n m)) -> Eq (gcd_aux (plus p 1) m n) (gcd_aux p n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type2_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_951$ of $Dop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_951$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_951$.",
    "output": "postulate Dop_rect_Type2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_951 : Dop A _nil) -> Type2) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_951 : Dop A _nil) -> Q_ x_951"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_rem. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate ord_rem : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp3_body. For all sets $_A$, for all functions $Q_$ from elements $_x_933$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_933$ of $range$ of $_A$, $Q_$ holds for $x_933$.",
    "output": "postulate range_rect_CProp3_body : (_A : Set) -> (Q_ : (_x_933 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_933 : range _A) -> Q_ x_933"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_n_O. Let $n$ be a natural number. Then $n$ is equal to the sum of $n$ and $0$.",
    "output": "postulate plus_n_O : (n : Nat) -> Eq n (plus n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_to_divides. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then for all elements $__1$ of $congruent$ of $n$ and $m$ and $p$, $p$ is divisible by the difference of $n$ and $m$.",
    "output": "postulate congruent_to_divides : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : congruent n m p) -> divisible p (minus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_n_O. For all natural numbers $n$, $n$ is equal to the difference of $n$ and $0$.",
    "output": "postulate minus_n_O : (n : Nat) -> Eq n (minus n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then $div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ is a proposition.",
    "output": "postulate div_mod_spec : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type3. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type3$, for all functions $_H_div_mod_spec_intro$ from elements $x_823$ of $Lt$ of $_r$ and $_m$ and elements $x_822$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_823$ and $x_822$, for all elements $x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_821$.",
    "output": "postulate div_mod_spec_rect_Type3 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_821 : div_mod_spec _n _m _q _r) -> Type3) -> (_H_div_mod_spec_intro : (x_823 : Lt _r _m) -> (x_822 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_823 x_822)) -> (x_821 : div_mod_spec _n _m _q _r) -> Q_ x_821"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_priml. Let $n$ be a natural number. Then if $0$ is less than $n$, then the exponentiation of $2$ and the product of $2$ and $n$ is less than or equal to the exponentiation of the product of $2$ and $n$ and the sum of $prim$ applied to the product of $2$ and $n$ and $1$.",
    "output": "postulate le_exp_priml : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 (times 2 n)) (pow (times 2 n) (plus (prim (times 2 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B2_exp. For all natural numbers $n$, if the exponentiation of $2$ and $7$ is less than or equal to $n$, then $B2$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of the product of $2$ and $n$ and $pred$ applied to the quotient of the square root of the product of $2$ and $n$ and $2$.",
    "output": "postulate le_B2_exp : (n : Nat) -> (_ : Leq (pow 2 7) n) -> Leq (B2 (times 2 n)) (pow (times 2 n) (pred (div (sqrt (times 2 n)) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp3. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1476$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_847$ of $Lt$ of $x4$ and $x2$ and elements $x_846$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1477$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_847$ and $x_846$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_847$ and $x_846$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp3 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1476 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_847 : Lt x4 x2) -> (x_846 : Eq x1 (plus (times x3 x2) x4)) -> (_z1477 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_847 x_846)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_847 x_846)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim_body. For all natural numbers $__$ and $__1$, for all lists $__2$ of natural numbers, $list$ holds for $Nat$.",
    "output": "postulate lprim_body : (_ : Nat) -> (__1 : Nat) -> (__2 : list Nat) -> list Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_O. For all functions $f$ from natural numbers to booleans, $max$ applied to $0$ and $f$ is equal to $0$.",
    "output": "postulate max_O : (f : (_ : Nat) -> bool) -> Eq (max 0 f) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Upto. Let $A$ be a set. Then for all elements $_xxx$ of $range$ of $A$, $Nat$.",
    "output": "postulate upto : (A : Set) -> (_xxx : range A) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_m. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, $Nat$.",
    "output": "postulate let_m : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_pi_l. For all natural numbers $n$ and $a$, for all functions $f$ from natural numbers to natural numbers, the product of the exponentiation of $a$ and $n$ and $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the product of $a$ and $f$ applied to $i$.",
    "output": "postulate exp_pi_l : (n : Nat) -> (a : Nat) -> (f : (_ : Nat) -> Nat) -> Eq (times (pow a n) (bigop n (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> f i))) (bigop n (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> times a (f i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1560. Let $n$ and $m$ be natural numbers. Then if $n$ is divisible by $m$, then if $0$ is equal to $n$, then for all natural numbers $d$, if $m$ is equal to the product of $0$ and $d$, then $n$ is equal to $0$.",
    "output": "postulate let_clause_1560 : (n : Nat) -> (m : Nat) -> (divnm : divisible n m) -> (H : Eq 0 n) -> (d : Nat) -> (auto : Eq m (times 0 d)) -> Eq n 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_O_to_divides. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $mod$ applied to $m$ and $n$ is equal to $0$, then $n$ is divisible by $m$.",
    "output": "postulate mod_O_to_divides : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Eq (mod m n) 0) -> divisible n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_minus_comm. Let $a$ and $b$ and $c$ be natural numbers. Then the difference of the difference of $a$ and $b$ and $c$ is equal to the difference of the difference of $a$ and $c$ and $b$.",
    "output": "postulate minus_minus_comm : (a : Nat) -> (b : Nat) -> (c : Nat) -> Eq (minus (minus a b) c) (minus (minus a c) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_gen. For all functions $P$ from natural numbers to propositions, for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $i$ and $n$ to elements of $P$ of $i$, $P$ holds for $n$.",
    "output": "postulate le_gen : (P : (_ : Nat) -> Prop) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Leq i n) -> P i) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp5. For all natural numbers $n$, $Psi$ applied to $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_Psi_exp5 : (n : Nat) -> Leq (Psi n) (pow 2 (minus (times 2 n) 3))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_n_1. For all natural numbers $n$, $n$ is equal to the exponentiation of $n$ and $1$.",
    "output": "postulate exp_n_1 : (n : Nat) -> Eq n (pow n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_to_eqb_false. Let $n$ and $m$ be natural numbers. Then if $n$ is not equal to $m$, then $eqb$ applied to $n$ and $m$ is equal to absurdity.",
    "output": "postulate not_eq_to_eqb_false : (n : Nat) -> (m : Nat) -> (_ : not (Eq n m)) -> Eq (eqb n m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_plus_times. Let $n$ and $p$ and $q$ be natural numbers. Then the exponentiation of $n$ and the sum of $p$ and $q$ is equal to the product of the exponentiation of $n$ and $p$ and the exponentiation of $n$ and $q$.",
    "output": "postulate exp_plus_times : (n : Nat) -> (p : Nat) -> (q : Nat) -> Eq (pow n (plus p q)) (times (pow n p) (pow n q))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Invert_permut. For all natural numbers $__$, for all functions $__1$ from natural numbers $__1$ to natural numbers, for all natural numbers $__2$, $Nat$.",
    "output": "postulate invert_permut : (_ : Nat) -> (__1 : (__1 : Nat) -> Nat) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type4. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1638$ of $range$ of $x1$ to elements of $Type4$, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1639$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type4 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1638 : range x1) -> Type4) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1639 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_sym. For all natural numbers $a$ and $b$, $eqb$ applied to $a$ and $b$ is equal to $eqb$ applied to $b$ and $a$.",
    "output": "postulate eqb_sym : (a : Nat) -> (b : Nat) -> Eq (eqb a b) (eqb b a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1544. Let $p$ and $q$ be natural numbers. Then for all functions $Hind$ from natural numbers $m$ and natural numbers $n$ and elements of $Lt$ of $0$ and $n$ and elements $__1$ of $Leq$ of $n$ and $m$ and elements $__2$ of $Leq$ of $n$ and $q$ to elements of $ex$ of $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and $gcd_aux$ applied to $q$ and $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and $gcd_aux$ applied to $q$ and $m$ and $n$, for all natural numbers $m$ and $n$, if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to the sum of $q$ and $1$, then if $n$ is not divisible by $m$, then for all natural numbers $a$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, for all natural numbers $b$, if the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ or the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then if the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $n$ and $b$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate let_clause_1544 : (p : Nat) -> (q : Nat) -> (Hind : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n q) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd_aux q m n)) (Eq (minus (times b m) (times a n)) (gcd_aux q m n))))) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (lenm : Leq n m) -> (lenS : Leq n (plus q 1)) -> (ndivnm : not (divisible n m)) -> (a : Nat) -> (_clearme : ex Nat (\\ b : Nat -> or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n))))) -> (b : Nat) -> (_clearme0 : or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n)))) -> (H : Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) -> Eq (minus (times a (mod m n)) (times n b)) (gcd_aux q n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_mod. Let $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then the greatest common divisor of $n$ and $mod$ applied to $m$ and $n$ is equal to the greatest common divisor of $m$ and $n$.",
    "output": "postulate gcd_mod : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> Eq (gcd n (mod m n)) (gcd m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F2_ind_aux. For all sets $A1$ and $A2$, for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ to natural numbers, for all elements $P$ of $relation2$ of $A1$ and $A2$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$, for all natural numbers $n$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, if $f$ applied to $a1$ and $a2$ is equal to $n$, then $P$ holds for $a1$ and $a2$.",
    "output": "postulate f2_ind_aux : (A1 : Set) -> (A2 : Set) -> (f : (_ : A1) -> (__1 : A2) -> Nat) -> (P : relation2 A1 A2) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (_ : Lt (f a1 a2) n) -> P a1 a2) -> (a1 : A1) -> (a2 : A2) -> (__1 : Eq (f a1 a2) n) -> P a1 a2) -> (n : Nat) -> (a1 : A1) -> (a2 : A2) -> (__1 : Eq (f a1 a2) n) -> P a1 a2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_body. For all natural numbers $__$ and $__1$, $bool$.",
    "output": "postulate leb_body : (_ : Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distributive_times_minus. $distributive$ holds for $Nat$ and $times$ and $minus$.",
    "output": "postulate distributive_times_minus : distributive Nat times minus"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_inv_ind. Let $x1$ be a set. Then for all elements $x2$ of $relation$ of $x1$, for all natural numbers $x3$, for all elements $x4$ and $x5$ of $x1$, for all elements $_Hterm$ of $lstar_r$ of $x1$ and $x2$ and $x3$ and $x4$ and $x5$, for all functions $P$ from natural numbers $_z2386$ and elements $_z2385$ of $x1$ and elements $_z2384$ of $x1$ to propositions, for all functions $_H1$ from elements $b$ of $x1$ and elements $_z2389$ of $Eq$ of $x3$ and $0$ and elements $_z2388$ of $Eq$ of $x4$ and $b$ and elements $_z2387$ of $Eq$ of $x5$ and $b$ to elements of $P$ of $0$ and $b$ and $b$, for all functions $_H2$ from natural numbers $l$ and elements $b1$ of $x1$ and elements $b$ of $x1$ and elements $_x_1340$ of $lstar_r$ of $x1$ and $x2$ and $l$ and $b1$ and $b$ and elements $b2$ of $x1$ and elements $_x_1339$ of $x2$ of $b$ and $b2$ and functions $_x_1342$ from elements $_z2389$ of $Eq$ of $x3$ and $l$ and elements $_z2388$ of $Eq$ of $x4$ and $b1$ and elements $_z2387$ of $Eq$ of $x5$ and $b$ to elements of $P$ of $l$ and $b1$ and $b$ and elements $_z2389$ of $Eq$ of $x3$ and the sum of $l$ and $1$ and elements $_z2388$ of $Eq$ of $x4$ and $b1$ and elements $_z2387$ of $Eq$ of $x5$ and $b2$ to elements of $P$ of the sum of $l$ and $1$ and $b1$ and $b2$, $P$ holds for $x3$ and $x4$ and $x5$.",
    "output": "postulate lstar_r_inv_ind : (x1 : Set) -> (x2 : relation x1) -> (x3 : Nat) -> (x4 : x1) -> (x5 : x1) -> (_Hterm : lstar_r x1 x2 x3 x4 x5) -> (P : (_z2386 : Nat) -> (_z2385 : x1) -> (_z2384 : x1) -> Prop) -> (_H1 : (b : x1) -> (_z2389 : Eq x3 0) -> (_z2388 : Eq x4 b) -> (_z2387 : Eq x5 b) -> P 0 b b) -> (_H2 : (l : Nat) -> (b1 : x1) -> (b : x1) -> (_x_1340 : lstar_r x1 x2 l b1 b) -> (b2 : x1) -> (_x_1339 : x2 b b2) -> (_x_1342 : (_z2389 : Eq x3 l) -> (_z2388 : Eq x4 b1) -> (_z2387 : Eq x5 b) -> P l b1 b) -> (_z2389 : Eq x3 (plus l 1)) -> (_z2388 : Eq x4 b1) -> (_z2387 : Eq x5 b2) -> P (plus l 1) b1 b2) -> P x3 x4 x5"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_ab_lt. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then $ex$ holds for $Nat$ and the function that maps $x$ to the conjunction of the conjunction of $congruent$ applied to $x$ and $a$ and $m$ and $congruent$ applied to $x$ and $b$ and $n$ and $Lt$ applied to $x$ and the product of $m$ and $n$.",
    "output": "postulate congruent_ab_lt : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : Eq (gcd n m) 1) -> ex Nat (\\ x : Nat -> and (and (congruent x a m) (congruent x b n)) (Lt x (times m n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides_body. For all lists $__$ of natural numbers, for all natural numbers $__1$, $bool$.",
    "output": "postulate list_divides_body : (_ : list Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type5_body. For all sets $_A$, for all functions $Q_$ from elements $_x_919$ of $range$ of $_A$ to elements of $Type5$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_919$ of $range$ of $_A$, $Q_$ holds for $x_919$.",
    "output": "postulate range_rect_Type5_body : (_A : Set) -> (Q_ : (_x_919 : range _A) -> Type5) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_919 : range _A) -> Q_ x_919"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then the exponentiation of $__$ and $__1$ is a natural number.",
    "output": "postulate pow : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B2_def. Let $n$ be a natural number. Then $B2$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and the product of $bool_to_nat$ applied to $leb$ applied to $2$ and $k$ applied to $n$ and $p$ and $k$ applied to $n$ and $p$.",
    "output": "postulate B2_def : (n : Nat) -> Eq (B2 n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (times (bool_to_nat (leb 2 (k n p))) (k n p))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp1. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_965$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_965$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_965$.",
    "output": "postulate Dop_rect_CProp1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_965 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_965 : Dop A _nil) -> Q_ x_965"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp2_body. Let $Q_$ be a function from natural numbers $_x_405$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_406$ and elements $_x_408$ of $Q_$ of $x_406$ to elements of $Q_$ of the sum of $x_406$ and $1$, for all natural numbers $x_405$, $Q_$ holds for $x_405$.",
    "output": "postulate nat_rect_CProp2_body : (Q_ : (_x_405 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_406 : Nat) -> (_x_408 : Q_ x_406) -> Q_ (plus x_406 1)) -> (x_405 : Nat) -> Q_ x_405"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_to_max_spec. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $max$ applied to $n$ and $f$ is equal to $m$, then $max_spec$ holds for $n$ and $f$ and $m$.",
    "output": "postulate max_to_max_spec : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Eq (max n f) m) -> max_spec n f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_n_n. Let $n$ be a natural number. Then $eqb$ applied to $n$ and $n$ is equal to $true$.",
    "output": "postulate eqb_n_n : (n : Nat) -> Eq (eqb n n) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp1. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_855$ of $Lt$ of $_r$ and $_m$ and elements $x_854$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_855$ and $x_854$, for all elements $x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_853$.",
    "output": "postulate div_mod_spec_rect_CProp1 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_853 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_855 : Lt _r _m) -> (x_854 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_855 x_854)) -> (x_853 : div_mod_spec _n _m _q _r) -> Q_ x_853"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_n_times_nm. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then the greatest common divisor of $n$ and the product of $n$ and $m$ is equal to $n$.",
    "output": "postulate gcd_n_times_nm : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Eq (gcd n (times n m)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TimesACdef. For all natural numbers $n$ and $m$, $aop__o__op$ applied to $Nat$ and $1$ and $timesAC$ and $n$ and $m$ is equal to the product of $n$ and $m$.",
    "output": "postulate timesACdef : (n : Nat) -> (m : Nat) -> Eq (aop__o__op Nat 1 timesAC n m) (times n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_to_eq2. For all natural numbers $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$, for all elements $__$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, for all elements $__1$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, $r$ is equal to $r1$.",
    "output": "postulate div_mod_spec_to_eq2 : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_ : div_mod_spec a b q r) -> (__1 : div_mod_spec a b q1 r1) -> Eq r r1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type3. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_949$ of $Dop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_949$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_949$.",
    "output": "postulate Dop_rect_Type3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_949 : Dop A _nil) -> Type3) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_949 : Dop A _nil) -> Q_ x_949"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime4. Let $n$ and $m$ be natural numbers. Then $Nat$.",
    "output": "postulate let_previous_prime4 : (n : Nat) -> (m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_log. Let $n$ and $b$ be natural numbers. Then if $1$ is less than $b$, then the logarithm of $b$ and $Psi$ applied to $n$ is less than or equal to the product of $prim$ applied to $n$ and the sum of the logarithm of $b$ and $n$ and $1$.",
    "output": "postulate le_prim_log : (n : Nat) -> (b : Nat) -> (_ : Lt 1 b) -> Leq (log b (Psi n)) (times (prim n) (plus (log b n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_aux. Let $_p$ and $_m$ and $_n$ be natural numbers. Then $Nat$.",
    "output": "postulate mod_aux : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_minus. Let $n$ and $m$ and $p$ be natural numbers. Then if $n$ is less than or equal to the sum of $p$ and $m$, then the difference of $n$ and $m$ is less than or equal to $p$.",
    "output": "postulate le_plus_to_minus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq n (plus p m)) -> Leq (minus n m) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp_log. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then $n$ is less than the exponentiation of $p$ and the sum of the logarithm of $p$ and $n$ and $1$.",
    "output": "postulate lt_exp_log : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Lt n (pow p (plus (log p n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_primeb_true. For all natural numbers $n$, if $n$ is prime, then $primeb$ applied to $n$ is equal to $true$.",
    "output": "postulate prime_to_primeb_true : (n : Nat) -> (_ : prime n) -> Eq (primeb n) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_div_mod. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then $div_mod_spec$ holds for $n$ and $m$ and the quotient of $n$ and $m$ and $mod$ applied to $n$ and $m$.",
    "output": "postulate div_mod_spec_div_mod : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> div_mod_spec n m (div n m) (mod n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10336. For all natural numbers $n$ and $m$, for all functions $Hind$ from natural numbers $p$ and elements of $Lt$ of $p$ and $m$ and elements $__1$ of $Lt$ of $1$ and $p$ to elements of $Leq$ of $Psi$ applied to $p$ and the product of $pred$ applied to $p$ and the exponentiation of $2$ and the difference of the product of $2$ and $p$ and $3$, for all natural numbers $a$, if $m$ is equal to the product of $2$ and $a$ or $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $1$ is less than the sum of the product of $2$ and $a$ and $1$, then if $0$ is less than $a$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10336 : (n : Nat) -> (m : Nat) -> (Hind : (p : Nat) -> (_ : Lt p m) -> (__1 : Lt 1 p) -> Leq (Psi p) (times (pred p) (pow 2 (minus (times 2 p) 3)))) -> (a : Nat) -> (_clearme : or (Eq m (times 2 a)) (Eq m (plus (times 2 a) 1))) -> (Hm : Eq m (plus (times 2 a) 1)) -> (Hlt : Lt 1 (plus (times 2 a) 1)) -> (Ha : Lt 0 a) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example7. $primeb$ applied to $17$ is equal to $true$.",
    "output": "postulate example7 : Eq (primeb 17) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1553. For all natural numbers $n$ and $n0$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $a$ to the disjunction of $Eq$ applied to $n0$ and the product of $2$ and $a$ and $Eq$ applied to $n0$ and the sum of the product of $2$ and $a$ and $1$, for all natural numbers $a$, if $n0$ is equal to the product of $2$ and $a$ or $n0$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $n0$ is equal to the sum of the product of $2$ and $a$ and $1$, then $n0$ is equal to the sum of $a$ and the sum of $a$ and $1$.",
    "output": "postulate let_clause_1553 : (n : Nat) -> (n0 : Nat) -> (_clearme : ex Nat (\\ a : Nat -> or (Eq n0 (times 2 a)) (Eq n0 (plus (times 2 a) 1)))) -> (a : Nat) -> (_clearme0 : or (Eq n0 (times 2 a)) (Eq n0 (plus (times 2 a) 1))) -> (Hn : Eq n0 (plus (times 2 a) 1)) -> Eq n0 (plus a (plus a 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_not_le. For all natural numbers $n$ and $m$, if $n$ is less than $m$, then $m$ is not less than or equal to $n$.",
    "output": "postulate lt_to_not_le : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> not (Leq m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_O_to_divides. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $mod$ applied to $m$ and $n$ is equal to $0$, then $n$ is divisible by $m$.",
    "output": "postulate mod_O_to_divides : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Eq (mod m n) 0) -> divisible n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_primeb_true. Let $n$ be a natural number. Then if $n$ is prime, then $primeb$ applied to $n$ is equal to $true$.",
    "output": "postulate prime_to_primeb_true : (n : Nat) -> (_ : prime n) -> Eq (primeb n) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_le. For all natural numbers $n$ and $m$, $decidable$ holds for $Leq$ applied to $n$ and $m$.",
    "output": "postulate decidable_le : (n : Nat) -> (m : Nat) -> decidable (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp3_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_879$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_879$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_879$.",
    "output": "postulate Aop_rect_CProp3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_879 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_879 : Aop A _nil) -> Q_ x_879"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_log2_sqrt. For all natural numbers $n$, if the exponentiation of $2$ and $6$ is less than or equal to $n$, then the logarithm of $2$ and $n$ is less than the square root of $n$.",
    "output": "postulate lt_log2_sqrt : (n : Nat) -> (_ : Leq (pow 2 6) n) -> Lt (log 2 n) (sqrt n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp3_body. For all functions $Q_$ from natural numbers $_x_401$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_402$ and elements $_x_404$ of $Q_$ of $x_402$ to elements of $Q_$ of the sum of $x_402$ and $1$, for all natural numbers $x_401$, $Q_$ holds for $x_401$.",
    "output": "postulate nat_rect_CProp3_body : (Q_ : (_x_401 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_402 : Nat) -> (_x_404 : Q_ x_402) -> Q_ (plus x_402 1)) -> (x_401 : Nat) -> Q_ x_401"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_ord_O_to_divides. For all natural numbers $p$ and $m$, if $0$ is less than $m$, then if $p$ is prime, then if $ord$ applied to $m$ and $p$ is not equal to $0$, then $p$ is divisible by $m$.",
    "output": "postulate not_ord_O_to_divides : (p : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : not (Eq (ord m p) 0)) -> divisible p m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_min_spec. For all natural numbers $_n$ and $_b$, for all functions $_f$ from natural numbers to booleans, for all natural numbers $__$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $__$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $__$ to elements of $return_type$ of $z$, for all elements $z$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $__$, $return_type$ holds for $z$.",
    "output": "postulate filter_min_spec : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (_ : Nat) -> (return_sort : Sort) -> (return_type : (z : min_spec _n _b _f __) -> return_sort) -> (return : (z : min_spec _n _b _f __) -> return_type z) -> (z : min_spec _n _b _f __) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp3_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_847$ of $Lt$ of $_r$ and $_m$ and elements $x_846$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_847$ and $x_846$, for all elements $x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_845$.",
    "output": "postulate div_mod_spec_rect_CProp3_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_845 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_847 : Lt _r _m) -> (x_846 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_847 x_846)) -> (x_845 : div_mod_spec _n _m _q _r) -> Q_ x_845"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_S. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b$ of $B$, for all elements $__$ of $lstar_r$ of $B$ and $R$ and $l$ and $b1$ and $b$, for all elements $b2$ of $B$, for all elements $__1$ of $R$ of $b$ and $b2$, $lstar_r$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_r_S : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b : B) -> (_ : lstar_r B R l b1 b) -> (b2 : B) -> (__1 : R b b2) -> lstar_r B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "LePsi_prim. For all natural numbers $n$, the exponentiation of $n$ and $prim$ applied to $n$ is less than or equal to the product of $Psi$ applied to $n$ and $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$.",
    "output": "postulate lePsi_prim : (n : Nat) -> Leq (pow n (prim n)) (times (Psi n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psil. Let $n$ be a natural number. Then $Psi$ applied to $n$ is less than or equal to the exponentiation of $n$ and $prim$ applied to $n$.",
    "output": "postulate le_Psil : (n : Nat) -> Leq (Psi n) (pow n (prim n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type2. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1650$ of $range$ of $x1$ to elements of $Type2$, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1651$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type2 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1650 : range x1) -> Type2) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1651 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Comm_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $ACop$ of $A$ and $nil$, for all elements $a$ and $b$ of $A$, $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ is equal to $op$ applied to $A$ and $nil$ and $aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.",
    "output": "postulate comm_body : (A : Set) -> (nil : A) -> (xxx : ACop A nil) -> (a : A) -> (b : A) -> Eq (op A nil (aop A nil xxx) a b) (op A nil (aop A nil xxx) b a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux_to_not_mod_O. Let $p$ and $n$ and $m$ and $q$ and $r$ be natural numbers. Then if $1$ is less than $m$, then if $0$ is less than $n$, then if $n$ is less than or equal to $p$, then if $p_ord_aux$ applied to $p$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $mod$ applied to $r$ and $m$ is not equal to $0$.",
    "output": "postulate p_ord_aux_to_not_mod_O : (p : Nat) -> (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 1 m) -> (__1 : Lt 0 n) -> (__2 : Leq n p) -> (__3 : Eq (p_ord_aux p n m) (mk_Prod Nat Nat q r)) -> not (Eq (mod r m) 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_prim_prim_pred. Let $n$ be a natural number. Then if $1$ is less than $n$, then $prim$ applied to the product of $2$ and $n$ is equal to $prim$ applied to $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate eq_prim_prim_pred : (n : Nat) -> (_ : Lt 1 n) -> Eq (prim (times 2 n)) (prim (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_Psi_Psi'. For all natural numbers $n$, $Psi$ applied to $n$ is equal to $Psi'$ applied to $n$.",
    "output": "postulate eq_Psi_Psi' : (n : Nat) -> Eq (Psi n) (Psi' n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example11. $nth_prime (2)= 5$.",
    "output": "postulate example11 : Eq (nth_prime 2) 5"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_p_ord. For all natural numbers $p$ and $a$ and $b$ and $c$ and $d$ and $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then if $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $a$ and $b$, then if $p_ord$ applied to $m$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $c$ and $d$, then $b$ is divisible by $d$ and $a$ is less than or equal to $c$.",
    "output": "postulate divides_to_p_ord : (p : Nat) -> (a : Nat) -> (b : Nat) -> (c : Nat) -> (d : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> (__4 : Eq (p_ord n p) (mk_Prod Nat Nat a b)) -> (__5 : Eq (p_ord m p) (mk_Prod Nat Nat c d)) -> and (divisible b d) (Leq a c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_spec_ind_body. For all natural numbers $_n$ and $_b$, for all functions $_f$ from natural numbers to booleans, for all functions $Q_$ from natural numbers $x_1075$ and elements $_x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$ to propositions, for all functions $_H_found_min_spec$ from natural numbers $m$ and elements $x_1080$ of $Leq$ of $_b$ and $m$ and elements $x_1079$ of $Lt$ of $m$ and the sum of $_n$ and $_b$ and elements $x_1078$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $x_1077$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $m$ and $found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $m$ and $x_1080$ and $x_1079$ and $x_1078$ and $x_1077$, for all functions $_H_not_found_min_spec$ from functions $x_1081$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $_n$ and $_b$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of the sum of $_n$ and $_b$ and $not_found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $x_1081$, for all natural numbers $x_1075$, for all elements $x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$, $Q_$ holds for $x_1075$ and $x_1076$.",
    "output": "postulate min_spec_ind_body : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (Q_ : (x_1075 : Nat) -> (_x_1076 : min_spec _n _b _f x_1075) -> Prop) -> (_H_found_min_spec : (m : Nat) -> (x_1080 : Leq _b m) -> (x_1079 : Lt m (plus _n _b)) -> (x_1078 : Eq (_f m) true) -> (x_1077 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i m) -> Eq (_f i) false) -> Q_ m (found_min_spec _n _b _f m x_1080 x_1079 x_1078 x_1077)) -> (_H_not_found_min_spec : (x_1081 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i (plus _n _b)) -> Eq (_f i) false) -> Q_ (plus _n _b) (not_found_min_spec _n _b _f x_1081)) -> (x_1075 : Nat) -> (x_1076 : min_spec _n _b _f x_1075) -> Q_ x_1075 x_1076"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp4_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_903$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_903$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_903$.",
    "output": "postulate ACop_rect_CProp4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_903 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_903 : ACop A _nil) -> Q_ x_903"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp3. Let $Q_$ be a function from natural numbers $_x_401$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_402$ and elements $_x_404$ of $Q_$ of $x_402$ to elements of $Q_$ of the sum of $x_402$ and $1$, for all natural numbers $x_401$, $Q_$ holds for $x_401$.",
    "output": "postulate nat_rect_CProp3 : (Q_ : (_x_401 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_402 : Nat) -> (_x_404 : Q_ x_402) -> Q_ (plus x_402 1)) -> (x_401 : Nat) -> Q_ x_401"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1595. Let $p$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $p$ and $n$ is equal to $1$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $1$ is less than the greatest common divisor of $p$ and the product of $n$ and $m$, then if $smallest_factor$ applied to the greatest common divisor of $p$ and the product of $n$ and $m$ is divisible by $m$, then the greatest common divisor of $p$ and $n$ is equal to the greatest common divisor of $p$ and $m$.",
    "output": "postulate let_clause_1595 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (primepn : Eq (gcd p n) 1) -> (primepm : Eq (gcd p m) 1) -> (lt1gcd : Lt 1 (gcd p (times n m))) -> (H : divisible (smallest_factor (gcd p (times n m))) m) -> Eq (gcd p n) (gcd p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_Sn_m. Let $m$ and $n$ be natural numbers. Then if $m$ is less than or equal to $n$, then the difference of the sum of $n$ and $1$ and $m$ is equal to the sum of the difference of $n$ and $m$ and $1$.",
    "output": "postulate minus_Sn_m : (m : Nat) -> (n : Nat) -> (_ : Leq m n) -> Eq (minus (plus n 1) m) (plus (minus n m) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_S_mod. Let $n$ be a natural number. Then $permut$ holds for $S_mod$ applied to the sum of $n$ and $1$ and $n$.",
    "output": "postulate permut_S_mod : (n : Nat) -> permut (S_mod (plus n 1)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_Dop. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Dop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $Dop$ of $A$ and $_nil$ to elements of $return_type$ of $z$, for all elements $z$ of $Dop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate filter_Dop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Dop A _nil) -> return_sort) -> (return : (z : Dop A _nil) -> return_type z) -> (z : Dop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_lt_to_le. For all natural numbers $n$ and $m$, if $n$ is not less than $m$, then $m$ is less than or equal to $n$.",
    "output": "postulate not_lt_to_le : (n : Nat) -> (m : Nat) -> (_ : not (Lt n m)) -> Leq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair3. $cr_pair$ applied to $2$ and $3$ and $1$ and $2$ is equal to $5$.",
    "output": "postulate cr_pair3 : Eq (cr_pair 2 3 1 2) 5"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_Sn_r. Let $a$ and $x$ and $n$ be natural numbers. Then $a$ is less than the sum of the sum of $a$ and $x$ and the sum of $n$ and $1$.",
    "output": "postulate lt_plus_Sn_r : (a : Nat) -> (x : Nat) -> (n : Nat) -> Lt a (plus (plus a x) (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_to_eq2. Let $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$ be natural numbers. Then for all elements $__$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, for all elements $__1$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, $r$ is equal to $r1$.",
    "output": "postulate div_mod_spec_to_eq2 : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_ : div_mod_spec a b q r) -> (__1 : div_mod_spec a b q1 r1) -> Eq r r1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_S_S_to_not_le. Let $n$ and $m$ be natural numbers. Then if the sum of $n$ and $1$ is not less than or equal to the sum of $m$ and $1$, then $n$ is not less than or equal to $m$.",
    "output": "postulate not_le_S_S_to_not_le : (n : Nat) -> (m : Nat) -> (_ : not (Leq (plus n 1) (plus m 1))) -> not (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10471. For all natural numbers $n1$ and $n2$, for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f1$ and $f2$ from natural numbers to elements of $B$, for all elements $_clearme$ of $iso$ of $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, for all functions $h$ from natural numbers to natural numbers, for all elements $_clearme0$ of $ex$ of $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $Nat$ and the function that maps $k$ to the conjunction of the conjunction of $prod$ applied to $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n1$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Eq$ applied to $p1$ applied to $i$ and $true$ and the function that maps $__1$ to $Eq$ applied to $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$ and $sub_hk$ applied to $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $sub_hk$ applied to $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$, for all functions $k$ from natural numbers to natural numbers, if $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n1$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Eq$ applied to $p1$ applied to $i$ and $true$ and the function that maps $__1$ to $Eq$ applied to $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$, $sub_hk$ holds for $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $sub_hk$ holds for $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$, then if $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n1$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Eq$ applied to $p1$ applied to $i$ and $true$ and the function that maps $__1$ to $Eq$ applied to $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$ and $sub_hk$ holds for $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, then for all functions $same$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$, for all natural numbers $i$ and $m$, for all functions $Hind$ from functions $f$ from natural numbers to booleans and elements of $Leq$ of $0$ and $n1$ and elements $__1$ of $sub_hk$ of $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $m$ and $f$ and elements $__2$ of $sub_hk$ of $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and $m$ and $f$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$ to elements of $Eq$ of $bigop$ applied to $0$ and the function that maps $i0$ to $p1$ applied to $i0$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i0$ to $f1$ applied to $i0$ and $bigop$ applied to $m$ and the function that maps $i0$ to $f$ applied to $i0$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i0$ to $f2$ applied to $i0$, for all functions $p20$ from natural numbers to booleans, if $0$ is less than or equal to $n1$, then for all elements $sub1$ of $sub_hk$ of $h$ and $k$ and $B$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and the sum of $m$ and $1$ and $p20$, for all elements $sub2$ of $sub_hk$ of $k$ and $h$ and $B$ and $mk_range$ applied to $B$ and $f2$ and the sum of $m$ and $1$ and $p20$ and $mk_range$ applied to $B$ and $f1$ and $0$ and $p1$, for all natural numbers $x2571$ and $x2572$, $x2571$ is equal to the sum of the product of $x2572$ and the quotient of $x2571$ and $x2572$ and $mod$ applied to $x2571$ and $x2572$.",
    "output": "postulate let_clause_10471 : (n1 : Nat) -> (n2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f1 : (_ : Nat) -> B) -> (f2 : (_ : Nat) -> B) -> (_clearme : iso B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2)) -> (h : (_ : Nat) -> Nat) -> (_clearme0 : ex (prod Set Set Nat (\\ _ : Nat -> Nat)) (\\ k : ((_ : Nat) -> Nat) -> and (and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n1) (\\ _ : Lt i n1 -> prod Prop Prop (Eq (p1 i) true) (\\ __1 : Eq (p1 i) true -> Eq (f1 i) (f2 (h i)))))) (sub_hk h k B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2))) (sub_hk k h B (mk_range B f2 n2 p2) (mk_range B f1 n1 p1)))) -> (k : (_ : Nat) -> Nat) -> (_clearme1 : and (and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n1) (\\ _ : Lt i n1 -> prod Prop Prop (Eq (p1 i) true) (\\ __1 : Eq (p1 i) true -> Eq (f1 i) (f2 (h i)))))) (sub_hk h k B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2))) (sub_hk k h B (mk_range B f2 n2 p2) (mk_range B f1 n1 p1))) -> (_clearme2 : and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n1) (\\ _ : Lt i n1 -> prod Prop Prop (Eq (p1 i) true) (\\ __1 : Eq (p1 i) true -> Eq (f1 i) (f2 (h i)))))) (sub_hk h k B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2))) -> (same : (i : Nat) -> (_ : Lt i n1) -> (__1 : Eq (p1 i) true) -> Eq (f1 i) (f2 (h i))) -> (i : Nat) -> (m : Nat) -> (Hind : (f : (_ : Nat) -> bool) -> (_ : Leq 0 n1) -> (__1 : sub_hk h k B (mk_range B f1 0 p1) (mk_range B f2 m f)) -> (__2 : sub_hk k h B (mk_range B f2 m f) (mk_range B f1 0 p1)) -> Eq (bigop 0 (\\ i0 : Nat -> p1 i0) B nil (aop__o__op B nil op) (\\ i0 : Nat -> f1 i0)) (bigop m (\\ i0 : Nat -> f i0) B nil (aop__o__op B nil op) (\\ i0 : Nat -> f2 i0))) -> (p20 : (_ : Nat) -> bool) -> (_ : Leq 0 n1) -> (sub1 : sub_hk h k B (mk_range B f1 0 p1) (mk_range B f2 (plus m 1) p20)) -> (sub2 : sub_hk k h B (mk_range B f2 (plus m 1) p20) (mk_range B f1 0 p1)) -> (x2571 : Nat) -> (x2572 : Nat) -> Eq x2571 (plus (times x2572 (div x2571 x2572)) (mod x2571 x2572))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_Sn_r. For all natural numbers $a$ and $x$ and $n$, $a$ is less than the sum of the sum of $a$ and $x$ and the sum of $n$ and $1$.",
    "output": "postulate lt_plus_Sn_r : (a : Nat) -> (x : Nat) -> (n : Nat) -> Lt a (plus (plus a x) (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16. Let $n$ and $m$ be natural numbers. Then if $2$ is less than the sum of $m$ and $1$, then for all natural numbers $x32$, the sum of $x32$ and $1$ is equal to the sum of $x32$ and $1$.",
    "output": "postulate let_clause_16 : (n : Nat) -> (m : Nat) -> (lt2 : Lt 2 (plus m 1)) -> (x32 : Nat) -> Eq (plus x32 1) (plus x32 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_div_O. For all natural numbers $n$ and $m$, if $n$ is less than $m$, then the quotient of $n$ and $m$ is equal to $0$.",
    "output": "postulate lt_to_div_O : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq (div n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Inv_ltransitive. Let $B$ be a set. Then $predicate$ holds for $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__$ to $relation$ applied to $B$.",
    "output": "postulate inv_ltransitive : (B : Set) -> predicate (prod Set Set Nat (\\ _ : Nat -> relation B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type4_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_863$ of $Aop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_863$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_863$.",
    "output": "postulate Aop_rect_Type4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_863 : Aop A _nil) -> Type4) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_863 : Aop A _nil) -> Q_ x_863"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime. For all natural numbers $__$ and $p$, $Nat$.",
    "output": "postulate let_previous_prime : (_ : Nat) -> (p : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux. For all natural numbers $__$ and $__1$ and $__2$, $Prod$ holds for $Nat$ and $Nat$.",
    "output": "postulate p_ord_aux : (_ : Nat) -> (__1 : Nat) -> (__2 : Nat) -> Prod Nat Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_O. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all elements $b$ of $B$, $lstar$ holds for $B$ and $R$ and $0$ and $b$ and $b$.",
    "output": "postulate lstar_O : (B : Set) -> (R : relation B) -> (b : B) -> lstar B R 0 b b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_distr. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $R$ of $Dop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, for all elements $a$ of $B$, $let_mop$ applied to $n$ and $p$ and $B$ and $nil$ and $R$ and $f$ and $a$ and $a$ and $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $let_aop$ applied to $n$ and $p$ and $B$ and $nil$ and $R$ and $f$ and $a$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $let_aop$ applied to $n$ and $p$ and $B$ and $nil$ and $R$ and $f$ and $a$ and the function that maps $i$ to $let_mop$ applied to $n$ and $p$ and $B$ and $nil$ and $R$ and $f$ and $a$ and $a$ and $f$ applied to $i$.",
    "output": "postulate bigop_distr : (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (R : Dop B nil) -> (f : (_ : Nat) -> B) -> (a : B) -> Eq (let_mop n p B nil R f a a (bigop n (\\ i : Nat -> p i) B nil (aop__o__op B nil (let_aop n p B nil R f a)) (\\ i : Nat -> f i))) (bigop n (\\ i : Nat -> p i) B nil (aop__o__op B nil (let_aop n p B nil R f a)) (\\ i : Nat -> let_mop n p B nil R f a a (f i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_1. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $1$ is equal to $1$.",
    "output": "postulate pi_1 : (n : Nat) -> (p : (_ : Nat) -> bool) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> 1)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transitive_lt. $transitive$ holds for $Nat$ and $Lt$.",
    "output": "postulate transitive_lt : transitive Nat Lt"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_exists_to_forall. For all functions $P$ from natural numbers to propositions, for all natural numbers $n$, if it is not the case that $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $P$ applied to $i$, then for all natural numbers $i$, if $i$ is less than $n$, then it is not the case that $P$ holds for $i$.",
    "output": "postulate not_exists_to_forall : (P : (_ : Nat) -> Prop) -> (n : Nat) -> (_ : not (ex Nat (\\ i : Nat -> and (Lt i n) (P i)))) -> (i : Nat) -> (__1 : Lt i n) -> not (P i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_r. Let $n$ and $m$ be natural numbers. Then the greatest common divisor of $n$ and $m$ is divisible by $m$.",
    "output": "postulate divides_gcd_r : (n : Nat) -> (m : Nat) -> divisible (gcd n m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_S_pred. For all natural numbers $n$ and $m$, the difference of $n$ and the sum of $m$ and $1$ is equal to $pred$ applied to the difference of $n$ and $m$.",
    "output": "postulate eq_minus_S_pred : (n : Nat) -> (m : Nat) -> Eq (minus n (plus m 1)) (pred (minus n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_O_to_eq. Let $n$ be a natural number. Then if $n$ is less than or equal to $0$, then $0$ is equal to $n$.",
    "output": "postulate le_n_O_to_eq : (n : Nat) -> (_ : Leq n 0) -> Eq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15623. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15623 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp1. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_883$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_883$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_883$.",
    "output": "postulate Aop_rect_CProp1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_883 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_883 : Aop A _nil) -> Q_ x_883"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_gcd_aux. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $p$, then if $0$ is less than $n$, then if $n$ is divisible by $m$, then $gcd_aux$ applied to $p$ and $m$ and $n$ is equal to $n$.",
    "output": "postulate divides_to_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 p) -> (__1 : Lt 0 n) -> (__2 : divisible n m) -> Eq (gcd_aux p m n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type5. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_893$ of $ACop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_893$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_893$.",
    "output": "postulate ACop_rect_Type5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_893 : ACop A _nil) -> Type5) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_893 : ACop A _nil) -> Q_ x_893"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_ab. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then $ex$ holds for $Nat$ and the function that maps $x$ to the conjunction of $congruent$ applied to $x$ and $a$ and $m$ and $congruent$ applied to $x$ and $b$ and $n$.",
    "output": "postulate congruent_ab : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : Eq (gcd n m) 1) -> ex Nat (\\ x : Nat -> and (congruent x a m) (congruent x b n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp3. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_847$ of $Lt$ of $_r$ and $_m$ and elements $x_846$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_847$ and $x_846$, for all elements $x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_845$.",
    "output": "postulate div_mod_spec_rect_CProp3 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_845 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_847 : Lt _r _m) -> (x_846 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_847 x_846)) -> (x_845 : div_mod_spec _n _m _q _r) -> Q_ x_845"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_nth_prime. Let $p$ be a natural number. Then if $p$ is prime, then $ex$ holds for $Nat$ and the function that maps $i$ to $Eq$ applied to $nth_prime$ applied to $i$ and $p$.",
    "output": "postulate prime_to_nth_prime : (p : Nat) -> (_ : prime p) -> ex Nat (\\ i : Nat -> Eq (nth_prime i) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp0. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_857$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_859$ of $Lt$ of $_r$ and $_m$ and elements $x_858$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_859$ and $x_858$, for all elements $x_857$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_857$.",
    "output": "postulate div_mod_spec_rect_CProp0 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_857 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_859 : Lt _r _m) -> (x_858 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_859 x_858)) -> (x_857 : div_mod_spec _n _m _q _r) -> Q_ x_857"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $n$, if the exponentiation of $2$ and $7$ is less than or equal to $n$, then for all natural numbers $p$, if the sum of the square root of the product of $2$ and $n$ and $1$ is less than or equal to $p$, then if $p$ is less than the sum of the product of $2$ and $n$ and $1$, then if $leb$ applied to $2$ and $k$ applied to the product of $2$ and $n$ and $p$ is equal to $true$, then if the product of $2$ and $n$ is less than the exponentiation of $p$ and $2$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (len : Leq (pow 2 7) n) -> (p : Nat) -> (lep : Leq (plus (sqrt (times 2 n)) 1) p) -> (ltp : Lt p (plus (times 2 n) 1)) -> (Hc : Eq (leb 2 (k (times 2 n) p)) true) -> (H2n : Lt (times 2 n) (pow p 2)) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_3. $Psi (3)= 6$.",
    "output": "postulate Psi_3 : Eq (Psi 3) 6"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_lstar_r. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $lstar_r$ holds for $B$ and $R$ and $l$ and $b1$ and $b2$.",
    "output": "postulate lstar_lstar_r : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R l b1 b2) -> lstar_r B R l b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type0. For all functions $Q_$ from natural numbers $_x_389$ to sets, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_390$ and elements $_x_392$ of $Q_$ of $x_390$ to elements of $Q_$ of the sum of $x_390$ and $1$, for all natural numbers $x_389$, $Q_$ holds for $x_389$.",
    "output": "postulate nat_rect_Type0 : (Q_ : (_x_389 : Nat) -> Set) -> (_H_O : Q_ 0) -> (_H_S : (x_390 : Nat) -> (_x_392 : Q_ x_390) -> Q_ (plus x_390 1)) -> (x_389 : Nat) -> Q_ x_389"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ltransitive. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, $ltransitive$ holds for $B$ and $lstar$ applied to $B$ and $R$.",
    "output": "postulate lstar_ltransitive : (B : Set) -> (R : relation B) -> ltransitive B (lstar B R)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_mod_m_m. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then $mod$ applied to $n$ and $m$ is less than $m$.",
    "output": "postulate lt_mod_m_m : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Lt (mod n m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_range. For all sets $_A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $range$ of $_A$ to elements of $return_sort$, for all functions $case_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $return_type$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $z$ of $range$ of $_A$, $return_type$ holds for $z$.",
    "output": "postulate match_range : (_A : Set) -> (return_sort : Sort) -> (return_type : (z : range _A) -> return_sort) -> (case_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> return_type (mk_range _A _enum _upto _filter)) -> (z : range _A) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_nth_prime_to_not_prime. Let $n$ and $m$ be natural numbers. Then if $nth_prime$ applied to $n$ is less than $m$, then if $m$ is less than $nth_prime$ applied to the sum of $n$ and $1$, then $m$ is not prime.",
    "output": "postulate lt_nth_prime_to_not_prime : (n : Nat) -> (m : Nat) -> (_ : Lt (nth_prime n) m) -> (__1 : Lt m (nth_prime (plus n 1))) -> not (prime m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides_true. For all lists $l$ of natural numbers, for all natural numbers $n$, if $list_divides$ applied to $l$ and $n$ is equal to $true$, then $ex$ holds for $Nat$ and the function that maps $p$ to the conjunction of $mem$ applied to $Nat$ and $p$ and $l$ and $divisible$ applied to $p$ and $n$.",
    "output": "postulate list_divides_true : (l : list Nat) -> (n : Nat) -> (_ : Eq (list_divides l n) true) -> ex Nat (\\ p : Nat -> and (mem Nat p l) (divisible p n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_exp. For all natural numbers $n$ and $m$ and $p$, the product of the exponentiation of $n$ and $p$ and the exponentiation of $m$ and $p$ is equal to the exponentiation of the product of $n$ and $m$ and $p$.",
    "output": "postulate times_exp : (n : Nat) -> (m : Nat) -> (p : Nat) -> Eq (times (pow n p) (pow m p)) (pow (times n m) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_O_l. Let $m$ be a natural number. Then the greatest common divisor of $0$ and $m$ is equal to $m$.",
    "output": "postulate gcd_O_l : (m : Nat) -> Eq (gcd 0 m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $n$ and $x2515$ and $x2516$ be natural numbers. Then $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp2. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1680$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1681$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp2 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1680 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1681 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_log2_sqrt. For all natural numbers $n$, if the exponentiation of $2$ and $4$ is less than or equal to $n$, then the logarithm of $2$ and $n$ is less than or equal to the square root of $n$.",
    "output": "postulate le_log2_sqrt : (n : Nat) -> (_ : Leq (pow 2 4) n) -> Leq (log 2 n) (sqrt n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_prod. For all natural numbers $k1$ and $k2$, for all functions $p1$ from natural numbers to booleans, for all functions $p2$ from natural numbers and natural numbers $__1$ to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers and natural numbers $__1$ to elements of $B$, $bigop$ applied to $k1$ and the function that maps $x$ to $p1$ applied to $x$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $x$ to $bigop$ applied to $k2$ and the function that maps $i$ to $p2$ applied to $x$ and $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $x$ and $i$ is equal to $bigop$ applied to the product of $k1$ and $k2$ and the function that maps $i$ to $andb$ applied to $p1$ applied to the quotient of $i$ and $k2$ and $p2$ applied to the quotient of $i$ and $k2$ and $mod$ applied to $i$ and $k2$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to the quotient of $i$ and $k2$ and $mod$ applied to $i$ and $k2$.",
    "output": "postulate bigop_prod : (k1 : Nat) -> (k2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> (__1 : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> (__1 : Nat) -> B) -> Eq (bigop k1 (\\ x : Nat -> p1 x) B nil (op B nil op) (\\ x : Nat -> bigop k2 (\\ i : Nat -> p2 x i) B nil (op B nil op) (\\ i : Nat -> f x i))) (bigop (times k1 k2) (\\ i : Nat -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op B nil op) (\\ i : Nat -> f (div i k2) (mod i k2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp5. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_931$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_931$ of $range$ of $_A$, $Q_$ holds for $x_931$.",
    "output": "postulate range_rect_CProp5 : (_A : Set) -> (Q_ : (_x_931 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_931 : range _A) -> Q_ x_931"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B2. Let $_n$ be a natural number. Then $Nat$.",
    "output": "postulate B2 : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type0_body. For all functions $Q_$ from natural numbers $_x_389$ to sets, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_390$ and elements $_x_392$ of $Q_$ of $x_390$ to elements of $Q_$ of the sum of $x_390$ and $1$, for all natural numbers $x_389$, $Q_$ holds for $x_389$.",
    "output": "postulate nat_rect_Type0_body : (Q_ : (_x_389 : Nat) -> Set) -> (_H_O : Q_ 0) -> (_H_S : (x_390 : Nat) -> (_x_392 : Q_ x_390) -> Q_ (plus x_390 1)) -> (x_389 : Nat) -> Q_ x_389"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus. For all natural numbers $n1$ and $n2$ and $m1$ and $m2$, if $n1$ is less than or equal to $n2$, then if $m1$ is less than or equal to $m2$, then the sum of $n1$ and $m1$ is less than or equal to the sum of $n2$ and $m2$.",
    "output": "postulate le_plus : (n1 : Nat) -> (n2 : Nat) -> (m1 : Nat) -> (m2 : Nat) -> (_ : Leq n1 n2) -> (__1 : Leq m1 m2) -> Leq (plus n1 m1) (plus n2 m2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp0. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1758$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1759$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1758 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1759 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_to_bijn. Let $n$ be a natural number. Then for all functions $f$ from natural numbers to natural numbers, for all elements $__$ of $permut$ of $f$ and $n$, $bijn$ holds for $f$ and $n$.",
    "output": "postulate permut_to_bijn : (n : Nat) -> (f : (_ : Nat) -> Nat) -> (_ : permut f n) -> bijn f n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp1. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1620$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1621$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp1 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1620 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1621 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_leb_false. Let $n$ and $m$ be natural numbers. Then if $m$ is less than $n$, then $leb$ applied to $n$ and $m$ is equal to absurdity.",
    "output": "postulate lt_to_leb_false : (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> Eq (leb n m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp5. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_959$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_959$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_959$.",
    "output": "postulate Dop_rect_CProp5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_959 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_959 : Dop A _nil) -> Q_ x_959"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_a. For all natural numbers $a$ and $n$ and $m$, if $n$ is less than or equal to $m$, then $n$ is less than or equal to the sum of $a$ and $m$.",
    "output": "postulate le_plus_a : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq n (plus a m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Reflexive_divides. $reflexive$ holds for $Nat$ and $divisible$.",
    "output": "postulate reflexive_divides : reflexive Nat divisible"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_times_SO_to_gcd_SO. Let $m$ and $n$ and $p$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $p$, then if the greatest common divisor of $m$ and the product of $n$ and $p$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to $1$.",
    "output": "postulate gcd_times_SO_to_gcd_SO : (m : Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 p) -> (__2 : Eq (gcd m (times n p)) 1) -> Eq (gcd m n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Square_S. Let $a$ be a natural number. Then the exponentiation of the sum of $a$ and $1$ and $2$ is equal to the sum of the sum of the exponentiation of $a$ and $2$ and the product of $2$ and $a$ and $1$.",
    "output": "postulate square_S : (a : Nat) -> Eq (pow (plus a 1) 2) (plus (plus (pow a 2) (times 2 a)) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fact_minus. For all natural numbers $n$ and $k$, if $k$ is less than $n$, then the product of the factorial of the difference of $n$ and the sum of $k$ and $1$ and the difference of $n$ and $k$ is equal to the factorial of the difference of $n$ and $k$.",
    "output": "postulate fact_minus : (n : Nat) -> (k : Nat) -> (_ : Lt k n) -> Eq (times (factorial (minus n (plus k 1))) (minus n k)) (factorial (minus n k))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_singlevalued. For all sets $B$, for all elements $R$ of $relation2$ of $B$ and $B$, for all elements $__$ of $singlevalued$ of $B$ and $B$ and $R$, for all natural numbers $l$, $singlevalued$ holds for $B$ and $B$ and $lstar$ applied to $B$ and $R$ and $l$.",
    "output": "postulate lstar_singlevalued : (B : Set) -> (R : relation2 B B) -> (_ : singlevalued B B R) -> (l : Nat) -> singlevalued B B (lstar B R l)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_0. Let $n$ be a natural number. Then for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, $bigop$ applied to the sum of $n$ and $1$ and the function that maps $i$ to $true$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to the sum of $i$ and $1$ and $f$ applied to $0$.",
    "output": "postulate bigop_0 : (n : Nat) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> Eq (bigop (plus n 1) (\\ i : Nat -> true) B nil (op B nil op) (\\ i : Nat -> f i)) (op B nil op (bigop n (\\ i : Nat -> true) B nil (op B nil op) (\\ i : Nat -> f (plus i 1))) (f 0))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then we can say that $__$ is greater than or equal to $__1$.",
    "output": "postulate Geq : (_ : Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then we can say that $__$ is greater than $__1$.",
    "output": "postulate Gt : (_ : Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_ord_rem. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then $0$ is less than $ord_rem$ applied to $n$ and $p$.",
    "output": "postulate lt_O_ord_rem : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Lt 0 (ord_rem n p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max. For all natural numbers $_n$, for all functions $_f$ from natural numbers to booleans, $Nat$.",
    "output": "postulate max : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_divides_body. Let $__$ be a list of natural numbers. Then for all natural numbers $__1$, $bool$.",
    "output": "postulate list_divides_body : (_ : list Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc_n_n. For all natural numbers $n$, $bc$ applied to $n$ and $n$ is equal to $1$.",
    "output": "postulate bc_n_n : (n : Nat) -> Eq (bc n n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp4_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_875$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_875$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_875$.",
    "output": "postulate Aop_rect_CProp4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_875 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_875 : Aop A _nil) -> Q_ x_875"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim. Let $__$ and $__1$ be natural numbers. Then for all lists $__2$ of natural numbers, $list$ holds for $Nat$.",
    "output": "postulate lprim : (_ : Nat) -> (__1 : Nat) -> (__2 : list Nat) -> list Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_exp. Let $n$ and $m$ and $i$ be natural numbers. Then if $0$ is less than $m$, then if $mod$ applied to $n$ and $m$ is not equal to $0$, then for all natural numbers $p$, if $i$ is less than or equal to $p$, then $p_ord_aux$ applied to $p$ and the product of the exponentiation of $m$ and $i$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $i$ and $n$.",
    "output": "postulate p_ord_exp : (n : Nat) -> (m : Nat) -> (i : Nat) -> (_ : Lt 0 m) -> (__1 : not (Eq (mod n m) 0)) -> (p : Nat) -> (__2 : Leq i p) -> Eq (p_ord_aux p (times (pow m i) n) m) (mk_Prod Nat Nat i n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Commutative_gcd. Let $n$ and $m$ be natural numbers. Then the greatest common divisor of $n$ and $m$ is equal to the greatest common divisor of $m$ and $n$.",
    "output": "postulate commutative_gcd : (n : Nat) -> (m : Nat) -> Eq (gcd n m) (gcd m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_ltransitive. For all sets $B$, for all elements $R$ of $relation$ of $B$, $inv_ltransitive$ holds for $B$ and $lstar$ applied to $B$ and $R$.",
    "output": "postulate lstar_inv_ltransitive : (B : Set) -> (R : relation B) -> inv_ltransitive B (lstar B R)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type4_body. For all functions $Q_$ from natural numbers $_x_369$ to elements of $Type4$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_370$ and elements $_x_372$ of $Q_$ of $x_370$ to elements of $Q_$ of the sum of $x_370$ and $1$, for all natural numbers $x_369$, $Q_$ holds for $x_369$.",
    "output": "postulate nat_rect_Type4_body : (Q_ : (_x_369 : Nat) -> Type4) -> (_H_O : Q_ 0) -> (_H_S : (x_370 : Nat) -> (_x_372 : Q_ x_370) -> Q_ (plus x_370 1)) -> (x_369 : Nat) -> Q_ x_369"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_divides. Let $_n$ and $_m$ be natural numbers. Then for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $divisible$ of $_n$ and $_m$ to elements of $return_sort$, for all functions $case_quotient$ from natural numbers $q$ and elements of $Eq$ of $_m$ and the product of $_n$ and $q$ to elements of $return_type$ of $quotient$ applied to $_n$ and $_m$ and $q$ and $__$, if $_n$ is divisible by $_m$, then $return_type$ holds for $z$.",
    "output": "postulate match_divides : (_n : Nat) -> (_m : Nat) -> (return_sort : Sort) -> (return_type : (z : divisible _n _m) -> return_sort) -> (case_quotient : (q : Nat) -> (_ : Eq _m (times _n q)) -> return_type (quotient _n _m q __)) -> (z : divisible _n _m) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "SameF_upto_le. Let $A$ be a set. Then for all functions $f$ and $g$ from natural numbers to elements of $A$, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then for all elements $__1$ of $sameF_upto$ of $m$ and $A$ and $f$ and $g$, $sameF_upto$ holds for $n$ and $A$ and $f$ and $g$.",
    "output": "postulate sameF_upto_le : (A : Set) -> (f : (_ : Nat) -> A) -> (g : (_ : Nat) -> A) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> (__1 : sameF_upto m A f g) -> sameF_upto n A f g"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_body. For all sets $A$, for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_941$, $bool$.",
    "output": "postulate filter_body : (A : Set) -> (_xxx : range A) -> (_x_941 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_ACop. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $ACop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $case_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $return_type$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $z$ of $ACop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate match_ACop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : ACop A _nil) -> return_sort) -> (case_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> return_type (mk_ACop A _nil aop _comm)) -> (z : ACop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_n_O. Let $n$ be a natural number. Then $1$ is equal to the exponentiation of $n$ and $0$.",
    "output": "postulate exp_n_O : (n : Nat) -> Eq 1 (pow n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sub_lt. Let $A$ be a set. Then for all functions $e$ from natural numbers to elements of $A$, for all functions $p$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $sub_hk$ holds for the function that maps $x$ to $x$ and the function that maps $x$ to $x$ and $A$ and $mk_range$ applied to $A$ and $e$ and $n$ and $p$ and $mk_range$ applied to $A$ and $e$ and $m$ and $p$.",
    "output": "postulate sub_lt : (A : Set) -> (e : (_ : Nat) -> A) -> (p : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> sub_hk (\\ x : Nat -> x) (\\ x : Nat -> x) A (mk_range A e n p) (mk_range A e m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_inv_ind. Let $x1$ and $x2$ be natural numbers. Then if $x1$ is divisible by $x2$, then for all functions $P$ from elements $_z2006$ of $divisible$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from natural numbers $q$ and elements $x_1193$ of $Eq$ of $x2$ and the product of $x1$ and $q$ and elements $_z2007$ of $Eq$ of $Hterm$ and $quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$ to elements of $P$ of $quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$, $P$ holds for $Hterm$.",
    "output": "postulate divides_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (Hterm : divisible x1 x2) -> (P : (_z2006 : divisible x1 x2) -> Prop) -> (_H1 : (q : Nat) -> (x_1193 : Eq x2 (times x1 q)) -> (_z2007 : Eq Hterm (quotient x1 x2 q x_1193)) -> P (quotient x1 x2 q x_1193)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_body. Let $A$ be a set. Then for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_941$, $bool$.",
    "output": "postulate filter_body : (A : Set) -> (_xxx : range A) -> (_x_941 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type5_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_893$ of $ACop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_893$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_893$.",
    "output": "postulate ACop_rect_Type5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_893 : ACop A _nil) -> Type5) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_893 : ACop A _nil) -> Q_ x_893"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_rem_eq. For all natural numbers $n$ and $p$, $ord_rem$ applied to $n$ and $p$ is equal to $snd$ applied to $Nat$ and $Nat$ and $p_ord$ applied to $n$ and $p$.",
    "output": "postulate ord_rem_eq : (n : Nat) -> (p : Nat) -> Eq (ord_rem n p) (snd Nat Nat (p_ord n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1585. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $m$ is divisible by $n$, then for all natural numbers $d$, if $0$ is equal to $m$, then if $n$ is equal to the product of $m$ and $d$, then $0$ is equal to $n$.",
    "output": "postulate let_clause_1585 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 n) -> (_clearme : divisible m n) -> (d : Nat) -> (auto : Eq 0 m) -> (auto' : Eq n (times m d)) -> Eq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Null. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Dop$ of $A$ and $nil$, for all elements $a$ of $A$, $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ is equal to $nil$.",
    "output": "postulate null : (A : Set) -> (nil : A) -> (xxx : Dop A nil) -> (a : A) -> Eq (prod A nil xxx a nil) nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_gcd_SO_to_not_divides. For all natural numbers $n$ and $m$, if $1$ is less than $n$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then $n$ is not divisible by $m$.",
    "output": "postulate eq_gcd_SO_to_not_divides : (n : Nat) -> (m : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (gcd n m) 1) -> not (divisible n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sum. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, $ACop$ holds for $A$ and $nil$.",
    "output": "postulate sum : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> ACop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_spec_inv_ind. Let $x1$ and $x2$ be natural numbers. Then for all functions $x3$ from natural numbers to booleans, for all natural numbers $x4$, for all elements $_Hterm$ of $min_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from natural numbers $_z1890$ to propositions, for all functions $_H1$ from natural numbers $m$ and elements $_x_1080$ of $Leq$ of $x2$ and $m$ and elements $_x_1079$ of $Lt$ of $m$ and the sum of $x1$ and $x2$ and elements $_x_1078$ of $Eq$ of $x3$ applied to $m$ and $true$ and functions $_x_1077$ from natural numbers $i$ and elements of $Leq$ of $x2$ and $i$ and elements $__1$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $x3$ applied to $i$ and absurdity and elements $_z1891$ of $Eq$ of $x4$ and $m$ to elements of $P$ of $m$, for all functions $_H2$ from functions $_x_1081$ from natural numbers $i$ and elements of $Leq$ of $x2$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $x1$ and $x2$ to elements of $Eq$ of $x3$ applied to $i$ and absurdity and elements $_z1891$ of $Eq$ of $x4$ and the sum of $x1$ and $x2$ to elements of $P$ of the sum of $x1$ and $x2$, $P$ holds for $x4$.",
    "output": "postulate min_spec_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (x3 : (_ : Nat) -> bool) -> (x4 : Nat) -> (_Hterm : min_spec x1 x2 x3 x4) -> (P : (_z1890 : Nat) -> Prop) -> (_H1 : (m : Nat) -> (_x_1080 : Leq x2 m) -> (_x_1079 : Lt m (plus x1 x2)) -> (_x_1078 : Eq (x3 m) true) -> (_x_1077 : (i : Nat) -> (_ : Leq x2 i) -> (__1 : Lt i m) -> Eq (x3 i) false) -> (_z1891 : Eq x4 m) -> P m) -> (_H2 : (_x_1081 : (i : Nat) -> (_ : Leq x2 i) -> (__1 : Lt i (plus x1 x2)) -> Eq (x3 i) false) -> (_z1891 : Eq x4 (plus x1 x2)) -> P (plus x1 x2)) -> P x4"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp1_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_911$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_911$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_911$.",
    "output": "postulate ACop_rect_CProp1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_911 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_911 : ACop A _nil) -> Q_ x_911"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_O_f. For all functions $f$ from natural numbers to booleans, for all natural numbers $b$, $min$ applied to $0$ and $b$ and $f$ is equal to $b$.",
    "output": "postulate min_O_f : (f : (_ : Nat) -> bool) -> (b : Nat) -> Eq (min 0 b f) b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15441. Let $p$ and $q$ be natural numbers. Then for all functions $Hind$ from natural numbers $m$ and natural numbers $n$ and elements of $Lt$ of $0$ and $n$ and elements $__1$ of $Leq$ of $n$ and $m$ and elements $__2$ of $Leq$ of $n$ and $q$ to elements of $ex$ of $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and $gcd_aux$ applied to $q$ and $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and $gcd_aux$ applied to $q$ and $m$ and $n$, for all natural numbers $m$ and $n$, if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to the sum of $q$ and $1$, then if $n$ is not divisible by $m$, then for all natural numbers $a$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ and $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, for all natural numbers $b$, if the difference of the product of $a$ and $mod$ applied to $m$ and $n$ and the product of $b$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$ or the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then if the difference of the product of $b$ and $n$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$, then the difference of the product of $n$ and $b$ and the product of $a$ and $mod$ applied to $m$ and $n$ is equal to $gcd_aux$ applied to $q$ and $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate let_clause_15441 : (p : Nat) -> (q : Nat) -> (Hind : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n q) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd_aux q m n)) (Eq (minus (times b m) (times a n)) (gcd_aux q m n))))) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (lenm : Leq n m) -> (lenS : Leq n (plus q 1)) -> (ndivnm : not (divisible n m)) -> (a : Nat) -> (_clearme : ex Nat (\\ b : Nat -> or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n))))) -> (b : Nat) -> (_clearme0 : or (Eq (minus (times a (mod m n)) (times b n)) (gcd_aux q n (mod m n))) (Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n)))) -> (H : Eq (minus (times b n) (times a (mod m n))) (gcd_aux q n (mod m n))) -> Eq (minus (times n b) (times a (mod m n))) (gcd_aux q n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_CProp1. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1554$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1555$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp1 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1554 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1555 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_exp. For all natural numbers $n$ and $m$ and $i$, if $0$ is less than $m$, then if $mod$ applied to $n$ and $m$ is not equal to $0$, then for all natural numbers $p$, if $i$ is less than or equal to $p$, then $p_ord_aux$ applied to $p$ and the product of the exponentiation of $m$ and $i$ and $n$ and $m$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $i$ and $n$.",
    "output": "postulate p_ord_exp : (n : Nat) -> (m : Nat) -> (i : Nat) -> (_ : Lt 0 m) -> (__1 : not (Eq (mod n m) 0)) -> (p : Nat) -> (__2 : Leq i p) -> Eq (p_ord_aux p (times (pow m i) n) m) (mk_Prod Nat Nat i n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp_to_lt1. Let $a$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $a$, then if the exponentiation of $n$ and $a$ is less than the exponentiation of $m$ and $a$, then $n$ is less than $m$.",
    "output": "postulate lt_exp_to_lt1 : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 a) -> (__1 : Lt (pow n a) (pow m a)) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim_invariant. Let $n$ and $i$ be natural numbers. Then for all lists $acc$ of natural numbers, if $1$ is less than $i$, then for all elements $__1$ of $primes_below$ of $acc$ and $i$, $primes_below$ holds for $lprim$ applied to $n$ and $i$ and $acc$ and the sum of $n$ and $i$.",
    "output": "postulate lprim_invariant : (n : Nat) -> (i : Nat) -> (acc : list Nat) -> (_ : Lt 1 i) -> (__1 : primes_below acc i) -> primes_below (lprim n i acc) (plus n i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1607. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $m$ and $d$ and the product of $n$ and $c$.",
    "output": "postulate let_clause_1607 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (gcd m n) (minus (times m d) (times n c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_pi. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$ and $p$, if $0$ is less than $p$, then $congruent$ holds for $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $n$ and the function that maps $i$ to $true$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $mod$ applied to $f$ applied to $i$ and $p$ and $p$.",
    "output": "postulate congruent_pi : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> congruent (bigop n (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> f i)) (bigop n (\\ i : Nat -> true) Nat 1 times (\\ i : Nat -> mod (f i) p)) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim_ex. $lprim (8 , 2 , nil (Nat))= cons (Nat , 2 , cons (Nat , 3 , cons (Nat , 5 , cons (Nat , 7 , nil (Nat)))))$.",
    "output": "postulate lprim_ex : Eq (lprim 8 2 (nil Nat)) (cons Nat 2 (cons Nat 3 (cons Nat 5 (cons Nat 7 (nil Nat)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_mod_to_divides. For all natural numbers $n$ and $m$ and $q$, if $0$ is less than $q$, then if $mod$ applied to $n$ and $q$ is equal to $mod$ applied to $m$ and $q$, then $q$ is divisible by the difference of $n$ and $m$.",
    "output": "postulate eq_mod_to_divides : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> (__1 : Eq (mod n q) (mod m q)) -> divisible q (minus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_mod. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then $n$ is equal to $mod$ applied to $n$ and $m$.",
    "output": "postulate le_to_mod : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq n (mod n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_to_plus. For all natural numbers $n$ and $m$ and $p$, if $m$ is less than or equal to $n$, then if the difference of $n$ and $m$ is equal to $p$, then $n$ is equal to the sum of $m$ and $p$.",
    "output": "postulate minus_to_plus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq m n) -> (__1 : Eq (minus n m) p) -> Eq n (plus m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_n_n. Let $n$ be a natural number. Then if $0$ is less than $n$, then the quotient of $n$ and $n$ is equal to $1$.",
    "output": "postulate div_n_n : (n : Nat) -> (_ : Lt 0 n) -> Eq (div n n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type4. Let $Q_$ be a function from natural numbers $_x_369$ to elements of $Type4$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_370$ and elements $_x_372$ of $Q_$ of $x_370$ to elements of $Q_$ of the sum of $x_370$ and $1$, for all natural numbers $x_369$, $Q_$ holds for $x_369$.",
    "output": "postulate nat_rect_Type4 : (Q_ : (_x_369 : Nat) -> Type4) -> (_H_O : Q_ 0) -> (_H_S : (x_370 : Nat) -> (_x_372 : Q_ x_370) -> Q_ (plus x_370 1)) -> (x_369 : Nat) -> Q_ x_369"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_discr. For all sets $a1$, for all elements $a2$ of $a1$, for all elements $x$ and $y$ of $Dop$ of $a1$ and $a2$, if $x$ is equal to $y$, then $match_Dop$ holds for $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ and $t2$ and $t3$ to $match_Dop$ applied to $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ and $u2$ and $u3$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $e1$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R2$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x11$ applied to $a$ and $a2$ and $a2$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and the function that maps $e2$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R3$ applied to $ACop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x11$ applied to $a$ and $a2$ and $a2$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and the function that maps $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p11$ and $x21$ and $p2$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $b$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $c$ to $Eq$ applied to $x11$ applied to $a$ and $aop__o__op$ applied to $a1$ and $a2$ and $x01$ and $b$ and $c$ and $aop__o__op$ applied to $a1$ and $a2$ and $x01$ and $x11$ applied to $a$ and $b$ and $x11$ applied to $a$ and $c$ applied to $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ and $t3$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and $e2$ and $u3$ and the function that maps $_e3$ to $P$ and the function that maps $_z61$ to $P$ and $y$ and $x$.",
    "output": "postulate Dop_discr : (a1 : Set) -> (a2 : a1) -> (x : Dop a1 a2) -> (y : Dop a1 a2) -> (_e : Eq x y) -> match_Dop a1 a2 (plus Type2 1) (\\ _ : Dop a1 a2 -> univ Type2) (\\ t0 : ACop a1 a2 -> \\ t1 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ t2 : ((a : a1) -> Eq (t1 a a2) a2) -> \\ t3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (t1 a (aop__o__op a1 a2 t0 b c)) (aop__o__op a1 a2 t0 (t1 a b) (t1 a c))) -> match_Dop a1 a2 (plus Type2 1) (\\ _ : Dop a1 a2 -> univ Type2) (\\ u0 : ACop a1 a2 -> \\ u1 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ u2 : ((a : a1) -> Eq (u1 a a2) a2) -> \\ u3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (u1 a (aop__o__op a1 a2 u0 b c)) (aop__o__op a1 a2 u0 (u1 a b) (u1 a c))) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (ACop a1 a2) t0) u0) (\\ e0 : Eq (R0 (ACop a1 a2) t0) u0 -> prod Prop Type1 (Eq (R1 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 u0 e0) u1) (\\ e1 : Eq (R1 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 u0 e0) u1 -> prod Prop Type1 (Eq (R2 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) (\\ e2 : Eq (R2 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2 -> prod Prop Type1 (Eq (R3 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x01 p01 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x12 a a2) a2)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x11 a a2) a2) -> \\ p2 : Eq (R2 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) x02 p02 -> \\ __1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> \\ x10 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p10 : Eq (R1 (ACop a1 a2) t0 (\\ x011 : ACop a1 a2 -> \\ p011 : Eq t0 x011 -> prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x10 a a2) a2)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x11 a (aop__o__op a1 a2 x01 b c)) (aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) (\\ _e3 : Eq (R3 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x01 p01 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x12 a a2) a2)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x11 a a2) a2) -> \\ p2 : Eq (R2 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) x02 p02 -> \\ __1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> \\ x10 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p10 : Eq (R1 (ACop a1 a2) t0 (\\ x011 : ACop a1 a2 -> \\ p011 : Eq t0 x011 -> prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x10 a a2) a2)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x11 a (aop__o__op a1 a2 x01 b c)) (aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3 -> P))))) (\\ _z61 : ((e0 : Eq (R0 (ACop a1 a2) t0) u0) -> (e1 : Eq (R1 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 u0 e0) u1) -> (e2 : Eq (R2 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) -> (_e3 : Eq (R3 (ACop a1 a2) t0 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 __) t2 (\\ x0 : ACop a1 a2 -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x0 p0 -> \\ p1 : Eq (R1 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x11 a a2) a2)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (ACop a1 a2) t0 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) x01 p01 -> \\ _ : Eq (R1 (ACop a1 a2) t0 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t1 x01 p01) x11 -> (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x12 a a2) a2)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ACop a1 a2 -> \\ p01 : Eq t0 x01 -> \\ x11 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p11 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x11 a a2) a2) -> \\ p2 : Eq (R2 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 (\\ x02 : ACop a1 a2 -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) x02 p02 -> \\ __1 : Eq (R1 (ACop a1 a2) t0 (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t1 x02 p02) x12 -> (\\ x00 : ACop a1 a2 -> \\ p00 : Eq t0 x00 -> \\ x10 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p10 : Eq (R1 (ACop a1 a2) t0 (\\ x011 : ACop a1 a2 -> \\ p011 : Eq t0 x011 -> prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x10 a a2) a2)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x11 a (aop__o__op a1 a2 x01 b c)) (aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord. Let $__$ and $__1$ be natural numbers. Then $Nat$.",
    "output": "postulate ord : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_ind. Let $_n$ and $_m$ be natural numbers. Then for all functions $Q_$ from elements $_x_1192$ of $divisible$ of $_n$ and $_m$ to propositions, for all functions $_H_quotient$ from natural numbers $q$ and elements $x_1193$ of $Eq$ of $_m$ and the product of $_n$ and $q$ to elements of $Q_$ of $quotient$ applied to $_n$ and $_m$ and $q$ and $x_1193$, if $_n$ is divisible by $_m$, then $Q_$ holds for $x_1192$.",
    "output": "postulate divides_ind : (_n : Nat) -> (_m : Nat) -> (Q_ : (_x_1192 : divisible _n _m) -> Prop) -> (_H_quotient : (q : Nat) -> (x_1193 : Eq _m (times _n q)) -> Q_ (quotient _n _m q x_1193)) -> (x_1192 : divisible _n _m) -> Q_ x_1192"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_d_times_gcd. For all natural numbers $m$ and $n$ and $d$ and $c$, if $0$ is less than $c$, then if $d$ is divisible by the product of $c$ and $m$, then if $d$ is divisible by the product of $c$ and $n$, then $d$ is divisible by the product of $c$ and the greatest common divisor of $n$ and $m$.",
    "output": "postulate divides_d_times_gcd : (m : Nat) -> (n : Nat) -> (d : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : divisible d (times c m)) -> (__2 : divisible d (times c n)) -> divisible d (times c (gcd n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_prim4l. Let $n$ be a natural number. Then if $0$ is less than $n$, then the exponentiation of $2$ and the sum of the product of $4$ and $n$ and $1$ is less than or equal to the exponentiation of the product of $4$ and $n$ and the sum of $prim$ applied to the product of $4$ and $n$ and $1$.",
    "output": "postulate le_exp_prim4l : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 (plus (times 4 n) 1)) (pow (times 4 n) (plus (prim (times 4 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_to_min_spec. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$ and $m$, if $min$ applied to $n$ and $b$ and $f$ is equal to $m$, then $min_spec$ holds for $n$ and $b$ and $f$ and $m$.",
    "output": "postulate min_to_min_spec : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (m : Nat) -> (_ : Eq (min n b f) m) -> min_spec n b f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_m_exp_nm. Let $n$ and $m$ be natural numbers. Then if $1$ is less than $n$, then $m$ is less than the exponentiation of $n$ and $m$.",
    "output": "postulate lt_m_exp_nm : (n : Nat) -> (m : Nat) -> (_ : Lt 1 n) -> Lt m (pow n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop__o__op. For all sets $x0$, for all elements $x1$ of $x0$, for all elements $x2$ of $ACop$ of $x0$ and $x1$, for all elements $_x_887$ and $_x_888$ of $x0$, $x0$.",
    "output": "postulate aop__o__op : (x0 : Set) -> (x1 : x0) -> (x2 : ACop x0 x1) -> (_x_887 : x0) -> (_x_888 : x0) -> x0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_or. For all propositions $P$ and $Q$, for all elements $__$ of $decidable$ of $P$, for all elements $__1$ of $decidable$ of $Q$, $decidable$ holds for the disjunction of $P$ and $Q$.",
    "output": "postulate decidable_or : (P : Prop) -> (Q : Prop) -> (_ : decidable P) -> (__1 : decidable Q) -> decidable (or P Q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type2_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_897$ of $ACop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_897$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_897$.",
    "output": "postulate ACop_rect_Type2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_897 : ACop A _nil) -> Type2) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_897 : ACop A _nil) -> Q_ x_897"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ld_to_prime. For all natural numbers $i$, for all lists $acc$ of natural numbers, if $1$ is less than $i$, then for all elements $__1$ of $primes_below$ of $acc$ and $i$, if $list_divides$ applied to $acc$ and $i$ is equal to absurdity, then $i$ is prime.",
    "output": "postulate ld_to_prime : (i : Nat) -> (acc : list Nat) -> (_ : Lt 1 i) -> (__1 : primes_below acc i) -> (__2 : Eq (list_divides acc i) false) -> prime i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp1. Let $n$ and $m$ and $a$ be natural numbers. Then if $0$ is less than $a$, then if $n$ is less than or equal to $m$, then the exponentiation of $n$ and $a$ is less than or equal to the exponentiation of $m$ and $a$.",
    "output": "postulate le_exp1 : (n : Nat) -> (m : Nat) -> (a : Nat) -> (_ : Lt 0 a) -> (__1 : Leq n m) -> Leq (pow n a) (pow m a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp1_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_937$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_937$ of $range$ of $_A$, $Q_$ holds for $x_937$.",
    "output": "postulate range_rect_CProp1_body : (_A : Set) -> (Q_ : (_x_937 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_937 : range _A) -> Q_ x_937"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Enum. For all sets $A$, for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_942$, $A$.",
    "output": "postulate enum : (A : Set) -> (_xxx : range A) -> (_x_942 : Nat) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type3. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1512$ of $Aop$ of $x1$ and $x2$ to elements of $Type3$, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1513$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type3 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1512 : Aop x1 x2) -> Type3) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1513 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_step. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $1$ and $b1$ and $b2$, $R$ holds for $b1$ and $b2$.",
    "output": "postulate lstar_inv_step : (B : Set) -> (R : relation B) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R 1 b1 b2) -> R b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_aux. Let $__$ and $__1$ and $__2$ be natural numbers. Then $Prod$ holds for $Nat$ and $Nat$.",
    "output": "postulate p_ord_aux : (_ : Nat) -> (__1 : Nat) -> (__2 : Nat) -> Prod Nat Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_n_fact_n. For all natural numbers $n$, if $2$ is less than $n$, then $n$ is less than the factorial of $n$.",
    "output": "postulate lt_n_fact_n : (n : Nat) -> (_ : Lt 2 n) -> Lt n (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_ACop. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $aop$ of $Aop$ of $A$ and $nil$, for all functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $nil$ and $aop$ and $b$ and $a$, $ACop$ holds for $A$ and $nil$.",
    "output": "postulate mk_ACop : (A : Set) -> (nil : A) -> (aop : Aop A nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A nil aop a b) (op A nil aop b a)) -> ACop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp5. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_841$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_843$ of $Lt$ of $_r$ and $_m$ and elements $x_842$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_843$ and $x_842$, for all elements $x_841$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_841$.",
    "output": "postulate div_mod_spec_rect_CProp5 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_841 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_843 : Lt _r _m) -> (x_842 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_843 x_842)) -> (x_841 : div_mod_spec _n _m _q _r) -> Q_ x_841"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_1. $Psi (1)= 1$.",
    "output": "postulate Psi_1 : Eq (Psi 1) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_sum. Let $k1$ and $k2$ be natural numbers. Then for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ and $g$ from natural numbers to elements of $B$, $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to $k1$ and the function that maps $i$ to $p1$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $k2$ and the function that maps $i$ to $p2$ applied to $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$ is equal to $bigop$ applied to the sum of $k1$ and $k2$ and the function that maps $i$ to $match_bool$ applied to $Set$ and the function that maps $__$ to $bool$ and $p1$ applied to the difference of $i$ and $k2$ and $p2$ applied to $i$ and $leb$ applied to $k2$ and $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $match_bool$ applied to $Set$ and the function that maps $__$ to $B$ and $f$ applied to the difference of $i$ and $k2$ and $g$ applied to $i$ and $leb$ applied to $k2$ and $i$.",
    "output": "postulate bigop_sum : (k1 : Nat) -> (k2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (g : (_ : Nat) -> B) -> Eq (op B nil op (bigop k1 (\\ i : Nat -> p1 i) B nil (op B nil op) (\\ i : Nat -> f i)) (bigop k2 (\\ i : Nat -> p2 i) B nil (op B nil op) (\\ i : Nat -> g i))) (bigop (plus k1 k2) (\\ i : Nat -> match_bool Set (\\ _ : bool -> bool) (p1 (minus i k2)) (p2 i) (leb k2 i)) B nil (op B nil op) (\\ i : Nat -> match_bool Set (\\ _ : bool -> B) (f (minus i k2)) (g i) (leb k2 i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp2. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1614$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1615$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp2 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1614 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1615 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_ind_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_811$ of $Lt$ of $_r$ and $_m$ and elements $x_810$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_811$ and $x_810$, for all elements $x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_809$.",
    "output": "postulate div_mod_spec_ind_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_809 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_811 : Lt _r _m) -> (x_810 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_811 x_810)) -> (x_809 : div_mod_spec _n _m _q _r) -> Q_ x_809"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n \\in N$. Then we can say that $bertrand$ holds for $_n$.",
    "output": "postulate bertrand : (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_ind. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1500$ of $Aop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1501$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_ind : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1500 : Aop x1 x2) -> Prop) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1501 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type4. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_945$ of $Dop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_945$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_945$.",
    "output": "postulate Dop_rect_Type4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_945 : Dop A _nil) -> Type4) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_945 : Dop A _nil) -> Q_ x_945"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_n_O. For all natural numbers $n$, $0$ is equal to the product of $n$ and $0$.",
    "output": "postulate times_n_O : (n : Nat) -> Eq 0 (times n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Smallest_factor_to_min. Let $n$ be a natural number. Then if $1$ is less than $n$, then $smallest_factor$ applied to $n$ is equal to $min$ applied to $n$ and $2$ and the function that maps $m$ to $eqb$ applied to $mod$ applied to $n$ and $m$ and $0$.",
    "output": "postulate smallest_factor_to_min : (n : Nat) -> (_ : Lt 1 n) -> Eq (smallest_factor n) (min n 2 (\\ m : Nat -> eqb (mod n m) 0))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example7. $primeb (17)= true$.",
    "output": "postulate example7 : Eq (primeb 17) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_aux_mod_aux. For all natural numbers $p$ and $n$ and $m$, $n$ is equal to the sum of the product of $div_aux$ applied to $p$ and $n$ and $m$ and the sum of $m$ and $1$ and $mod_aux$ applied to $p$ and $n$ and $m$.",
    "output": "postulate div_aux_mod_aux : (p : Nat) -> (n : Nat) -> (m : Nat) -> Eq n (plus (times (div_aux p n m) (plus m 1)) (mod_aux p n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. Let $n$ be a natural number. Then if the exponentiation of $2$ and $8$ is less than or equal to $n$, then for all natural numbers $m$, if $3$ is less than or equal to $m$, then if the sum of the logarithm of $2$ and $m$ and $2$ is less than or equal to $m$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : Nat) -> (len : Leq (pow 2 8) n) -> (m : Nat) -> (lt2m : Leq 3 m) -> (Hind : Leq (plus (log 2 m) 2) m) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_square_exp. For all natural numbers $n$, if $3$ is less than $n$, then the exponentiation of $n$ and $2$ is less than or equal to the exponentiation of $2$ and $n$.",
    "output": "postulate le_square_exp : (n : Nat) -> (_ : Lt 3 n) -> Leq (pow n 2) (pow 2 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_plus_l. For all natural numbers $m$, $monotonic$ holds for $Nat$ and $Leq$ and the function that maps $n$ to the sum of $n$ and $m$.",
    "output": "postulate monotonic_le_plus_l : (m : Nat) -> monotonic Nat Leq (\\ n : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $ACop$ of $A$ and $nil$, $Aop$ holds for $A$ and $nil$.",
    "output": "postulate aop_body : (A : Set) -> (nil : A) -> (_xxx : ACop A nil) -> Aop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_S. $injective$ holds for $Nat$ and $Nat$ and $succ$.",
    "output": "postulate injective_S : injective Nat Nat succ"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_m2. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $i$ and $b$, $Nat$.",
    "output": "postulate let_m2 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (i : Nat) -> (b : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1617. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to $1$, then the greatest common divisor of $p$ and $m$ is equal to the difference of the product of $p$ and $a$ and the product of $m$ and $b$.",
    "output": "postulate let_clause_1617 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times a p) (times b m)) (gcd p m)) -> (H0 : Eq (minus (times a p) (times b m)) 1) -> Eq (gcd p m) (minus (times p a) (times m b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_times_r. For all natural numbers $c$, if $0$ is less than $c$, then $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $t$ to the product of $c$ and $t$.",
    "output": "postulate monotonic_lt_times_r : (c : Nat) -> (_ : Lt 0 c) -> monotonic Nat Lt (\\ t : Nat -> times c t)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_ind_body. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all functions $Q_$ from natural numbers $x_1337$ and elements $x_1336$ of $B$ and elements $x_1335$ of $B$ and elements $_x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$ to propositions, for all functions $_H_lstar_r_O$ from elements $b$ of $B$ to elements of $Q_$ of $0$ and $b$ and $b$ and $lstar_r_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_r_S$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements $x_1340$ of $lstar_r$ of $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $B$ and elements $x_1339$ of $_R$ of $b$ and $b2$ and elements $_x_1342$ of $Q_$ of $l$ and $b1$ and $b$ and $x_1340$ to elements of $Q_$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $x_1340$ and $b2$ and $x_1339$, for all natural numbers $x_1337$, for all elements $x_1336$ and $x_1335$ of $B$, for all elements $x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$, $Q_$ holds for $x_1337$ and $x_1336$ and $x_1335$ and $x_1338$.",
    "output": "postulate lstar_r_ind_body : (B : Set) -> (_R : relation B) -> (Q_ : (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (_x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Prop) -> (_H_lstar_r_O : (b : B) -> Q_ 0 b b (lstar_r_O B _R b)) -> (_H_lstar_r_S : (l : Nat) -> (b1 : B) -> (b : B) -> (x_1340 : lstar_r B _R l b1 b) -> (b2 : B) -> (x_1339 : _R b b2) -> (_x_1342 : Q_ l b1 b x_1340) -> Q_ (plus l 1) b1 b2 (lstar_r_S B _R l b1 b x_1340 b2 x_1339)) -> (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Q_ x_1337 x_1336 x_1335 x_1338"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lprim_body. Let $__$ and $__1$ be natural numbers. Then for all lists $__2$ of natural numbers, $list$ holds for $Nat$.",
    "output": "postulate lprim_body : (_ : Nat) -> (__1 : Nat) -> (__2 : list Nat) -> list Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15591. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $0$ is equal to $n$, then if $0$ is divisible by $m$, then for all natural numbers $q$, if $m$ is equal to the product of $0$ and $q$, then $m$ is equal to $n$.",
    "output": "postulate let_clause_15591 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 m) -> (eqn0 : Eq 0 n) -> (_clearme : divisible 0 m) -> (q : Nat) -> (eqm : Eq m (times 0 q)) -> Eq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type2. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1518$ of $Aop$ of $x1$ and $x2$ to elements of $Type2$, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1519$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type2 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1518 : Aop x1 x2) -> Type2) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1519 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nill. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $nil$ and $a$ is equal to $a$.",
    "output": "postulate nill : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx nil a) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_bertrand_to_le_B. For all natural numbers $n$, if the exponentiation of $2$ and $7$ is less than or equal to $n$, then for all elements $__1$ of $not_bertrand$ of $n$, $B$ applied to the product of $2$ and $n$ is less than or equal to the product of the exponentiation of $2$ and the product of $2$ and the quotient of the product of $2$ and $n$ and $3$ and the exponentiation of the product of $2$ and $n$ and $pred$ applied to the quotient of the square root of the product of $2$ and $n$ and $2$.",
    "output": "postulate not_bertrand_to_le_B : (n : Nat) -> (_ : Leq (pow 2 7) n) -> (__1 : not_bertrand n) -> Leq (B (times 2 n)) (times (pow 2 (times 2 (div (times 2 n) 3))) (pow (times 2 n) (pred (div (sqrt (times 2 n)) 2))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_ind. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_915$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_915$ of $range$ of $_A$, $Q_$ holds for $x_915$.",
    "output": "postulate range_ind : (_A : Set) -> (Q_ : (_x_915 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_915 : range _A) -> Q_ x_915"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_p_ord_inv. Let $p$ and $m$ and $x$ be natural numbers. Then if $ord$ applied to $x$ and $p$ is less than $m$, then $mod$ applied to $p_ord_inv$ applied to $p$ and $m$ and $x$ and $m$ is equal to $ord$ applied to $x$ and $p$.",
    "output": "postulate mod_p_ord_inv : (p : Nat) -> (m : Nat) -> (x : Nat) -> (_ : Lt (ord x p) m) -> Eq (mod (p_ord_inv p m x) m) (ord x p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_O. Let $f$ be a function from natural numbers to booleans. Then $max$ applied to $0$ and $f$ is equal to $0$.",
    "output": "postulate max_O : (f : (_ : Nat) -> bool) -> Eq (max 0 f) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $_nil$ be an element of $A$. Then $Aop$ applied to $A$ and $_nil$ is a set.",
    "output": "postulate Aop : (A : Set) -> (_nil : A) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_l$ be a list of natural numbers. Let $_n \\in N$. Then we can say that $primes_all$ holds for $_l$ and $_n$.",
    "output": "postulate primes_all : (_l : list Nat) -> (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mk_Dop. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $sum$ of $ACop$ of $A$ and $nil$, for all functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$, for all functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $nil$ and $nil$, for all functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$, $Dop$ holds for $A$ and $nil$.",
    "output": "postulate mk_Dop : (A : Set) -> (nil : A) -> (sum : ACop A nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a nil) nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A nil sum b c)) (aop__o__op A nil sum (prod a b) (prod a c))) -> Dop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_sigma_p_div. Let $n$ and $q$ be natural numbers. Then if $0$ is less than $q$, then $bigop$ applied to the sum of $n$ and $1$ and the function that maps $m$ to $andb$ applied to $leb$ applied to $1$ and $m$ and $dividesb$ applied to $q$ and $m$ and $Nat$ and $0$ and $plus$ and the function that maps $m$ to $1$ is equal to the quotient of $n$ and $q$.",
    "output": "postulate eq_sigma_p_div : (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> Eq (bigop (plus n 1) (\\ m : Nat -> andb (leb 1 m) (dividesb q m)) Nat 0 plus (\\ m : Nat -> 1)) (div n q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_aop. Let $n$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $R$ of $Dop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, for all elements $a$ of $B$, $ACop$ holds for $B$ and $nil$.",
    "output": "postulate let_aop : (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (R : Dop B nil) -> (f : (_ : Nat) -> B) -> (a : B) -> ACop B nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_transpose_l. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $m$ and $i$ and $j$, if $i$ is less than or equal to $m$, then if $j$ is less than or equal to $m$, then for all elements $__2$ of $permut$ of $f$ and $m$, $permut$ holds for the function that maps $n$ to $transpose$ applied to $i$ and $j$ and $f$ applied to $n$ and $m$.",
    "output": "postulate permut_transpose_l : (f : (_ : Nat) -> Nat) -> (m : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i m) -> (__1 : Leq j m) -> (__2 : permut f m) -> permut (\\ n : Nat -> transpose i j (f n)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_nth_prime. Let $n$ be a natural number. Then $nth_prime$ applied to $n$ is less than $nth_prime$ applied to the sum of $n$ and $1$.",
    "output": "postulate increasing_nth_prime : (n : Nat) -> Lt (nth_prime n) (nth_prime (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_n_n. Let $n$ be a natural number. Then $n$ is divisible by $n$.",
    "output": "postulate divides_n_n : (n : Nat) -> divisible n n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Square_double. For all natural numbers $n$, if $2$ is less than $n$, then the product of the sum of $n$ and $1$ and the sum of $n$ and $1$ is less than or equal to the product of the product of $2$ and $n$ and $n$.",
    "output": "postulate square_double : (n : Nat) -> (_ : Lt 2 n) -> Leq (times (plus n 1) (plus n 1)) (times (times 2 n) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_S_fact. For all natural numbers $n$ and $i$, if $1$ is less than $i$, then if $i$ is less than or equal to $n$, then $i$ is not divisible by the sum of the factorial of $n$ and $1$.",
    "output": "postulate not_divides_S_fact : (n : Nat) -> (i : Nat) -> (_ : Lt 1 i) -> (__1 : Leq i n) -> not (divisible i (plus (factorial n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_n_n. Let $n$ be a natural number. Then if $0$ is less than $n$, then $mod$ applied to $n$ and $n$ is equal to $0$.",
    "output": "postulate mod_n_n : (n : Nat) -> (_ : Lt 0 n) -> Eq (mod n n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_pi. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ and elements $__1$ of $Eq$ of $p$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g1$ applied to $i$ is less than or equal to $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g2$ applied to $i$.",
    "output": "postulate le_pi : (n : Nat) -> (p : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> (__1 : Eq (p i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g1 i)) (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_exp_pred_SO. For all natural numbers $p$ and $a$, if $p$ is prime, then if $p$ is not divisible by $a$, then $congruent$ holds for the exponentiation of $a$ and $pred$ applied to $p$ and $1$ and $p$.",
    "output": "postulate congruent_exp_pred_SO : (p : Nat) -> (a : Nat) -> (_ : prime p) -> (__1 : not (divisible p a)) -> congruent (pow a (pred p)) 1 p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_Sm_elim. Let $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to the sum of $m$ and $1$, then for all propositions $P$, for all functions $__1$ from elements $__1$ of $Leq$ of the sum of $n$ and $1$ and the sum of $m$ and $1$ to elements of $P$, for all functions $__2$ from elements $__2$ of $Eq$ of $n$ and the sum of $m$ and $1$ to elements of $P$, $P$.",
    "output": "postulate le_n_Sm_elim : (n : Nat) -> (m : Nat) -> (_ : Leq n (plus m 1)) -> (P : Prop) -> (__1 : (__1 : Leq (plus n 1) (plus m 1)) -> P) -> (__2 : (__2 : Eq n (plus m 1)) -> P) -> P"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound3. For all natural numbers $n$ and $m$ and $x$, $Nat$.",
    "output": "postulate let_upper_bound3 : (n : Nat) -> (m : Nat) -> (x : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type2. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type2$, for all functions $_H_div_mod_spec_intro$ from elements $x_827$ of $Lt$ of $_r$ and $_m$ and elements $x_826$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_827$ and $x_826$, for all elements $x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_825$.",
    "output": "postulate div_mod_spec_rect_Type2 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_825 : div_mod_spec _n _m _q _r) -> Type2) -> (_H_div_mod_spec_intro : (x_827 : Lt _r _m) -> (x_826 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_827 x_826)) -> (x_825 : div_mod_spec _n _m _q _r) -> Q_ x_825"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_transpose_l. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $m$ and $i$ and $j$, if $i$ is less than or equal to $m$, then if $j$ is less than or equal to $m$, then for all elements $__2$ of $permut$ of $f$ and $m$, $permut$ holds for the function that maps $n$ to $transpose$ applied to $i$ and $j$ and $f$ applied to $n$ and $m$.",
    "output": "postulate permut_transpose_l : (f : (_ : Nat) -> Nat) -> (m : Nat) -> (i : Nat) -> (j : Nat) -> (_ : Leq i m) -> (__1 : Leq j m) -> (__2 : permut f m) -> permut (\\ n : Nat -> transpose i j (f n)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type4. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1704$ of $Dop$ of $x1$ and $x2$ to elements of $Type4$, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1705$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1704 : Dop x1 x2) -> Type4) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1705 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type1. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_953$ of $Dop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_953$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_953$.",
    "output": "postulate Dop_rect_Type1 : (A : Set) -> (_nil : A) -> (Q_ : (_x_953 : Dop A _nil) -> Type1) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_953 : Dop A _nil) -> Q_ x_953"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt_to_lt_times_l. For all natural numbers $m$ and $n$, if $n$ is less than the square root of $m$, then the product of $n$ and $n$ is less than $m$.",
    "output": "postulate lt_sqrt_to_lt_times_l : (m : Nat) -> (n : Nat) -> (_ : Lt n (sqrt m)) -> Lt (times n n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_S_dx. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$, $ex2$ holds for $B$ and the function that maps $b$ to $lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and the function that maps $b$ to $R$ applied to $b$ and $b2$.",
    "output": "postulate lstar_inv_S_dx : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R (plus l 1) b1 b2) -> ex2 B (\\ b : B -> lstar B R l b1 b) (\\ b : B -> R b b2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_spec_ind_body. Let $_n$ and $_b$ be natural numbers. Then for all functions $_f$ from natural numbers to booleans, for all functions $Q_$ from natural numbers $x_1075$ and elements $_x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$ to propositions, for all functions $_H_found_min_spec$ from natural numbers $m$ and elements $x_1080$ of $Leq$ of $_b$ and $m$ and elements $x_1079$ of $Lt$ of $m$ and the sum of $_n$ and $_b$ and elements $x_1078$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $x_1077$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $m$ and $found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $m$ and $x_1080$ and $x_1079$ and $x_1078$ and $x_1077$, for all functions $_H_not_found_min_spec$ from functions $x_1081$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $_n$ and $_b$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of the sum of $_n$ and $_b$ and $not_found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $x_1081$, for all natural numbers $x_1075$, for all elements $x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$, $Q_$ holds for $x_1075$ and $x_1076$.",
    "output": "postulate min_spec_ind_body : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (Q_ : (x_1075 : Nat) -> (_x_1076 : min_spec _n _b _f x_1075) -> Prop) -> (_H_found_min_spec : (m : Nat) -> (x_1080 : Leq _b m) -> (x_1079 : Lt m (plus _n _b)) -> (x_1078 : Eq (_f m) true) -> (x_1077 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i m) -> Eq (_f i) false) -> Q_ m (found_min_spec _n _b _f m x_1080 x_1079 x_1078 x_1077)) -> (_H_not_found_min_spec : (x_1081 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i (plus _n _b)) -> Eq (_f i) false) -> Q_ (plus _n _b) (not_found_min_spec _n _b _f x_1081)) -> (x_1075 : Nat) -> (x_1076 : min_spec _n _b _f x_1075) -> Q_ x_1075 x_1076"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_to_le_div2. For all natural numbers $m$ and $n$ and $q$, if $0$ is less than $q$, then if $n$ is less than or equal to the product of $m$ and $q$, then the quotient of $n$ and $q$ is less than or equal to $m$.",
    "output": "postulate le_times_to_le_div2 : (m : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> (__1 : Leq n (times m q)) -> Leq (div n q) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_min_r. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, $min$ applied to $n$ and $b$ and $f$ is less than or equal to the sum of $n$ and $b$.",
    "output": "postulate le_min_r : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> Leq (min n b f) (plus n b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dpi1__o__aop__o__op. For all sets $x0$, for all elements $x1$ of $x0$, for all functions $x2$ from elements of $ACop$ of $x0$ and $x1$ to sets, for all elements $x3$ of $DPair$ of $ACop$ applied to $x0$ and $x1$ and $x2$, for all elements $_x_887$ and $_x_888$ of $x0$, $x0$.",
    "output": "postulate dpi1__o__aop__o__op : (x0 : Set) -> (x1 : x0) -> (x2 : (_ : ACop x0 x1) -> Set) -> (x3 : DPair (ACop x0 x1) x2) -> (_x_887 : x0) -> (_x_888 : x0) -> x0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_invert_permut. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $permut$ of $f$ and $n$, $injn$ holds for $invert_permut$ applied to $n$ and $f$ and $n$.",
    "output": "postulate injective_invert_permut : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : permut f n) -> injn (invert_permut n f) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type1_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_953$ of $Dop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_953$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_953$.",
    "output": "postulate Dop_rect_Type1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_953 : Dop A _nil) -> Type1) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_953 : Dop A _nil) -> Q_ x_953"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_max_spec. For all natural numbers $_n$, for all functions $_f$ from natural numbers to booleans, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$ to elements of $return_sort$, for all functions $case_found_max_spec$ from natural numbers $m$ and elements of $Lt$ of $m$ and $_n$ and elements $__1$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $__2$ from natural numbers $i$ and elements $__2$ of $Lt$ of $m$ and $i$ and elements $__3$ of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $return_type$ of $m$ and $found_max_spec$ applied to $_n$ and $_f$ and $m$ and $__$ and $__1$ and $__2$, for all functions $case_not_found_max_spec$ from functions from natural numbers $i$ and elements of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $return_type$ of $0$ and $not_found_max_spec$ applied to $_n$ and $_f$ and $__$, for all natural numbers $__$, for all elements $z$ of $max_spec$ of $_n$ and $_f$ and $__$, $return_type$ holds for $__$ and $z$.",
    "output": "postulate match_max_spec : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (z : max_spec _n _f __) -> return_sort) -> (case_found_max_spec : (m : Nat) -> (_ : Lt m _n) -> (__1 : Eq (_f m) true) -> (__2 : (i : Nat) -> (__2 : Lt m i) -> (__3 : Lt i _n) -> Eq (_f i) false) -> return_type m (found_max_spec _n _f m __ __1 __2)) -> (case_not_found_max_spec : (_ : (i : Nat) -> (_ : Lt i _n) -> Eq (_f i) false) -> return_type 0 (not_found_max_spec _n _f __)) -> (_ : Nat) -> (z : max_spec _n _f __) -> return_type __ z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_ord_rem. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then if $0$ is less than $n$, then $0$ is less than $ord_rem$ applied to $n$ and $p$.",
    "output": "postulate lt_O_ord_rem : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Lt 0 (ord_rem n p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_not_ord_O. For all natural numbers $p$ and $m$, if $0$ is less than $m$, then if $p$ is prime, then if $p$ is divisible by $m$, then $ord$ applied to $m$ and $p$ is not equal to $0$.",
    "output": "postulate divides_to_not_ord_O : (p : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : prime p) -> (__2 : divisible p m) -> not (Eq (ord m p) 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_forall_to_exists. For all functions $P$ from natural numbers to propositions, for all natural numbers $n$, for all functions $__$ from natural numbers $i$ to elements of $decidable$ of $P$ applied to $i$, if it is not the case that $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n$ and the function that maps $__1$ to $P$ applied to $i$, then $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and the negation of $P$ applied to $i$.",
    "output": "postulate not_forall_to_exists : (P : (_ : Nat) -> Prop) -> (n : Nat) -> (_ : (i : Nat) -> decidable (P i)) -> (__1 : not (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n) (\\ __1 : Lt i n -> P i)))) -> ex Nat (\\ i : Nat -> and (Lt i n) (not (P i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_ind. For all natural numbers $_n$ and $_m$, for all functions $Q_$ from elements $_x_1192$ of $divisible$ of $_n$ and $_m$ to propositions, for all functions $_H_quotient$ from natural numbers $q$ and elements $x_1193$ of $Eq$ of $_m$ and the product of $_n$ and $q$ to elements of $Q_$ of $quotient$ applied to $_n$ and $_m$ and $q$ and $x_1193$, if $_n$ is divisible by $_m$, then $Q_$ holds for $x_1192$.",
    "output": "postulate divides_ind : (_n : Nat) -> (_m : Nat) -> (Q_ : (_x_1192 : divisible _n _m) -> Prop) -> (_H_quotient : (q : Nat) -> (x_1193 : Eq _m (times _n q)) -> Q_ (quotient _n _m q x_1193)) -> (x_1192 : divisible _n _m) -> Q_ x_1192"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "K1. Let $n$ and $p$ be natural numbers. Then if $18$ is less than or equal to $n$, then if $p$ is less than or equal to $n$, then if the quotient of the product of $2$ and $n$ and $3$ is less than $p$, then $k$ applied to the product of $2$ and $n$ and $p$ is equal to $0$.",
    "output": "postulate k1 : (n : Nat) -> (p : Nat) -> (_ : Leq 18 n) -> (__1 : Leq p n) -> (__2 : Lt (div (times 2 n) 3) p) -> Eq (k (times 2 n) p) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_n_mod_times. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then if $0$ is less than $m$, then $congruent$ holds for $n$ and $mod$ applied to $n$ and the product of $m$ and $p$ and $p$.",
    "output": "postulate congruent_n_mod_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Lt 0 m) -> congruent n (mod n (times m p)) p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_r. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all elements $b1$ of $B$, for all elements $P$ of $relation2$ of $Nat$ and $B$, for all elements $__$ of $P$ of $0$ and $b1$, for all functions $__1$ from natural numbers $l$ and elements $b$ of $B$ and elements $b2$ of $B$ and elements $__1$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $R$ of $b$ and $b2$ and elements $__3$ of $P$ of $l$ and $b$ to elements of $P$ of the sum of $l$ and $1$ and $b2$, for all natural numbers $l$, for all elements $b2$ of $B$, for all elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $P$ holds for $l$ and $b2$.",
    "output": "postulate lstar_ind_r : (B : Set) -> (R : relation B) -> (b1 : B) -> (P : relation2 Nat B) -> (_ : P 0 b1) -> (__1 : (l : Nat) -> (b : B) -> (b2 : B) -> (__1 : lstar B R l b1 b) -> (__2 : R b b2) -> (__3 : P l b) -> P (plus l 1) b2) -> (l : Nat) -> (b2 : B) -> (__2 : lstar B R l b1 b2) -> P l b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus_m_m. Let $n$ and $m$ be natural numbers. Then $n$ is equal to the difference of the sum of $n$ and $m$ and $m$.",
    "output": "postulate minus_plus_m_m : (n : Nat) -> (m : Nat) -> Eq n (minus (plus n m) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_minus_r. For all natural numbers $p$ and $q$ and $n$, if $q$ is less than or equal to $p$, then the difference of $n$ and $p$ is less than or equal to the difference of $n$ and $q$.",
    "output": "postulate monotonic_le_minus_r : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : Leq q p) -> Leq (minus n p) (minus n q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_plus_times. For all natural numbers $n$ and $p$ and $q$, the exponentiation of $n$ and the sum of $p$ and $q$ is equal to the product of the exponentiation of $n$ and $p$ and the exponentiation of $n$ and $q$.",
    "output": "postulate exp_plus_times : (n : Nat) -> (p : Nat) -> (q : Nat) -> Eq (pow n (plus p q)) (times (pow n p) (pow n q))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "True_to_le_min. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$ and $b$, if $b$ is less than or equal to $m$, then if $f$ applied to $m$ is equal to $true$, then $min$ applied to $n$ and $b$ and $f$ is less than or equal to $m$.",
    "output": "postulate true_to_le_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (b : Nat) -> (_ : Leq b m) -> (__1 : Eq (f m) true) -> Leq (min n b f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15691. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the difference of the product of $n$ and $c$ and the product of $m$ and $d$ is equal to $1$.",
    "output": "postulate let_clause_15691 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (minus (times n c) (times m d)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_theta_M_theta. For all natural numbers $m$, $theta$ applied to the sum of the product of $2$ and $m$ and $1$ is less than or equal to the product of $M$ applied to $m$ and $theta$ applied to the sum of $m$ and $1$.",
    "output": "postulate le_theta_M_theta : (m : Nat) -> Leq (theta (plus (times 2 m) 1)) (times (M m) (theta (plus m 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_to_eqb_true. For all natural numbers $n$ and $m$, if $n$ is equal to $m$, then $eqb$ applied to $n$ and $m$ is equal to $true$.",
    "output": "postulate eq_to_eqb_true : (n : Nat) -> (m : Nat) -> (_ : Eq n m) -> Eq (eqb n m) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_Sn_n. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $bijn$ of $f$ and the sum of $n$ and $1$, if $f$ applied to the sum of $n$ and $1$ is equal to the sum of $n$ and $1$, then $bijn$ holds for $f$ and $n$.",
    "output": "postulate bijn_Sn_n : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : bijn f (plus n 1)) -> (__1 : Eq (f (plus n 1)) (plus n 1)) -> bijn f n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Increasing_to_monotonic. Let $f$ be a function from natural numbers to natural numbers. Then for all elements $__$ of $increasing$ of $f$, $monotonic$ holds for $Nat$ and $Lt$ and $f$.",
    "output": "postulate increasing_to_monotonic : (f : (_ : Nat) -> Nat) -> (_ : increasing f) -> monotonic Nat Lt f"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_lt_plus_l. For all natural numbers $n$, $monotonic$ holds for $Nat$ and $Lt$ and the function that maps $m$ to the sum of $m$ and $n$.",
    "output": "postulate monotonic_lt_plus_l : (n : Nat) -> monotonic Nat Lt (\\ m : Nat -> plus m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_fact_10. The factorial of the product of $2$ and $5$ is less than or equal to the product of the product of the exponentiation of $2$ and the difference of the product of $2$ and $5$ and $2$ and the factorial of $5$ and the factorial of $5$.",
    "output": "postulate le_fact_10 : Leq (factorial (times 2 5)) (times (times (pow 2 (minus (times 2 5) 2)) (factorial 5)) (factorial 5))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_exp2. For all natural numbers $p$ and $n$ and $m$, if $1$ is less than $p$, then if $0$ is less than $n$, then the product of $m$ and the logarithm of $p$ and $n$ is less than or equal to the logarithm of $p$ and the exponentiation of $n$ and $m$.",
    "output": "postulate log_exp2 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Leq (times m (log p n)) (log p (pow n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primes_below2. $primes_below$ holds for $nil (Nat)$ and $2$.",
    "output": "postulate primes_below2 : primes_below (nil Nat) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1704. For all natural numbers $m$, if $0$ is less than $m$, then for all natural numbers $a$ and $x1029$, $x1029$ is equal to $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x1029$ and $0$.",
    "output": "postulate let_clause_1704 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x1029 : Nat) -> Eq x1029 (aop__o__op Nat 0 plusAC x1029 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all natural numbers $__$, $relation$ holds for $B$.",
    "output": "postulate lstar_r : (B : Set) -> (_R : relation B) -> (_ : Nat) -> relation B"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "PlusAC. $ACop$ holds for $Nat$ and $0$.",
    "output": "postulate plusAC : ACop Nat 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp4. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1734$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1735$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1734 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1735 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lop_Strue. Let $m$ and $i$ be natural numbers. Then for all lists $acc$ of natural numbers, if $list_divides$ applied to $acc$ and $i$ is equal to $true$, then $lprim$ applied to the sum of $m$ and $1$ and $i$ and $acc$ is equal to $lprim$ applied to $m$ and the sum of $i$ and $1$ and $acc$.",
    "output": "postulate lop_Strue : (m : Nat) -> (i : Nat) -> (acc : list Nat) -> (_ : Eq (list_divides acc i) true) -> Eq (lprim (plus m 1) i acc) (lprim m (plus i 1) acc)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp5_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_905$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_905$.",
    "output": "postulate ACop_rect_CProp5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_905 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_905 : ACop A _nil) -> Q_ x_905"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_Aop. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Aop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $Aop$ of $A$ and $_nil$ to elements of $return_type$ of $z$, for all elements $z$ of $Aop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate filter_Aop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Aop A _nil) -> return_sort) -> (return : (z : Aop A _nil) -> return_type z) -> (z : Aop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp0. For all functions $Q_$ from natural numbers $_x_413$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_414$ and elements $_x_416$ of $Q_$ of $x_414$ to elements of $Q_$ of the sum of $x_414$ and $1$, for all natural numbers $x_413$, $Q_$ holds for $x_413$.",
    "output": "postulate nat_rect_CProp0 : (Q_ : (_x_413 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_414 : Nat) -> (_x_416 : Q_ x_414) -> Q_ (plus x_414 1)) -> (x_413 : Nat) -> Q_ x_413"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Congruent_n_n. For all natural numbers $n$ and $p$, $congruent$ holds for $n$ and $n$ and $p$.",
    "output": "postulate congruent_n_n : (n : Nat) -> (p : Nat) -> congruent n n p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp4_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_837$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_839$ of $Lt$ of $_r$ and $_m$ and elements $x_838$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_839$ and $x_838$, for all elements $x_837$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_837$.",
    "output": "postulate div_mod_spec_rect_CProp4_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_837 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_839 : Lt _r _m) -> (x_838 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_839 x_838)) -> (x_837 : div_mod_spec _n _m _q _r) -> Q_ x_837"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_le_max. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then $max$ applied to $n$ and $f$ is less than or equal to $max$ applied to $m$ and $f$.",
    "output": "postulate le_to_le_max : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq (max n f) (max m f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iter_iter. Let $A$ be a set. Then for all functions $g$ from elements of $A$ to elements of $A$, for all elements $a$ of $A$, for all natural numbers $b$ and $c$, $iter$ applied to $A$ and $g$ and $c$ and $iter$ applied to $A$ and $g$ and $b$ and $a$ is equal to $iter$ applied to $A$ and $g$ and the sum of $b$ and $c$ and $a$.",
    "output": "postulate iter_iter : (A : Set) -> (g : (_ : A) -> A) -> (a : A) -> (b : Nat) -> (c : Nat) -> Eq (iter A g c (iter A g b a)) (iter A g (plus b c) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_ind. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_811$ of $Lt$ of $_r$ and $_m$ and elements $x_810$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_811$ and $x_810$, for all elements $x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_809$.",
    "output": "postulate div_mod_spec_ind : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_809 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_811 : Lt _r _m) -> (x_810 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_811 x_810)) -> (x_809 : div_mod_spec _n _m _q _r) -> Q_ x_809"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_minus_m_m. For all natural numbers $n$ and $m$, $n$ is less than or equal to the sum of the difference of $n$ and $m$ and $m$.",
    "output": "postulate le_plus_minus_m_m : (n : Nat) -> (m : Nat) -> Leq n (plus (minus n m) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "M. For all natural numbers $_m$, $Nat$.",
    "output": "postulate M : (_m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_p_ord. Let $p$ and $a$ and $b$ and $c$ and $d$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then if $p_ord$ applied to $n$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $a$ and $b$, then if $p_ord$ applied to $m$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $c$ and $d$, then $b$ is divisible by $d$ and $a$ is less than or equal to $c$.",
    "output": "postulate divides_to_p_ord : (p : Nat) -> (a : Nat) -> (b : Nat) -> (c : Nat) -> (d : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> (__4 : Eq (p_ord n p) (mk_Prod Nat Nat a b)) -> (__5 : Eq (p_ord m p) (mk_Prod Nat Nat c d)) -> and (divisible b d) (Leq a c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_exp_times. For all natural numbers $n$ and $p$ and $q$, the exponentiation of the exponentiation of $n$ and $p$ and $q$ is equal to the exponentiation of $n$ and the product of $p$ and $q$.",
    "output": "postulate exp_exp_times : (n : Nat) -> (p : Nat) -> (q : Nat) -> Eq (pow (pow n p) q) (pow n (times p q))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_invert_permut. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$ and $m$, if $m$ is less than or equal to $n$, then for all elements $__1$ of $permut$ of $f$ and $n$, $f$ applied to $invert_permut$ applied to $n$ and $f$ and $m$ is equal to $m$.",
    "output": "postulate f_invert_permut : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq m n) -> (__1 : permut f n) -> Eq (f (invert_permut n f m)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp4. Let $n$ be a natural number. Then if $1$ is less than $n$, then $Psi$ applied to $n$ is less than or equal to the product of $pred$ applied to $n$ and the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_Psi_exp4 : (n : Nat) -> (_ : Lt 1 n) -> Leq (Psi n) (times (pred n) (pow 2 (minus (times 2 n) 3)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Found_max_spec. Let $n$ be a natural number. Then for all functions $f$ from natural numbers to booleans, for all natural numbers $m$, if $m$ is less than $n$, then if $f$ applied to $m$ is equal to $true$, then for all functions $__2$ from natural numbers $i$ and elements $__2$ of $Lt$ of $m$ and $i$ and elements $__3$ of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max_spec$ holds for $n$ and $f$ and $m$.",
    "output": "postulate found_max_spec : (n : Nat) -> (f : (_ : Nat) -> bool) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Eq (f m) true) -> (__2 : (i : Nat) -> (__2 : Lt m i) -> (__3 : Lt i n) -> Eq (f i) false) -> max_spec n f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mdef. For all natural numbers $m$, $M$ applied to $m$ is equal to $bc$ applied to the sum of the product of $2$ and $m$ and $1$ and $m$.",
    "output": "postulate Mdef : (m : Nat) -> Eq (M m) (bc (plus (times 2 m) 1) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type2_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_897$ of $ACop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_897$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_897$.",
    "output": "postulate ACop_rect_Type2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_897 : ACop A _nil) -> Type2) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_897 : ACop A _nil) -> Q_ x_897"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type2_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_951$ of $Dop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_951$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_951$.",
    "output": "postulate Dop_rect_Type2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_951 : Dop A _nil) -> Type2) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_951 : Dop A _nil) -> Q_ x_951"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1062. Let $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$ be natural numbers. Then for all elements $_clearme$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, if $r$ is less than $b$, then if $a$ is equal to the sum of the product of $q$ and $b$ and $r$, then for all elements $_clearme0$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, if $r1$ is less than $b$, then if $a$ is equal to the sum of the product of $q1$ and $b$ and $r1$, then if $q$ is not less than or equal to $q1$, then $a$ is equal to the sum of $r1$ and the product of $b$ and $q1$.",
    "output": "postulate let_clause_1062 : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_clearme : div_mod_spec a b q r) -> (ltrb : Lt r b) -> (spec : Eq a (plus (times q b) r)) -> (_clearme0 : div_mod_spec a b q1 r1) -> (ltr1b : Lt r1 b) -> (spec1 : Eq a (plus (times q1 b) r1)) -> (leqq1 : not (Leq q q1)) -> Eq a (plus r1 (times b q1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pad_bigop. For all natural numbers $k$ and $n$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $n$ is less than or equal to $k$, then $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $match_bool$ applied to $Set$ and the function that maps $_0$ to $bool$ and absurdity and $p$ applied to $i$ and $leb$ applied to $n$ and $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate pad_bigop : (k : Nat) -> (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Leq n k) -> Eq (bigop n (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> match_bool Set (\\ _0 : bool -> bool) false (p i) (leb n i)) B nil op (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. Let $n$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all natural numbers $n1$, for all functions $Hind$ from functions from natural numbers $i$ and elements of $Lt$ of $i$ and $n1$ and elements $__1$ of $Eq$ of $p$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$ to elements of $Leq$ of $bigop$ applied to $n1$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g1$ applied to $i$ and $bigop$ applied to $n1$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g2$ applied to $i$, for all functions $Hle$ from natural numbers $i$ and elements of $Lt$ of $i$ and the sum of $n1$ and $1$ and elements $__1$ of $Eq$ of $p$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, if $p$ applied to $n1$ is equal to $true$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : Nat) -> (p : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (n1 : Nat) -> (Hind : (_ : (i : Nat) -> (_ : Lt i n1) -> (__1 : Eq (p i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n1 (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g1 i)) (bigop n1 (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g2 i))) -> (Hle : (i : Nat) -> (_ : Lt i (plus n1 1)) -> (__1 : Eq (p i) true) -> Leq (g1 i) (g2 i)) -> (Hcase : Eq (p n1) true) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_bertrand_to_le1. For all natural numbers $n$, if the exponentiation of $2$ and $7$ is less than or equal to $n$, then for all elements $__1$ of $not_bertrand$ of $n$, the exponentiation of $2$ and the quotient of the product of $2$ and $n$ and $3$ is less than or equal to the exponentiation of the product of $2$ and $n$ and the quotient of the square root of the product of $2$ and $n$ and $2$.",
    "output": "postulate not_bertrand_to_le1 : (n : Nat) -> (_ : Leq (pow 2 7) n) -> (__1 : not_bertrand n) -> Leq (pow 2 (div (times 2 n) 3)) (pow (times 2 n) (div (sqrt (times 2 n)) 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_inv_lstar. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar_r$ of $B$ and $R$ and $l$ and $b1$ and $b2$, $lstar$ holds for $B$ and $R$ and $l$ and $b1$ and $b2$.",
    "output": "postulate lstar_r_inv_lstar : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar_r B R l b1 b2) -> lstar B R l b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_mod. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if $p$ is divisible by $m$, then if $p$ is divisible by $n$, then $p$ is divisible by $mod$ applied to $m$ and $n$.",
    "output": "postulate divides_mod : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : divisible p m) -> (__2 : divisible p n) -> divisible p (mod m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_div_le. Let $a$ and $b$ and $c$ and $d$ be natural numbers. Then if $0$ is less than $b$, then if $0$ is less than $d$, then the product of the quotient of $a$ and $b$ and the quotient of $c$ and $d$ is less than or equal to the quotient of the product of $a$ and $c$ and the product of $b$ and $d$.",
    "output": "postulate times_div_le : (a : Nat) -> (b : Nat) -> (c : Nat) -> (d : Nat) -> (_ : Lt 0 b) -> (__1 : Lt 0 d) -> Leq (times (div a b) (div c d)) (div (times a c) (times b d))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_pi_p_M1. Let $m$ and $i$ be natural numbers. Then if $i$ is less than or equal to the sum of the product of $2$ and $m$ and $2$, then $bigop$ applied to $i$ and the function that maps $p$ to $andb$ applied to $leb$ applied to the sum of $m$ and $2$ and $p$ and $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$ is divisible by $M$ applied to $m$.",
    "output": "postulate divides_pi_p_M1 : (m : Nat) -> (i : Nat) -> (_ : Leq i (plus (times 2 m) 2)) -> divisible (bigop i (\\ p : Nat -> andb (leb (plus m 2) p) (primeb p)) Nat 1 times (\\ p : Nat -> p)) (M m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "K_def. Let $n$ and $p$ be natural numbers. Then $k$ applied to $n$ and $p$ is equal to $bigop$ applied to the logarithm of $p$ and $n$ and the function that maps $i$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $mod$ applied to the quotient of $n$ and the exponentiation of $p$ and the sum of $i$ and $1$ and $2$.",
    "output": "postulate k_def : (n : Nat) -> (p : Nat) -> Eq (k n p) (bigop (log p n) (\\ i : Nat -> true) Nat 0 plus (\\ i : Nat -> mod (div n (pow p (plus i 1))) 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type2. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z671$ to elements of $Type2$, for all functions $_H1$ from elements $_z672$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_382$ and functions $_x_384$ from elements $_z672$ of $Eq$ of $Hterm$ and $x_382$ to elements of $P$ of $x_382$ and elements $_z672$ of $Eq$ of $Hterm$ and the sum of $x_382$ and $1$ to elements of $P$ of the sum of $x_382$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type2 : (Hterm : Nat) -> (P : (_z671 : Nat) -> Type2) -> (_H1 : (_z672 : Eq Hterm 0) -> P 0) -> (_H2 : (x_382 : Nat) -> (_x_384 : (_z672 : Eq Hterm x_382) -> P x_382) -> (_z672 : Eq Hterm (plus x_382 1)) -> P (plus x_382 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sigma_p_dividesb. For all natural numbers $m$ and $n$ and $p$, if $0$ is less than $n$, then if $p$ is prime, then if $p$ is not divisible by $n$, then $m$ is equal to $bigop$ applied to $m$ and the function that maps $i$ to $dividesb$ applied to the exponentiation of $p$ and the sum of $i$ and $1$ and the product of the exponentiation of $p$ and $m$ and $n$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $1$.",
    "output": "postulate sigma_p_dividesb : (m : Nat) -> (n : Nat) -> (p : Nat) -> (_ : Lt 0 n) -> (__1 : prime p) -> (__2 : not (divisible p n)) -> Eq m (bigop m (\\ i : Nat -> dividesb (pow p (plus i 1)) (times (pow p m) n)) Nat 0 plus (\\ i : Nat -> 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Null_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Dop$ of $A$ and $nil$, for all elements $a$ of $A$, $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ is equal to $nil$.",
    "output": "postulate null_body : (A : Set) -> (nil : A) -> (xxx : Dop A nil) -> (a : A) -> Eq (prod A nil xxx a nil) nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type1_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_829$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type1$, for all functions $_H_div_mod_spec_intro$ from elements $x_831$ of $Lt$ of $_r$ and $_m$ and elements $x_830$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_831$ and $x_830$, for all elements $x_829$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_829$.",
    "output": "postulate div_mod_spec_rect_Type1_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_829 : div_mod_spec _n _m _q _r) -> Type1) -> (_H_div_mod_spec_intro : (x_831 : Lt _r _m) -> (x_830 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_831 x_830)) -> (x_829 : div_mod_spec _n _m _q _r) -> Q_ x_829"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_or_gt. For all natural numbers $n$, $0$ is equal to $n$ or $0$ is less than $n$.",
    "output": "postulate eq_or_gt : (n : Nat) -> or (Eq 0 n) (Lt 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_j_i. Let $i$ and $j$ be natural numbers. Then $transpose$ applied to $i$ and $j$ and $i$ is equal to $j$.",
    "output": "postulate transpose_i_j_i : (i : Nat) -> (j : Nat) -> Eq (transpose i j i) j"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_maxl. Let $i$ and $n$ and $m$ be natural numbers. Then if $max$ applied to $n$ and $m$ is less than or equal to $i$, then $n$ is less than or equal to $i$.",
    "output": "postulate le_maxl : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (max n m) i) -> Leq n i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type1_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_871$ of $Aop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_871$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_871$.",
    "output": "postulate Aop_rect_Type1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_871 : Aop A _nil) -> Type1) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_871 : Aop A _nil) -> Q_ x_871"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_ind. For all sets $A$, for all functions $f$ from elements of $A$ to natural numbers, for all elements $P$ of $predicate$ of $A$, for all functions $__$ from natural numbers $n$ and functions from elements $a$ of $A$ and elements of $Lt$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$ and elements $a$ of $A$ and elements $__1$ of $Eq$ of $f$ applied to $a$ and $n$ to elements of $P$ of $a$, for all elements $a$ of $A$, $P$ holds for $a$.",
    "output": "postulate f_ind : (A : Set) -> (f : (_ : A) -> Nat) -> (P : predicate A) -> (_ : (n : Nat) -> (_ : (a : A) -> (_ : Lt (f a) n) -> P a) -> (a : A) -> (__1 : Eq (f a) n) -> P a) -> (a : A) -> P a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_lt_to_le. Let $n$ and $m$ be natural numbers. Then if $n$ is not less than $m$, then $m$ is less than or equal to $n$.",
    "output": "postulate not_lt_to_le : (n : Nat) -> (m : Nat) -> (_ : not (Lt n m)) -> Leq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_n_n. Let $n$ be a natural number. Then if $1$ is less than $n$, then the logarithm of $n$ and $n$ is equal to $1$.",
    "output": "postulate log_n_n : (n : Nat) -> (_ : Lt 1 n) -> Eq (log n n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_gcd_aux. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then $ex$ holds for $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and $gcd_aux$ applied to $p$ and $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and $gcd_aux$ applied to $p$ and $m$ and $n$.",
    "output": "postulate eq_minus_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n p) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd_aux p m n)) (Eq (minus (times b m) (times a n)) (gcd_aux p m n))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_invert_permut. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $__$ of $permut$ of $f$ and $n$, $permut$ holds for $invert_permut$ applied to $n$ and $f$ and $n$.",
    "output": "postulate permut_invert_permut : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : permut f n) -> permut (invert_permut n f) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_to_eqb_false. For all natural numbers $n$ and $m$, if $n$ is not equal to $m$, then $eqb$ applied to $n$ and $m$ is equal to absurdity.",
    "output": "postulate not_eq_to_eqb_false : (n : Nat) -> (m : Nat) -> (_ : not (Eq n m)) -> Eq (eqb n m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_not_exists. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $n$ and $b$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $min$ applied to $n$ and $b$ and $f$ is equal to the sum of $n$ and $b$.",
    "output": "postulate min_not_exists : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : (i : Nat) -> (_ : Leq b i) -> (__1 : Lt i (plus n b)) -> Eq (f i) false) -> Eq (min n b f) (plus n b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Commutative_max. $commutative$ holds for $Nat$ and $max$.",
    "output": "postulate commutative_max : commutative Nat max"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_mod. For all natural numbers $n$ and $p$, if $0$ is less than $p$, then $mod$ applied to $n$ and $p$ is equal to $mod$ applied to $mod$ applied to $n$ and $p$ and $p$.",
    "output": "postulate mod_mod : (n : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> Eq (mod n p) (mod (mod n p) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_sqrt. Let $n$ be a natural number. Then $n$ is less than the exponentiation of the sum of the square root of $n$ and $1$ and $2$.",
    "output": "postulate lt_sqrt : (n : Nat) -> Lt n (pow (plus (sqrt n) 1) 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sqrt_def. For all natural numbers $n$, the square root of $n$ is equal to $max$ applied to the sum of $n$ and $1$ and the function that maps $x$ to $leb$ applied to the product of $x$ and $x$ and $n$.",
    "output": "postulate sqrt_def : (n : Nat) -> Eq (sqrt n) (max (plus n 1) (\\ x : Nat -> leb (times x x) n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_to_le. Let $a$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $a$, then if the product of $a$ and $n$ is less than or equal to the product of $a$ and $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_times_to_le : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 a) -> (__1 : Leq (times a n) (times a m)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_17041. For all natural numbers $m$, if $0$ is less than $m$, then for all natural numbers $a$ and $x1029$, $x1029$ is equal to $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x1029$ and $0$.",
    "output": "postulate let_clause_17041 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x1029 : Nat) -> Eq x1029 (aop__o__op Nat 0 plusAC x1029 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_prim_n2. For all natural numbers $n$, if $7$ is less than or equal to $n$, then $prim$ applied to the sum of the product of $2$ and $n$ and $1$ is less than or equal to $pred$ applied to $n$.",
    "output": "postulate le_prim_n2 : (n : Nat) -> (_ : Leq 7 n) -> Leq (prim (plus (times 2 n) 1)) (pred n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_div_to_times. For all natural numbers $n$ and $m$ and $q$, if $0$ is less than $q$, then if the quotient of $n$ and $q$ is less than $m$, then $n$ is less than the product of $q$ and $m$.",
    "output": "postulate lt_div_to_times : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> (__1 : Lt (div n q) m) -> Lt n (times q m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then the greatest common divisor of $__$ and $__1$ is a natural number.",
    "output": "postulate gcd : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F_max_true. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$, $f$ applied to $max$ applied to $n$ and $f$ is equal to $true$.",
    "output": "postulate f_max_true : (f : (_ : Nat) -> bool) -> (n : Nat) -> (_ : ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) -> Eq (f (max n f)) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_case. Let $n$ be a natural number. Then for all functions $P$ from natural numbers to propositions, for all functions $__$ from elements of $Eq$ of $n$ and $0$ to elements of $P$ of $0$, for all functions $__1$ from natural numbers $m$ and elements $__1$ of $Eq$ of $n$ and the sum of $m$ and $1$ to elements of $P$ of the sum of $m$ and $1$, $P$ holds for $n$.",
    "output": "postulate nat_case : (n : Nat) -> (P : (_ : Nat) -> Prop) -> (_ : (_ : Eq n 0) -> P 0) -> (__1 : (m : Nat) -> (__1 : Eq n (plus m 1)) -> P (plus m 1)) -> P n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F2_ind. For all sets $A1$ and $A2$, for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ to natural numbers, for all elements $P$ of $relation2$ of $A1$ and $A2$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $n$ to elements of $P$ of $a1$ and $a2$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, $P$ holds for $a1$ and $a2$.",
    "output": "postulate f2_ind : (A1 : Set) -> (A2 : Set) -> (f : (_ : A1) -> (__1 : A2) -> Nat) -> (P : relation2 A1 A2) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (_ : Lt (f a1 a2) n) -> P a1 a2) -> (a1 : A1) -> (a2 : A2) -> (__1 : Eq (f a1 a2) n) -> P a1 a2) -> (a1 : A1) -> (a2 : A2) -> P a1 a2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_n_n. For all natural numbers $n$, $eqb$ applied to $n$ and $n$ is equal to $true$.",
    "output": "postulate eqb_n_n : (n : Nat) -> Eq (eqb n n) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type3_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type3$, for all functions $_H_div_mod_spec_intro$ from elements $x_823$ of $Lt$ of $_r$ and $_m$ and elements $x_822$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_823$ and $x_822$, for all elements $x_821$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_821$.",
    "output": "postulate div_mod_spec_rect_Type3_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_821 : div_mod_spec _n _m _q _r) -> Type3) -> (_H_div_mod_spec_intro : (x_823 : Lt _r _m) -> (x_822 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_823 x_822)) -> (x_821 : div_mod_spec _n _m _q _r) -> Q_ x_821"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_ind_body. Let $Q_$ be a function from natural numbers $_x_365$ to propositions. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_366$ and elements $_x_368$ of $Q_$ of $x_366$ to elements of $Q_$ of the sum of $x_366$ and $1$, for all natural numbers $x_365$, $Q_$ holds for $x_365$.",
    "output": "postulate nat_ind_body : (Q_ : (_x_365 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_366 : Nat) -> (_x_368 : Q_ x_366) -> Q_ (plus x_366 1)) -> (x_365 : Nat) -> Q_ x_365"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15591. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $0$ is equal to $n$, then if $0$ is divisible by $m$, then for all natural numbers $q$, if $m$ is equal to the product of $0$ and $q$, then $m$ is equal to $n$.",
    "output": "postulate let_clause_15591 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 m) -> (eqn0 : Eq 0 n) -> (_clearme : divisible 0 m) -> (q : Nat) -> (eqm : Eq m (times 0 q)) -> Eq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ and $__$ be natural numbers. Then we can say that $_n$ is less than or equal to $__$.",
    "output": "postulate Leq : (_n : Nat) -> (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_O_to_eq_O. For all natural numbers $m$ and $n$, if the greatest common divisor of $m$ and $n$ is equal to $0$, then $m$ is equal to $0$ and $n$ is equal to $0$.",
    "output": "postulate gcd_O_to_eq_O : (m : Nat) -> (n : Nat) -> (_ : Eq (gcd m n) 0) -> and (Eq m 0) (Eq n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "K1. For all natural numbers $n$ and $p$, if $18$ is less than or equal to $n$, then if $p$ is less than or equal to $n$, then if the quotient of the product of $2$ and $n$ and $3$ is less than $p$, then $k$ applied to the product of $2$ and $n$ and $p$ is equal to $0$.",
    "output": "postulate k1 : (n : Nat) -> (p : Nat) -> (_ : Leq 18 n) -> (__1 : Leq p n) -> (__2 : Lt (div (times 2 n) 3) p) -> Eq (k (times 2 n) p) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_log. Let $p$ and $n$ be natural numbers. Then if $0$ is less than $n$, then the exponentiation of $p$ and the logarithm of $p$ and $n$ is less than or equal to $n$.",
    "output": "postulate le_exp_log : (p : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> Leq (pow p (log p n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_divides. For all natural numbers $_n$ and $_m$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $divisible$ of $_n$ and $_m$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $divisible$ of $_n$ and $_m$ to elements of $return_type$ of $z$, if $_n$ is divisible by $_m$, then $return_type$ holds for $z$.",
    "output": "postulate filter_divides : (_n : Nat) -> (_m : Nat) -> (return_sort : Sort) -> (return_type : (z : divisible _n _m) -> return_sort) -> (return : (z : divisible _n _m) -> return_type z) -> (z : divisible _n _m) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exists_forall_lt. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$, $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$ or $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n$ and the function that maps $__$ to $Eq$ applied to $f$ applied to $i$ and absurdity.",
    "output": "postulate exists_forall_lt : (f : (_ : Nat) -> bool) -> (n : Nat) -> or (ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n) (\\ _ : Lt i n -> Eq (f i) false)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_to_leb_false. Let $n$ and $m$ be natural numbers. Then if $n$ is not less than or equal to $m$, then $leb$ applied to $n$ and $m$ is equal to absurdity.",
    "output": "postulate not_le_to_leb_false : (n : Nat) -> (m : Nat) -> (_ : not (Leq n m)) -> Eq (leb n m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_minus. Let $n$ and $p$ and $q$ be natural numbers. Then if $n$ is divisible by $p$, then if $n$ is divisible by $q$, then $n$ is divisible by the difference of $p$ and $q$.",
    "output": "postulate divides_minus : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : divisible n p) -> (__1 : divisible n q) -> divisible n (minus p q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Enum_body. Let $A$ be a set. Then for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_942$, $A$.",
    "output": "postulate enum_body : (A : Set) -> (_xxx : range A) -> (_x_942 : Nat) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_i. Let $i$ and $n$ be natural numbers. Then $transpose$ applied to $i$ and $i$ and $n$ is equal to $n$.",
    "output": "postulate transpose_i_i : (i : Nat) -> (n : Nat) -> Eq (transpose i i n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_times. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then $mod$ applied to the product of $n$ and $m$ and $p$ is equal to $mod$ applied to the product of $mod$ applied to $n$ and $p$ and $mod$ applied to $m$ and $p$ and $p$.",
    "output": "postulate mod_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> Eq (mod (times n m) p) (mod (times (mod n p) (mod m p)) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pred_Sn. Let $n$ be a natural number. Then $n$ is equal to $pred$ applied to the sum of $n$ and $1$.",
    "output": "postulate pred_Sn : (n : Nat) -> Eq n (pred (plus n 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_gcd_times_1. For all natural numbers $p$ and $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $p$ and $n$ is equal to $1$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then the greatest common divisor of $p$ and the product of $n$ and $m$ is equal to $1$.",
    "output": "postulate eq_gcd_times_1 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : Eq (gcd p n) 1) -> (__3 : Eq (gcd p m) 1) -> Eq (gcd p (times n m)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TimesACdef. Let $n$ and $m$ be natural numbers. Then $aop__o__op$ applied to $Nat$ and $1$ and $timesAC$ and $n$ and $m$ is equal to the product of $n$ and $m$.",
    "output": "postulate timesACdef : (n : Nat) -> (m : Nat) -> Eq (aop__o__op Nat 1 timesAC n m) (times n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15624. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15624 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_ind. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1566$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1567$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_ind : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1566 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1567 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10332. Let $n$ be a natural number. Then if the exponentiation of $2$ and $6$ is less than or equal to $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10332 : (n : Nat) -> (le_n : Leq (pow 2 6) n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_body. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate times_body : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_le_minus_l. Let $p$ and $q$ and $n$ be natural numbers. Then if $q$ is less than or equal to $p$, then the difference of $q$ and $n$ is less than or equal to the difference of $p$ and $n$.",
    "output": "postulate monotonic_le_minus_l : (p : Nat) -> (q : Nat) -> (n : Nat) -> (_ : Leq q p) -> Leq (minus q n) (minus p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_n_n. Let $n$ be a natural number. Then $0$ is equal to the difference of $n$ and $n$.",
    "output": "postulate minus_n_n : (n : Nat) -> Eq 0 (minus n n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pad_bigop1. Let $k$ and $n$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $n$ is less than or equal to $k$, then for all functions $__1$ from natural numbers $i$ and elements $__1$ of $Leq$ of $n$ and $i$ and elements $__2$ of $Lt$ of $i$ and $k$ to elements of $Eq$ of $p$ applied to $i$ and absurdity, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate pad_bigop1 : (k : Nat) -> (n : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Leq n k) -> (__1 : (i : Nat) -> (__1 : Leq n i) -> (__2 : Lt i k) -> Eq (p i) false) -> Eq (bigop n (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_pi_p_M. For all natural numbers $m$, $bigop$ applied to the sum of the product of $2$ and $m$ and $2$ and the function that maps $p$ to $andb$ applied to $leb$ applied to the sum of $m$ and $2$ and $p$ and $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$ is divisible by $M$ applied to $m$.",
    "output": "postulate divides_pi_p_M : (m : Nat) -> divisible (bigop (plus (times 2 m) 2) (\\ p : Nat -> andb (leb (plus m 2) p) (primeb p)) Nat 1 times (\\ p : Nat -> p)) (M m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_iter2. Let $g$ be a function from natural numbers to natural numbers. Then for all natural numbers $a$ and $i$ and $j$, for all functions $__$ from natural numbers $x$ to elements of $Leq$ of $x$ and $g$ applied to $x$, if $i$ is less than or equal to $j$, then $iter$ applied to $Nat$ and $g$ and $i$ and $a$ is less than or equal to $iter$ applied to $Nat$ and $g$ and $j$ and $a$.",
    "output": "postulate monotonic_iter2 : (g : (_ : Nat) -> Nat) -> (a : Nat) -> (i : Nat) -> (j : Nat) -> (_ : (x : Nat) -> Leq x (g x)) -> (__1 : Leq i j) -> Leq (iter Nat g i a) (iter Nat g j a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type1. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1458$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to elements of $Type1$, for all functions $_H1$ from elements $x_831$ of $Lt$ of $x4$ and $x2$ and elements $x_830$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1459$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_831$ and $x_830$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_831$ and $x_830$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type1 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1458 : div_mod_spec x1 x2 x3 x4) -> Type1) -> (_H1 : (x_831 : Lt x4 x2) -> (x_830 : Eq x1 (plus (times x3 x2) x4)) -> (_z1459 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_831 x_830)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_831 x_830)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_sumI. Let $a$ and $b$ and $c$ be natural numbers. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, if $a$ is less than or equal to $b$, then if $b$ is less than or equal to $c$, then $bigop$ applied to the difference of $c$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$ is equal to $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to the difference of $c$ and $b$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $b$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $b$ and $bigop$ applied to the difference of $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$.",
    "output": "postulate bigop_sumI : (a : Nat) -> (b : Nat) -> (c : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (_ : Leq a b) -> (__1 : Leq b c) -> Eq (bigop (minus c a) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))) (op B nil op (bigop (minus c b) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i b)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i b))) (bigop (minus b a) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSO. $B$ applied to $3$ is equal to $6$.",
    "output": "postulate B_SSSO : Eq (B 3) 6"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_exp. Let $p$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $m$, then the logarithm of $p$ and the product of the exponentiation of $p$ and $n$ and $m$ is equal to the sum of $n$ and the logarithm of $p$ and $m$.",
    "output": "postulate log_exp : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 m) -> Eq (log p (times (pow p n) m)) (plus n (log p m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_inv_plus_l. For all natural numbers $x$ and $y$ and $z$, if the sum of $x$ and $y$ is less than or equal to $z$, then $x$ is less than or equal to the difference of $z$ and $y$ and $y$ is less than or equal to $z$.",
    "output": "postulate le_inv_plus_l : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq (plus x y) z) -> and (Leq x (minus z y)) (Leq y z)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_mod. For all natural numbers $m$ and $n$ and $q$, if $0$ is less than $q$, then $mod$ applied to the sum of $m$ and $n$ and $q$ is less than or equal to the sum of $mod$ applied to $m$ and $q$ and $mod$ applied to $n$ and $q$.",
    "output": "postulate le_plus_mod : (m : Nat) -> (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> Leq (mod (plus m n) q) (plus (mod m q) (mod n q))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Theta_pred. Let $n$ be a natural number. Then if $1$ is less than $n$, then $theta$ applied to the product of $2$ and $n$ is equal to $theta$ applied to $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate theta_pred : (n : Nat) -> (_ : Lt 1 n) -> Eq (theta (times 2 n)) (theta (pred (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp0. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_885$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_885$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_885$.",
    "output": "postulate Aop_rect_CProp0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_885 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_885 : Aop A _nil) -> Q_ x_885"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type1_body. Let $Q_$ be a function from natural numbers $_x_385$ to elements of $Type1$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_386$ and elements $_x_388$ of $Q_$ of $x_386$ to elements of $Q_$ of the sum of $x_386$ and $1$, for all natural numbers $x_385$, $Q_$ holds for $x_385$.",
    "output": "postulate nat_rect_Type1_body : (Q_ : (_x_385 : Nat) -> Type1) -> (_H_O : Q_ 0) -> (_H_S : (x_386 : Nat) -> (_x_388 : Q_ x_386) -> Q_ (plus x_386 1)) -> (x_385 : Nat) -> Q_ x_385"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_to_le1. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then if the exponentiation of $n$ and $p$ is less than or equal to the exponentiation of $m$ and $p$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_exp_to_le1 : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Leq (pow n p) (pow m p)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type4. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z659$ to elements of $Type4$, for all functions $_H1$ from elements $_z660$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_370$ and functions $_x_372$ from elements $_z660$ of $Eq$ of $Hterm$ and $x_370$ to elements of $P$ of $x_370$ and elements $_z660$ of $Eq$ of $Hterm$ and the sum of $x_370$ and $1$ to elements of $P$ of the sum of $x_370$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type4 : (Hterm : Nat) -> (P : (_z659 : Nat) -> Type4) -> (_H1 : (_z660 : Eq Hterm 0) -> P 0) -> (_H2 : (x_370 : Nat) -> (_x_372 : (_z660 : Eq Hterm x_370) -> P x_370) -> (_z660 : Eq Hterm (plus x_370 1)) -> P (plus x_370 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_op. Let $k$ be a natural number. Then for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f$ and $g$ from natural numbers to elements of $B$, $aop__o__op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$ is equal to $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $aop__o__op$ applied to $B$ and $nil$ and $op$ and $f$ applied to $i$ and $g$ applied to $i$.",
    "output": "postulate bigop_op : (k : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f : (_ : Nat) -> B) -> (g : (_ : Nat) -> B) -> Eq (aop__o__op B nil op (bigop k (\\ i : Nat -> p i) B nil (aop__o__op B nil op) (\\ i : Nat -> f i)) (bigop k (\\ i : Nat -> p i) B nil (aop__o__op B nil op) (\\ i : Nat -> g i))) (bigop k (\\ i : Nat -> p i) B nil (aop__o__op B nil op) (\\ i : Nat -> aop__o__op B nil op (f i) (g i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_dividesb_true. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $n$ is divisible by $m$, then $dividesb$ applied to $n$ and $m$ is equal to $true$.",
    "output": "postulate divides_to_dividesb_true : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : divisible n m) -> Eq (dividesb n m) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_aux_mn. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then $gcd_aux$ applied to $p$ and $m$ and $n$ is divisible by $m$ and $gcd_aux$ applied to $p$ and $m$ and $n$ is divisible by $n$.",
    "output": "postulate divides_gcd_aux_mn : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n p) -> and (divisible (gcd_aux p m n) m) (divisible (gcd_aux p m n) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_O. For all sets $B$, for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, if $0$ is equal to $l$, then $b1$ is equal to $b2$.",
    "output": "postulate lstar_inv_O : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R l b1 b2) -> (__1 : Eq 0 l) -> Eq b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_Sn_n. Let $n$ be a natural number. Then $1$ is equal to the difference of the sum of $n$ and $1$ and $n$.",
    "output": "postulate minus_Sn_n : (n : Nat) -> Eq 1 (minus (plus n 1) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_l$ be a list of natural numbers. Let $_n \\in N$. Then we can say that $all_below$ holds for $_l$ and $_n$.",
    "output": "postulate all_below : (_l : list Nat) -> (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_nat. Let $return_sort$ be an element of $Sort$. Then for all functions $return_type$ from natural numbers $z$ to elements of $return_sort$, for all functions $return$ from natural numbers $z$ to elements of $return_type$ of $z$, for all natural numbers $z$, $return_type$ holds for $z$.",
    "output": "postulate filter_nat : (return_sort : Sort) -> (return_type : (z : Nat) -> return_sort) -> (return : (z : Nat) -> return_type z) -> (z : Nat) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_ind_body. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all functions $Q_$ from natural numbers $x_1337$ and elements $x_1336$ of $B$ and elements $x_1335$ of $B$ and elements $_x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$ to propositions, for all functions $_H_lstar_r_O$ from elements $b$ of $B$ to elements of $Q_$ of $0$ and $b$ and $b$ and $lstar_r_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_r_S$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements $x_1340$ of $lstar_r$ of $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $B$ and elements $x_1339$ of $_R$ of $b$ and $b2$ and elements $_x_1342$ of $Q_$ of $l$ and $b1$ and $b$ and $x_1340$ to elements of $Q_$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $x_1340$ and $b2$ and $x_1339$, for all natural numbers $x_1337$, for all elements $x_1336$ and $x_1335$ of $B$, for all elements $x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$, $Q_$ holds for $x_1337$ and $x_1336$ and $x_1335$ and $x_1338$.",
    "output": "postulate lstar_r_ind_body : (B : Set) -> (_R : relation B) -> (Q_ : (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (_x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Prop) -> (_H_lstar_r_O : (b : B) -> Q_ 0 b b (lstar_r_O B _R b)) -> (_H_lstar_r_S : (l : Nat) -> (b1 : B) -> (b : B) -> (x_1340 : lstar_r B _R l b1 b) -> (b2 : B) -> (x_1339 : _R b b2) -> (_x_1342 : Q_ l b1 b x_1340) -> Q_ (plus l 1) b1 b2 (lstar_r_S B _R l b1 b x_1340 b2 x_1339)) -> (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Q_ x_1337 x_1336 x_1335 x_1338"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_fg. For all functions $f$ and $g$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $__$ of $bijn$ of $f$ and $n$, for all elements $__1$ of $bijn$ of $g$ and $n$, $bijn$ holds for the function that maps $p$ to $f$ applied to $g$ applied to $p$ and $n$.",
    "output": "postulate bijn_fg : (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : bijn f n) -> (__1 : bijn g n) -> bijn (\\ p : Nat -> f (g p)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1692. Let $m$ be a natural number. Then if $0$ is less than $m$, then for all natural numbers $a$ and $x358$ and $x359$, $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x358$ and the product of $x358$ and $x359$ is equal to the product of $x358$ and the sum of $x359$ and $1$.",
    "output": "postulate let_clause_1692 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x358 : Nat) -> (x359 : Nat) -> Eq (aop__o__op Nat 0 plusAC x358 (times x358 x359)) (times x358 (plus x359 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_times. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $m$, then if $0$ is less than $n$, then if $p$ is prime, then $ord$ applied to the product of $m$ and $n$ and $p$ is equal to the sum of $ord$ applied to $m$ and $p$ and $ord$ applied to $n$ and $p$.",
    "output": "postulate ord_times : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 m) -> (__1 : Lt 0 n) -> (__2 : prime p) -> Eq (ord (times m n) p) (plus (ord m p) (ord n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_fwd_plus_plus_ge. For all natural numbers $m1$ and $m2$, if $m2$ is less than or equal to $m1$, then for all natural numbers $n1$ and $n2$, if the sum of $m1$ and $n1$ is less than or equal to the sum of $m2$ and $n2$, then $n1$ is less than or equal to $n2$.",
    "output": "postulate le_fwd_plus_plus_ge : (m1 : Nat) -> (m2 : Nat) -> (_ : Leq m2 m1) -> (n1 : Nat) -> (n2 : Nat) -> (__1 : Leq (plus m1 n1) (plus m2 n2)) -> Leq n1 n2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_S_dx. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$, $ex2$ holds for $B$ and the function that maps $b$ to $lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and the function that maps $b$ to $R$ applied to $b$ and $b2$.",
    "output": "postulate lstar_inv_S_dx : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R (plus l 1) b1 b2) -> ex2 B (\\ b : B -> lstar B R l b1 b) (\\ b : B -> R b b2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n \\in N$. Then the square root of $_n$ is a natural number.",
    "output": "postulate sqrt : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_ACop. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $ACop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $ACop$ of $A$ and $_nil$ to elements of $return_type$ of $z$, for all elements $z$ of $ACop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate filter_ACop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : ACop A _nil) -> return_sort) -> (return : (z : ACop A _nil) -> return_type z) -> (z : ACop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp5_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_959$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_959$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_959$.",
    "output": "postulate Dop_rect_CProp5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_959 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_959 : Dop A _nil) -> Q_ x_959"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_exists. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$, if $m$ is less than $n$, then if $f$ applied to $m$ is equal to $true$, then for all functions $__2$ from natural numbers $i$ and elements $__2$ of $Lt$ of $m$ and $i$ and elements $__3$ of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max$ applied to $n$ and $f$ is equal to $m$.",
    "output": "postulate max_exists : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Eq (f m) true) -> (__2 : (i : Nat) -> (__2 : Lt m i) -> (__3 : Lt i n) -> Eq (f i) false) -> Eq (max n f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_2_pred. For all natural numbers $n$, the product of $2$ and $pred$ applied to $n$ is less than or equal to $pred$ applied to the product of $2$ and $n$.",
    "output": "postulate times_2_pred : (n : Nat) -> Leq (times 2 (pred n)) (pred (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSSSSSO. $B$ applied to $8$ is equal to $70$.",
    "output": "postulate B_SSSSSSSSO : Eq (B 8) 70"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all functions $Q_$ from natural numbers $x_1233$ and elements $x_1232$ of $B$ and elements $x_1231$ of $B$ and elements $_x_1234$ of $lstar$ of $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$ to propositions, for all functions $_H_lstar_O$ from elements $b$ of $B$ to elements of $Q_$ of $0$ and $b$ and $b$ and $lstar_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_S$ from elements $b1$ of $B$ and elements $b$ of $B$ and elements $x_1236$ of $_R$ of $b1$ and $b$ and natural numbers $l$ and elements $b2$ of $B$ and elements $x_1235$ of $lstar$ of $B$ and $_R$ and $l$ and $b$ and $b2$ and elements $_x_1238$ of $Q_$ of $l$ and $b$ and $b2$ and $x_1235$ to elements of $Q_$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_S$ applied to $B$ and $_R$ and $b1$ and $b$ and $x_1236$ and $l$ and $b2$ and $x_1235$, for all natural numbers $x_1233$, for all elements $x_1232$ and $x_1231$ of $B$, for all elements $x_1234$ of $lstar$ of $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$, $Q_$ holds for $x_1233$ and $x_1232$ and $x_1231$ and $x_1234$.",
    "output": "postulate lstar_ind : (B : Set) -> (_R : relation B) -> (Q_ : (x_1233 : Nat) -> (x_1232 : B) -> (x_1231 : B) -> (_x_1234 : lstar B _R x_1233 x_1232 x_1231) -> Prop) -> (_H_lstar_O : (b : B) -> Q_ 0 b b (lstar_O B _R b)) -> (_H_lstar_S : (b1 : B) -> (b : B) -> (x_1236 : _R b1 b) -> (l : Nat) -> (b2 : B) -> (x_1235 : lstar B _R l b b2) -> (_x_1238 : Q_ l b b2 x_1235) -> Q_ (plus l 1) b1 b2 (lstar_S B _R b1 b x_1236 l b2 x_1235)) -> (x_1233 : Nat) -> (x_1232 : B) -> (x_1231 : B) -> (x_1234 : lstar B _R x_1233 x_1232 x_1231) -> Q_ x_1233 x_1232 x_1231 x_1234"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_to_plus. Let $n$ and $m$ and $p$ be natural numbers. Then if $m$ is less than or equal to $n$, then if the difference of $n$ and $m$ is equal to $p$, then $n$ is equal to the sum of $m$ and $p$.",
    "output": "postulate minus_to_plus : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq m n) -> (__1 : Eq (minus n m) p) -> Eq n (plus m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker_ab. For all natural numbers $a$ and $b$, for all lists $l$ of natural numbers, $checker$ applied to $cons$ applied to $Nat$ and $a$ and $cons$ applied to $Nat$ and $b$ and $l$ is equal to $andb$ applied to $andb$ applied to $leb$ applied to the sum of $a$ and $1$ and $b$ and $leb$ applied to $b$ and the product of $2$ and $a$ and $checker$ applied to $cons$ applied to $Nat$ and $b$ and $l$.",
    "output": "postulate checker_ab : (a : Nat) -> (b : Nat) -> (l : list Nat) -> Eq (checker (cons Nat a (cons Nat b l))) (andb (andb (leb (plus a 1) b) (leb b (times 2 a))) (checker (cons Nat b l)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type2. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_869$ of $Aop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_869$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_869$.",
    "output": "postulate Aop_rect_Type2 : (A : Set) -> (_nil : A) -> (Q_ : (_x_869 : Aop A _nil) -> Type2) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_869 : Aop A _nil) -> Q_ x_869"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_pi. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, for all functions $f$ and $g$ from natural numbers to natural numbers, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to the product of $f$ applied to $i$ and $g$ applied to $i$ is equal to the product of $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $f$ applied to $i$ and $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g$ applied to $i$.",
    "output": "postulate times_pi : (n : Nat) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> times (f i) (g i))) (times (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> f i)) (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15321. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $0$ is equal to $n$, then if $0$ is divisible by $m$, then for all natural numbers $q$, if $m$ is equal to the product of $0$ and $q$, then $m$ is equal to $0$.",
    "output": "postulate let_clause_15321 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 m) -> (eqn0 : Eq 0 n) -> (_clearme : divisible 0 m) -> (q : Nat) -> (eqm : Eq m (times 0 q)) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker_body. Let $__$ be a list of natural numbers. Then $bool$.",
    "output": "postulate checker_body : (_ : list Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_ind_body. For all natural numbers $_n$ and $_m$, for all functions $Q_$ from elements $_x_1192$ of $divisible$ of $_n$ and $_m$ to propositions, for all functions $_H_quotient$ from natural numbers $q$ and elements $x_1193$ of $Eq$ of $_m$ and the product of $_n$ and $q$ to elements of $Q_$ of $quotient$ applied to $_n$ and $_m$ and $q$ and $x_1193$, if $_n$ is divisible by $_m$, then $Q_$ holds for $x_1192$.",
    "output": "postulate divides_ind_body : (_n : Nat) -> (_m : Nat) -> (Q_ : (_x_1192 : divisible _n _m) -> Prop) -> (_H_quotient : (q : Nat) -> (x_1193 : Eq _m (times _n q)) -> Q_ (quotient _n _m q x_1193)) -> (x_1192 : divisible _n _m) -> Q_ x_1192"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_f$ be a function from natural numbers to natural numbers. Then we can say that $increasing$ holds for $_f$.",
    "output": "postulate increasing : (_f : (_ : Nat) -> Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus. Let $n$ and $m$ and $p$ be natural numbers. Then the difference of the difference of $n$ and $m$ and $p$ is equal to the difference of $n$ and the sum of $m$ and $p$.",
    "output": "postulate minus_plus : (n : Nat) -> (m : Nat) -> (p : Nat) -> Eq (minus (minus n m) p) (minus n (plus m p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_minus_to_plus_r. For all natural numbers $a$ and $b$ and $c$, if $a$ is less than the difference of $b$ and $c$, then the sum of $a$ and $c$ is less than $b$.",
    "output": "postulate lt_minus_to_plus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt a (minus b c)) -> Lt (plus a c) b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "To_max. For all natural numbers $i$ and $n$ and $m$, if $n$ is less than or equal to $i$, then if $m$ is less than or equal to $i$, then $max$ applied to $n$ and $m$ is less than or equal to $i$.",
    "output": "postulate to_max : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq n i) -> (__1 : Leq m i) -> Leq (max n m) i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_fact. For all natural numbers $n$ and $i$, if $0$ is less than $i$, then if $i$ is less than or equal to $n$, then $i$ is divisible by the factorial of $n$.",
    "output": "postulate divides_fact : (n : Nat) -> (i : Nat) -> (_ : Lt 0 i) -> (__1 : Leq i n) -> divisible i (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_d_gcd. For all natural numbers $m$ and $n$ and $d$, if $d$ is divisible by $m$, then if $d$ is divisible by $n$, then $d$ is divisible by the greatest common divisor of $n$ and $m$.",
    "output": "postulate divides_d_gcd : (m : Nat) -> (n : Nat) -> (d : Nat) -> (_ : divisible d m) -> (__1 : divisible d n) -> divisible d (gcd n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_aux. Let $p$ and $m$ and $n$ and $d$ be natural numbers. Then if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then if $d$ is divisible by $m$, then if $d$ is divisible by $n$, then $d$ is divisible by $gcd_aux$ applied to $p$ and $m$ and $n$.",
    "output": "postulate divides_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (d : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n p) -> (__3 : divisible d m) -> (__4 : divisible d n) -> divisible d (gcd_aux p m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp0. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1692$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1693$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp0 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1692 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1693 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B. Let $_n$ be a natural number. Then $Nat$.",
    "output": "postulate B : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_min_f_min_g. Let $f$ and $g$ be functions from natural numbers to booleans. Then for all natural numbers $n$ and $b$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $n$ and $b$ and elements $__2$ of $Eq$ of $f$ applied to $i$ and $true$ to elements of $Eq$ of $g$ applied to $i$ and $true$, $min$ applied to $n$ and $b$ and $g$ is less than or equal to $min$ applied to $n$ and $b$ and $f$.",
    "output": "postulate le_min_f_min_g : (f : (_ : Nat) -> bool) -> (g : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : (i : Nat) -> (_ : Leq b i) -> (__1 : Lt i (plus n b)) -> (__2 : Eq (f i) true) -> Eq (g i) true) -> Leq (min n b g) (min n b f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_not_bertrand_to_bertrand. For all natural numbers $n$, if it is not the case that $not_bertrand$ holds for $n$, then $bertrand$ holds for $n$.",
    "output": "postulate not_not_bertrand_to_bertrand : (n : Nat) -> (_ : not (not_bertrand n)) -> bertrand n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_p_ord_inv. For all natural numbers $p$ and $m$ and $x$, if $ord$ applied to $x$ and $p$ is less than $m$, then $mod$ applied to $p_ord_inv$ applied to $p$ and $m$ and $x$ and $m$ is equal to $ord$ applied to $x$ and $p$.",
    "output": "postulate mod_p_ord_inv : (p : Nat) -> (m : Nat) -> (x : Nat) -> (_ : Lt (ord x p) m) -> Eq (mod (p_ord_inv p m x) m) (ord x p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_square_exp. Let $n$ be a natural number. Then if $3$ is less than $n$, then the exponentiation of $n$ and $2$ is less than or equal to the exponentiation of $2$ and $n$.",
    "output": "postulate le_square_exp : (n : Nat) -> (_ : Lt 3 n) -> Leq (pow n 2) (pow 2 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type2. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1716$ of $Dop$ of $x1$ and $x2$ to elements of $Type2$, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1717$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type2 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1716 : Dop x1 x2) -> Type2) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1717 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_or_ge. Let $m$ and $n$ be natural numbers. Then $m$ is less than $n$ or $n$ is less than or equal to $m$.",
    "output": "postulate lt_or_ge : (m : Nat) -> (n : Nat) -> or (Lt m n) (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_SO_n. For all natural numbers $n$, $1$ is divisible by $n$.",
    "output": "postulate divides_SO_n : (n : Nat) -> divisible 1 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_n_O. For all natural numbers $n$, if $0$ is less than $n$, then the exponentiation of $0$ and $n$ is equal to $0$.",
    "output": "postulate exp_n_O : (n : Nat) -> (_ : Lt 0 n) -> Eq (pow 0 n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_i_j_j. For all natural numbers $i$ and $j$, $transpose$ applied to $i$ and $j$ and $j$ is equal to $i$.",
    "output": "postulate transpose_i_j_j : (i : Nat) -> (j : Nat) -> Eq (transpose i j j) i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_ind. For all sets $_A$, for all functions $Q_$ from elements $_x_915$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_915$ of $range$ of $_A$, $Q_$ holds for $x_915$.",
    "output": "postulate range_ind : (_A : Set) -> (Q_ : (_x_915 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_915 : range _A) -> Q_ x_915"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_S_sigma_p. For all natural numbers $a$ and $n$, the exponentiation of the sum of $a$ and $1$ and $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $k$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $k$ to the product of $bc$ applied to $n$ and $k$ and the exponentiation of $a$ and the difference of $n$ and $k$.",
    "output": "postulate exp_S_sigma_p : (a : Nat) -> (n : Nat) -> Eq (pow (plus a 1) n) (bigop (plus n 1) (\\ k : Nat -> true) Nat 0 plus (\\ k : Nat -> times (bc n k) (pow a (minus n k))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_to_le_to_lt. For all natural numbers $n$ and $m$, if $n$ is not equal to $m$, then if $n$ is less than or equal to $m$, then $n$ is less than $m$.",
    "output": "postulate not_eq_to_le_to_lt : (n : Nat) -> (m : Nat) -> (_ : not (Eq n m)) -> (__1 : Leq n m) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_1_to_lt_O. Let $i$ and $n$ be natural numbers. Then if $1$ is less than $n$, then if the greatest common divisor of $i$ and $n$ is equal to $1$, then $0$ is less than $i$.",
    "output": "postulate gcd_1_to_lt_O : (i : Nat) -> (n : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (gcd i n) 1) -> Lt 0 i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type4. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_863$ of $Aop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_863$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_863$.",
    "output": "postulate Aop_rect_Type4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_863 : Aop A _nil) -> Type4) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_863 : Aop A _nil) -> Q_ x_863"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_sqrt_nl. For all natural numbers $n$ and $m$, if $3$ is less than $n$, then the product of the product of $m$ and $pred$ applied to $m$ and $n$ is less than or equal to the exponentiation of the square root of the product of the exponentiation of $m$ and $2$ and $n$ and $2$.",
    "output": "postulate le_sqrt_nl : (n : Nat) -> (m : Nat) -> (_ : Lt 3 n) -> Leq (times (times m (pred m)) n) (pow (sqrt (times (pow m 2) n)) 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp3. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_961$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_961$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_961$.",
    "output": "postulate Dop_rect_CProp3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_961 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_961 : Dop A _nil) -> Q_ x_961"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_minus_comm. For all natural numbers $a$ and $b$ and $c$, the difference of the difference of $a$ and $b$ and $c$ is equal to the difference of the difference of $a$ and $c$ and $b$.",
    "output": "postulate minus_minus_comm : (a : Nat) -> (b : Nat) -> (c : Nat) -> Eq (minus (minus a b) c) (minus (minus a c) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type0_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_873$ of $Aop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_873$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_873$.",
    "output": "postulate Aop_rect_Type0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_873 : Aop A _nil) -> Set) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_873 : Aop A _nil) -> Q_ x_873"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1012. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $i$, for all functions $Hind$ from natural numbers $b$ to elements of $prod$ of $Prop$ and $Prop$ and $Eq$ applied to $f$ applied to $let_m2$ applied to $f$ and $n$ and $i$ and $b$ and absurdity and the function that maps $__$ to $Eq$ applied to $let_m2$ applied to $f$ and $n$ and $i$ and $b$ and the sum of $i$ and $b$, for all natural numbers $b$, if $f$ applied to $b$ is equal to $true$, then if $f$ applied to $b$ is equal to absurdity, then absurdity is equal to $true$.",
    "output": "postulate let_clause_1012 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (i : Nat) -> (Hind : (b : Nat) -> prod Prop Prop (Eq (f (let_m2 f n i b)) false) (\\ _ : Eq (f (let_m2 f n i b)) false -> Eq (let_m2 f n i b) (plus i b))) -> (b : Nat) -> (fb : Eq (f b) true) -> (eqm : Eq (f b) false) -> Eq false true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_CProp1_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_883$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_883$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_883$.",
    "output": "postulate Aop_rect_CProp1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_883 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_883 : Aop A _nil) -> Q_ x_883"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_SO. Let $n$ be a natural number. Then if $1$ is less than $n$, then the logarithm of $n$ and $1$ is equal to $0$.",
    "output": "postulate log_SO : (n : Nat) -> (_ : Lt 1 n) -> Eq (log n 1) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15311. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $n$ is divisible by $m$, then for all natural numbers $d$ and $p$, if $m$ is equal to the product of $n$ and the sum of $p$ and $1$, then $m$ is equal to the sum of $n$ and the product of $n$ and $p$.",
    "output": "postulate let_clause_15311 : (n : Nat) -> (m : Nat) -> (posm : Lt 0 m) -> (_clearme : divisible n m) -> (d : Nat) -> (p : Nat) -> (eqm : Eq m (times n (plus p 1))) -> Eq m (plus n (times n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_sumI. For all natural numbers $a$ and $b$ and $c$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, if $a$ is less than or equal to $b$, then if $b$ is less than or equal to $c$, then $bigop$ applied to the difference of $c$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$ is equal to $op$ applied to $B$ and $nil$ and $op$ and $bigop$ applied to the difference of $c$ and $b$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $b$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $b$ and $bigop$ applied to the difference of $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to the sum of $i$ and $a$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to the sum of $i$ and $a$.",
    "output": "postulate bigop_sumI : (a : Nat) -> (b : Nat) -> (c : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> B) -> (_ : Leq a b) -> (__1 : Leq b c) -> Eq (bigop (minus c a) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))) (op B nil op (bigop (minus c b) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i b)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i b))) (bigop (minus b a) (\\ i : Nat -> (\\ i0 : Nat -> p i0) (plus i a)) B nil (op B nil op) (\\ i : Nat -> (\\ i0 : Nat -> f i0) (plus i a))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_log. For all natural numbers $p$ and $n$, if $0$ is less than $n$, then the exponentiation of $p$ and the logarithm of $p$ and $n$ is less than or equal to $n$.",
    "output": "postulate le_exp_log : (p : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> Leq (pow p (log p n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_CProp1. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1752$ of $Dop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1753$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp1 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1752 : Dop x1 x2) -> Prop) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1753 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_1_max_prime. For all natural numbers $n$, if $1$ is less than $n$, then $1$ is less than $max$ applied to the sum of $n$ and $1$ and the function that maps $i$ to $andb$ applied to $primeb$ applied to $i$ and $dividesb$ applied to $i$ and $n$.",
    "output": "postulate lt_1_max_prime : (n : Nat) -> (_ : Lt 1 n) -> Lt 1 (max (plus n 1) (\\ i : Nat -> andb (primeb i) (dividesb i n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type4. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1506$ of $Aop$ of $x1$ and $x2$ to elements of $Type4$, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1507$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1506 : Aop x1 x2) -> Type4) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1507 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_times_div_div_times. Let $a$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then the product of $a$ and the quotient of $n$ and $m$ is less than or equal to the quotient of the product of $a$ and $n$ and $m$.",
    "output": "postulate le_times_div_div_times : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Leq (times a (div n m)) (div (times a n) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_exists. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $t$ and $m$, if $m$ is less than $t$, then if $f$ applied to $m$ is equal to $true$, then for all natural numbers $k$ and $b$, if $b$ is less than or equal to $m$, then for all functions $__3$ from natural numbers $i$ and elements $__3$ of $Leq$ of $b$ and $i$ and elements $__4$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, if $t$ is equal to the sum of $k$ and $b$, then $min$ applied to $k$ and $b$ and $f$ is equal to $m$.",
    "output": "postulate min_exists : (f : (_ : Nat) -> bool) -> (t : Nat) -> (m : Nat) -> (_ : Lt m t) -> (__1 : Eq (f m) true) -> (k : Nat) -> (b : Nat) -> (__2 : Leq b m) -> (__3 : (i : Nat) -> (__3 : Leq b i) -> (__4 : Lt i m) -> Eq (f i) false) -> (__4 : Eq t (plus k b)) -> Eq (min k b f) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_S_to_permut_transpose. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $m$, for all elements $__$ of $permut$ of $f$ and the sum of $m$ and $1$, $permut$ holds for the function that maps $n$ to $transpose$ applied to $f$ applied to the sum of $m$ and $1$ and the sum of $m$ and $1$ and $f$ applied to $n$ and $m$.",
    "output": "postulate permut_S_to_permut_transpose : (f : (_ : Nat) -> Nat) -> (m : Nat) -> (_ : permut f (plus m 1)) -> permut (\\ n : Nat -> transpose (f (plus m 1)) (plus m 1) (f n)) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_div_mod_spec. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $n$ is divisible by $m$, then $div_mod_spec$ holds for $m$ and $n$ and the quotient of $m$ and $n$ and $0$.",
    "output": "postulate divides_to_div_mod_spec : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : divisible n m) -> div_mod_spec m n (div m n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type5_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_893$ of $ACop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_893$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_893$.",
    "output": "postulate ACop_rect_Type5_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_893 : ACop A _nil) -> Type5) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_893 : ACop A _nil) -> Q_ x_893"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Assoc_plus1. For all natural numbers $a$ and $b$ and $c$, the sum of $c$ and the sum of $b$ and $a$ is equal to the sum of the sum of $b$ and $c$ and $a$.",
    "output": "postulate assoc_plus1 : (a : Nat) -> (b : Nat) -> (c : Nat) -> Eq (plus c (plus b a)) (plus (plus b c) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ be a natural number. Then we can say that $bertrand$ holds for $_n$.",
    "output": "postulate bertrand : (_n : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1600. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the greatest common divisor of $m$ and $n$ is equal to the difference of the product of $n$ and $c$ and the product of $m$ and $d$.",
    "output": "postulate let_clause_1600 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (gcd m n) (minus (times n c) (times m d))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_n_O. For all natural numbers $n$, $n$ is equal to the sum of $n$ and $0$.",
    "output": "postulate plus_n_O : (n : Nat) -> Eq n (plus n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_m1. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $_x_365$ and $b$, $Nat$.",
    "output": "postulate let_m1 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (_x_365 : Nat) -> (b : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_div_S_div. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if the exponentiation of $m$ and $2$ is less than or equal to $n$, then the quotient of $n$ and the sum of $m$ and $1$ is less than the quotient of $n$ and $m$.",
    "output": "postulate lt_div_S_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Leq (pow m 2) n) -> Lt (div n (plus m 1)) (div n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_lt. Let $n$ and $m$ be natural numbers. Then $decidable$ holds for $Lt$ applied to $n$ and $m$.",
    "output": "postulate decidable_lt : (n : Nat) -> (m : Nat) -> decidable (Lt n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_minus_r. Let $a$ and $b$ and $c$ be natural numbers. Then if the sum of $a$ and $b$ is less than or equal to $c$, then $a$ is less than or equal to the difference of $c$ and $b$.",
    "output": "postulate le_plus_to_minus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Leq (plus a b) c) -> Leq a (minus c b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_spec_ind. Let $_n$ and $_b$ be natural numbers. Then for all functions $_f$ from natural numbers to booleans, for all functions $Q_$ from natural numbers $x_1075$ and elements $_x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$ to propositions, for all functions $_H_found_min_spec$ from natural numbers $m$ and elements $x_1080$ of $Leq$ of $_b$ and $m$ and elements $x_1079$ of $Lt$ of $m$ and the sum of $_n$ and $_b$ and elements $x_1078$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $x_1077$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and $m$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $m$ and $found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $m$ and $x_1080$ and $x_1079$ and $x_1078$ and $x_1077$, for all functions $_H_not_found_min_spec$ from functions $x_1081$ from natural numbers $i$ and elements of $Leq$ of $_b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $_n$ and $_b$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of the sum of $_n$ and $_b$ and $not_found_min_spec$ applied to $_n$ and $_b$ and $_f$ and $x_1081$, for all natural numbers $x_1075$, for all elements $x_1076$ of $min_spec$ of $_n$ and $_b$ and $_f$ and $x_1075$, $Q_$ holds for $x_1075$ and $x_1076$.",
    "output": "postulate min_spec_ind : (_n : Nat) -> (_b : Nat) -> (_f : (_ : Nat) -> bool) -> (Q_ : (x_1075 : Nat) -> (_x_1076 : min_spec _n _b _f x_1075) -> Prop) -> (_H_found_min_spec : (m : Nat) -> (x_1080 : Leq _b m) -> (x_1079 : Lt m (plus _n _b)) -> (x_1078 : Eq (_f m) true) -> (x_1077 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i m) -> Eq (_f i) false) -> Q_ m (found_min_spec _n _b _f m x_1080 x_1079 x_1078 x_1077)) -> (_H_not_found_min_spec : (x_1081 : (i : Nat) -> (_ : Leq _b i) -> (__1 : Lt i (plus _n _b)) -> Eq (_f i) false) -> Q_ (plus _n _b) (not_found_min_spec _n _b _f x_1081)) -> (x_1075 : Nat) -> (x_1076 : min_spec _n _b _f x_1075) -> Q_ x_1075 x_1076"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_fact_to_divides. Let $p$ and $n$ be natural numbers. Then if $p$ is prime, then if $p$ is divisible by the factorial of $n$, then $ex$ holds for $Nat$ and the function that maps $m$ to the conjunction of the conjunction of $Lt$ applied to $0$ and $m$ and $Leq$ applied to $m$ and $n$ and $divisible$ applied to $p$ and $m$.",
    "output": "postulate divides_fact_to_divides : (p : Nat) -> (n : Nat) -> (_ : prime p) -> (__1 : divisible p (factorial n)) -> ex Nat (\\ m : Nat -> and (and (Lt 0 m) (Leq m n)) (divisible p m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TimesA. $Aop$ holds for $Nat$ and $1$.",
    "output": "postulate timesA : Aop Nat 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_times_plus_to_congruent. For all natural numbers $n$ and $m$ and $p$ and $r$, if $0$ is less than $p$, then if $n$ is equal to the sum of the product of $r$ and $p$ and $m$, then $congruent$ holds for $n$ and $m$ and $p$.",
    "output": "postulate eq_times_plus_to_congruent : (n : Nat) -> (m : Nat) -> (p : Nat) -> (r : Nat) -> (_ : Lt 0 p) -> (__1 : Eq n (plus (times r p) m)) -> congruent n m p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Null. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Dop$ of $A$ and $nil$, for all elements $a$ of $A$, $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ is equal to $nil$.",
    "output": "postulate null : (A : Set) -> (nil : A) -> (xxx : Dop A nil) -> (a : A) -> Eq (prod A nil xxx a nil) nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Psi_def. For all natural numbers $n$, $Psi$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and the logarithm of $p$ and $n$.",
    "output": "postulate psi_def : (n : Nat) -> Eq (Psi n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (log p n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_4_to_le_B_exp. For all natural numbers $n$, if $4$ is less than $n$, then $B$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $2$.",
    "output": "postulate lt_4_to_le_B_exp : (n : Nat) -> (_ : Lt 4 n) -> Leq (B (times 2 n)) (pow 2 (minus (times 2 n) 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bk. For all natural numbers $_n$, $Nat$.",
    "output": "postulate Bk : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_true_to_le. Let $n$ and $m$ be natural numbers. Then if $leb$ applied to $n$ and $m$ is equal to $true$, then $n$ is less than or equal to $m$.",
    "output": "postulate leb_true_to_le : (n : Nat) -> (m : Nat) -> (_ : Eq (leb n m) true) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound2. Let $n$ and $m$ be natural numbers. Then $Nat$.",
    "output": "postulate let_upper_bound2 : (n : Nat) -> (m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_aux. For all natural numbers $_p$ and $_m$ and $_n$, $Nat$.",
    "output": "postulate mod_aux : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus. Let $n1$ and $n2$ and $m1$ and $m2$ be natural numbers. Then if $n1$ is less than or equal to $n2$, then if $m1$ is less than or equal to $m2$, then the sum of $n1$ and $m1$ is less than or equal to the sum of $n2$ and $m2$.",
    "output": "postulate le_plus : (n1 : Nat) -> (n2 : Nat) -> (m1 : Nat) -> (m2 : Nat) -> (_ : Leq n1 n2) -> (__1 : Leq m1 m2) -> Leq (plus n1 m1) (plus n2 m2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type2_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_923$ of $range$ of $_A$ to elements of $Type2$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_923$ of $range$ of $_A$, $Q_$ holds for $x_923$.",
    "output": "postulate range_rect_Type2_body : (_A : Set) -> (Q_ : (_x_923 : range _A) -> Type2) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_923 : range _A) -> Q_ x_923"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_true_to_lt_O. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $m$ is divisible by $n$, then $0$ is less than $m$.",
    "output": "postulate dividesb_true_to_lt_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : divisible m n) -> Lt 0 m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Iter. Let $H$ be a set. Then for all functions $__$ from elements of $H$ to elements of $H$, for all natural numbers $__1$, for all elements $__2$ of $H$, $H$.",
    "output": "postulate iter : (H : Set) -> (_ : (_ : H) -> H) -> (__1 : Nat) -> (__2 : H) -> H"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_transpose. Let $i$ and $j$ and $n$ be natural numbers. Then if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then $permut$ holds for $transpose$ applied to $i$ and $j$ and $n$.",
    "output": "postulate permut_transpose : (i : Nat) -> (j : Nat) -> (n : Nat) -> (_ : Leq i n) -> (__1 : Leq j n) -> permut (transpose i j) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_inv_S1. Let $x$ and $y$ be natural numbers. Then if the sum of $x$ and $1$ is less than or equal to $y$, then $ex2$ holds for $Nat$ and the function that maps $z$ to $Leq$ applied to $x$ and $z$ and the function that maps $z$ to $Eq$ applied to $y$ and the sum of $z$ and $1$.",
    "output": "postulate le_inv_S1 : (x : Nat) -> (y : Nat) -> (_ : Leq (plus x 1) y) -> ex2 Nat (\\ z : Nat -> Leq x z) (\\ z : Nat -> Eq y (plus z 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_exp1. For all natural numbers $p$ and $n$ and $m$, if $1$ is less than $p$, then the logarithm of $p$ and the exponentiation of $n$ and $m$ is less than or equal to the product of $m$ and the sum of the logarithm of $p$ and $n$ and $1$.",
    "output": "postulate log_exp1 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> Leq (log p (pow n m)) (times m (plus (log p n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp1. For all natural numbers $n$ and $m$ and $p$, if $0$ is less than $p$, then if $n$ is less than $m$, then the exponentiation of $n$ and $p$ is less than the exponentiation of $m$ and $p$.",
    "output": "postulate lt_exp1 : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Lt n m) -> Lt (pow n p) (pow m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_aux_body. Let $_p$ and $_m$ and $_n$ be natural numbers. Then $Nat$.",
    "output": "postulate gcd_aux_body : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_BPsi. For all natural numbers $n$, $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of $B$ applied to the product of $2$ and $n$ and $Psi$ applied to $n$.",
    "output": "postulate le_Psi_BPsi : (n : Nat) -> Leq (Psi (times 2 n)) (times (B (times 2 n)) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_plus_minus_l. Let $x$ and $y$ and $z$ be natural numbers. Then if $y$ is less than or equal to $z$, then the difference of the sum of $z$ and $x$ and the difference of $z$ and $y$ is equal to the sum of $x$ and $y$.",
    "output": "postulate minus_plus_minus_l : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Leq y z) -> Eq (minus (plus z x) (minus z y)) (plus x y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type2_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_869$ of $Aop$ of $A$ and $_nil$ to elements of $Type2$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_869$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_869$.",
    "output": "postulate Aop_rect_Type2_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_869 : Aop A _nil) -> Type2) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_869 : Aop A _nil) -> Q_ x_869"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $n$, for all functions $p1$ and $p2$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all natural numbers $n1$, for all functions $Hind$ from functions from natural numbers $i$ and elements of $Lt$ of $i$ and $n1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$ and functions $__1$ from natural numbers $i$ and elements $__1$ of $Lt$ of $i$ and $n1$ and elements $__2$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$ to elements of $Leq$ of $bigop$ applied to $n1$ and the function that maps $i$ to $p1$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g1$ applied to $i$ and $bigop$ applied to $n1$ and the function that maps $i$ to $p2$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g2$ applied to $i$, for all functions $H1$ from natural numbers $i$ and elements of $Lt$ of $i$ and the sum of $n1$ and $1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$, for all functions $H2$ from natural numbers $i$ and elements of $Lt$ of $i$ and the sum of $n1$ and $1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, if $p2$ applied to $n1$ is equal to $true$, then if $p1$ applied to $n1$ is equal to $true$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (n1 : Nat) -> (Hind : (_ : (i : Nat) -> (_ : Lt i n1) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (__1 : (i : Nat) -> (__1 : Lt i n1) -> (__2 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n1 (\\ i : Nat -> p1 i) Nat 0 plus (\\ i : Nat -> g1 i)) (bigop n1 (\\ i : Nat -> p2 i) Nat 0 plus (\\ i : Nat -> g2 i))) -> (H1 : (i : Nat) -> (_ : Lt i (plus n1 1)) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (H2 : (i : Nat) -> (_ : Lt i (plus n1 1)) -> (__1 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> (Hp2 : Eq (p2 n1) true) -> (Hp1 : Eq (p1 n1) true) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_1_to_lt_n. Let $i$ and $n$ be natural numbers. Then if $1$ is less than $n$, then if $i$ is less than or equal to $n$, then if the greatest common divisor of $i$ and $n$ is equal to $1$, then $i$ is less than $n$.",
    "output": "postulate gcd_1_to_lt_n : (i : Nat) -> (n : Nat) -> (_ : Lt 1 n) -> (__1 : Leq i n) -> (__2 : Eq (gcd i n) 1) -> Lt i n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_ind_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_915$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_915$ of $range$ of $_A$, $Q_$ holds for $x_915$.",
    "output": "postulate range_ind_body : (_A : Set) -> (Q_ : (_x_915 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_915 : range _A) -> Q_ x_915"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_inv_S1. For all natural numbers $x$ and $y$, if the sum of $x$ and $1$ is less than or equal to $y$, then $ex2$ holds for $Nat$ and the function that maps $z$ to $Leq$ applied to $x$ and $z$ and the function that maps $z$ to $Eq$ applied to $y$ and the sum of $z$ and $1$.",
    "output": "postulate le_inv_S1 : (x : Nat) -> (y : Nat) -> (_ : Leq (plus x 1) y) -> ex2 Nat (\\ z : Nat -> Leq x z) (\\ z : Nat -> Eq y (plus z 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_mod_aux_m_m. For all natural numbers $p$ and $n$ and $m$, if $n$ is less than or equal to $p$, then $mod_aux$ applied to $p$ and $n$ and $m$ is less than or equal to $m$.",
    "output": "postulate le_mod_aux_m_m : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq n p) -> Leq (mod_aux p n m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_n_Sm. For all natural numbers $n$ and $m$, the sum of $n$ and the product of $n$ and $m$ is equal to the product of $n$ and the sum of $m$ and $1$.",
    "output": "postulate times_n_Sm : (n : Nat) -> (m : Nat) -> Eq (plus n (times n m)) (times n (plus m 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp2. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1680$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1681$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp2 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1680 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1681 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_spec_ind_body. For all natural numbers $_n$, for all functions $_f$ from natural numbers to booleans, for all functions $Q_$ from natural numbers $x_971$ and elements $_x_972$ of $max_spec$ of $_n$ and $_f$ and $x_971$ to propositions, for all functions $_H_found_max_spec$ from natural numbers $m$ and elements $x_975$ of $Lt$ of $m$ and $_n$ and elements $x_974$ of $Eq$ of $_f$ applied to $m$ and $true$ and functions $x_973$ from natural numbers $i$ and elements of $Lt$ of $m$ and $i$ and elements $__1$ of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $m$ and $found_max_spec$ applied to $_n$ and $_f$ and $m$ and $x_975$ and $x_974$ and $x_973$, for all functions $_H_not_found_max_spec$ from functions $x_976$ from natural numbers $i$ and elements of $Lt$ of $i$ and $_n$ to elements of $Eq$ of $_f$ applied to $i$ and absurdity to elements of $Q_$ of $0$ and $not_found_max_spec$ applied to $_n$ and $_f$ and $x_976$, for all natural numbers $x_971$, for all elements $x_972$ of $max_spec$ of $_n$ and $_f$ and $x_971$, $Q_$ holds for $x_971$ and $x_972$.",
    "output": "postulate max_spec_ind_body : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (Q_ : (x_971 : Nat) -> (_x_972 : max_spec _n _f x_971) -> Prop) -> (_H_found_max_spec : (m : Nat) -> (x_975 : Lt m _n) -> (x_974 : Eq (_f m) true) -> (x_973 : (i : Nat) -> (_ : Lt m i) -> (__1 : Lt i _n) -> Eq (_f i) false) -> Q_ m (found_max_spec _n _f m x_975 x_974 x_973)) -> (_H_not_found_max_spec : (x_976 : (i : Nat) -> (_ : Lt i _n) -> Eq (_f i) false) -> Q_ 0 (not_found_max_spec _n _f x_976)) -> (x_971 : Nat) -> (x_972 : max_spec _n _f x_971) -> Q_ x_971 x_972"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10336. Let $n$ and $m$ be natural numbers. Then for all functions $Hind$ from natural numbers $p$ and elements of $Lt$ of $p$ and $m$ and elements $__1$ of $Lt$ of $1$ and $p$ to elements of $Leq$ of $Psi$ applied to $p$ and the product of $pred$ applied to $p$ and the exponentiation of $2$ and the difference of the product of $2$ and $p$ and $3$, for all natural numbers $a$, if $m$ is equal to the product of $2$ and $a$ or $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $m$ is equal to the sum of the product of $2$ and $a$ and $1$, then if $1$ is less than the sum of the product of $2$ and $a$ and $1$, then if $0$ is less than $a$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10336 : (n : Nat) -> (m : Nat) -> (Hind : (p : Nat) -> (_ : Lt p m) -> (__1 : Lt 1 p) -> Leq (Psi p) (times (pred p) (pow 2 (minus (times 2 p) 3)))) -> (a : Nat) -> (_clearme : or (Eq m (times 2 a)) (Eq m (plus (times 2 a) 1))) -> (Hm : Eq m (plus (times 2 a) 1)) -> (Hlt : Lt 1 (plus (times 2 a) 1)) -> (Ha : Lt 0 a) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_smallest_factor_n. For all natural numbers $n$, if $0$ is less than $n$, then $smallest_factor$ applied to $n$ is divisible by $n$.",
    "output": "postulate divides_smallest_factor_n : (n : Nat) -> (_ : Lt 0 n) -> divisible (smallest_factor n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_body. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all functions $Q_$ from natural numbers $x_1233$ and elements $x_1232$ of $B$ and elements $x_1231$ of $B$ and elements $_x_1234$ of $lstar$ of $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$ to propositions, for all functions $_H_lstar_O$ from elements $b$ of $B$ to elements of $Q_$ of $0$ and $b$ and $b$ and $lstar_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_S$ from elements $b1$ of $B$ and elements $b$ of $B$ and elements $x_1236$ of $_R$ of $b1$ and $b$ and natural numbers $l$ and elements $b2$ of $B$ and elements $x_1235$ of $lstar$ of $B$ and $_R$ and $l$ and $b$ and $b2$ and elements $_x_1238$ of $Q_$ of $l$ and $b$ and $b2$ and $x_1235$ to elements of $Q_$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_S$ applied to $B$ and $_R$ and $b1$ and $b$ and $x_1236$ and $l$ and $b2$ and $x_1235$, for all natural numbers $x_1233$, for all elements $x_1232$ and $x_1231$ of $B$, for all elements $x_1234$ of $lstar$ of $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$, $Q_$ holds for $x_1233$ and $x_1232$ and $x_1231$ and $x_1234$.",
    "output": "postulate lstar_ind_body : (B : Set) -> (_R : relation B) -> (Q_ : (x_1233 : Nat) -> (x_1232 : B) -> (x_1231 : B) -> (_x_1234 : lstar B _R x_1233 x_1232 x_1231) -> Prop) -> (_H_lstar_O : (b : B) -> Q_ 0 b b (lstar_O B _R b)) -> (_H_lstar_S : (b1 : B) -> (b : B) -> (x_1236 : _R b1 b) -> (l : Nat) -> (b2 : B) -> (x_1235 : lstar B _R l b b2) -> (_x_1238 : Q_ l b b2 x_1235) -> Q_ (plus l 1) b1 b2 (lstar_S B _R b1 b x_1236 l b2 x_1235)) -> (x_1233 : Nat) -> (x_1232 : B) -> (x_1231 : B) -> (x_1234 : lstar B _R x_1233 x_1232 x_1231) -> Q_ x_1233 x_1232 x_1231 x_1234"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_i_2n. For all natural numbers $n$ and $i$, if $1$ is less than $n$, then if $n$ is less than $i$, then if $i$ is less than or equal to the product of $2$ and $n$, then the logarithm of $i$ and the product of $2$ and $n$ is equal to $1$.",
    "output": "postulate log_i_2n : (n : Nat) -> (i : Nat) -> (_ : Lt 1 n) -> (__1 : Lt n i) -> (__2 : Leq i (times 2 n)) -> Eq (log i (times 2 n)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_theta. For all natural numbers $n$, $0$ is less than $theta$ applied to $n$.",
    "output": "postulate lt_O_theta : (n : Nat) -> Lt 0 (theta n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B_Psi4. For all natural numbers $n$, if $0$ is less than $n$, then the product of $2$ and $B$ applied to the product of $4$ and $n$ is less than or equal to $Psi$ applied to the product of $4$ and $n$.",
    "output": "postulate le_B_Psi4 : (n : Nat) -> (_ : Lt 0 n) -> Leq (times 2 (B (times 4 n))) (Psi (times 4 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type1_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_871$ of $Aop$ of $A$ and $_nil$ to elements of $Type1$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_871$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_871$.",
    "output": "postulate Aop_rect_Type1_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_871 : Aop A _nil) -> Type1) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_871 : Aop A _nil) -> Q_ x_871"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type2_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type2$, for all functions $_H_div_mod_spec_intro$ from elements $x_827$ of $Lt$ of $_r$ and $_m$ and elements $x_826$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_827$ and $x_826$, for all elements $x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_825$.",
    "output": "postulate div_mod_spec_rect_Type2_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_825 : div_mod_spec _n _m _q _r) -> Type2) -> (_H_div_mod_spec_intro : (x_827 : Lt _r _m) -> (x_826 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_827 x_826)) -> (x_825 : div_mod_spec _n _m _q _r) -> Q_ x_825"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15625. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15625 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $n$ be a natural number. Then if the exponentiation of $2$ and $7$ is less than or equal to $n$, then for all natural numbers $p$, if the sum of the square root of the product of $2$ and $n$ and $1$ is less than or equal to $p$, then if $p$ is less than the sum of the product of $2$ and $n$ and $1$, then if $leb$ applied to $2$ and $k$ applied to the product of $2$ and $n$ and $p$ is equal to $true$, then if the product of $2$ and $n$ is less than the exponentiation of $p$ and $2$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (len : Leq (pow 2 7) n) -> (p : Nat) -> (lep : Leq (plus (sqrt (times 2 n)) 1) p) -> (ltp : Lt p (plus (times 2 n) 1)) -> (Hc : Eq (leb 2 (k (times 2 n) p)) true) -> (H2n : Lt (times 2 n) (pow p 2)) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime2. Let $n$ and $m$ be natural numbers. Then $Nat$.",
    "output": "postulate let_previous_prime2 : (n : Nat) -> (m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type0. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_833$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to sets, for all functions $_H_div_mod_spec_intro$ from elements $x_835$ of $Lt$ of $_r$ and $_m$ and elements $x_834$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_835$ and $x_834$, for all elements $x_833$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_833$.",
    "output": "postulate div_mod_spec_rect_Type0 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_833 : div_mod_spec _n _m _q _r) -> Set) -> (_H_div_mod_spec_intro : (x_835 : Lt _r _m) -> (x_834 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_835 x_834)) -> (x_833 : div_mod_spec _n _m _q _r) -> Q_ x_833"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type0. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1728$ of $Dop$ of $x1$ and $x2$ to sets, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1729$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type0 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1728 : Dop x1 x2) -> Set) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1729 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times. Let $n$ and $m$ and $p$ and $q$ be natural numbers. Then if $n$ is less than $m$, then if $p$ is less than $q$, then the product of $n$ and $p$ is less than the product of $m$ and $q$.",
    "output": "postulate lt_times : (n : Nat) -> (m : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt n m) -> (__1 : Lt p q) -> Lt (times n p) (times m q)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_r. For all natural numbers $n$ and $m$, the greatest common divisor of $n$ and $m$ is divisible by $m$.",
    "output": "postulate divides_gcd_r : (n : Nat) -> (m : Nat) -> divisible (gcd n m) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type0. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z683$ to sets, for all functions $_H1$ from elements $_z684$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_390$ and functions $_x_392$ from elements $_z684$ of $Eq$ of $Hterm$ and $x_390$ to elements of $P$ of $x_390$ and elements $_z684$ of $Eq$ of $Hterm$ and the sum of $x_390$ and $1$ to elements of $P$ of the sum of $x_390$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type0 : (Hterm : Nat) -> (P : (_z683 : Nat) -> Set) -> (_H1 : (_z684 : Eq Hterm 0) -> P 0) -> (_H2 : (x_390 : Nat) -> (_x_392 : (_z684 : Eq Hterm x_390) -> P x_390) -> (_z684 : Eq Hterm (plus x_390 1)) -> P (plus x_390 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_times_times. Let $a$ and $b$ and $c$ be natural numbers. Then if $0$ is less than $c$, then if $0$ is less than $b$, then the quotient of $a$ and $b$ is equal to the quotient of the product of $a$ and $c$ and the product of $b$ and $c$.",
    "output": "postulate div_times_times : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Lt 0 c) -> (__1 : Lt 0 b) -> Eq (div a b) (div (times a c) (times b c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exists_max_forall_false. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$, $ex$ holds for $Nat$ and the function that maps $i$ to the conjunction of $Lt$ applied to $i$ and $n$ and $Eq$ applied to $f$ applied to $i$ and $true$ and $f$ applied to $max$ applied to $n$ and $f$ is equal to $true$ or $prod$ holds for $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n$ and the function that maps $__$ to $Eq$ applied to $f$ applied to $i$ and absurdity and $max$ applied to $n$ and $f$ is equal to $0$.",
    "output": "postulate exists_max_forall_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> or (and (ex Nat (\\ i : Nat -> and (Lt i n) (Eq (f i) true))) (Eq (f (max n f)) true)) (and (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n) (\\ _ : Lt i n -> Eq (f i) false))) (Eq (max n f) 0))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_min_to_false. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $m$ and $b$, if $b$ is less than or equal to $m$, then if $m$ is less than $min$ applied to $n$ and $b$ and $f$, then $f$ applied to $m$ is equal to absurdity.",
    "output": "postulate lt_min_to_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (b : Nat) -> (_ : Leq b m) -> (__1 : Lt m (min n b f)) -> Eq (f m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_div_S_S_div. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then the quotient of the sum of $n$ and $1$ and $m$ is less than or equal to the sum of the quotient of $n$ and $m$ and $1$.",
    "output": "postulate le_div_S_S_div : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Leq (div (plus n 1) m) (plus (div n m) 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $n$ be a natural number. Then for all functions $p1$ and $p2$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all natural numbers $n1$, for all functions $Hind$ from functions from natural numbers $i$ and elements of $Lt$ of $i$ and $n1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$ and functions $__1$ from natural numbers $i$ and elements $__1$ of $Lt$ of $i$ and $n1$ and elements $__2$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$ to elements of $Leq$ of $bigop$ applied to $n1$ and the function that maps $i$ to $p1$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g1$ applied to $i$ and $bigop$ applied to $n1$ and the function that maps $i$ to $p2$ applied to $i$ and $Nat$ and $0$ and $plus$ and the function that maps $i$ to $g2$ applied to $i$, for all functions $H1$ from natural numbers $i$ and elements of $Lt$ of $i$ and the sum of $n1$ and $1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Eq$ of $p2$ applied to $i$ and $true$, for all functions $H2$ from natural numbers $i$ and elements of $Lt$ of $i$ and the sum of $n1$ and $1$ and elements $__1$ of $Eq$ of $p1$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, if $p2$ applied to $n1$ is equal to $true$, then if $p1$ applied to $n1$ is equal to $true$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (n1 : Nat) -> (Hind : (_ : (i : Nat) -> (_ : Lt i n1) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (__1 : (i : Nat) -> (__1 : Lt i n1) -> (__2 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n1 (\\ i : Nat -> p1 i) Nat 0 plus (\\ i : Nat -> g1 i)) (bigop n1 (\\ i : Nat -> p2 i) Nat 0 plus (\\ i : Nat -> g2 i))) -> (H1 : (i : Nat) -> (_ : Lt i (plus n1 1)) -> (__1 : Eq (p1 i) true) -> Eq (p2 i) true) -> (H2 : (i : Nat) -> (_ : Lt i (plus n1 1)) -> (__1 : Eq (p1 i) true) -> Leq (g1 i) (g2 i)) -> (Hp2 : Eq (p2 n1) true) -> (Hp1 : Eq (p1 n1) true) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_plus_r. For all natural numbers $n$, $injective$ holds for $Nat$ and $Nat$ and the function that maps $m$ to the sum of $n$ and $m$.",
    "output": "postulate injective_plus_r : (n : Nat) -> injective Nat Nat (\\ m : Nat -> plus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Or_div_mod1. Let $n$ and $q$ be natural numbers. Then if $0$ is less than $q$, then $q$ is divisible by the sum of $n$ and $1$ and the sum of $n$ and $1$ is equal to the product of the sum of the quotient of $n$ and $q$ and $1$ and $q$ or $q$ is not divisible by the sum of $n$ and $1$ and the sum of $n$ and $1$ is equal to the sum of the product of the quotient of $n$ and $q$ and $q$ and the sum of $mod$ applied to $n$ and $q$ and $1$.",
    "output": "postulate or_div_mod1 : (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> or (and (divisible q (plus n 1)) (Eq (plus n 1) (times (plus (div n q) 1) q))) (and (not (divisible q (plus n 1))) (Eq (plus n 1) (plus (times (div n q) q) (plus (mod n q) 1))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_plus_comm_23. Let $x$ and $y$ and $z$ be natural numbers. Then the sum of the sum of $x$ and $y$ and $z$ is equal to the sum of the sum of $x$ and $z$ and $y$.",
    "output": "postulate plus_plus_comm_23 : (x : Nat) -> (y : Nat) -> (z : Nat) -> Eq (plus (plus x y) z) (plus (plus x z) y)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bool_to_nat. For all booleans $_b$, $Nat$.",
    "output": "postulate bool_to_nat : (_b : bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1012. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $i$, for all functions $Hind$ from natural numbers $b$ to elements of $prod$ of $Prop$ and $Prop$ and $Eq$ applied to $f$ applied to $let_m2$ applied to $f$ and $n$ and $i$ and $b$ and absurdity and the function that maps $__$ to $Eq$ applied to $let_m2$ applied to $f$ and $n$ and $i$ and $b$ and the sum of $i$ and $b$, for all natural numbers $b$, if $f$ applied to $b$ is equal to $true$, then if $f$ applied to $b$ is equal to absurdity, then absurdity is equal to $true$.",
    "output": "postulate let_clause_1012 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (i : Nat) -> (Hind : (b : Nat) -> prod Prop Prop (Eq (f (let_m2 f n i b)) false) (\\ _ : Eq (f (let_m2 f n i b)) false -> Eq (let_m2 f n i b) (plus i b))) -> (b : Nat) -> (fb : Eq (f b) true) -> (eqm : Eq (f b) false) -> Eq false true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Start_lop. For all natural numbers $n$, if $1$ is less than or equal to $n$, then $option_hd$ applied to $Nat$ and $list_of_primes$ applied to $n$ is equal to $Some$ applied to $Nat$ and $2$.",
    "output": "postulate start_lop : (n : Nat) -> (_ : Leq 1 n) -> Eq (option_hd Nat (list_of_primes n)) (Some Nat 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_p_primeb_dividesb. For all natural numbers $n$, if $0$ is less than $n$, then $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $andb$ applied to $primeb$ applied to $p$ and $dividesb$ applied to $p$ and $n$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $ord$ applied to $n$ and $p$.",
    "output": "postulate pi_p_primeb_dividesb : (n : Nat) -> (_ : Lt 0 n) -> Eq n (bigop (plus n 1) (\\ p : Nat -> andb (primeb p) (dividesb p n)) Nat 1 times (\\ p : Nat -> pow p (ord n p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_body. For all natural numbers $__$, for all functions $__1$ from natural numbers $__1$ to booleans, for all sets $H$, for all elements $__2$ of $H$, for all functions $__3$ from elements $__3$ of $H$ and elements $__4$ of $H$ to elements of $H$, for all functions $__4$ from natural numbers $__4$ to elements of $H$, $H$.",
    "output": "postulate bigop_body : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (H : Set) -> (__2 : H) -> (__3 : (__3 : H) -> (__4 : H) -> H) -> (__4 : (__4 : Nat) -> H) -> H"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_ind. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_811$ of $Lt$ of $_r$ and $_m$ and elements $x_810$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_811$ and $x_810$, for all elements $x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_809$.",
    "output": "postulate div_mod_spec_ind : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_809 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_811 : Lt _r _m) -> (x_810 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_811 x_810)) -> (x_809 : div_mod_spec _n _m _q _r) -> Q_ x_809"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_true_to_divides. Let $n$ and $m$ be natural numbers. Then if $dividesb$ applied to $n$ and $m$ is equal to $true$, then $n$ is divisible by $m$.",
    "output": "postulate dividesb_true_to_divides : (n : Nat) -> (m : Nat) -> (_ : Eq (dividesb n m) true) -> divisible n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_16. For all natural numbers $n$ and $m$, if $2$ is less than the sum of $m$ and $1$, then for all natural numbers $x32$, the sum of $x32$ and $1$ is equal to the sum of $x32$ and $1$.",
    "output": "postulate let_clause_16 : (n : Nat) -> (m : Nat) -> (lt2 : Lt 2 (plus m 1)) -> (x32 : Nat) -> Eq (plus x32 1) (plus x32 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_f_g. For all functions $f$ and $g$ from natural numbers to booleans, for all natural numbers $n$ and $b$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $n$ and $b$ to elements of $Eq$ of $f$ applied to $i$ and $g$ applied to $i$, $min$ applied to $n$ and $b$ and $f$ is equal to $min$ applied to $n$ and $b$ and $g$.",
    "output": "postulate min_f_g : (f : (_ : Nat) -> bool) -> (g : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : (i : Nat) -> (_ : Leq b i) -> (__1 : Lt i (plus n b)) -> Eq (f i) (g i)) -> Eq (min n b f) (min n b g)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le. Let $x$ and $y$ be natural numbers. Then if $x$ is less than $y$, then $x$ is less than or equal to $y$.",
    "output": "postulate lt_to_le : (x : Nat) -> (y : Nat) -> (_ : Lt x y) -> Leq x y"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound4. Let $n$ and $m$ be natural numbers. Then $Nat$.",
    "output": "postulate let_upper_bound4 : (n : Nat) -> (m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_rect_Type4. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_863$ of $Aop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_863$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_863$.",
    "output": "postulate Aop_rect_Type4 : (A : Set) -> (_nil : A) -> (Q_ : (_x_863 : Aop A _nil) -> Type4) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_863 : Aop A _nil) -> Q_ x_863"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_lstar_r. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all natural numbers $__$, for all elements $__1$ and $__2$ of $B$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_type$ of $z$, for all elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$, $return_type$ holds for $z$.",
    "output": "postulate filter_lstar_r : (B : Set) -> (_R : relation B) -> (_ : Nat) -> (__1 : B) -> (__2 : B) -> (return_sort : Sort) -> (return_type : (z : lstar_r B _R __ __1 __2) -> return_sort) -> (return : (z : lstar_r B _R __ __1 __2) -> return_type z) -> (z : lstar_r B _R __ __1 __2) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_4_to_fact. Let $n$ be a natural number. Then if $4$ is less than $n$, then the factorial of the product of $2$ and $n$ is less than or equal to the product of the product of the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $2$ and the factorial of $n$ and the factorial of $n$.",
    "output": "postulate lt_4_to_fact : (n : Nat) -> (_ : Lt 4 n) -> Leq (factorial (times 2 n)) (times (times (pow 2 (minus (times 2 n) 2)) (factorial n)) (factorial n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example12. $nth_prime$ applied to $3$ is equal to $7$.",
    "output": "postulate example12 : Eq (nth_prime 3) 7"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_le_Sn_n. For all natural numbers $n$, the sum of $n$ and $1$ is not less than or equal to $n$.",
    "output": "postulate not_le_Sn_n : (n : Nat) -> not (Leq (plus n 1) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B_Psi4. Let $n$ be a natural number. Then if $0$ is less than $n$, then the product of $2$ and $B$ applied to the product of $4$ and $n$ is less than or equal to $Psi$ applied to the product of $4$ and $n$.",
    "output": "postulate le_B_Psi4 : (n : Nat) -> (_ : Lt 0 n) -> Leq (times 2 (B (times 4 n))) (Psi (times 4 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_times. For all natural numbers $p$ and $a$ and $b$ and $qa$ and $ra$ and $qb$ and $rb$, if $p$ is prime, then if $0$ is less than $a$, then if $0$ is less than $b$, then if $p_ord$ applied to $a$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $qa$ and $ra$, then if $p_ord$ applied to $b$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $qb$ and $rb$, then $p_ord$ applied to the product of $a$ and $b$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and the sum of $qa$ and $qb$ and the product of $ra$ and $rb$.",
    "output": "postulate p_ord_times : (p : Nat) -> (a : Nat) -> (b : Nat) -> (qa : Nat) -> (ra : Nat) -> (qb : Nat) -> (rb : Nat) -> (_ : prime p) -> (__1 : Lt 0 a) -> (__2 : Lt 0 b) -> (__3 : Eq (p_ord a p) (mk_Prod Nat Nat qa ra)) -> (__4 : Eq (p_ord b p) (mk_Prod Nat Nat qb rb)) -> Eq (p_ord (times a b) p) (mk_Prod Nat Nat (plus qa qb) (times ra rb))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_n_Sm. For all natural numbers $n$ and $m$, the sum of the sum of $n$ and $m$ and $1$ is equal to the sum of $n$ and the sum of $m$ and $1$.",
    "output": "postulate plus_n_Sm : (n : Nat) -> (m : Nat) -> Eq (plus (plus n m) 1) (plus n (plus m 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp0_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_967$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_967$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_967$.",
    "output": "postulate Dop_rect_CProp0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_967 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_967 : Dop A _nil) -> Q_ x_967"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_discr. Let $a1$ be a set. Then for all elements $a2$ of $a1$, for all elements $x$ and $y$ of $Aop$ of $a1$ and $a2$, if $x$ is equal to $y$, then $match_Aop$ holds for $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ and $t2$ and $t3$ to $match_Aop$ applied to $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ and $u2$ and $u3$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and the function that maps $x_19$ and $_x_20$ to the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x0$ applied to $a2$ and $a$ and $a$ applied to $x_19$ and $_x_20$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $e1$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R2$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and the function that maps $x0$ and $__$ to the function that maps $x01$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a2$ and $a$ and $a$ applied to $x0$ and $__$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a$ and $a2$ and $a$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and the function that maps $e2$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R3$ applied to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__$ to $prod$ applied to $Set$ and $Set$ and $a1$ and the function that maps $__1$ to $a1$ and $t0$ and the function that maps $x0$ and $__$ to the function that maps $x01$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a2$ and $a$ and $a$ applied to $x0$ and $__$ and $t1$ and the function that maps $x0$ and $p0$ and $x1$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p1$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $Eq$ applied to $x01$ applied to $a$ and $a2$ and $a$ applied to $x0$ and $p0$ and $x1$ and $__$ and $t2$ and the function that maps $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ to the function that maps $x01$ and $p01$ and $x11$ and $p11$ and $x21$ and $p2$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $b$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $c$ to $Eq$ applied to $x01$ applied to $a$ and $x01$ applied to $b$ and $c$ and $x01$ applied to $x01$ applied to $a$ and $b$ and $c$ applied to $x0$ and $p0$ and $x1$ and $p1$ and $x2$ and $__$ and $t3$ and $u0$ and $e0$ and $u1$ and $e1$ and $u2$ and $e2$ and $u3$ and the function that maps $_e3$ to $P$ and the function that maps $_z55$ to $P$ and $y$ and $x$.",
    "output": "postulate Aop_discr : (a1 : Set) -> (a2 : a1) -> (x : Aop a1 a2) -> (y : Aop a1 a2) -> (_e : Eq x y) -> match_Aop a1 a2 (plus Type2 1) (\\ _ : Aop a1 a2 -> univ Type2) (\\ t0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ t1 : ((a : a1) -> Eq (t0 a2 a) a) -> \\ t2 : ((a : a1) -> Eq (t0 a a2) a) -> \\ t3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (t0 a (t0 b c)) (t0 (t0 a b) c)) -> match_Aop a1 a2 (plus Type2 1) (\\ _ : Aop a1 a2 -> univ Type2) (\\ u0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ u1 : ((a : a1) -> Eq (u0 a2 a) a) -> \\ u2 : ((a : a1) -> Eq (u0 a a2) a) -> \\ u3 : ((a : a1) -> (b : a1) -> (c : a1) -> Eq (u0 a (u0 b c)) (u0 (u0 a b) c)) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0) u0) (\\ e0 : Eq (R0 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0) u0 -> prod Prop Type1 (Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> Eq (x0 a2 a) a)) x_19 _x_20) t1 u0 e0) u1) (\\ e1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> Eq (x0 a2 a) a)) x_19 _x_20) t1 u0 e0) u1 -> prod Prop Type1 (Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) (\\ e2 : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2 -> prod Prop Type1 (Eq (R3 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x01 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 __) t1 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 p01 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : ((a : a1) -> Eq (x02 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a a2) a)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x01 a a2) a) -> \\ p2 : Eq (R2 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ __1 : Eq t0 x02 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 __1) t1 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 p02 -> \\ __1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> \\ x10 : ((a : a1) -> Eq (x00 a2 a) a) -> \\ p10 : Eq (R1 (prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t0 (\\ x_19 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x011 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p011 : Eq t0 x011 -> prod Set Prop a1 (\\ a : a1 -> Eq (x011 a2 a) a)) x_19 _x_20) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a a2) a)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x01 a (x01 b c)) (x01 (x01 a b) c))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) (\\ _e3 : Eq (R3 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x01 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 __) t1 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 p01 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : ((a : a1) -> Eq (x02 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a a2) a)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x01 a a2) a) -> \\ p2 : Eq (R2 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ __1 : Eq t0 x02 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 __1) t1 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 p02 -> \\ __1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> \\ x10 : ((a : a1) -> Eq (x00 a2 a) a) -> \\ p10 : Eq (R1 (prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t0 (\\ x_19 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x011 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p011 : Eq t0 x011 -> prod Set Prop a1 (\\ a : a1 -> Eq (x011 a2 a) a)) x_19 _x_20) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a a2) a)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x01 a (x01 b c)) (x01 (x01 a b) c))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3 -> P))))) (\\ _z55 : ((e0 : Eq (R0 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0) u0) -> (e1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> Eq (x0 a2 a) a)) x_19 _x_20) t1 u0 e0) u1) -> (e2 : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 u0 e0 u1 e1) u2) -> (_e3 : Eq (R3 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x0 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p0 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 __) t1 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 __) t2 (\\ x0 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p0 : Eq t0 x0 -> \\ x1 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x0 p0 -> \\ p1 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a2 a) a)) x_19 _x_20) t1 x0 p0) x1 -> \\ x2 : (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> prod Set Prop a1 (\\ a : a1 -> Eq (x01 a a2) a)) x0 p0 x1 p1 -> \\ _ : Eq (R2 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _ : Eq t0 x01 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 __) t1 (\\ x01 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x01 p01 -> \\ _ : Eq (R1 (prod Set Set a1 (\\ _ : a1 -> prod Set Set a1 (\\ __1 : a1 -> a1))) t0 (\\ x_19 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x02 : ((_ : a1) -> (__1 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : ((a : a1) -> Eq (x02 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> prod Set Prop a1 (\\ a : a1 -> Eq (x02 a a2) a)) x01 p01 x11 __) t2 x0 p0 x1 p1) x2 -> (\\ x01 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p01 : Eq t0 x01 -> \\ x11 : ((a : a1) -> Eq (x01 a2 a) a) -> \\ p11 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x01 p01) x11 -> \\ x21 : ((a : a1) -> Eq (x01 a a2) a) -> \\ p2 : Eq (R2 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ __1 : Eq t0 x02 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 __1) t1 (\\ x02 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p02 : Eq t0 x02 -> \\ x12 : (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x02 p02 -> \\ __1 : Eq (R1 (prod Set Set a1 (\\ __1 : a1 -> prod Set Set a1 (\\ __2 : a1 -> a1))) t0 (\\ x_19 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x00 : ((__1 : a1) -> (__2 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a2 a) a)) x_19 _x_20) t1 x02 p02) x12 -> (\\ x00 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p00 : Eq t0 x00 -> \\ x10 : ((a : a1) -> Eq (x00 a2 a) a) -> \\ p10 : Eq (R1 (prod Set Set a1 (\\ __2 : a1 -> prod Set Set a1 (\\ __3 : a1 -> a1))) t0 (\\ x_19 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ _x_20 : Eq t0 x_19 -> (\\ x011 : ((__2 : a1) -> (__3 : a1) -> a1) -> \\ p011 : Eq t0 x011 -> prod Set Prop a1 (\\ a : a1 -> Eq (x011 a2 a) a)) x_19 _x_20) t1 x00 p00) x10 -> prod Set Prop a1 (\\ a : a1 -> Eq (x00 a a2) a)) x02 p02 x12 __1) t2 x01 p01 x11 p11) x21 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> prod Set Prop a1 (\\ c : a1 -> Eq (x01 a (x01 b c)) (x01 (x01 a b) c))))) x0 p0 x1 p1 x2 __) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_prim4l. For all natural numbers $n$, if $0$ is less than $n$, then the exponentiation of $2$ and the sum of the product of $4$ and $n$ and $1$ is less than or equal to the exponentiation of the product of $4$ and $n$ and the sum of $prim$ applied to the product of $4$ and $n$ and $1$.",
    "output": "postulate le_exp_prim4l : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 (plus (times 4 n) 1)) (pow (times 4 n) (plus (prim (times 4 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_aux_body. Let $_p$ and $_m$ and $_n$ be natural numbers. Then $Nat$.",
    "output": "postulate div_aux_body : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_div_div_div_times. For all natural numbers $n$ and $m$ and $q$, if $0$ is less than $n$, then if $0$ is less than $m$, then the quotient of the quotient of $q$ and $n$ and $m$ is equal to the quotient of $q$ and the product of $n$ and $m$.",
    "output": "postulate eq_div_div_div_times : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> Eq (div (div q n) m) (div q (times n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "LePsi_r2. Let $n$ be a natural number. Then the exponentiation of $n$ and $prim$ applied to $n$ is less than or equal to the product of $Psi$ applied to $n$ and $Psi$ applied to $n$.",
    "output": "postulate lePsi_r2 : (n : Nat) -> Leq (pow n (prim n)) (times (Psi n) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_8_to_le_Psi_exp. Let $n$ be a natural number. Then if $n$ is less than or equal to $8$, then $Psi$ applied to $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_n_8_to_le_Psi_exp : (n : Nat) -> (_ : Leq n 8) -> Leq (Psi n) (pow 2 (minus (times 2 n) 3))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_exp_priml. For all natural numbers $n$, if $0$ is less than $n$, then the exponentiation of $2$ and the product of $2$ and $n$ is less than or equal to the exponentiation of the product of $2$ and $n$ and the sum of $prim$ applied to the product of $2$ and $n$ and $1$.",
    "output": "postulate le_exp_priml : (n : Nat) -> (_ : Lt 0 n) -> Leq (pow 2 (times 2 n)) (pow (times 2 n) (plus (prim (times 2 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime7. Let $n$ and $m$ be natural numbers. Then if $nth_prime$ applied to $n$ is less than $m$, then $Nat$.",
    "output": "postulate let_previous_prime7 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "NatD. $Dop$ holds for $Nat$ and $0$.",
    "output": "postulate natD : Dop Nat 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max'_body. Let $__$ be a natural number. Then for all functions $__1$ from natural numbers $__1$ to booleans, for all natural numbers $__2$, $Nat$.",
    "output": "postulate max'_body : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Enum_body. For all sets $A$, for all elements $_xxx$ of $range$ of $A$, for all natural numbers $_x_942$, $A$.",
    "output": "postulate enum_body : (A : Set) -> (_xxx : range A) -> (_x_942 : Nat) -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_lstar_r. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from natural numbers and elements $__1$ of $B$ and elements $__2$ of $B$ and elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $return_sort$, for all functions $case_lstar_r_O$ from elements $b$ of $B$ to elements of $return_type$ of $0$ and $b$ and $b$ and $lstar_r_O$ applied to $B$ and $_R$ and $b$, for all functions $case_lstar_r_S$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements of $lstar_r$ of $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $B$ and elements $__1$ of $_R$ of $b$ and $b2$ to elements of $return_type$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $__$ and $b2$ and $__1$, for all natural numbers $__$, for all elements $__1$ and $__2$ of $B$, for all elements $z$ of $lstar_r$ of $B$ and $_R$ and $__$ and $__1$ and $__2$, $return_type$ holds for $__$ and $__1$ and $__2$ and $z$.",
    "output": "postulate match_lstar_r : (B : Set) -> (_R : relation B) -> (return_sort : Sort) -> (return_type : (_ : Nat) -> (__1 : B) -> (__2 : B) -> (z : lstar_r B _R __ __1 __2) -> return_sort) -> (case_lstar_r_O : (b : B) -> return_type 0 b b (lstar_r_O B _R b)) -> (case_lstar_r_S : (l : Nat) -> (b1 : B) -> (b : B) -> (_ : lstar_r B _R l b1 b) -> (b2 : B) -> (__1 : _R b b2) -> return_type (plus l 1) b1 b2 (lstar_r_S B _R l b1 b __ b2 __1)) -> (_ : Nat) -> (__1 : B) -> (__2 : B) -> (z : lstar_r B _R __ __1 __2) -> return_type __ __1 __2 z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb_false_to_not_divides. For all natural numbers $n$ and $m$, if $dividesb$ applied to $n$ and $m$ is equal to absurdity, then $n$ is not divisible by $m$.",
    "output": "postulate dividesb_false_to_not_divides : (n : Nat) -> (m : Nat) -> (_ : Eq (dividesb n m) false) -> not (divisible n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_ord_rem. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then $ord_rem$ applied to $n$ and $p$ is divisible by $n$.",
    "output": "postulate divides_ord_rem : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> divisible (ord_rem n p) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_transpose. For all natural numbers $i$ and $j$ and $k$ and $n$, if $j$ is not equal to $i$, then if $i$ is not equal to $k$, then if $j$ is not equal to $k$, then $transpose$ applied to $i$ and $j$ and $n$ is equal to $transpose$ applied to $i$ and $k$ and $transpose$ applied to $k$ and $j$ and $transpose$ applied to $i$ and $k$ and $n$.",
    "output": "postulate eq_transpose : (i : Nat) -> (j : Nat) -> (k : Nat) -> (n : Nat) -> (_ : not (Eq j i)) -> (__1 : not (Eq i k)) -> (__2 : not (Eq j k)) -> Eq (transpose i j n) (transpose i k (transpose k j (transpose i k n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example4. $primeb$ applied to $3$ is equal to $true$.",
    "output": "postulate example4 : Eq (primeb 3) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type5. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_893$ of $ACop$ of $A$ and $_nil$ to elements of $Type5$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_893$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_893$.",
    "output": "postulate ACop_rect_Type5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_893 : ACop A _nil) -> Type5) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_893 : ACop A _nil) -> Q_ x_893"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_div. Let $n$ be a natural number. Then if $0$ is less than $n$, then $monotonic$ holds for $Nat$ and $Leq$ and the function that maps $m$ to the quotient of $m$ and $n$.",
    "output": "postulate monotonic_div : (n : Nat) -> (_ : Lt 0 n) -> monotonic Nat Leq (\\ m : Nat -> div m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_minr. Let $i$ and $n$ and $m$ be natural numbers. Then if $i$ is less than or equal to $min$ applied to $n$ and $m$, then $i$ is less than or equal to $m$.",
    "output": "postulate le_minr : (i : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq i (min n m)) -> Leq i m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_prime_times_2. For all natural numbers $n$, if $1$ is less than $n$, then the product of $2$ and $n$ is not prime.",
    "output": "postulate not_prime_times_2 : (n : Nat) -> (_ : Lt 1 n) -> not (prime (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Theta_def. Let $n$ be a natural number. Then $theta$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to $p$.",
    "output": "postulate theta_def : (n : Nat) -> Eq (theta n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_B1_theta. Let $n$ be a natural number. Then if $18$ is less than or equal to $n$, then for all elements $__1$ of $not_bertrand$ of $n$, $B1$ applied to the product of $2$ and $n$ is less than or equal to $theta$ applied to the quotient of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_B1_theta : (n : Nat) -> (_ : Leq 18 n) -> (__1 : not_bertrand n) -> Leq (B1 (times 2 n)) (theta (div (times 2 n) 3))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bc2. For all natural numbers $n$ and $k$, if $k$ is less than or equal to $n$, then the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$ is divisible by the factorial of $n$.",
    "output": "postulate bc2 : (n : Nat) -> (k : Nat) -> (_ : Leq k n) -> divisible (times (factorial k) (factorial (minus n k))) (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_nth_prime_n. Let $n$ be a natural number. Then $0$ is less than $nth_prime$ applied to $n$.",
    "output": "postulate lt_O_nth_prime_n : (n : Nat) -> Lt 0 (nth_prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_max_to_false. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $m$ is less than $n$, then if $max$ applied to $n$ and $f$ is less than $m$, then $f$ applied to $m$ is equal to absurdity.",
    "output": "postulate lt_max_to_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Lt (max n f) m) -> Eq (f m) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injn_Sn_n. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $injn$ of $f$ and the sum of $n$ and $1$, $injn$ holds for $f$ and $n$.",
    "output": "postulate injn_Sn_n : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : injn f (plus n 1)) -> injn f n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair. Let $_n$ and $_m$ and $_a$ and $_b$ be natural numbers. Then $Nat$.",
    "output": "postulate cr_pair : (_n : Nat) -> (_m : Nat) -> (_a : Nat) -> (_b : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_bertrand_to_le_B. Let $n$ be a natural number. Then if the exponentiation of $2$ and $7$ is less than or equal to $n$, then for all elements $__1$ of $not_bertrand$ of $n$, $B$ applied to the product of $2$ and $n$ is less than or equal to the product of the exponentiation of $2$ and the product of $2$ and the quotient of the product of $2$ and $n$ and $3$ and the exponentiation of the product of $2$ and $n$ and $pred$ applied to the quotient of the square root of the product of $2$ and $n$ and $2$.",
    "output": "postulate not_bertrand_to_le_B : (n : Nat) -> (_ : Leq (pow 2 7) n) -> (__1 : not_bertrand n) -> Leq (B (times 2 n)) (times (pow 2 (times 2 (div (times 2 n) 3))) (pow (times 2 n) (pred (div (sqrt (times 2 n)) 2))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_S_sigma_p. Let $a$ and $n$ be natural numbers. Then the exponentiation of the sum of $a$ and $1$ and $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $k$ to $true$ and $Nat$ and $0$ and $plus$ and the function that maps $k$ to the product of $bc$ applied to $n$ and $k$ and the exponentiation of $a$ and the difference of $n$ and $k$.",
    "output": "postulate exp_S_sigma_p : (a : Nat) -> (n : Nat) -> Eq (pow (plus a 1) n) (bigop (plus n 1) (\\ k : Nat -> true) Nat 0 plus (\\ k : Nat -> times (bc n k) (pow a (minus n k))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_SO_n. For all natural numbers $n$, the greatest common divisor of $1$ and $n$ is equal to $1$.",
    "output": "postulate gcd_SO_n : (n : Nat) -> Eq (gcd 1 n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type2. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $Type2$, for all functions $_H_div_mod_spec_intro$ from elements $x_827$ of $Lt$ of $_r$ and $_m$ and elements $x_826$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_827$ and $x_826$, for all elements $x_825$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_825$.",
    "output": "postulate div_mod_spec_rect_Type2 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_825 : div_mod_spec _n _m _q _r) -> Type2) -> (_H_div_mod_spec_intro : (x_827 : Lt _r _m) -> (x_826 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_827 x_826)) -> (x_825 : div_mod_spec _n _m _q _r) -> Q_ x_825"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_times. For all natural numbers $a$ and $b$, if $0$ is less than $b$, then the quotient of the product of $a$ and $b$ and $b$ is equal to $a$.",
    "output": "postulate div_times : (a : Nat) -> (b : Nat) -> (_ : Lt 0 b) -> Eq (div (times a b) b) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type3. Let $Q_$ be a function from natural numbers $_x_377$ to elements of $Type3$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_378$ and elements $_x_380$ of $Q_$ of $x_378$ to elements of $Q_$ of the sum of $x_378$ and $1$, for all natural numbers $x_377$, $Q_$ holds for $x_377$.",
    "output": "postulate nat_rect_Type3 : (Q_ : (_x_377 : Nat) -> Type3) -> (_H_O : Q_ 0) -> (_H_S : (x_378 : Nat) -> (_x_380 : Q_ x_378) -> Q_ (plus x_378 1)) -> (x_377 : Nat) -> Q_ x_377"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_f_g. Let $f$ and $g$ be functions from natural numbers to booleans. Then for all natural numbers $n$ and $b$, for all functions $__$ from natural numbers $i$ and elements of $Leq$ of $b$ and $i$ and elements $__1$ of $Lt$ of $i$ and the sum of $n$ and $b$ to elements of $Eq$ of $f$ applied to $i$ and $g$ applied to $i$, $min$ applied to $n$ and $b$ and $f$ is equal to $min$ applied to $n$ and $b$ and $g$.",
    "output": "postulate min_f_g : (f : (_ : Nat) -> bool) -> (g : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : (i : Nat) -> (_ : Leq b i) -> (__1 : Lt i (plus n b)) -> Eq (f i) (g i)) -> Eq (min n b f) (min n b g)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_bertrand_to_le2. For all natural numbers $n$, if the exponentiation of $2$ and $7$ is less than or equal to $n$, then for all elements $__1$ of $not_bertrand$ of $n$, the quotient of the product of $2$ and $n$ and $3$ is less than or equal to the product of the quotient of the square root of the product of $2$ and $n$ and $2$ and the sum of the logarithm of $2$ and the product of $2$ and $n$ and $1$.",
    "output": "postulate not_bertrand_to_le2 : (n : Nat) -> (_ : Leq (pow 2 7) n) -> (__1 : not_bertrand n) -> Leq (div (times 2 n) 3) (times (div (sqrt (times 2 n)) 2) (plus (log 2 (times 2 n)) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1617. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $p$, then if the greatest common divisor of $p$ and $m$ is equal to $1$, then if $p$ is divisible by the product of $m$ and $n$, then for all natural numbers $c$, if the product of $m$ and $n$ is equal to the product of $p$ and $c$, then for all natural numbers $a$, for all elements $_clearme0$ of $ex$ of $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $p$ and the product of $b$ and $m$ and the greatest common divisor of $p$ and $m$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $p$ and the greatest common divisor of $p$ and $m$, for all natural numbers $b$, if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$ or the difference of the product of $b$ and $m$ and the product of $a$ and $p$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to the greatest common divisor of $p$ and $m$, then if the difference of the product of $a$ and $p$ and the product of $b$ and $m$ is equal to $1$, then the greatest common divisor of $p$ and $m$ is equal to the difference of the product of $p$ and $a$ and the product of $m$ and $b$.",
    "output": "postulate let_clause_1617 : (p : Nat) -> (m : Nat) -> (n : Nat) -> (posn : Lt 0 p) -> (gcd1 : Eq (gcd p m) 1) -> (_clearme : divisible p (times m n)) -> (c : Nat) -> (nm : Eq (times m n) (times p c)) -> (a : Nat) -> (_clearme0 : ex Nat (\\ b : Nat -> or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m)))) -> (b : Nat) -> (_clearme1 : or (Eq (minus (times a p) (times b m)) (gcd p m)) (Eq (minus (times b m) (times a p)) (gcd p m))) -> (H : Eq (minus (times a p) (times b m)) (gcd p m)) -> (H0 : Eq (minus (times a p) (times b m)) 1) -> Eq (gcd p m) (minus (times p a) (times m b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_n_O. Let $n$ be a natural number. Then $0$ is equal to the product of $n$ and $0$.",
    "output": "postulate times_n_O : (n : Nat) -> Eq 0 (times n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_not. For all propositions $P$, for all elements $__$ of $decidable$ of $P$, $decidable$ holds for the negation of $P$.",
    "output": "postulate decidable_not : (P : Prop) -> (_ : decidable P) -> decidable (not P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_m1. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $_x_365$ and $b$, $Nat$.",
    "output": "postulate let_m1 : (f : (_ : Nat) -> bool) -> (n : Nat) -> (_x_365 : Nat) -> (b : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_k. For all natural numbers $n$ and $p$, $k$ applied to $n$ and $p$ is less than or equal to the logarithm of $p$ and $n$.",
    "output": "postulate le_k : (n : Nat) -> (p : Nat) -> Leq (k n p) (log p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_mod. For all natural numbers $n$ and $m$, if $n$ is less than $m$, then $n$ is equal to $mod$ applied to $n$ and $m$.",
    "output": "postulate le_to_mod : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq n (mod n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_div_mod_spec. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to elements of $return_sort$, for all functions $case_div_mod_spec_intro$ from elements of $Lt$ of $_r$ and $_m$ and elements $__1$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $return_type$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $__$ and $__1$, for all elements $z$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $return_type$ holds for $z$.",
    "output": "postulate match_div_mod_spec : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (return_sort : Sort) -> (return_type : (z : div_mod_spec _n _m _q _r) -> return_sort) -> (case_div_mod_spec_intro : (_ : Lt _r _m) -> (__1 : Eq _n (plus (times _q _m) _r)) -> return_type (div_mod_spec_intro _n _m _q _r __ __1)) -> (z : div_mod_spec _n _m _q _r) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transitive_le. $transitive$ holds for $Nat$ and $Leq$.",
    "output": "postulate transitive_le : transitive Nat Leq"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_min_l. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, $b$ is less than or equal to $min$ applied to $n$ and $b$ and $f$.",
    "output": "postulate le_min_l : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> Leq b (min n b f)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type4. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1638$ of $range$ of $x1$ to elements of $Type4$, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1639$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type4 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1638 : range x1) -> Type4) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1639 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dividesb. Let $__$ and $__1$ be natural numbers. Then $bool$.",
    "output": "postulate dividesb : (_ : Nat) -> (__1 : Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_p_ord_inv. Let $p$ and $m$ and $x$ be natural numbers. Then $p_ord_inv$ applied to $p$ and $m$ and $x$ is equal to the sum of the product of $ord_rem$ applied to $x$ and $p$ and $m$ and $ord$ applied to $x$ and $p$.",
    "output": "postulate eq_p_ord_inv : (p : Nat) -> (m : Nat) -> (x : Nat) -> Eq (p_ord_inv p m x) (plus (times (ord_rem x p) m) (ord x p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_div_times_m. Let $a$ and $i$ and $m$ be natural numbers. Then if $0$ is less than $i$, then if $0$ is less than $m$, then the quotient of the product of $a$ and the quotient of $m$ and $i$ and $m$ is less than or equal to the quotient of $a$ and $i$.",
    "output": "postulate le_div_times_m : (a : Nat) -> (i : Nat) -> (m : Nat) -> (_ : Lt 0 i) -> (__1 : Lt 0 m) -> Leq (div (times a (div m i)) m) (div a i)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. For all natural numbers $n$, for all functions $p$ from natural numbers to booleans, for all functions $g1$ and $g2$ from natural numbers to natural numbers, for all natural numbers $n1$, for all functions $Hind$ from functions from natural numbers $i$ and elements of $Lt$ of $i$ and $n1$ and elements $__1$ of $Eq$ of $p$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$ to elements of $Leq$ of $bigop$ applied to $n1$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g1$ applied to $i$ and $bigop$ applied to $n1$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $g2$ applied to $i$, for all functions $Hle$ from natural numbers $i$ and elements of $Lt$ of $i$ and the sum of $n1$ and $1$ and elements $__1$ of $Eq$ of $p$ applied to $i$ and $true$ to elements of $Leq$ of $g1$ applied to $i$ and $g2$ applied to $i$, if $p$ applied to $n1$ is equal to $true$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : Nat) -> (p : (_ : Nat) -> bool) -> (g1 : (_ : Nat) -> Nat) -> (g2 : (_ : Nat) -> Nat) -> (n1 : Nat) -> (Hind : (_ : (i : Nat) -> (_ : Lt i n1) -> (__1 : Eq (p i) true) -> Leq (g1 i) (g2 i)) -> Leq (bigop n1 (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g1 i)) (bigop n1 (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> g2 i))) -> (Hle : (i : Nat) -> (_ : Lt i (plus n1 1)) -> (__1 : Eq (p i) true) -> Leq (g1 i) (g2 i)) -> (Hcase : Eq (p n1) true) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Plus_O_n. For all natural numbers $n$, $n$ is equal to the sum of $0$ and $n$.",
    "output": "postulate plus_O_n : (n : Nat) -> Eq n (plus 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_mem_nat. For all natural numbers $n$, for all lists $l$ of natural numbers, $decidable$ holds for $mem$ applied to $Nat$ and $n$ and $l$.",
    "output": "postulate decidable_mem_nat : (n : Nat) -> (l : list Nat) -> decidable (mem Nat n l)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_Type2. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1452$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to elements of $Type2$, for all functions $_H1$ from elements $x_827$ of $Lt$ of $x4$ and $x2$ and elements $x_826$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1453$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_827$ and $x_826$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_827$ and $x_826$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type2 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1452 : div_mod_spec x1 x2 x3 x4) -> Type2) -> (_H1 : (x_827 : Lt x4 x2) -> (x_826 : Eq x1 (plus (times x3 x2) x4)) -> (_z1453 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_827 x_826)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_827 x_826)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_to_lt_l. Let $n$ and $p$ and $q$ be natural numbers. Then if the sum of $p$ and $n$ is less than the sum of $q$ and $n$, then $p$ is less than $q$.",
    "output": "postulate lt_plus_to_lt_l : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (plus p n) (plus q n)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Found_max_spec. For all natural numbers $n$, for all functions $f$ from natural numbers to booleans, for all natural numbers $m$, if $m$ is less than $n$, then if $f$ applied to $m$ is equal to $true$, then for all functions $__2$ from natural numbers $i$ and elements $__2$ of $Lt$ of $m$ and $i$ and elements $__3$ of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max_spec$ holds for $n$ and $f$ and $m$.",
    "output": "postulate found_max_spec : (n : Nat) -> (f : (_ : Nat) -> bool) -> (m : Nat) -> (_ : Lt m n) -> (__1 : Eq (f m) true) -> (__2 : (i : Nat) -> (__2 : Lt m i) -> (__3 : Lt i n) -> Eq (f i) false) -> max_spec n f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_inv_ind. For all natural numbers $x1$ and $x2$, if $x1$ is less than or equal to $x2$, then for all functions $P$ from natural numbers $_z724$ to propositions, for all functions $_H1$ from elements $_z725$ of $Eq$ of $x2$ and $x1$ to elements of $P$ of $x1$, for all functions $_H2$ from natural numbers $m$ and elements $_x_419$ of $Leq$ of $x1$ and $m$ and functions $_x_421$ from elements $_z725$ of $Eq$ of $x2$ and $m$ to elements of $P$ of $m$ and elements $_z725$ of $Eq$ of $x2$ and the sum of $m$ and $1$ to elements of $P$ of the sum of $m$ and $1$, $P$ holds for $x2$.",
    "output": "postulate le_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (_Hterm : Leq x1 x2) -> (P : (_z724 : Nat) -> Prop) -> (_H1 : (_z725 : Eq x2 x1) -> P x1) -> (_H2 : (m : Nat) -> (_x_419 : Leq x1 m) -> (_x_421 : (_z725 : Eq x2 m) -> P m) -> (_z725 : Eq x2 (plus m 1)) -> P (plus m 1)) -> P x2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15491. Let $m$ and $n$ be natural numbers. Then if $0$ is equal to $n$, then for all natural numbers $x1106$, $x1106$ is equal to the difference of $x1106$ and $n$.",
    "output": "postulate let_clause_15491 : (m : Nat) -> (n : Nat) -> (eqn0 : Eq 0 n) -> (x1106 : Nat) -> Eq x1106 (minus x1106 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Cr_pair3. $cr_pair (2 , 3 , 1 , 2)= 5$.",
    "output": "postulate cr_pair3 : Eq (cr_pair 2 3 1 2) 5"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_to_lt_l. For all natural numbers $n$ and $p$ and $q$, if the sum of $p$ and $n$ is less than the sum of $q$ and $n$, then $p$ is less than $q$.",
    "output": "postulate lt_plus_to_lt_l : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (plus p n) (plus q n)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fmin_false. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$, $prod$ holds for $Prop$ and $Prop$ and $Eq$ applied to $f$ applied to $let_m$ applied to $f$ and $n$ and $b$ and absurdity and the function that maps $__$ to $Eq$ applied to $let_m$ applied to $f$ and $n$ and $b$ and the sum of $n$ and $b$.",
    "output": "postulate fmin_false : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> prod Prop Prop (Eq (f (let_m f n b)) false) (\\ _ : Eq (f (let_m f n b)) false -> Eq (let_m f n b) (plus n b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_le. For all natural numbers $x$ and $y$, the difference of $x$ and $y$ is less than or equal to $x$.",
    "output": "postulate minus_le : (x : Nat) -> (y : Nat) -> Leq (minus x y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prim. Let $_n$ be a natural number. Then $Nat$.",
    "output": "postulate prim : (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_mod. For all natural numbers $p$ and $m$ and $n$, if $0$ is less than $n$, then if $p$ is divisible by $m$, then if $p$ is divisible by $n$, then $p$ is divisible by $mod$ applied to $m$ and $n$.",
    "output": "postulate divides_mod : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : divisible p m) -> (__2 : divisible p n) -> divisible p (mod m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_eq_O. Let $n$ and $m$ be natural numbers. Then if $1$ is less than $n$, then if the exponentiation of $n$ and $m$ is equal to $1$, then $m$ is equal to $0$.",
    "output": "postulate exp_to_eq_O : (n : Nat) -> (m : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (pow n m) 1) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_to_ord_O. Let $p$ and $m$ be natural numbers. Then if $p$ is prime, then if $p$ is not divisible by $m$, then $ord$ applied to $m$ and $p$ is equal to $0$.",
    "output": "postulate not_divides_to_ord_O : (p : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : not (divisible p m)) -> Eq (ord m p) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_n_n. For all natural numbers $n$, if $1$ is less than $n$, then the logarithm of $n$ and $n$ is equal to $1$.",
    "output": "postulate log_n_n : (n : Nat) -> (_ : Lt 1 n) -> Eq (log n n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leb_false_to_not_le. For all natural numbers $n$ and $m$, if $leb$ applied to $n$ and $m$ is equal to absurdity, then $n$ is not less than or equal to $m$.",
    "output": "postulate leb_false_to_not_le : (n : Nat) -> (m : Nat) -> (_ : Eq (leb n m) false) -> not (Leq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp3. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z695$ to propositions, for all functions $_H1$ from elements $_z696$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_402$ and functions $_x_404$ from elements $_z696$ of $Eq$ of $Hterm$ and $x_402$ to elements of $P$ of $x_402$ and elements $_z696$ of $Eq$ of $Hterm$ and the sum of $x_402$ and $1$ to elements of $P$ of the sum of $x_402$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp3 : (Hterm : Nat) -> (P : (_z695 : Nat) -> Prop) -> (_H1 : (_z696 : Eq Hterm 0) -> P 0) -> (_H2 : (x_402 : Nat) -> (_x_404 : (_z696 : Eq Hterm x_402) -> P x_402) -> (_z696 : Eq Hterm (plus x_402 1)) -> P (plus x_402 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type3_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_921$ of $range$ of $_A$ to elements of $Type3$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_921$ of $range$ of $_A$, $Q_$ holds for $x_921$.",
    "output": "postulate range_rect_Type3_body : (_A : Set) -> (Q_ : (_x_921 : range _A) -> Type3) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_921 : range _A) -> Q_ x_921"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_congruent. Let $n$ and $m$ and $p$ be natural numbers. Then if $0$ is less than $p$, then if $m$ is less than or equal to $n$, then if $p$ is divisible by the difference of $n$ and $m$, then $congruent$ holds for $n$ and $m$ and $p$.",
    "output": "postulate divides_to_congruent : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 0 p) -> (__1 : Leq m n) -> (__2 : divisible p (minus n m)) -> congruent n m p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_dividesb_true. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $n$ is divisible by $m$, then $dividesb$ applied to $n$ and $m$ is equal to $true$.",
    "output": "postulate divides_to_dividesb_true : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : divisible n m) -> Eq (dividesb n m) true"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_n_O. Let $n$ be a natural number. Then $n$ is equal to the difference of $n$ and $0$.",
    "output": "postulate minus_n_O : (n : Nat) -> Eq n (minus n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_inv_plus_l. Let $x$ and $y$ and $z$ be natural numbers. Then if the sum of $x$ and $y$ is less than $z$, then $x$ is less than $z$ and $y$ is less than the difference of $z$ and $x$.",
    "output": "postulate lt_inv_plus_l : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Lt (plus x y) z) -> and (Lt x z) (Lt y (minus z x))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_ord_rem. For all natural numbers $m$ and $p$, if $0$ is less than $m$, then if $1$ is less than $p$, then $p$ is not divisible by $ord_rem$ applied to $m$ and $p$.",
    "output": "postulate not_divides_ord_rem : (m : Nat) -> (p : Nat) -> (_ : Lt 0 m) -> (__1 : Lt 1 p) -> not (divisible p (ord_rem m p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_ord_rem. For all natural numbers $n$ and $m$, if $n$ is prime, then if $0$ is less than $m$, then if $n$ is divisible by $m$, then $ord_rem$ applied to $m$ and $n$ is less than $m$.",
    "output": "postulate lt_ord_rem : (n : Nat) -> (m : Nat) -> (_ : prime n) -> (__1 : Lt 0 m) -> (__2 : divisible n m) -> Lt (ord_rem m n) m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_log2_sqrt. Let $n$ be a natural number. Then if the exponentiation of $2$ and $6$ is less than or equal to $n$, then the logarithm of $2$ and $n$ is less than the square root of $n$.",
    "output": "postulate lt_log2_sqrt : (n : Nat) -> (_ : Leq (pow 2 6) n) -> Lt (log 2 n) (sqrt n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_aux. For all natural numbers $_p$ and $_m$ and $_n$, $Nat$.",
    "output": "postulate div_aux : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_to_eq. Let $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$ be natural numbers. Then for all elements $__$ of $div_mod_spec$ of $a$ and $b$ and $q$ and $r$, for all elements $__1$ of $div_mod_spec$ of $a$ and $b$ and $q1$ and $r1$, $q$ is equal to $q1$.",
    "output": "postulate div_mod_spec_to_eq : (a : Nat) -> (b : Nat) -> (q : Nat) -> (r : Nat) -> (q1 : Nat) -> (r1 : Nat) -> (_ : div_mod_spec a b q r) -> (__1 : div_mod_spec a b q1 r1) -> Eq q q1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_ind. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all functions $Q_$ from natural numbers $x_1337$ and elements $x_1336$ of $B$ and elements $x_1335$ of $B$ and elements $_x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$ to propositions, for all functions $_H_lstar_r_O$ from elements $b$ of $B$ to elements of $Q_$ of $0$ and $b$ and $b$ and $lstar_r_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_r_S$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements $x_1340$ of $lstar_r$ of $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $B$ and elements $x_1339$ of $_R$ of $b$ and $b2$ and elements $_x_1342$ of $Q_$ of $l$ and $b1$ and $b$ and $x_1340$ to elements of $Q_$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $x_1340$ and $b2$ and $x_1339$, for all natural numbers $x_1337$, for all elements $x_1336$ and $x_1335$ of $B$, for all elements $x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$, $Q_$ holds for $x_1337$ and $x_1336$ and $x_1335$ and $x_1338$.",
    "output": "postulate lstar_r_ind : (B : Set) -> (_R : relation B) -> (Q_ : (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (_x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Prop) -> (_H_lstar_r_O : (b : B) -> Q_ 0 b b (lstar_r_O B _R b)) -> (_H_lstar_r_S : (l : Nat) -> (b1 : B) -> (b : B) -> (x_1340 : lstar_r B _R l b1 b) -> (b2 : B) -> (x_1339 : _R b b2) -> (_x_1342 : Q_ l b1 b x_1340) -> Q_ (plus l 1) b1 b2 (lstar_r_S B _R l b1 b x_1340 b2 x_1339)) -> (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Q_ x_1337 x_1336 x_1335 x_1338"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Discr_minus_x_xy. For all natural numbers $x$ and $y$, if $x$ is equal to the difference of $x$ and $y$, then $x$ is equal to $0$ or $y$ is equal to $0$.",
    "output": "postulate discr_minus_x_xy : (x : Nat) -> (y : Nat) -> (_ : Eq x (minus x y)) -> or (Eq x 0) (Eq y 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp1. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z707$ to propositions, for all functions $_H1$ from elements $_z708$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_410$ and functions $_x_412$ from elements $_z708$ of $Eq$ of $Hterm$ and $x_410$ to elements of $P$ of $x_410$ and elements $_z708$ of $Eq$ of $Hterm$ and the sum of $x_410$ and $1$ to elements of $P$ of the sum of $x_410$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp1 : (Hterm : Nat) -> (P : (_z707 : Nat) -> Prop) -> (_H1 : (_z708 : Eq Hterm 0) -> P 0) -> (_H2 : (x_410 : Nat) -> (_x_412 : (_z708 : Eq Hterm x_410) -> P x_410) -> (_z708 : Eq Hterm (plus x_410 1)) -> P (plus x_410 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_iso. For all natural numbers $n1$ and $n2$, for all functions $p1$ and $p2$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f1$ and $f2$ from natural numbers to elements of $B$, for all elements $__$ of $iso$ of $B$ and $mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, $bigop$ applied to $n1$ and the function that maps $i$ to $p1$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f1$ applied to $i$ is equal to $bigop$ applied to $n2$ and the function that maps $i$ to $p2$ applied to $i$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f2$ applied to $i$.",
    "output": "postulate bigop_iso : (n1 : Nat) -> (n2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f1 : (_ : Nat) -> B) -> (f2 : (_ : Nat) -> B) -> (_ : iso B (mk_range B f1 n1 p1) (mk_range B f2 n2 p2)) -> Eq (bigop n1 (\\ i : Nat -> p1 i) B nil (aop__o__op B nil op) (\\ i : Nat -> f1 i)) (bigop n2 (\\ i : Nat -> p2 i) B nil (aop__o__op B nil op) (\\ i : Nat -> f2 i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type1. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1722$ of $Dop$ of $x1$ and $x2$ to elements of $Type1$, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1723$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type1 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1722 : Dop x1 x2) -> Type1) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1723 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_previous_prime5. Let $n$ and $m$ be natural numbers. Then if $nth_prime$ applied to $n$ is less than $m$, then $Nat$.",
    "output": "postulate let_previous_prime5 : (n : Nat) -> (m : Nat) -> (ltml : Lt (nth_prime n) m) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type3_body. Let $Q_$ be a function from natural numbers $_x_377$ to elements of $Type3$. Then for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_378$ and elements $_x_380$ of $Q_$ of $x_378$ to elements of $Q_$ of the sum of $x_378$ and $1$, for all natural numbers $x_377$, $Q_$ holds for $x_377$.",
    "output": "postulate nat_rect_Type3_body : (Q_ : (_x_377 : Nat) -> Type3) -> (_H_O : Q_ 0) -> (_H_S : (x_378 : Nat) -> (_x_380 : Q_ x_378) -> Q_ (plus x_378 1)) -> (x_377 : Nat) -> Q_ x_377"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_Type4. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1572$ of $ACop$ of $x1$ and $x2$ to elements of $Type4$, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1573$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_Type4 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1572 : ACop x1 x2) -> Type4) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1573 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_S_to_lt. For all natural numbers $n$ and $m$, if the sum of $n$ and $1$ is less than $m$, then $n$ is less than $m$.",
    "output": "postulate lt_S_to_lt : (n : Nat) -> (m : Nat) -> (_ : Lt (plus n 1) m) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_ord_rem. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then if $0$ is less than $n$, then $ord_rem$ applied to $n$ and $p$ is divisible by $n$.",
    "output": "postulate divides_ord_rem : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> divisible (ord_rem n p) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_Sn. For all natural numbers $n$, $n$ is less than or equal to the sum of $n$ and $1$.",
    "output": "postulate le_n_Sn : (n : Nat) -> Leq n (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_m. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, $Nat$.",
    "output": "postulate let_m : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_plus_to_lt_r. Let $n$ and $p$ and $q$ be natural numbers. Then if the sum of $n$ and $p$ is less than the sum of $n$ and $q$, then $p$ is less than $q$.",
    "output": "postulate lt_plus_to_lt_r : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (plus n p) (plus n q)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop. Let $__$ be a natural number. Then for all functions $__1$ from natural numbers $__1$ to booleans, for all sets $H$, for all elements $__2$ of $H$, for all functions $__3$ from elements $__3$ of $H$ and elements $__4$ of $H$ to elements of $H$, for all functions $__4$ from natural numbers $__4$ to elements of $H$, $H$.",
    "output": "postulate bigop : (_ : Nat) -> (__1 : (__1 : Nat) -> bool) -> (H : Set) -> (__2 : H) -> (__3 : (__3 : H) -> (__4 : H) -> H) -> (__4 : (__4 : Nat) -> H) -> H"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_sqrt. For all natural numbers $n$, the square root of the product of $n$ and $n$ is equal to $n$.",
    "output": "postulate eq_sqrt : (n : Nat) -> Eq (sqrt (times n n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $p$ and $n$, if $1$ is less than $p$, then for all natural numbers $m$ and $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (p : Nat) -> (n : Nat) -> (lt1p : Lt 1 p) -> (m : Nat) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp1. For all sets $_A$, for all functions $Q_$ from elements $_x_937$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_937$ of $range$ of $_A$, $Q_$ holds for $x_937$.",
    "output": "postulate range_rect_CProp1 : (_A : Set) -> (Q_ : (_x_937 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_937 : range _A) -> Q_ x_937"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1704. Let $m$ be a natural number. Then if $0$ is less than $m$, then for all natural numbers $a$ and $x1029$, $x1029$ is equal to $aop__o__op$ applied to $Nat$ and $0$ and $plusAC$ and $x1029$ and $0$.",
    "output": "postulate let_clause_1704 : (m : Nat) -> (posm : Lt 0 m) -> (a : Nat) -> (x1029 : Nat) -> Eq x1029 (aop__o__op Nat 0 plusAC x1029 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Monotonic_Psi. $monotonic$ holds for $Nat$ and $Leq$ and $Psi$.",
    "output": "postulate monotonic_Psi : monotonic Nat Leq Psi"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp3. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_847$ of $Lt$ of $_r$ and $_m$ and elements $x_846$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_847$ and $x_846$, for all elements $x_845$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_845$.",
    "output": "postulate div_mod_spec_rect_CProp3 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_845 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_847 : Lt _r _m) -> (x_846 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_847 x_846)) -> (x_845 : div_mod_spec _n _m _q _r) -> Q_ x_845"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10331. For all natural numbers $n$, if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_ind. Let $B$ be a set. Then for all elements $_R$ of $relation$ of $B$, for all functions $Q_$ from natural numbers $x_1337$ and elements $x_1336$ of $B$ and elements $x_1335$ of $B$ and elements $_x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$ to propositions, for all functions $_H_lstar_r_O$ from elements $b$ of $B$ to elements of $Q_$ of $0$ and $b$ and $b$ and $lstar_r_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_r_S$ from natural numbers $l$ and elements $b1$ of $B$ and elements $b$ of $B$ and elements $x_1340$ of $lstar_r$ of $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $B$ and elements $x_1339$ of $_R$ of $b$ and $b2$ and elements $_x_1342$ of $Q_$ of $l$ and $b1$ and $b$ and $x_1340$ to elements of $Q_$ of the sum of $l$ and $1$ and $b1$ and $b2$ and $lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $x_1340$ and $b2$ and $x_1339$, for all natural numbers $x_1337$, for all elements $x_1336$ and $x_1335$ of $B$, for all elements $x_1338$ of $lstar_r$ of $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$, $Q_$ holds for $x_1337$ and $x_1336$ and $x_1335$ and $x_1338$.",
    "output": "postulate lstar_r_ind : (B : Set) -> (_R : relation B) -> (Q_ : (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (_x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Prop) -> (_H_lstar_r_O : (b : B) -> Q_ 0 b b (lstar_r_O B _R b)) -> (_H_lstar_r_S : (l : Nat) -> (b1 : B) -> (b : B) -> (x_1340 : lstar_r B _R l b1 b) -> (b2 : B) -> (x_1339 : _R b b2) -> (_x_1342 : Q_ l b1 b x_1340) -> Q_ (plus l 1) b1 b2 (lstar_r_S B _R l b1 b x_1340 b2 x_1339)) -> (x_1337 : Nat) -> (x_1336 : B) -> (x_1335 : B) -> (x_1338 : lstar_r B _R x_1337 x_1336 x_1335) -> Q_ x_1337 x_1336 x_1335 x_1338"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $_n$ be a natural number. Let $_f$ be a function from natural numbers to booleans. Let $__$ be a natural number. Then $max_spec$ applied to $_n$ and $_f$ and $__$ is a proposition.",
    "output": "postulate max_spec : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type0_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_955$ of $Dop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_955$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_955$.",
    "output": "postulate Dop_rect_Type0_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_955 : Dop A _nil) -> Set) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_955 : Dop A _nil) -> Q_ x_955"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_fact_n. Let $n$ be a natural number. Then $n$ is less than or equal to the factorial of $n$.",
    "output": "postulate le_n_fact_n : (n : Nat) -> Leq n (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_mod. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then the greatest common divisor of $n$ and $mod$ applied to $m$ and $n$ is equal to the greatest common divisor of $m$ and $n$.",
    "output": "postulate gcd_mod : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> Eq (gcd n (mod m n)) (gcd m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_S_to_lt. Let $n$ and $m$ be natural numbers. Then if the sum of $n$ and $1$ is less than $m$, then $n$ is less than $m$.",
    "output": "postulate lt_S_to_lt : (n : Nat) -> (m : Nat) -> (_ : Lt (plus n 1) m) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_Sn. Let $b$ and $n$ be natural numbers. Then the exponentiation of $b$ and the sum of $n$ and $1$ is equal to the product of $b$ and the exponentiation of $b$ and $n$.",
    "output": "postulate exp_Sn : (b : Nat) -> (n : Nat) -> Eq (pow b (plus n 1)) (times b (pow b n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_p_ord_inv. For all natural numbers $p$ and $m$ and $x$, if $ord$ applied to $x$ and $p$ is less than $m$, then the quotient of $p_ord_inv$ applied to $p$ and $m$ and $x$ and $m$ is equal to $ord_rem$ applied to $x$ and $p$.",
    "output": "postulate div_p_ord_inv : (p : Nat) -> (m : Nat) -> (x : Nat) -> (_ : Lt (ord x p) m) -> Eq (div (p_ord_inv p m x) m) (ord_rem x p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $_nil$ be an element of $A$. Then $ACop (A , _nil)$ is a set.",
    "output": "postulate ACop : (A : Set) -> (_nil : A) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_min. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $b$, for all elements $__$ of $ex$ of $Nat$ and the function that maps $i$ to the conjunction of the conjunction of $Leq$ applied to $b$ and $i$ and $Lt$ applied to $i$ and the sum of $n$ and $b$ and $Eq$ applied to $f$ applied to $i$ and $true$, $min$ applied to $n$ and $b$ and $f$ is less than the sum of $n$ and $b$.",
    "output": "postulate lt_min : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (_ : ex Nat (\\ i : Nat -> and (and (Leq b i) (Lt i (plus n b))) (Eq (f i) true))) -> Lt (min n b f) (plus n b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_Sn_n. For all natural numbers $n$, $1$ is equal to the difference of the sum of $n$ and $1$ and $n$.",
    "output": "postulate minus_Sn_n : (n : Nat) -> Eq 1 (minus (plus n 1) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1549. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then if $0$ is equal to $m$, then for all natural numbers $x1106$, $x1106$ is equal to the difference of $x1106$ and $m$.",
    "output": "postulate let_clause_1549 : (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (eqm0 : Eq 0 m) -> (x1106 : Nat) -> Eq x1106 (minus x1106 m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Smallest_factor_to_prime. For all natural numbers $n$, if $1$ is less than $n$, then if $smallest_factor$ applied to $n$ is equal to $n$, then $n$ is prime.",
    "output": "postulate smallest_factor_to_prime : (n : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (smallest_factor n) n) -> prime n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TimesAC. $ACop$ holds for $Nat$ and $1$.",
    "output": "postulate timesAC : ACop Nat 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp5. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_905$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_905$.",
    "output": "postulate ACop_rect_CProp5 : (A : Set) -> (_nil : A) -> (Q_ : (_x_905 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_905 : ACop A _nil) -> Q_ x_905"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Assoc. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ and $b$ and $c$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $op$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ is equal to $op$ applied to $A$ and $nil$ and $xxx$ and $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $c$.",
    "output": "postulate assoc : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> (b : A) -> (c : A) -> Eq (op A nil xxx a (op A nil xxx b c)) (op A nil xxx (op A nil xxx a b) c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lop_Sfalse. For all natural numbers $m$ and $i$, for all lists $acc$ of natural numbers, if $list_divides$ applied to $acc$ and $i$ is equal to absurdity, then $lprim$ applied to the sum of $m$ and $1$ and $i$ and $acc$ is equal to $lprim$ applied to $m$ and the sum of $i$ and $1$ and $append$ applied to $Nat$ and $acc$ and $cons$ applied to $Nat$ and $i$ and $nil$ applied to $Nat$.",
    "output": "postulate lop_Sfalse : (m : Nat) -> (i : Nat) -> (acc : list Nat) -> (_ : Eq (list_divides acc i) false) -> Eq (lprim (plus m 1) i acc) (lprim m (plus i 1) (append Nat acc (cons Nat i (nil Nat))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_S_times_2. Let $n$ be a natural number. Then if $0$ is less than $n$, then the sum of $n$ and $1$ is less than or equal to the product of $2$ and $n$.",
    "output": "postulate le_S_times_2 : (n : Nat) -> (_ : Lt 0 n) -> Leq (plus n 1) (times 2 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Example3. $smallest_factor (7)= 7$.",
    "output": "postulate example3 : Eq (smallest_factor 7) 7"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_1_to_lt_O. For all natural numbers $i$ and $n$, if $1$ is less than $n$, then if the greatest common divisor of $i$ and $n$ is equal to $1$, then $0$ is less than $i$.",
    "output": "postulate gcd_1_to_lt_O : (i : Nat) -> (n : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (gcd i n) 1) -> Lt 0 i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_aux_mod_aux. Let $p$ and $n$ and $m$ be natural numbers. Then $n$ is equal to the sum of the product of $div_aux$ applied to $p$ and $n$ and $m$ and the sum of $m$ and $1$ and $mod_aux$ applied to $p$ and $n$ and $m$.",
    "output": "postulate div_aux_mod_aux : (p : Nat) -> (n : Nat) -> (m : Nat) -> Eq n (plus (times (div_aux p n m) (plus m 1)) (mod_aux p n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1559. Let $n$ and $m$ be natural numbers. Then if $n$ is divisible by $m$, then if $0$ is equal to $n$, then for all natural numbers $d$, if $m$ is equal to the product of $0$ and $d$, then $m$ is equal to $n$.",
    "output": "postulate let_clause_1559 : (n : Nat) -> (m : Nat) -> (divnm : divisible n m) -> (H : Eq 0 n) -> (d : Nat) -> (auto : Eq m (times 0 d)) -> Eq m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_n_O. Let $n$ be a natural number. Then if $0$ is less than $n$, then the exponentiation of $0$ and $n$ is equal to $0$.",
    "output": "postulate exp_n_O : (n : Nat) -> (_ : Lt 0 n) -> Eq (pow 0 n) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp_to_lt. Let $a$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $a$, then if the exponentiation of $a$ and $n$ is less than the exponentiation of $a$ and $m$, then $n$ is less than $m$.",
    "output": "postulate lt_exp_to_lt : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 a) -> (__1 : Lt (pow a n) (pow a m)) -> Lt n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sub_hk. Let $__$ be a function from natural numbers to natural numbers. Then for all functions $__1$ from natural numbers $__1$ to natural numbers, for all sets $A$, $relation$ holds for $range$ applied to $A$.",
    "output": "postulate sub_hk : (_ : (_ : Nat) -> Nat) -> (__1 : (__1 : Nat) -> Nat) -> (A : Set) -> relation (range A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prime_to_divides_M. Let $m$ and $p$ be natural numbers. Then if $p$ is prime, then if the sum of $m$ and $1$ is less than $p$, then if $p$ is less than or equal to the sum of the product of $2$ and $m$ and $1$, then $p$ is divisible by $M$ applied to $m$.",
    "output": "postulate prime_to_divides_M : (m : Nat) -> (p : Nat) -> (_ : prime p) -> (__1 : Lt (plus m 1) p) -> (__2 : Leq p (plus (times 2 m) 1)) -> divisible p (M m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_minus_to_plus_r. Let $a$ and $b$ and $c$ be natural numbers. Then if $c$ is less than or equal to $b$, then if $a$ is less than or equal to the difference of $b$ and $c$, then the sum of $a$ and $c$ is less than or equal to $b$.",
    "output": "postulate le_minus_to_plus_r : (a : Nat) -> (b : Nat) -> (c : Nat) -> (_ : Leq c b) -> (__1 : Leq a (minus b c)) -> Leq (plus a c) b"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_lt_O. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $n$ is divisible by $m$, then $0$ is less than $n$.",
    "output": "postulate divides_to_lt_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : divisible n m) -> Lt 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_to_lt_to_lt. For all natural numbers $n$ and $m$ and $p$, if $n$ is less than or equal to $m$, then if $m$ is less than $p$, then $n$ is less than $p$.",
    "output": "postulate le_to_lt_to_lt : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Leq n m) -> (__1 : Lt m p) -> Lt n p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1068. For all functions $f$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $permf$ of $permut$ of $f$ and $n$, for all natural numbers $i$ and $j$, if $i$ is less than or equal to $n$, then if $j$ is less than or equal to $n$, then for all natural numbers $a$, if $a$ is less than or equal to $n$ and $f$ applied to $a$ is equal to $i$, then if $a$ is less than or equal to $n$, then if $f$ applied to $a$ is equal to $i$, then for all natural numbers $b$, if $b$ is less than or equal to $n$ and $f$ applied to $b$ is equal to $j$, then if $b$ is less than or equal to $n$, then if $f$ applied to $b$ is equal to $j$, then for all functions $__$ from natural numbers $i0$ and elements of $Leq$ of $i0$ and $n$ to elements of $Leq$ of $f$ applied to $i0$ and $n$, for all elements $injf$ of $injn$ of $f$ and $n$, if $a$ is equal to $b$, then $f$ applied to $a$ is equal to $i$.",
    "output": "postulate let_clause_1068 : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (permf : permut f n) -> (i : Nat) -> (j : Nat) -> (lein : Leq i n) -> (lejn : Leq j n) -> (a : Nat) -> (_clearme : and (Leq a n) (Eq (f a) i)) -> (lean : Leq a n) -> (fa : Eq (f a) i) -> (b : Nat) -> (_clearme0 : and (Leq b n) (Eq (f b) j)) -> (lebn : Leq b n) -> (fb : Eq (f b) j) -> (_ : (i0 : Nat) -> (_ : Leq i0 n) -> Leq (f i0) n) -> (injf : injn f n) -> (auto : Eq a b) -> Eq (f a) i"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "F3_ind_aux. Let $A1$ and $A2$ and $A3$ be sets. Then for all functions $f$ from elements of $A1$ and elements $__1$ of $A2$ and elements $__2$ of $A3$ to natural numbers, for all elements $P$ of $relation3$ of $A1$ and $A2$ and $A3$, for all functions $__$ from natural numbers $n$ and functions from elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements of $Lt$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$ and elements $a1$ of $A1$ and elements $a2$ of $A2$ and elements $a3$ of $A3$ and elements $__1$ of $Eq$ of $f$ applied to $a1$ and $a2$ and $a3$ and $n$ to elements of $P$ of $a1$ and $a2$ and $a3$, for all natural numbers $n$, for all elements $a1$ of $A1$, for all elements $a2$ of $A2$, for all elements $a3$ of $A3$, if $f$ applied to $a1$ and $a2$ and $a3$ is equal to $n$, then $P$ holds for $a1$ and $a2$ and $a3$.",
    "output": "postulate f3_ind_aux : (A1 : Set) -> (A2 : Set) -> (A3 : Set) -> (f : (_ : A1) -> (__1 : A2) -> (__2 : A3) -> Nat) -> (P : relation3 A1 A2 A3) -> (_ : (n : Nat) -> (_ : (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (_ : Lt (f a1 a2 a3) n) -> P a1 a2 a3) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (__1 : Eq (f a1 a2 a3) n) -> P a1 a2 a3) -> (n : Nat) -> (a1 : A1) -> (a2 : A2) -> (a3 : A3) -> (__1 : Eq (f a1 a2 a3) n) -> P a1 a2 a3"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_iter. For all functions $g$ from natural numbers to natural numbers, for all natural numbers $a$, for all functions $__$ from natural numbers $x$ to elements of $Leq$ of $x$ and $g$ applied to $x$, for all natural numbers $i$, $a$ is less than or equal to $iter$ applied to $Nat$ and $g$ and $i$ and $a$.",
    "output": "postulate le_iter : (g : (_ : Nat) -> Nat) -> (a : Nat) -> (_ : (x : Nat) -> Leq x (g x)) -> (i : Nat) -> Leq a (iter Nat g i a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_fg. Let $f$ and $g$ be functions from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $permut$ of $f$ and $n$, for all elements $__1$ of $permut$ of $g$ and $n$, $permut$ holds for the function that maps $m$ to $f$ applied to $g$ applied to $m$ and $n$.",
    "output": "postulate permut_fg : (f : (_ : Nat) -> Nat) -> (g : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : permut f n) -> (__1 : permut g n) -> permut (\\ m : Nat -> f (g m)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose_transpose. For all natural numbers $i$ and $j$ and $n$, $transpose$ applied to $i$ and $j$ and $transpose$ applied to $i$ and $j$ and $n$ is equal to $n$.",
    "output": "postulate transpose_transpose : (i : Nat) -> (j : Nat) -> (n : Nat) -> Eq (transpose i j (transpose i j n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_2_fact. For all natural numbers $n$, if $1$ is less than $n$, then $2$ is less than or equal to the factorial of $n$.",
    "output": "postulate le_2_fact : (n : Nat) -> (_ : Lt 1 n) -> Leq 2 (factorial n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_d_gcd. Let $m$ and $n$ and $d$ be natural numbers. Then if $d$ is divisible by $m$, then if $d$ is divisible by $n$, then $d$ is divisible by the greatest common divisor of $n$ and $m$.",
    "output": "postulate divides_d_gcd : (m : Nat) -> (n : Nat) -> (d : Nat) -> (_ : divisible d m) -> (__1 : divisible d n) -> divisible d (gcd n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "SameF_upto. Let $__$ be a natural number. Then for all sets $A$, $relation$ holds for $prod$ applied to $Set$ and $Set$ and $Nat$ and the function that maps $__1$ to $A$.",
    "output": "postulate sameF_upto : (_ : Nat) -> (A : Set) -> relation (prod Set Set Nat (\\ __1 : Nat -> A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_le. For all natural numbers $_n$ and $__$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Leq$ of $_n$ and $__$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $Leq$ of $_n$ and $__$ to elements of $return_type$ of $z$, if $_n$ is less than or equal to $__$, then $return_type$ holds for $z$.",
    "output": "postulate filter_le : (_n : Nat) -> (_ : Nat) -> (return_sort : Sort) -> (return_type : (z : Leq _n __) -> return_sort) -> (return : (z : Leq _n __) -> return_type z) -> (z : Leq _n __) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_nm. Let $n$ and $m$ be natural numbers. Then the greatest common divisor of $n$ and $m$ is divisible by $m$ and the greatest common divisor of $n$ and $m$ is divisible by $n$.",
    "output": "postulate divides_gcd_nm : (n : Nat) -> (m : Nat) -> and (divisible (gcd n m) m) (divisible (gcd n m) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_theta. For all natural numbers $m$, $theta$ applied to $m$ is less than or equal to the exponentiation of $2$ and the product of $2$ and $m$.",
    "output": "postulate le_theta : (m : Nat) -> Leq (theta m) (pow 2 (times 2 m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_le. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $n$ is divisible by $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate divides_to_le : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : divisible n m) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_n_Sm. Let $n$ and $m$ be natural numbers. Then the sum of $n$ and the product of $n$ and $m$ is equal to the product of $n$ and the sum of $m$ and $1$.",
    "output": "postulate times_n_Sm : (n : Nat) -> (m : Nat) -> Eq (plus n (times n m)) (times n (plus m 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $n$ be a natural number. Then if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_prim. Let $n$ be a natural number. Then $ex$ holds for $Nat$ and the function that maps $p$ to the conjunction of the conjunction of $Lt$ applied to $n$ and $p$ and $prime$ applied to $p$ and $prod$ applied to $Set$ and $Prop$ and $Nat$ and the function that maps $q$ to $prod$ applied to $Prop$ and $Prop$ and $prime$ applied to $q$ and the function that maps $__$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $q$ and $p$ and the function that maps $__1$ to $Leq$ applied to $q$ and $n$.",
    "output": "postulate min_prim : (n : Nat) -> ex Nat (\\ p : Nat -> and (and (Lt n p) (prime p)) (prod Set Prop Nat (\\ q : Nat -> prod Prop Prop (prime q) (\\ _ : prime q -> prod Prop Prop (Lt q p) (\\ __1 : Lt q p -> Leq q n)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_aux_body. For all natural numbers $_p$ and $_m$ and $_n$, $Nat$.",
    "output": "postulate gcd_aux_body : (_p : Nat) -> (_m : Nat) -> (_n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_CProp0. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z713$ to propositions, for all functions $_H1$ from elements $_z714$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_414$ and functions $_x_416$ from elements $_z714$ of $Eq$ of $Hterm$ and $x_414$ to elements of $P$ of $x_414$ and elements $_z714$ of $Eq$ of $Hterm$ and the sum of $x_414$ and $1$ to elements of $P$ of the sum of $x_414$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_CProp0 : (Hterm : Nat) -> (P : (_z713 : Nat) -> Prop) -> (_H1 : (_z714 : Eq Hterm 0) -> P 0) -> (_H2 : (x_414 : Nat) -> (_x_416 : (_z714 : Eq Hterm x_414) -> P x_414) -> (_z714 : Eq Hterm (plus x_414 1)) -> P (plus x_414 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_log_O. Let $n$ and $m$ be natural numbers. Then if $0$ is less than $m$, then if $m$ is less than $n$, then the logarithm of $n$ and $m$ is equal to $0$.",
    "output": "postulate lt_to_log_O : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> (__1 : Lt m n) -> Eq (log n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ , __1 \\in N$. Then we can say that $__$ is less than $__1$.",
    "output": "postulate Lt : (_ : Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1572. Let $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if the greatest common divisor of $m$ and $n$ is equal to $0$, then if $m$ is equal to $0$, then if $n$ is equal to $0$, then $m$ is equal to $0$.",
    "output": "postulate let_clause_1572 : (m : Nat) -> (n : Nat) -> (posn : Lt 0 n) -> (H : Eq (gcd m n) 0) -> (auto : Eq m 0) -> (auto' : Eq n 0) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_to_p_ord_O. Let $n$ and $i$ be natural numbers. Then if $nth_prime$ applied to $i$ is not divisible by $n$, then $p_ord$ applied to $n$ and $nth_prime$ applied to $i$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $0$ and $n$.",
    "output": "postulate not_divides_to_p_ord_O : (n : Nat) -> (i : Nat) -> (_ : not (divisible (nth_prime i) n)) -> Eq (p_ord n (nth_prime i)) (mk_Prod Nat Nat 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_aux_mn. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then $gcd_aux$ applied to $p$ and $m$ and $n$ is divisible by $m$ and $gcd_aux$ applied to $p$ and $m$ and $n$ is divisible by $n$.",
    "output": "postulate divides_gcd_aux_mn : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n p) -> and (divisible (gcd_aux p m n) m) (divisible (gcd_aux p m n) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_forall. For all functions $P$ from natural numbers to propositions, for all functions $__$ from natural numbers $i$ to elements of $decidable$ of $P$ applied to $i$, for all natural numbers $n$, $decidable$ holds for $prod$ applied to $Set$ and $Prop$ and $Nat$ and the function that maps $i$ to $prod$ applied to $Prop$ and $Prop$ and $Lt$ applied to $i$ and $n$ and the function that maps $__1$ to $P$ applied to $i$.",
    "output": "postulate decidable_forall : (P : (_ : Nat) -> Prop) -> (_ : (i : Nat) -> decidable (P i)) -> (n : Nat) -> decidable (prod Set Prop Nat (\\ i : Nat -> prod Prop Prop (Lt i n) (\\ __1 : Lt i n -> P i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_mod. For all natural numbers $m$ and $n$, if $0$ is less than $n$, then the greatest common divisor of $m$ and $n$ is divisible by the greatest common divisor of $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate divides_gcd_mod : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> divisible (gcd m n) (gcd n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_times_l. Let $p$ and $n$ and $m$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if $1$ is less than $p$, then the sum of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$ is less than or equal to the logarithm of $p$ and the product of $n$ and $m$.",
    "output": "postulate log_times_l : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : Lt 1 p) -> Leq (plus (log p n) (log p m)) (log p (times n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp4. For all sets $_A$, for all functions $Q_$ from elements $_x_929$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_929$ of $range$ of $_A$, $Q_$ holds for $x_929$.",
    "output": "postulate range_rect_CProp4 : (_A : Set) -> (Q_ : (_x_929 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_929 : range _A) -> Q_ x_929"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_pred_n. Let $n$ be a natural number. Then $pred$ applied to $n$ is less than or equal to $n$.",
    "output": "postulate le_pred_n : (n : Nat) -> Leq (pred n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_to_max_spec. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$ and $m$, if $max$ applied to $n$ and $f$ is equal to $m$, then $max_spec$ holds for $n$ and $f$ and $m$.",
    "output": "postulate max_to_max_spec : (f : (_ : Nat) -> bool) -> (n : Nat) -> (m : Nat) -> (_ : Eq (max n f) m) -> max_spec n f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_BPsi. Let $n$ be a natural number. Then $Psi$ applied to the product of $2$ and $n$ is less than or equal to the product of $B$ applied to the product of $2$ and $n$ and $Psi$ applied to $n$.",
    "output": "postulate le_Psi_BPsi : (n : Nat) -> Leq (Psi (times 2 n)) (times (B (times 2 n)) (Psi n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "SameF_p_le. For all sets $A$, for all functions $p$ from natural numbers to booleans, for all functions $f$ and $g$ from natural numbers to elements of $A$, for all natural numbers $n$ and $m$, if $n$ is less than or equal to $m$, then for all elements $__1$ of $sameF_p$ of $m$ and $p$ and $A$ and $f$ and $g$, $sameF_p$ holds for $n$ and $p$ and $A$ and $f$ and $g$.",
    "output": "postulate sameF_p_le : (A : Set) -> (p : (_ : Nat) -> bool) -> (f : (_ : Nat) -> A) -> (g : (_ : Nat) -> A) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> (__1 : sameF_p m p A f g) -> sameF_p n p A f g"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_le. For all natural numbers $a$ and $n$ and $m$, if the sum of $a$ and $n$ is less than or equal to the sum of $a$ and $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_plus_to_le : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (plus a n) (plus a m)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type0. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_901$ of $ACop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_901$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_901$.",
    "output": "postulate ACop_rect_Type0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_901 : ACop A _nil) -> Set) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_901 : ACop A _nil) -> Q_ x_901"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_rect_CProp2. For all natural numbers $x1$ and $x2$ and $x3$ and $x4$, for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1482$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_851$ of $Lt$ of $x4$ and $x2$ and elements $x_850$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1483$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and $x_850$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and $x_850$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp2 : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1482 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_851 : Lt x4 x2) -> (x_850 : Eq x1 (plus (times x3 x2) x4)) -> (_z1483 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_851 x_850)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_851 x_850)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_1_to_le_exp_B. For all natural numbers $n$, if $1$ is less than $n$, then the exponentiation of $2$ and the product of $2$ and $n$ is less than or equal to the product of the product of $2$ and $n$ and $B$ applied to the product of $2$ and $n$.",
    "output": "postulate lt_1_to_le_exp_B : (n : Nat) -> (_ : Lt 1 n) -> Leq (pow 2 (times 2 n)) (times (times 2 n) (B (times 2 n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a natural number. Then the successor of $__$ is a natural number.",
    "output": "postulate succ : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bceq. Let $n$ and $k$ be natural numbers. Then $bc$ applied to $n$ and $k$ is equal to the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "postulate bceq : (n : Nat) -> (k : Nat) -> Eq (bc n k) (div (factorial n) (times (factorial k) (factorial (minus n k))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_le_ord. For all natural numbers $p$ and $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then if $p$ is prime, then if $n$ is divisible by $m$, then $ord$ applied to $n$ and $p$ is less than or equal to $ord$ applied to $m$ and $p$.",
    "output": "postulate divides_to_le_ord : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> (__2 : prime p) -> (__3 : divisible n m) -> Leq (ord n p) (ord m p)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_to_le. Let $a$ and $n$ and $m$ be natural numbers. Then if the sum of $a$ and $n$ is less than or equal to the sum of $a$ and $m$, then $n$ is less than or equal to $m$.",
    "output": "postulate le_plus_to_le : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq (plus a n) (plus a m)) -> Leq n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_SO_n. Let $n$ be a natural number. Then $1$ is divisible by $n$.",
    "output": "postulate divides_SO_n : (n : Nat) -> divisible 1 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r. For all sets $B$, for all elements $_R$ of $relation$ of $B$, for all natural numbers $__$, $relation$ holds for $B$.",
    "output": "postulate lstar_r : (B : Set) -> (_R : relation B) -> (_ : Nat) -> relation B"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_plus_a. Let $a$ and $n$ and $m$ be natural numbers. Then if $n$ is less than or equal to $m$, then $n$ is less than or equal to the sum of $a$ and $m$.",
    "output": "postulate le_plus_a : (a : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Leq n m) -> Leq n (plus a m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type3. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1710$ of $Dop$ of $x1$ and $x2$ to elements of $Type3$, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1711$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type3 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1710 : Dop x1 x2) -> Type3) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1711 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_ind. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_889$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_889$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_889$.",
    "output": "postulate ACop_ind : (A : Set) -> (_nil : A) -> (Q_ : (_x_889 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_889 : ACop A _nil) -> Q_ x_889"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Quotient. For all natural numbers $n$ and $m$ and $q$, if $m$ is equal to the product of $n$ and $q$, then $n$ is divisible by $m$.",
    "output": "postulate quotient : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Eq m (times n q)) -> divisible n m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Smallest_factor_fact. Let $n$ be a natural number. Then $n$ is less than $smallest_factor$ applied to the sum of the factorial of $n$ and $1$.",
    "output": "postulate smallest_factor_fact : (n : Nat) -> Lt n (smallest_factor (plus (factorial n) 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_n_n. For all natural numbers $n$, if $0$ is less than $n$, then the quotient of $n$ and $n$ is equal to $1$.",
    "output": "postulate div_n_n : (n : Nat) -> (_ : Lt 0 n) -> Eq (div n n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Invert_permut_body. For all natural numbers $__$, for all functions $__1$ from natural numbers $__1$ to natural numbers, for all natural numbers $__2$, $Nat$.",
    "output": "postulate invert_permut_body : (_ : Nat) -> (__1 : (__1 : Nat) -> Nat) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_inv_rect_Type1. Let $x1$ be a set. Then for all elements $x2$ of $x1$, for all elements $Hterm$ of $Aop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1524$ of $Aop$ of $x1$ and $x2$ to elements of $Type1$, for all functions $_H1$ from functions $op$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_nill$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1525$ of $Eq$ of $Hterm$ and $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $P$ of $mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $P$ holds for $Hterm$.",
    "output": "postulate Aop_inv_rect_Type1 : (x1 : Set) -> (x2 : x1) -> (Hterm : Aop x1 x2) -> (P : (_z1524 : Aop x1 x2) -> Type1) -> (_H1 : (op : (_ : x1) -> (__1 : x1) -> x1) -> (_nill : (a : x1) -> Eq (op x2 a) a) -> (_nilr : (a : x1) -> Eq (op a x2) a) -> (_assoc : (a : x1) -> (b : x1) -> (c : x1) -> Eq (op a (op b c)) (op (op a b) c)) -> (_z1525 : Eq Hterm (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P (mk_Aop x1 x2 op _nill _nilr _assoc)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_log_exp. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then the logarithm of $p$ and the exponentiation of $p$ and $n$ is equal to $n$.",
    "output": "postulate eq_log_exp : (p : Nat) -> (n : Nat) -> (_ : Lt 1 p) -> Eq (log p (pow p n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type0. For all natural numbers $Hterm$, for all functions $P$ from natural numbers $_z683$ to sets, for all functions $_H1$ from elements $_z684$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_390$ and functions $_x_392$ from elements $_z684$ of $Eq$ of $Hterm$ and $x_390$ to elements of $P$ of $x_390$ and elements $_z684$ of $Eq$ of $Hterm$ and the sum of $x_390$ and $1$ to elements of $P$ of the sum of $x_390$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type0 : (Hterm : Nat) -> (P : (_z683 : Nat) -> Set) -> (_H1 : (_z684 : Eq Hterm 0) -> P 0) -> (_H2 : (x_390 : Nat) -> (_x_392 : (_z684 : Eq Hterm x_390) -> P x_390) -> (_z684 : Eq Hterm (plus x_390 1)) -> P (plus x_390 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Ord_eq. For all natural numbers $n$ and $p$, $ord$ applied to $n$ and $p$ is equal to $fst$ applied to $Nat$ and $Nat$ and $p_ord$ applied to $n$ and $p$.",
    "output": "postulate ord_eq : (n : Nat) -> (p : Nat) -> Eq (ord n p) (fst Nat Nat (p_ord n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_ind_r_aux. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all elements $b1$ of $B$, for all elements $P$ of $relation2$ of $Nat$ and $B$, for all elements $__$ of $P$ of $0$ and $b1$, for all functions $__1$ from natural numbers $l$ and elements $b$ of $B$ and elements $b2$ of $B$ and elements $__1$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $R$ of $b$ and $b2$ and elements $__3$ of $P$ of $l$ and $b$ to elements of $P$ of the sum of $l$ and $1$ and $b2$, for all natural numbers $l$, for all elements $b$ and $b2$ of $B$, for all elements $__2$ of $lstar$ of $B$ and $R$ and $l$ and $b$ and $b2$, if $b$ is equal to $b1$, then $P$ holds for $l$ and $b2$.",
    "output": "postulate lstar_ind_r_aux : (B : Set) -> (R : relation B) -> (b1 : B) -> (P : relation2 Nat B) -> (_ : P 0 b1) -> (__1 : (l : Nat) -> (b : B) -> (b2 : B) -> (__1 : lstar B R l b1 b) -> (__2 : R b b2) -> (__3 : P l b) -> P (plus l 1) b2) -> (l : Nat) -> (b : B) -> (b2 : B) -> (__2 : lstar B R l b b2) -> (__3 : Eq b b1) -> P l b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_to_eq_O. For all natural numbers $n$ and $m$, if $1$ is less than $n$, then if the exponentiation of $n$ and $m$ is equal to $1$, then $m$ is equal to $0$.",
    "output": "postulate exp_to_eq_O : (n : Nat) -> (m : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (pow n m) 1) -> Eq m 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Pi_1. Let $n$ be a natural number. Then for all functions $p$ from natural numbers to booleans, $bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $1$ is equal to $1$.",
    "output": "postulate pi_1 : (n : Nat) -> (p : (_ : Nat) -> bool) -> Eq (bigop n (\\ i : Nat -> p i) Nat 1 times (\\ i : Nat -> 1)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_m_exp_nm. For all natural numbers $n$ and $m$, if $1$ is less than $n$, then $m$ is less than the exponentiation of $n$ and $m$.",
    "output": "postulate lt_m_exp_nm : (n : Nat) -> (m : Nat) -> (_ : Lt 1 n) -> Lt m (pow n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $p$ and $n$ be natural numbers. Then if $1$ is less than $p$, then for all natural numbers $m$ and $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (p : Nat) -> (n : Nat) -> (lt1p : Lt 1 p) -> (m : Nat) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_inv_rect_Type3. Let $Hterm$ be a natural number. Then for all functions $P$ from natural numbers $_z665$ to elements of $Type3$, for all functions $_H1$ from elements $_z666$ of $Eq$ of $Hterm$ and $0$ to elements of $P$ of $0$, for all functions $_H2$ from natural numbers $x_378$ and functions $_x_380$ from elements $_z666$ of $Eq$ of $Hterm$ and $x_378$ to elements of $P$ of $x_378$ and elements $_z666$ of $Eq$ of $Hterm$ and the sum of $x_378$ and $1$ to elements of $P$ of the sum of $x_378$ and $1$, $P$ holds for $Hterm$.",
    "output": "postulate nat_inv_rect_Type3 : (Hterm : Nat) -> (P : (_z665 : Nat) -> Type3) -> (_H1 : (_z666 : Eq Hterm 0) -> P 0) -> (_H2 : (x_378 : Nat) -> (_x_380 : (_z666 : Eq Hterm x_378) -> P x_378) -> (_z666 : Eq Hterm (plus x_378 1)) -> P (plus x_378 1)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_10333. Let $n$ be a natural number. Then if $0$ is less than $n$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10333 : (n : Nat) -> (posn : Lt 0 n) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nilr. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ is equal to $a$.",
    "output": "postulate nilr : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> Eq (op A nil xxx a nil) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "S_mod. For all natural numbers $_n$ and $_m$, $Nat$.",
    "output": "postulate S_mod : (_n : Nat) -> (_m : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_times_plus_to_congruent. Let $n$ and $m$ and $p$ and $r$ be natural numbers. Then if $0$ is less than $p$, then if $n$ is equal to the sum of the product of $r$ and $p$ and $m$, then $congruent$ holds for $n$ and $m$ and $p$.",
    "output": "postulate eq_times_plus_to_congruent : (n : Nat) -> (m : Nat) -> (p : Nat) -> (r : Nat) -> (_ : Lt 0 p) -> (__1 : Eq n (plus (times r p) m)) -> congruent n m p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_minus_gcd_aux. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then $ex$ holds for $Nat$ and the function that maps $a$ to $ex$ applied to $Nat$ and the function that maps $b$ to the disjunction of $Eq$ applied to the difference of the product of $a$ and $n$ and the product of $b$ and $m$ and $gcd_aux$ applied to $p$ and $m$ and $n$ and $Eq$ applied to the difference of the product of $b$ and $m$ and the product of $a$ and $n$ and $gcd_aux$ applied to $p$ and $m$ and $n$.",
    "output": "postulate eq_minus_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n p) -> ex Nat (\\ a : Nat -> ex Nat (\\ b : Nat -> or (Eq (minus (times a n) (times b m)) (gcd_aux p m n)) (Eq (minus (times b m) (times a n)) (gcd_aux p m n))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_sn. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b$ and $b2$ of $B$, for all elements $__$ of $lstar_r$ of $B$ and $R$ and $l$ and $b$ and $b2$, for all elements $b1$ of $B$, for all elements $__1$ of $R$ of $b1$ and $b$, $lstar_r$ holds for $B$ and $R$ and the sum of $l$ and $1$ and $b1$ and $b2$.",
    "output": "postulate lstar_r_sn : (B : Set) -> (R : relation B) -> (l : Nat) -> (b : B) -> (b2 : B) -> (_ : lstar_r B R l b b2) -> (b1 : B) -> (__1 : R b1 b) -> lstar_r B R (plus l 1) b1 b2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_ind_plus. For all elements $R$ of $predicate$ of $Nat$, for all elements $__$ of $R$ of $0$, for all functions $__1$ from natural numbers $n$ and elements $__1$ of $R$ of $n$ to elements of $R$ of the sum of $n$ and $1$, for all natural numbers $n$, $R$ holds for $n$.",
    "output": "postulate nat_ind_plus : (R : predicate Nat) -> (_ : R 0) -> (__1 : (n : Nat) -> (__1 : R n) -> R (plus n 1)) -> (n : Nat) -> R n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp1. Let $n$ be a natural number. Then $Psi$ applied to the exponentiation of $2$ and $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and the exponentiation of $2$ and $n$ and the sum of $n$ and $2$.",
    "output": "postulate le_Psi_exp1 : (n : Nat) -> Leq (Psi (pow 2 n)) (pow 2 (minus (times 2 (pow 2 n)) (plus n 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Mod_cr_pair. For all natural numbers $m$ and $n$ and $a$ and $b$, if $a$ is less than $m$, then if $b$ is less than $n$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then $mod$ applied to $cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $m$ is equal to $a$ and $mod$ applied to $cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $n$ is equal to $b$.",
    "output": "postulate mod_cr_pair : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (_ : Lt a m) -> (__1 : Lt b n) -> (__2 : Eq (gcd n m) 1) -> and (Eq (mod (cr_pair m n a b) m) a) (Eq (mod (cr_pair m n a b) n) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_pred_pred. For all natural numbers $n$ and $m$, if $0$ is less than $n$, then if $0$ is less than $m$, then the difference of $pred$ applied to $n$ and $pred$ applied to $m$ is equal to the difference of $n$ and $m$.",
    "output": "postulate minus_pred_pred : (n : Nat) -> (m : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 0 m) -> Eq (minus (pred n) (pred m)) (minus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_ind_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_889$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_889$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_889$.",
    "output": "postulate ACop_ind_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_889 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_889 : ACop A _nil) -> Q_ x_889"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_to_min_spec. Let $f$ be a function from natural numbers to booleans. Then for all natural numbers $n$ and $b$ and $m$, if $min$ applied to $n$ and $b$ and $f$ is equal to $m$, then $min_spec$ holds for $n$ and $b$ and $f$ and $m$.",
    "output": "postulate min_to_min_spec : (f : (_ : Nat) -> bool) -> (n : Nat) -> (b : Nat) -> (m : Nat) -> (_ : Eq (min n b f) m) -> min_spec n b f m"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_inv_rect_Type4. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $Dop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1704$ of $Dop$ of $x1$ and $x2$ to elements of $Type4$, for all functions $_H1$ from elements $sum$ of $ACop$ of $x1$ and $x2$ and functions $prod$ from elements of $x1$ and elements $__1$ of $x1$ to elements of $x1$ and functions $_null$ from elements $a$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $x1$ and elements $b$ of $x1$ and elements $c$ of $x1$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1705$ of $Eq$ of $Hterm$ and $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $P$ of $mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $P$ holds for $Hterm$.",
    "output": "postulate Dop_inv_rect_Type4 : (x1 : Set) -> (x2 : x1) -> (Hterm : Dop x1 x2) -> (P : (_z1704 : Dop x1 x2) -> Type4) -> (_H1 : (sum : ACop x1 x2) -> (prod : (_ : x1) -> (__1 : x1) -> x1) -> (_null : (a : x1) -> Eq (prod a x2) x2) -> (_distr : (a : x1) -> (b : x1) -> (c : x1) -> Eq (prod a (aop__o__op x1 x2 sum b c)) (aop__o__op x1 x2 sum (prod a b) (prod a c))) -> (_z1705 : Eq Hterm (mk_Dop x1 x2 sum prod _null _distr)) -> P (mk_Dop x1 x2 sum prod _null _distr)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. For all natural numbers $n$, if $1$ is less than $n$, then if the product of $2$ and $n$ is prime, then if $1$ is less than the product of $2$ and $n$, then for all functions $H1$ from natural numbers $m$ and elements of $divisible$ of $m$ and the product of $2$ and $n$ and elements $__1$ of $Lt$ of $1$ and $m$ to elements of $Eq$ of $m$ and the product of $2$ and $n$, for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : Nat) -> (ltn : Lt 1 n) -> (_clearme : prime (times 2 n)) -> (H : Lt 1 (times 2 n)) -> (H1 : (m : Nat) -> (_ : divisible m (times 2 n)) -> (__1 : Lt 1 m) -> Eq m (times 2 n)) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound. Let $__$ and $p$ be natural numbers. Then $Nat$.",
    "output": "postulate let_upper_bound : (_ : Nat) -> (p : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp2. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_849$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_851$ of $Lt$ of $_r$ and $_m$ and elements $x_850$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_851$ and $x_850$, for all elements $x_849$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_849$.",
    "output": "postulate div_mod_spec_rect_CProp2 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_849 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_851 : Lt _r _m) -> (x_850 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_851 x_850)) -> (x_849 : div_mod_spec _n _m _q _r) -> Q_ x_849"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ and $__1$ be natural numbers. Then the difference of $__$ and $__1$ is a natural number.",
    "output": "postulate minus : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_exp2. Let $p$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $n$, then the product of $m$ and the logarithm of $p$ and $n$ is less than or equal to the logarithm of $p$ and the exponentiation of $n$ and $m$.",
    "output": "postulate log_exp2 : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 n) -> Leq (times m (log p n)) (log p (pow n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_fact_pi_p. For all natural numbers $n$, the factorial of $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $i$ to $leb$ applied to $1$ and $i$ and $Nat$ and $1$ and $times$ and the function that maps $i$ to $i$.",
    "output": "postulate eq_fact_pi_p : (n : Nat) -> Eq (factorial n) (bigop (plus n 1) (\\ i : Nat -> leb 1 i) Nat 1 times (\\ i : Nat -> i))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Assoc. Let $A$ be a set. Then for all elements $nil$ of $A$, for all elements $xxx$ of $Aop$ of $A$ and $nil$, for all elements $a$ and $b$ and $c$ of $A$, $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $op$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ is equal to $op$ applied to $A$ and $nil$ and $xxx$ and $op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $c$.",
    "output": "postulate assoc : (A : Set) -> (nil : A) -> (xxx : Aop A nil) -> (a : A) -> (b : A) -> (c : A) -> Eq (op A nil xxx a (op A nil xxx b c)) (op A nil xxx (op A nil xxx a b) c)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_body. For all natural numbers $__$ and $__1$, $Nat$.",
    "output": "postulate minus_body : (_ : Nat) -> (__1 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_ord_log. Let $n$ and $p$ be natural numbers. Then if $0$ is less than $n$, then if $1$ is less than $p$, then $ord$ applied to $n$ and $p$ is less than or equal to the logarithm of $p$ and $n$.",
    "output": "postulate le_ord_log : (n : Nat) -> (p : Nat) -> (_ : Lt 0 n) -> (__1 : Lt 1 p) -> Leq (ord n p) (log p n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Even_or_odd. Let $n$ be a natural number. Then $ex$ holds for $Nat$ and the function that maps $a$ to the disjunction of $Eq$ applied to $n$ and the product of $2$ and $a$ and $Eq$ applied to $n$ and the sum of the product of $2$ and $a$ and $1$.",
    "output": "postulate even_or_odd : (n : Nat) -> ex Nat (\\ a : Nat -> or (Eq n (times 2 a)) (Eq n (plus (times 2 a) 1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_intro. For all natural numbers $n$ and $m$ and $q$ and $r$, if $r$ is less than $m$, then if $n$ is equal to the sum of the product of $q$ and $m$ and $r$, then $div_mod_spec$ holds for $n$ and $m$ and $q$ and $r$.",
    "output": "postulate div_mod_spec_intro : (n : Nat) -> (m : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt r m) -> (__1 : Eq n (plus (times q m) r)) -> div_mod_spec n m q r"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primes_below_to_bertrand. Let $pm$ be a natural number. Then for all lists $l$ of natural numbers, if $pm$ is prime, then for all elements $__1$ of $primes_below$ of $l$ and the sum of $pm$ and $1$, for all functions $__2$ from natural numbers $p$ and elements $__2$ of $mem$ of $Nat$ and $p$ and $l$ and elements $__3$ of $Lt$ of $2$ and $p$ to elements of $ex$ of $Nat$ and the function that maps $pp$ to the conjunction of the conjunction of $mem$ applied to $Nat$ and $pp$ and $l$ and $Lt$ applied to $pp$ and $p$ and $Leq$ applied to $p$ and the product of $2$ and $pp$, for all natural numbers $n$, if $0$ is less than $n$, then if $n$ is less than $pm$, then $bertrand$ holds for $n$.",
    "output": "postulate primes_below_to_bertrand : (pm : Nat) -> (l : list Nat) -> (_ : prime pm) -> (__1 : primes_below l (plus pm 1)) -> (__2 : (p : Nat) -> (__2 : mem Nat p l) -> (__3 : Lt 2 p) -> ex Nat (\\ pp : Nat -> and (and (mem Nat pp l) (Lt pp p)) (Leq p (times 2 pp)))) -> (n : Nat) -> (__3 : Lt 0 n) -> (__4 : Lt n pm) -> bertrand n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_upper_bound1. Let $n$ be a natural number. Then $Nat$.",
    "output": "postulate let_upper_bound1 : (n : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max. Let $_n$ be a natural number. Then for all functions $_f$ from natural numbers to booleans, $Nat$.",
    "output": "postulate max : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp0. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_967$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_967$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_967$.",
    "output": "postulate Dop_rect_CProp0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_967 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_967 : Dop A _nil) -> Q_ x_967"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp1_body. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_855$ of $Lt$ of $_r$ and $_m$ and elements $x_854$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_855$ and $x_854$, for all elements $x_853$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_853$.",
    "output": "postulate div_mod_spec_rect_CProp1_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_853 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_855 : Lt _r _m) -> (x_854 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_855 x_854)) -> (x_853 : div_mod_spec _n _m _q _r) -> Q_ x_853"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_priml1. Let $n$ be a natural number. Then if $0$ is less than $n$, then the difference of the quotient of the product of $2$ and $n$ and the sum of the logarithm of $2$ and $n$ and $2$ and $1$ is less than or equal to $prim$ applied to the product of $2$ and $n$.",
    "output": "postulate le_priml1 : (n : Nat) -> (_ : Lt 0 n) -> Leq (minus (div (times 2 n) (plus (log 2 n) 2)) 1) (prim (times 2 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_not_exists. For all functions $f$ from natural numbers to booleans, for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and absurdity, $max$ applied to $n$ and $f$ is equal to $0$.",
    "output": "postulate max_not_exists : (f : (_ : Nat) -> bool) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> Eq (f i) false) -> Eq (max n f) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type4_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_891$ of $ACop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_891$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_891$.",
    "output": "postulate ACop_rect_Type4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_891 : ACop A _nil) -> Type4) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_891 : ACop A _nil) -> Q_ x_891"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Max_f_g. For all functions $f$ and $g$ from natural numbers to booleans, for all natural numbers $n$, for all functions $__$ from natural numbers $i$ and elements of $Lt$ of $i$ and $n$ to elements of $Eq$ of $f$ applied to $i$ and $g$ applied to $i$, $max$ applied to $n$ and $f$ is equal to $max$ applied to $n$ and $g$.",
    "output": "postulate max_f_g : (f : (_ : Nat) -> bool) -> (g : (_ : Nat) -> bool) -> (n : Nat) -> (_ : (i : Nat) -> (_ : Lt i n) -> Eq (f i) (g i)) -> Eq (max n f) (max n g)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_O_to_eq_O. Let $m$ and $n$ be natural numbers. Then if the greatest common divisor of $m$ and $n$ is equal to $0$, then $m$ is equal to $0$ and $n$ is equal to $0$.",
    "output": "postulate gcd_O_to_eq_O : (m : Nat) -> (n : Nat) -> (_ : Eq (gcd m n) 0) -> and (Eq m 0) (Eq n 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type3_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_895$ of $ACop$ of $A$ and $_nil$ to elements of $Type3$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_895$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_895$.",
    "output": "postulate ACop_rect_Type3_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_895 : ACop A _nil) -> Type3) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_895 : ACop A _nil) -> Q_ x_895"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_not_bertrand_to_bertrand1. For all natural numbers $n$, if it is not the case that $not_bertrand$ holds for $n$, then for all natural numbers $x$, if $n$ is less than or equal to $x$, then if $x$ is less than or equal to the product of $2$ and $n$, then for all functions $__3$ from natural numbers $p$ and elements $__3$ of $Lt$ of $x$ and $p$ and elements $__4$ of $Leq$ of $p$ and the product of $2$ and $n$ to elements of $not$ of $prime$ applied to $p$, $ex$ holds for $Nat$ and the function that maps $p$ to the conjunction of the conjunction of $Lt$ applied to $n$ and $p$ and $Leq$ applied to $p$ and $x$ and $prime$ applied to $p$.",
    "output": "postulate not_not_bertrand_to_bertrand1 : (n : Nat) -> (_ : not (not_bertrand n)) -> (x : Nat) -> (__1 : Leq n x) -> (__2 : Leq x (times 2 n)) -> (__3 : (p : Nat) -> (__3 : Lt x p) -> (__4 : Leq p (times 2 n)) -> not (prime p)) -> ex Nat (\\ p : Nat -> and (and (Lt n p) (Leq p x)) (prime p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_O_n. For all natural numbers $n$, $0$ is less than or equal to $n$.",
    "output": "postulate le_O_n : (n : Nat) -> Leq 0 n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "List_of_primes_def. Let $n$ be a natural number. Then $list_of_primes$ applied to $n$ is equal to $lprim$ applied to $n$ and $2$ and $nil$ applied to $Nat$.",
    "output": "postulate list_of_primes_def : (n : Nat) -> Eq (list_of_primes n) (lprim n 2 (nil Nat))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min_body. Let $__$ and $__1$ be natural numbers. Then for all functions $__2$ from natural numbers $__2$ to booleans, $Nat$.",
    "output": "postulate min_body : (_ : Nat) -> (__1 : Nat) -> (__2 : (__2 : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_prod. Let $k1$ and $k2$ be natural numbers. Then for all functions $p1$ from natural numbers to booleans, for all functions $p2$ from natural numbers and natural numbers $__1$ to booleans, for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $Aop$ of $B$ and $nil$, for all functions $f$ from natural numbers and natural numbers $__1$ to elements of $B$, $bigop$ applied to $k1$ and the function that maps $x$ to $p1$ applied to $x$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $x$ to $bigop$ applied to $k2$ and the function that maps $i$ to $p2$ applied to $x$ and $i$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $x$ and $i$ is equal to $bigop$ applied to the product of $k1$ and $k2$ and the function that maps $i$ to $andb$ applied to $p1$ applied to the quotient of $i$ and $k2$ and $p2$ applied to the quotient of $i$ and $k2$ and $mod$ applied to $i$ and $k2$ and $B$ and $nil$ and $op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to the quotient of $i$ and $k2$ and $mod$ applied to $i$ and $k2$.",
    "output": "postulate bigop_prod : (k1 : Nat) -> (k2 : Nat) -> (p1 : (_ : Nat) -> bool) -> (p2 : (_ : Nat) -> (__1 : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : Aop B nil) -> (f : (_ : Nat) -> (__1 : Nat) -> B) -> Eq (bigop k1 (\\ x : Nat -> p1 x) B nil (op B nil op) (\\ x : Nat -> bigop k2 (\\ i : Nat -> p2 x i) B nil (op B nil op) (\\ i : Nat -> f x i))) (bigop (times k1 k2) (\\ i : Nat -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op B nil op) (\\ i : Nat -> f (div i k2) (mod i k2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Start_lprim. Let $n$ and $m$ and $a$ be natural numbers. Then for all lists $acc$ of natural numbers, $option_hd$ applied to $Nat$ and $lprim$ applied to $n$ and $m$ and $cons$ applied to $Nat$ and $a$ and $acc$ is equal to $Some$ applied to $Nat$ and $a$.",
    "output": "postulate start_lprim : (n : Nat) -> (m : Nat) -> (a : Nat) -> (acc : list Nat) -> Eq (option_hd Nat (lprim n m (cons Nat a acc))) (Some Nat a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_div. For all natural numbers $n$ and $d$, if $0$ is less than $n$, then if $d$ is divisible by $n$, then the quotient of $n$ and the quotient of $n$ and $d$ is equal to $d$.",
    "output": "postulate div_div : (n : Nat) -> (d : Nat) -> (_ : Lt 0 n) -> (__1 : divisible d n) -> Eq (div n (div n d)) d"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Primeb_false_to_not_prime. For all natural numbers $n$, if $primeb$ applied to $n$ is equal to absurdity, then $n$ is not prime.",
    "output": "postulate primeb_false_to_not_prime : (n : Nat) -> (_ : Eq (primeb n) false) -> not (prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_ind_body. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_861$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_861$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_861$.",
    "output": "postulate Aop_ind_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_861 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_861 : Aop A _nil) -> Q_ x_861"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_eq_S. Let $n$ and $m$ be natural numbers. Then if $n$ is not equal to $m$, then the sum of $n$ and $1$ is not equal to the sum of $m$ and $1$.",
    "output": "postulate not_eq_S : (n : Nat) -> (m : Nat) -> (_ : not (Eq n m)) -> not (Eq (plus n 1) (plus m 1))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le_to_lt. For all natural numbers $n$ and $m$ and $p$, if $n$ is less than $m$, then if $m$ is less than or equal to $p$, then $n$ is less than $p$.",
    "output": "postulate lt_to_le_to_lt : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt n m) -> (__1 : Leq m p) -> Lt n p"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_prime_to_primeb_false. Let $n$ be a natural number. Then if $n$ is not prime, then $primeb$ applied to $n$ is equal to absurdity.",
    "output": "postulate not_prime_to_primeb_false : (n : Nat) -> (_ : not (prime n)) -> Eq (primeb n) false"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_div_O. Let $n$ and $m$ be natural numbers. Then if $n$ is less than $m$, then the quotient of $n$ and $m$ is equal to $0$.",
    "output": "postulate eq_div_O : (n : Nat) -> (m : Nat) -> (_ : Lt n m) -> Eq (div n m) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bk_def. Let $n$ be a natural number. Then $Bk$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and $k$ applied to $n$ and $p$.",
    "output": "postulate Bk_def : (n : Nat) -> Eq (Bk n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (k n p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Log_div. Let $p$ and $n$ and $m$ be natural numbers. Then if $1$ is less than $p$, then if $0$ is less than $m$, then if $m$ is less than or equal to $n$, then the logarithm of $p$ and the quotient of $n$ and $m$ is less than or equal to the difference of the logarithm of $p$ and $n$ and the logarithm of $p$ and $m$.",
    "output": "postulate log_div : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : Lt 1 p) -> (__1 : Lt 0 m) -> (__2 : Leq m n) -> Leq (log p (div n m)) (minus (log p n) (log p m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_Strue. For all natural numbers $k$, for all functions $p$ from natural numbers to booleans, for all sets $B$, for all elements $nil$ of $B$, for all functions $op$ from elements of $B$ and elements $__1$ of $B$ to elements of $B$, for all functions $f$ from natural numbers to elements of $B$, if $p$ applied to $k$ is equal to $true$, then $bigop$ applied to the sum of $k$ and $1$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ is equal to $op$ applied to $f$ applied to $k$ and $bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate bigop_Strue : (k : Nat) -> (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : (_ : B) -> (__1 : B) -> B) -> (f : (_ : Nat) -> B) -> (_ : Eq (p k) true) -> Eq (bigop (plus k 1) (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)) (op (f k) (bigop k (\\ i : Nat -> p i) B nil op (\\ i : Nat -> f i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type0. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_901$ of $ACop$ of $A$ and $_nil$ to sets, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_901$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_901$.",
    "output": "postulate ACop_rect_Type0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_901 : ACop A _nil) -> Set) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_901 : ACop A _nil) -> Q_ x_901"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Exp_1_n. For all natural numbers $n$, $1$ is equal to the exponentiation of $1$ and $n$.",
    "output": "postulate exp_1_n : (n : Nat) -> Eq 1 (pow 1 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15601. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $0$ is equal to $n$, then if $0$ is divisible by $m$, then for all natural numbers $q$, if $m$ is equal to the product of $0$ and $q$, then $n$ is equal to $0$.",
    "output": "postulate let_clause_15601 : (n : Nat) -> (m : Nat) -> (posn : Lt 0 m) -> (eqn0 : Eq 0 n) -> (_clearme : divisible 0 m) -> (q : Nat) -> (eqm : Eq m (times 0 q)) -> Eq n 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_Type4_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_945$ of $Dop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_945$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_945$.",
    "output": "postulate Dop_rect_Type4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_945 : Dop A _nil) -> Type4) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_945 : Dop A _nil) -> Q_ x_945"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $ACop$ of $A$ and $nil$, $Aop$ holds for $A$ and $nil$.",
    "output": "postulate aop : (A : Set) -> (nil : A) -> (_xxx : ACop A nil) -> Aop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_inv_ind. Let $x1$ and $x2$ and $x3$ and $x4$ be natural numbers. Then for all elements $Hterm$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1434$ of $div_mod_spec$ of $x1$ and $x2$ and $x3$ and $x4$ to propositions, for all functions $_H1$ from elements $x_811$ of $Lt$ of $x4$ and $x2$ and elements $x_810$ of $Eq$ of $x1$ and the sum of the product of $x3$ and $x2$ and $x4$ and elements $_z1435$ of $Eq$ of $Hterm$ and $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_811$ and $x_810$ to elements of $P$ of $div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_811$ and $x_810$, $P$ holds for $Hterm$.",
    "output": "postulate div_mod_spec_inv_ind : (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (_z1434 : div_mod_spec x1 x2 x3 x4) -> Prop) -> (_H1 : (x_811 : Lt x4 x2) -> (x_810 : Eq x1 (plus (times x3 x2) x4)) -> (_z1435 : Eq Hterm (div_mod_spec_intro x1 x2 x3 x4 x_811 x_810)) -> P (div_mod_spec_intro x1 x2 x3 x4 x_811 x_810)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_prime. For all natural numbers $n$, $decidable$ holds for $prime$ applied to $n$.",
    "output": "postulate decidable_prime : (n : Nat) -> decidable (prime n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Fst_p_ord_times. For all natural numbers $p$ and $a$ and $b$, if $p$ is prime, then if $0$ is less than $a$, then if $0$ is less than $b$, then $fst$ applied to $Nat$ and $Nat$ and $p_ord$ applied to the product of $a$ and $b$ and $p$ is equal to the sum of $fst$ applied to $Nat$ and $Nat$ and $p_ord$ applied to $a$ and $p$ and $fst$ applied to $Nat$ and $Nat$ and $p_ord$ applied to $b$ and $p$.",
    "output": "postulate fst_p_ord_times : (p : Nat) -> (a : Nat) -> (b : Nat) -> (_ : prime p) -> (__1 : Lt 0 a) -> (__2 : Lt 0 b) -> Eq (fst Nat Nat (p_ord (times a b) p)) (plus (fst Nat Nat (p_ord a p)) (fst Nat Nat (p_ord b p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Or_div_mod. For all natural numbers $n$ and $q$, if $0$ is less than $q$, then the sum of $mod$ applied to $n$ and $q$ and $1$ is equal to $q$ and the sum of $n$ and $1$ is equal to the product of the sum of the quotient of $n$ and $q$ and $1$ and $q$ or the sum of $mod$ applied to $n$ and $q$ and $1$ is less than $q$ and the sum of $n$ and $1$ is equal to the sum of the product of the quotient of $n$ and $q$ and $q$ and the sum of $mod$ applied to $n$ and $q$ and $1$.",
    "output": "postulate or_div_mod : (n : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> or (and (Eq (plus (mod n q) 1) q) (Eq (plus n 1) (times (plus (div n q) 1) q))) (and (Lt (plus (mod n q) 1) q) (Eq (plus n 1) (plus (times (div n q) q) (plus (mod n q) 1))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_n_8_to_le_Psi_exp. For all natural numbers $n$, if $n$ is less than or equal to $8$, then $Psi$ applied to $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_n_8_to_le_Psi_exp : (n : Nat) -> (_ : Leq n 8) -> Leq (Psi n) (pow 2 (minus (times 2 n) 3))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_inv_S. Let $B$ be a set. Then for all elements $R$ of $relation$ of $B$, for all natural numbers $l$, for all elements $b1$ and $b2$ of $B$, for all elements $__$ of $lstar$ of $B$ and $R$ and $l$ and $b1$ and $b2$, for all natural numbers $l0$, if the sum of $l0$ and $1$ is equal to $l$, then $ex2$ holds for $B$ and the function that maps $b$ to $R$ applied to $b1$ and $b$ and the function that maps $b$ to $lstar$ applied to $B$ and $R$ and $l0$ and $b$ and $b2$.",
    "output": "postulate lstar_inv_S : (B : Set) -> (R : relation B) -> (l : Nat) -> (b1 : B) -> (b2 : B) -> (_ : lstar B R l b1 b2) -> (l0 : Nat) -> (__1 : Eq (plus l0 1) l) -> ex2 B (\\ b : B -> R b1 b) (\\ b : B -> lstar B R l0 b b2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1562. Let $m$ and $n$ and $a$ and $b$ be natural numbers. Then if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then the difference of the product of $n$ and $c$ and the product of $m$ and $d$ is equal to $1$.",
    "output": "postulate let_clause_1562 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> Eq (minus (times n c) (times m d)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_exp. Let $n$ and $m$ and $p$ be natural numbers. Then if $1$ is less than $p$, then if $n$ is less than $m$, then the exponentiation of $p$ and $n$ is less than the exponentiation of $p$ and $m$.",
    "output": "postulate lt_exp : (n : Nat) -> (m : Nat) -> (p : Nat) -> (_ : Lt 1 p) -> (__1 : Lt n m) -> Lt (pow p n) (pow p m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_to_le_times_to_lt_S_to_div. For all natural numbers $a$ and $c$ and $b$, if $0$ is less than $b$, then if the product of $b$ and $c$ is less than or equal to $a$, then if $a$ is less than the product of $b$ and the sum of $c$ and $1$, then the quotient of $a$ and $b$ is equal to $c$.",
    "output": "postulate lt_to_le_times_to_lt_S_to_div : (a : Nat) -> (c : Nat) -> (b : Nat) -> (_ : Lt 0 b) -> (__1 : Leq (times b c) a) -> (__2 : Lt a (times b (plus c 1))) -> Eq (div a b) c"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Leq_sqrt_n. For all natural numbers $n$, the product of the square root of $n$ and the square root of $n$ is less than or equal to $n$.",
    "output": "postulate leq_sqrt_n : (n : Nat) -> Leq (times (sqrt n) (sqrt n)) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Distr_body. For all sets $A$, for all elements $nil$ of $A$, for all elements $xxx$ of $Dop$ of $A$ and $nil$, for all elements $a$ and $b$ and $c$ of $A$, $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ is equal to $aop__o__op$ applied to $A$ and $nil$ and $sum$ applied to $A$ and $nil$ and $xxx$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $c$.",
    "output": "postulate distr_body : (A : Set) -> (nil : A) -> (xxx : Dop A nil) -> (a : A) -> (b : A) -> (c : A) -> Eq (prod A nil xxx a (aop__o__op A nil (sum A nil xxx) b c)) (aop__o__op A nil (sum A nil xxx) (prod A nil xxx a b) (prod A nil xxx a c))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bceq. For all natural numbers $n$ and $k$, $bc$ applied to $n$ and $k$ is equal to the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "postulate bceq : (n : Nat) -> (k : Nat) -> Eq (bc n k) (div (factorial n) (times (factorial k) (factorial (minus n k))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sqrt_def. Let $n$ be a natural number. Then the square root of $n$ is equal to $max$ applied to the sum of $n$ and $1$ and the function that maps $x$ to $leb$ applied to the product of $x$ and $x$ and $n$.",
    "output": "postulate sqrt_def : (n : Nat) -> Eq (sqrt n) (max (plus n 1) (\\ x : Nat -> leb (times x x) n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_div_to_times. Let $n$ and $m$ and $q$ be natural numbers. Then if $0$ is less than $q$, then if the quotient of $n$ and $q$ is less than $m$, then $n$ is less than the product of $q$ and $m$.",
    "output": "postulate lt_div_to_times : (n : Nat) -> (m : Nat) -> (q : Nat) -> (_ : Lt 0 q) -> (__1 : Lt (div n q) m) -> Lt n (times q m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Sum. For all sets $A$, for all elements $nil$ of $A$, for all elements $_xxx$ of $Dop$ of $A$ and $nil$, $ACop$ holds for $A$ and $nil$.",
    "output": "postulate sum : (A : Set) -> (nil : A) -> (_xxx : Dop A nil) -> ACop A nil"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_to_gcd. Let $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if $n$ is divisible by $m$, then the greatest common divisor of $n$ and $m$ is equal to $n$.",
    "output": "postulate divides_to_gcd : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : divisible n m) -> Eq (gcd n m) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_Aop. For all sets $A$, for all elements $_nil$ of $A$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $Aop$ of $A$ and $_nil$ to elements of $return_sort$, for all functions $case_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $return_type$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $z$ of $Aop$ of $A$ and $_nil$, $return_type$ holds for $z$.",
    "output": "postulate match_Aop : (A : Set) -> (_nil : A) -> (return_sort : Sort) -> (return_type : (z : Aop A _nil) -> return_sort) -> (case_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> return_type (mk_Aop A _nil op _nill _nilr _assoc)) -> (z : Aop A _nil) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a function from natural numbers to natural numbers. Let $__1$ be a natural number. Then we can say that $bijn$ holds for $__$ and $__1$.",
    "output": "postulate bijn : (_ : (_ : Nat) -> Nat) -> (__1 : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_aux. For all natural numbers $p$ and $m$ and $n$ and $d$, if $0$ is less than $n$, then if $n$ is less than or equal to $m$, then if $n$ is less than or equal to $p$, then if $d$ is divisible by $m$, then if $d$ is divisible by $n$, then $d$ is divisible by $gcd_aux$ applied to $p$ and $m$ and $n$.",
    "output": "postulate divides_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (d : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n m) -> (__2 : Leq n p) -> (__3 : divisible d m) -> (__4 : divisible d n) -> divisible d (gcd_aux p m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_O_smallest_factor. For all natural numbers $n$, if $0$ is less than $n$, then $0$ is less than $smallest_factor$ applied to $n$.",
    "output": "postulate lt_O_smallest_factor : (n : Nat) -> (_ : Lt 0 n) -> Lt 0 (smallest_factor n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bertrand. For all natural numbers $n$, if $0$ is less than $n$, then $bertrand$ holds for $n$.",
    "output": "postulate bertrand : (n : Nat) -> (_ : Lt 0 n) -> bertrand n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a natural number. Then the factorial of $__$ is a natural number.",
    "output": "postulate factorial : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Min0. For all natural numbers $_n$, for all functions $_f$ from natural numbers to booleans, $Nat$.",
    "output": "postulate min0 : (_n : Nat) -> (_f : (_ : Nat) -> bool) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_Type0. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_833$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to sets, for all functions $_H_div_mod_spec_intro$ from elements $x_835$ of $Lt$ of $_r$ and $_m$ and elements $x_834$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_835$ and $x_834$, for all elements $x_833$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_833$.",
    "output": "postulate div_mod_spec_rect_Type0 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_833 : div_mod_spec _n _m _q _r) -> Set) -> (_H_div_mod_spec_intro : (x_835 : Lt _r _m) -> (x_834 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_835 x_834)) -> (x_833 : div_mod_spec _n _m _q _r) -> Q_ x_833"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type1_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_925$ of $range$ of $_A$ to elements of $Type1$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_925$ of $range$ of $_A$, $Q_$ holds for $x_925$.",
    "output": "postulate range_rect_Type1_body : (_A : Set) -> (Q_ : (_x_925 : range _A) -> Type1) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_925 : range _A) -> Q_ x_925"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lstar_r_inv_ind. For all sets $x1$, for all elements $x2$ of $relation$ of $x1$, for all natural numbers $x3$, for all elements $x4$ and $x5$ of $x1$, for all elements $_Hterm$ of $lstar_r$ of $x1$ and $x2$ and $x3$ and $x4$ and $x5$, for all functions $P$ from natural numbers $_z2386$ and elements $_z2385$ of $x1$ and elements $_z2384$ of $x1$ to propositions, for all functions $_H1$ from elements $b$ of $x1$ and elements $_z2389$ of $Eq$ of $x3$ and $0$ and elements $_z2388$ of $Eq$ of $x4$ and $b$ and elements $_z2387$ of $Eq$ of $x5$ and $b$ to elements of $P$ of $0$ and $b$ and $b$, for all functions $_H2$ from natural numbers $l$ and elements $b1$ of $x1$ and elements $b$ of $x1$ and elements $_x_1340$ of $lstar_r$ of $x1$ and $x2$ and $l$ and $b1$ and $b$ and elements $b2$ of $x1$ and elements $_x_1339$ of $x2$ of $b$ and $b2$ and functions $_x_1342$ from elements $_z2389$ of $Eq$ of $x3$ and $l$ and elements $_z2388$ of $Eq$ of $x4$ and $b1$ and elements $_z2387$ of $Eq$ of $x5$ and $b$ to elements of $P$ of $l$ and $b1$ and $b$ and elements $_z2389$ of $Eq$ of $x3$ and the sum of $l$ and $1$ and elements $_z2388$ of $Eq$ of $x4$ and $b1$ and elements $_z2387$ of $Eq$ of $x5$ and $b2$ to elements of $P$ of the sum of $l$ and $1$ and $b1$ and $b2$, $P$ holds for $x3$ and $x4$ and $x5$.",
    "output": "postulate lstar_r_inv_ind : (x1 : Set) -> (x2 : relation x1) -> (x3 : Nat) -> (x4 : x1) -> (x5 : x1) -> (_Hterm : lstar_r x1 x2 x3 x4 x5) -> (P : (_z2386 : Nat) -> (_z2385 : x1) -> (_z2384 : x1) -> Prop) -> (_H1 : (b : x1) -> (_z2389 : Eq x3 0) -> (_z2388 : Eq x4 b) -> (_z2387 : Eq x5 b) -> P 0 b b) -> (_H2 : (l : Nat) -> (b1 : x1) -> (b : x1) -> (_x_1340 : lstar_r x1 x2 l b1 b) -> (b2 : x1) -> (_x_1339 : x2 b b2) -> (_x_1342 : (_z2389 : Eq x3 l) -> (_z2388 : Eq x4 b1) -> (_z2387 : Eq x5 b) -> P l b1 b) -> (_z2389 : Eq x3 (plus l 1)) -> (_z2388 : Eq x4 b1) -> (_z2387 : Eq x5 b2) -> P (plus l 1) b1 b2) -> P x3 x4 x5"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B1_def. Let $n$ be a natural number. Then $B1$ applied to $n$ is equal to $bigop$ applied to the sum of $n$ and $1$ and the function that maps $p$ to $primeb$ applied to $p$ and $Nat$ and $1$ and $times$ and the function that maps $p$ to the exponentiation of $p$ and the product of $bool_to_nat$ applied to $leb$ applied to $k$ applied to $n$ and $p$ and $1$ and $k$ applied to $n$ and $p$.",
    "output": "postulate B1_def : (n : Nat) -> Eq (B1 n) (bigop (plus n 1) (\\ p : Nat -> primeb p) Nat 1 times (\\ p : Nat -> pow p (times (bool_to_nat (leb (k n p) 1)) (k n p))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15311. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then if $n$ is divisible by $m$, then for all natural numbers $d$ and $p$, if $m$ is equal to the product of $n$ and the sum of $p$ and $1$, then $m$ is equal to the sum of $n$ and the product of $n$ and $p$.",
    "output": "postulate let_clause_15311 : (n : Nat) -> (m : Nat) -> (posm : Lt 0 m) -> (_clearme : divisible n m) -> (d : Nat) -> (p : Nat) -> (eqm : Eq m (times n (plus p 1))) -> Eq m (plus n (times n p))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_p. For all natural numbers $p$, if $1$ is less than $p$, then $p_ord$ applied to $p$ and $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $1$ and $1$.",
    "output": "postulate p_ord_p : (p : Nat) -> (_ : Lt 1 p) -> Eq (p_ord p p) (mk_Prod Nat Nat 1 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1575. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$, then for all natural numbers $x1029$, $x1029$ is equal to the product of $x1029$ and the difference of the product of $n$ and $c$ and the product of $m$ and $d$.",
    "output": "postulate let_clause_1575 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times c n) (times d m)) 1) -> (x1029 : Nat) -> Eq x1029 (times x1029 (minus (times n c) (times m d)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Permut_n_to_eq_n. For all functions $h$ from natural numbers to natural numbers, for all natural numbers $n$, for all elements $__$ of $permut$ of $h$ and $n$, for all functions $__1$ from natural numbers $m$ and elements $__1$ of $Lt$ of $m$ and $n$ to elements of $Eq$ of $h$ applied to $m$ and $m$, $h$ applied to $n$ is equal to $n$.",
    "output": "postulate permut_n_to_eq_n : (h : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : permut h n) -> (__1 : (m : Nat) -> (__1 : Lt m n) -> Eq (h m) m) -> Eq (h n) n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp2_body. For all sets $_A$, for all functions $Q_$ from elements $_x_935$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_935$ of $range$ of $_A$, $Q_$ holds for $x_935$.",
    "output": "postulate range_rect_CProp2_body : (_A : Set) -> (Q_ : (_x_935 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_935 : range _A) -> Q_ x_935"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dop_rect_CProp3. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_961$ of $Dop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Dop$ from elements $sum$ of $ACop$ of $A$ and $_nil$ and functions $prod$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_null$ from elements $a$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $prod$ applied to $a$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $Q_$ of $mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_961$ of $Dop$ of $A$ and $_nil$, $Q_$ holds for $x_961$.",
    "output": "postulate Dop_rect_CProp3 : (A : Set) -> (_nil : A) -> (Q_ : (_x_961 : Dop A _nil) -> Prop) -> (_H_mk_Dop : (sum : ACop A _nil) -> (prod : (_ : A) -> (__1 : A) -> A) -> (_null : (a : A) -> Eq (prod a _nil) _nil) -> (_distr : (a : A) -> (b : A) -> (c : A) -> Eq (prod a (aop__o__op A _nil sum b c)) (aop__o__op A _nil sum (prod a b) (prod a c))) -> Q_ (mk_Dop A _nil sum prod _null _distr)) -> (x_961 : Dop A _nil) -> Q_ x_961"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_inv_plus_l. For all natural numbers $x$ and $y$ and $z$, if the sum of $x$ and $y$ is less than $z$, then $x$ is less than $z$ and $y$ is less than the difference of $z$ and $x$.",
    "output": "postulate lt_inv_plus_l : (x : Nat) -> (y : Nat) -> (z : Nat) -> (_ : Lt (plus x y) z) -> and (Lt x z) (Lt y (minus z x))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Aop_ind_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_861$ of $Aop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_Aop$ from functions $op$ from elements of $A$ and elements $__1$ of $A$ to elements of $A$ and functions $_nill$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $A$ and elements $b$ of $A$ and elements $c$ of $A$ to elements of $Eq$ of $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $Q_$ of $mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_861$ of $Aop$ of $A$ and $_nil$, $Q_$ holds for $x_861$.",
    "output": "postulate Aop_ind_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_861 : Aop A _nil) -> Prop) -> (_H_mk_Aop : (op : (_ : A) -> (__1 : A) -> A) -> (_nill : (a : A) -> Eq (op _nil a) a) -> (_nilr : (a : A) -> Eq (op a _nil) a) -> (_assoc : (a : A) -> (b : A) -> (c : A) -> Eq (op a (op b c)) (op (op a b) c)) -> Q_ (mk_Aop A _nil op _nill _nilr _assoc)) -> (x_861 : Aop A _nil) -> Q_ x_861"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_CProp3_body. Let $_A$ be a set. Then for all functions $Q_$ from elements $_x_933$ of $range$ of $_A$ to propositions, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_933$ of $range$ of $_A$, $Q_$ holds for $x_933$.",
    "output": "postulate range_rect_CProp3_body : (_A : Set) -> (Q_ : (_x_933 : range _A) -> Prop) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_933 : range _A) -> Q_ x_933"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Filter_divides. Let $_n$ and $_m$ be natural numbers. Then for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $divisible$ of $_n$ and $_m$ to elements of $return_sort$, for all functions $return$ from elements $z$ of $divisible$ of $_n$ and $_m$ to elements of $return_type$ of $z$, if $_n$ is divisible by $_m$, then $return_type$ holds for $z$.",
    "output": "postulate filter_divides : (_n : Nat) -> (_m : Nat) -> (return_sort : Sort) -> (return_type : (z : divisible _n _m) -> return_sort) -> (return : (z : divisible _n _m) -> return_type z) -> (z : divisible _n _m) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eq_or_gt. Let $n$ be a natural number. Then $0$ is equal to $n$ or $0$ is less than $n$.",
    "output": "postulate eq_or_gt : (n : Nat) -> or (Eq 0 n) (Lt 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Not_divides_to_gcd_aux. Let $p$ and $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then if $n$ is not divisible by $m$, then $gcd_aux$ applied to the sum of $p$ and $1$ and $m$ and $n$ is equal to $gcd_aux$ applied to $p$ and $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate not_divides_to_gcd_aux : (p : Nat) -> (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> (__1 : not (divisible n m)) -> Eq (gcd_aux (plus p 1) m n) (gcd_aux p n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Dexp. $Dop$ holds for $Nat$ and $1$.",
    "output": "postulate Dexp : Dop Nat 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_CProp1_body. For all functions $Q_$ from natural numbers $_x_409$ to propositions, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_410$ and elements $_x_412$ of $Q_$ of $x_410$ to elements of $Q_$ of the sum of $x_410$ and $1$, for all natural numbers $x_409$, $Q_$ holds for $x_409$.",
    "output": "postulate nat_rect_CProp1_body : (Q_ : (_x_409 : Nat) -> Prop) -> (_H_O : Q_ 0) -> (_H_S : (x_410 : Nat) -> (_x_412 : Q_ x_410) -> Q_ (plus x_410 1)) -> (x_409 : Nat) -> Q_ x_409"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_div_S. For all natural numbers $n$ and $m$, if $0$ is less than $m$, then $n$ is less than the product of the sum of the quotient of $n$ and $m$ and $1$ and $m$.",
    "output": "postulate lt_div_S : (n : Nat) -> (m : Nat) -> (_ : Lt 0 m) -> Lt n (times (plus (div n m) 1) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_ind_body. For all natural numbers $_n$ and $_m$ and $_q$ and $_r$, for all functions $Q_$ from elements $_x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_811$ of $Lt$ of $_r$ and $_m$ and elements $x_810$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_811$ and $x_810$, for all elements $x_809$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_809$.",
    "output": "postulate div_mod_spec_ind_body : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_809 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_811 : Lt _r _m) -> (x_810 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_811 x_810)) -> (x_809 : div_mod_spec _n _m _q _r) -> Q_ x_809"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_gcd_mod. Let $m$ and $n$ be natural numbers. Then if $0$ is less than $n$, then the greatest common divisor of $m$ and $n$ is divisible by the greatest common divisor of $n$ and $mod$ applied to $m$ and $n$.",
    "output": "postulate divides_gcd_mod : (m : Nat) -> (n : Nat) -> (_ : Lt 0 n) -> divisible (gcd m n) (gcd n (mod m n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Le_Psi_exp5. Let $n$ be a natural number. Then $Psi$ applied to $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $3$.",
    "output": "postulate le_Psi_exp5 : (n : Nat) -> Leq (Psi n) (pow 2 (minus (times 2 n) 3))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_times. Let $a$ and $b$ be natural numbers. Then if $0$ is less than $b$, then the quotient of the product of $a$ and $b$ and $b$ is equal to $a$.",
    "output": "postulate div_times : (a : Nat) -> (b : Nat) -> (_ : Lt 0 b) -> Eq (div (times a b) b) a"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Divides_exp_to_divides. For all natural numbers $p$ and $n$ and $m$, if $p$ is prime, then if $p$ is divisible by the exponentiation of $n$ and $m$, then $p$ is divisible by $n$.",
    "output": "postulate divides_exp_to_divides : (p : Nat) -> (n : Nat) -> (m : Nat) -> (_ : prime p) -> (__1 : divisible p (pow n m)) -> divisible p n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Transpose. Let $__$ and $__1$ and $__2$ be natural numbers. Then $Nat$.",
    "output": "postulate transpose : (_ : Nat) -> (__1 : Nat) -> (__2 : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Times_O_n. For all natural numbers $n$, $0$ is equal to the product of $0$ and $n$.",
    "output": "postulate times_O_n : (n : Nat) -> Eq 0 (times 0 n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_CProp4. Let $x1$ be a set. Then for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1668$ of $range$ of $x1$ to propositions, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1669$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_CProp4 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1668 : range x1) -> Prop) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1669 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_Type4_body. For all sets $A$, for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_891$ of $ACop$ of $A$ and $_nil$ to elements of $Type4$, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_891$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_891$.",
    "output": "postulate ACop_rect_Type4_body : (A : Set) -> (_nil : A) -> (Q_ : (_x_891 : ACop A _nil) -> Type4) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_891 : ACop A _nil) -> Q_ x_891"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod_spec_rect_CProp5. Let $_n$ and $_m$ and $_q$ and $_r$ be natural numbers. Then for all functions $Q_$ from elements $_x_841$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$ to propositions, for all functions $_H_div_mod_spec_intro$ from elements $x_843$ of $Lt$ of $_r$ and $_m$ and elements $x_842$ of $Eq$ of $_n$ and the sum of the product of $_q$ and $_m$ and $_r$ to elements of $Q_$ of $div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_843$ and $x_842$, for all elements $x_841$ of $div_mod_spec$ of $_n$ and $_m$ and $_q$ and $_r$, $Q_$ holds for $x_841$.",
    "output": "postulate div_mod_spec_rect_CProp5 : (_n : Nat) -> (_m : Nat) -> (_q : Nat) -> (_r : Nat) -> (Q_ : (_x_841 : div_mod_spec _n _m _q _r) -> Prop) -> (_H_div_mod_spec_intro : (x_843 : Lt _r _m) -> (x_842 : Eq _n (plus (times _q _m) _r)) -> Q_ (div_mod_spec_intro _n _m _q _r x_843 x_842)) -> (x_841 : div_mod_spec _n _m _q _r) -> Q_ x_841"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_sym. Let $a$ and $b$ be natural numbers. Then $eqb$ applied to $a$ and $b$ is equal to $eqb$ applied to $b$ and $a$.",
    "output": "postulate eqb_sym : (a : Nat) -> (b : Nat) -> Eq (eqb a b) (eqb b a)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__$ be a natural number. Then we can say that $not_zero$ holds for $__$.",
    "output": "postulate not_zero : (_ : Nat) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Div_mod. For all natural numbers $n$ and $m$, $n$ is equal to the sum of the product of the quotient of $n$ and $m$ and $m$ and $mod$ applied to $n$ and $m$.",
    "output": "postulate div_mod : (n : Nat) -> (m : Nat) -> Eq n (plus (times (div n m) m) (mod n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type1. For all sets $_A$, for all functions $Q_$ from elements $_x_925$ of $range$ of $_A$ to elements of $Type1$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_925$ of $range$ of $_A$, $Q_$ holds for $x_925$.",
    "output": "postulate range_rect_Type1 : (_A : Set) -> (Q_ : (_x_925 : range _A) -> Type1) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_925 : range _A) -> Q_ x_925"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_rect_Type1_body. For all sets $_A$, for all functions $Q_$ from elements $_x_925$ of $range$ of $_A$ to elements of $Type1$, for all functions $_H_mk_range$ from functions $_enum$ from natural numbers to elements of $_A$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans to elements of $Q_$ of $mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_925$ of $range$ of $_A$, $Q_$ holds for $x_925$.",
    "output": "postulate range_rect_Type1_body : (_A : Set) -> (Q_ : (_x_925 : range _A) -> Type1) -> (_H_mk_range : (_enum : (_ : Nat) -> _A) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> Q_ (mk_range _A _enum _upto _filter)) -> (x_925 : range _A) -> Q_ x_925"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "B_SSSSO. $B (4)= 6$.",
    "output": "postulate B_SSSSO : Eq (B 4) 6"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Range_inv_rect_Type2. For all sets $x1$, for all elements $Hterm$ of $range$ of $x1$, for all functions $P$ from elements $_z1650$ of $range$ of $x1$ to elements of $Type2$, for all functions $_H1$ from functions $_enum$ from natural numbers to elements of $x1$ and natural numbers $_upto$ and functions $_filter$ from natural numbers to booleans and elements $_z1651$ of $Eq$ of $Hterm$ and $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $P$ of $mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $P$ holds for $Hterm$.",
    "output": "postulate range_inv_rect_Type2 : (x1 : Set) -> (Hterm : range x1) -> (P : (_z1650 : range x1) -> Type2) -> (_H1 : (_enum : (_ : Nat) -> x1) -> (_upto : Nat) -> (_filter : (_ : Nat) -> bool) -> (_z1651 : Eq Hterm (mk_range x1 _enum _upto _filter)) -> P (mk_range x1 _enum _upto _filter)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "P_ord_to_not_eq_O. For all natural numbers $n$ and $p$ and $q$ and $r$, if $1$ is less than $n$, then if $p_ord$ applied to $n$ and $nth_prime$ applied to $p$ is equal to $mk_Prod$ applied to $Nat$ and $Nat$ and $q$ and $r$, then $r$ is not equal to $0$.",
    "output": "postulate p_ord_to_not_eq_O : (n : Nat) -> (p : Nat) -> (q : Nat) -> (r : Nat) -> (_ : Lt 1 n) -> (__1 : Eq (p_ord n (nth_prime p)) (mk_Prod Nat Nat q r)) -> not (Eq r 0)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp2. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1614$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1615$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp2 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1614 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1615 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bertrand_down. For all natural numbers $n$, if $0$ is less than $n$, then if $n$ is less than or equal to the exponentiation of $2$ and $8$, then $bertrand$ holds for $n$.",
    "output": "postulate bertrand_down : (n : Nat) -> (_ : Lt 0 n) -> (__1 : Leq n (pow 2 8)) -> bertrand n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bijn_n_Sn. Let $f$ be a function from natural numbers to natural numbers. Then for all natural numbers $n$, for all elements $__$ of $bijn$ of $f$ and $n$, if $f$ applied to the sum of $n$ and $1$ is equal to the sum of $n$ and $1$, then $bijn$ holds for $f$ and the sum of $n$ and $1$.",
    "output": "postulate bijn_n_Sn : (f : (_ : Nat) -> Nat) -> (n : Nat) -> (_ : bijn f n) -> (__1 : Eq (f (plus n 1)) (plus n 1)) -> bijn f (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_1033. Let $p$ and $n$ and $q$ and $r$ be natural numbers. Then if $0$ is less than $p$, then if $p$ is not divisible by $r$, then if $n$ is equal to the product of the exponentiation of $p$ and $q$ and $r$, then for all natural numbers $q0$ and $q1$, if the sum of $q1$ and $1$ is less than or equal to the exponentiation of $p$ and the sum of $q1$ and $1$, then for all natural numbers $x2515$ and $x2516$, $x2515$ is equal to the sum of the product of $x2516$ and the quotient of $x2515$ and $x2516$ and $mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (p : Nat) -> (n : Nat) -> (q : Nat) -> (r : Nat) -> (posp : Lt 0 p) -> (ndivpr : not (divisible p r)) -> (Hn : Eq n (times (pow p q) r)) -> (q0 : Nat) -> (q1 : Nat) -> (Hind : Leq (plus q1 1) (pow p (plus q1 1))) -> (x2515 : Nat) -> (x2516 : Nat) -> Eq x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_times_n_to_lt_r. Let $n$ and $p$ and $q$ be natural numbers. Then if the product of $n$ and $p$ is less than the product of $n$ and $q$, then $p$ is less than $q$.",
    "output": "postulate lt_times_n_to_lt_r : (n : Nat) -> (p : Nat) -> (q : Nat) -> (_ : Lt (times n p) (times n q)) -> Lt p q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_rect_CProp0. Let $A$ be a set. Then for all elements $_nil$ of $A$, for all functions $Q_$ from elements $_x_913$ of $ACop$ of $A$ and $_nil$ to propositions, for all functions $_H_mk_ACop$ from elements $aop$ of $Aop$ of $A$ and $_nil$ and functions $_comm$ from elements $a$ of $A$ and elements $b$ of $A$ to elements of $Eq$ of $op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $Q_$ of $mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_913$ of $ACop$ of $A$ and $_nil$, $Q_$ holds for $x_913$.",
    "output": "postulate ACop_rect_CProp0 : (A : Set) -> (_nil : A) -> (Q_ : (_x_913 : ACop A _nil) -> Prop) -> (_H_mk_ACop : (aop : Aop A _nil) -> (_comm : (a : A) -> (b : A) -> Eq (op A _nil aop a b) (op A _nil aop b a)) -> Q_ (mk_ACop A _nil aop _comm)) -> (x_913 : ACop A _nil) -> Q_ x_913"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_inv_rect_CProp1. For all sets $x1$, for all elements $x2$ of $x1$, for all elements $Hterm$ of $ACop$ of $x1$ and $x2$, for all functions $P$ from elements $_z1620$ of $ACop$ of $x1$ and $x2$ to propositions, for all functions $_H1$ from elements $aop$ of $Aop$ of $x1$ and $x2$ and functions $_comm$ from elements $a$ of $x1$ and elements $b$ of $x1$ to elements of $Eq$ of $op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1621$ of $Eq$ of $Hterm$ and $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $P$ of $mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $P$ holds for $Hterm$.",
    "output": "postulate ACop_inv_rect_CProp1 : (x1 : Set) -> (x2 : x1) -> (Hterm : ACop x1 x2) -> (P : (_z1620 : ACop x1 x2) -> Prop) -> (_H1 : (aop : Aop x1 x2) -> (_comm : (a : x1) -> (b : x1) -> Eq (op x1 x2 aop a b) (op x1 x2 aop b a)) -> (_z1621 : Eq Hterm (mk_ACop x1 x2 aop _comm)) -> P (mk_ACop x1 x2 aop _comm)) -> P Hterm"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Gcd_SO_n. Let $n$ be a natural number. Then the greatest common divisor of $1$ and $n$ is equal to $1$.",
    "output": "postulate gcd_SO_n : (n : Nat) -> Eq (gcd 1 n) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Bigop_diff. Let $p$ be a function from natural numbers to booleans. Then for all sets $B$, for all elements $nil$ of $B$, for all elements $op$ of $ACop$ of $B$ and $nil$, for all functions $f$ from natural numbers to elements of $B$, for all natural numbers $i$ and $n$, if $i$ is less than $n$, then if $p$ applied to $i$ is equal to $true$, then $bigop$ applied to $n$ and the function that maps $x$ to $p$ applied to $x$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $x$ to $f$ applied to $x$ is equal to $aop__o__op$ applied to $B$ and $nil$ and $op$ and $f$ applied to $i$ and $bigop$ applied to $n$ and the function that maps $x$ to $andb$ applied to $notb$ applied to $eqb$ applied to $i$ and $x$ and $p$ applied to $x$ and $B$ and $nil$ and $aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $x$ to $f$ applied to $x$.",
    "output": "postulate bigop_diff : (p : (_ : Nat) -> bool) -> (B : Set) -> (nil : B) -> (op : ACop B nil) -> (f : (_ : Nat) -> B) -> (i : Nat) -> (n : Nat) -> (_ : Lt i n) -> (__1 : Eq (p i) true) -> Eq (bigop n (\\ x : Nat -> p x) B nil (aop__o__op B nil op) (\\ x : Nat -> f x)) (aop__o__op B nil op (f i) (bigop n (\\ x : Nat -> andb (notb (eqb i x)) (p x)) B nil (aop__o__op B nil op) (\\ x : Nat -> f x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Match_divides. For all natural numbers $_n$ and $_m$, for all elements $return_sort$ of $Sort$, for all functions $return_type$ from elements $z$ of $divisible$ of $_n$ and $_m$ to elements of $return_sort$, for all functions $case_quotient$ from natural numbers $q$ and elements of $Eq$ of $_m$ and the product of $_n$ and $q$ to elements of $return_type$ of $quotient$ applied to $_n$ and $_m$ and $q$ and $__$, if $_n$ is divisible by $_m$, then $return_type$ holds for $z$.",
    "output": "postulate match_divides : (_n : Nat) -> (_m : Nat) -> (return_sort : Sort) -> (return_type : (z : divisible _n _m) -> return_sort) -> (case_quotient : (q : Nat) -> (_ : Eq _m (times _n q)) -> return_type (quotient _n _m q __)) -> (z : divisible _n _m) -> return_type z"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ACop_discr. Let $a1$ be a set. Then for all elements $a2$ of $a1$, for all elements $x$ and $y$ of $ACop$ of $a1$ and $a2$, if $x$ is equal to $y$, then $match_ACop$ holds for $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $t0$ and $t1$ to $match_ACop$ applied to $a1$ and $a2$ and the sum of $Type2$ and $1$ and the function that maps $__$ to $univ$ applied to $Type2$ and the function that maps $u0$ and $u1$ to $prod$ applied to the sum of $Type1$ and $1$ and $Type1$ and $univ$ applied to $Type1$ and the function that maps $P$ to $prod$ applied to $Type1$ and $Type1$ and $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R0$ applied to $Aop$ applied to $a1$ and $a2$ and $t0$ and $u0$ and the function that maps $e0$ to $prod$ applied to $Prop$ and $Type1$ and $Eq$ applied to $R1$ applied to $Aop$ applied to $a1$ and $a2$ and $t0$ and the function that maps $x_19$ and $_x_20$ to the function that maps $x0$ and $p0$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $a$ to $prod$ applied to $Set$ and $Prop$ and $a1$ and the function that maps $b$ to $Eq$ applied to $op$ applied to $a1$ and $a2$ and $x0$ and $a$ and $b$ and $op$ applied to $a1$ and $a2$ and $x0$ and $b$ and $a$ applied to $x_19$ and $_x_20$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $_e1$ to $P$ and the function that maps $_z57$ to $P$ and $y$ and $x$.",
    "output": "postulate ACop_discr : (a1 : Set) -> (a2 : a1) -> (x : ACop a1 a2) -> (y : ACop a1 a2) -> (_e : Eq x y) -> match_ACop a1 a2 (plus Type2 1) (\\ _ : ACop a1 a2 -> univ Type2) (\\ t0 : Aop a1 a2 -> \\ t1 : ((a : a1) -> (b : a1) -> Eq (op a1 a2 t0 a b) (op a1 a2 t0 b a)) -> match_ACop a1 a2 (plus Type2 1) (\\ _ : ACop a1 a2 -> univ Type2) (\\ u0 : Aop a1 a2 -> \\ u1 : ((a : a1) -> (b : a1) -> Eq (op a1 a2 u0 a b) (op a1 a2 u0 b a)) -> prod (plus Type1 1) Type1 (univ Type1) (\\ P : Type1 -> prod Type1 Type1 (prod Prop Type1 (Eq (R0 (Aop a1 a2) t0) u0) (\\ e0 : Eq (R0 (Aop a1 a2) t0) u0 -> prod Prop Type1 (Eq (R1 (Aop a1 a2) t0 (\\ x_19 : Aop a1 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Aop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> Eq (op a1 a2 x0 a b) (op a1 a2 x0 b a)))) x_19 _x_20) t1 u0 e0) u1) (\\ _e1 : Eq (R1 (Aop a1 a2) t0 (\\ x_19 : Aop a1 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Aop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> Eq (op a1 a2 x0 a b) (op a1 a2 x0 b a)))) x_19 _x_20) t1 u0 e0) u1 -> P))) (\\ _z57 : ((e0 : Eq (R0 (Aop a1 a2) t0) u0) -> (_e1 : Eq (R1 (Aop a1 a2) t0 (\\ x_19 : Aop a1 a2 -> \\ _x_20 : Eq t0 x_19 -> (\\ x0 : Aop a1 a2 -> \\ p0 : Eq t0 x0 -> prod Set Prop a1 (\\ a : a1 -> prod Set Prop a1 (\\ b : a1 -> Eq (op a1 a2 x0 a b) (op a1 a2 x0 b a)))) x_19 _x_20) t1 u0 e0) u1) -> P) -> P))) y) x"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Let_clause_15625. For all natural numbers $m$ and $n$ and $a$ and $b$, if $0$ is less than $n$, then if $0$ is less than $m$, then if the greatest common divisor of $n$ and $m$ is equal to $1$, then for all natural numbers $c$, for all elements $_clearme$ of $ex$ of $Nat$ and the function that maps $d$ to the disjunction of $Eq$ applied to the difference of the product of $c$ and $n$ and the product of $d$ and $m$ and $1$ and $Eq$ applied to the difference of the product of $d$ and $m$ and the product of $c$ and $n$ and $1$, for all natural numbers $d$, if the difference of the product of $c$ and $n$ and the product of $d$ and $m$ is equal to $1$ or the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then if the difference of the product of $d$ and $m$ and the product of $c$ and $n$ is equal to $1$, then the difference of the product of $m$ and $d$ and the product of $n$ and $c$ is equal to $1$.",
    "output": "postulate let_clause_15625 : (m : Nat) -> (n : Nat) -> (a : Nat) -> (b : Nat) -> (posn : Lt 0 n) -> (posm : Lt 0 m) -> (pnm : Eq (gcd n m) 1) -> (c : Nat) -> (_clearme : ex Nat (\\ d : Nat -> or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1))) -> (d : Nat) -> (_clearme0 : or (Eq (minus (times c n) (times d m)) 1) (Eq (minus (times d m) (times c n)) 1)) -> (H : Eq (minus (times d m) (times c n)) 1) -> Eq (minus (times m d) (times n c)) 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Commutative_gcd. For all natural numbers $n$ and $m$, the greatest common divisor of $n$ and $m$ is equal to the greatest common divisor of $m$ and $n$.",
    "output": "postulate commutative_gcd : (n : Nat) -> (m : Nat) -> Eq (gcd n m) (gcd m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Lt_4_to_le_B_exp. Let $n$ be a natural number. Then if $4$ is less than $n$, then $B$ applied to the product of $2$ and $n$ is less than or equal to the exponentiation of $2$ and the difference of the product of $2$ and $n$ and $2$.",
    "output": "postulate lt_4_to_le_B_exp : (n : Nat) -> (_ : Lt 4 n) -> Leq (B (times 2 n)) (pow 2 (minus (times 2 n) 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Checker. For all lists $__$ of natural numbers, $bool$.",
    "output": "postulate checker : (_ : list Nat) -> bool"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Eqb_elim. Let $n$ and $m$ be natural numbers. Then for all functions $P$ from booleans to propositions, for all functions $__$ from elements of $Eq$ of $n$ and $m$ to elements of $P$ of $true$, for all functions $__1$ from elements $__1$ of $not$ of $Eq$ applied to $n$ and $m$ to elements of $P$ of absurdity, $P$ holds for $eqb$ applied to $n$ and $m$.",
    "output": "postulate eqb_elim : (n : Nat) -> (m : Nat) -> (P : (_ : bool) -> Prop) -> (_ : (_ : Eq n m) -> P true) -> (__1 : (__1 : not (Eq n m)) -> P false) -> P (eqb n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Minus_S_S. For all natural numbers $n$ and $m$, the difference of the sum of $n$ and $1$ and the sum of $m$ and $1$ is equal to the difference of $n$ and $m$.",
    "output": "postulate minus_S_S : (n : Nat) -> (m : Nat) -> Eq (minus (plus n 1) (plus m 1)) (minus n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $__ \\in N$. Then the factorial of $__$ is a natural number.",
    "output": "postulate factorial : (_ : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Decidable_eq_nat. For all natural numbers $n$ and $m$, $decidable$ holds for $Eq$ applied to $n$ and $m$.",
    "output": "postulate decidable_eq_nat : (n : Nat) -> (m : Nat) -> decidable (Eq n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Injective_times_l. Let $n$ be a natural number. Then if $0$ is less than $n$, then $injective$ holds for $Nat$ and $Nat$ and the function that maps $m$ to the product of $m$ and $n$.",
    "output": "postulate injective_times_l : (n : Nat) -> (_ : Lt 0 n) -> injective Nat Nat (\\ m : Nat -> times m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Nat_rect_Type1. For all functions $Q_$ from natural numbers $_x_385$ to elements of $Type1$, for all elements $_H_O$ of $Q_$ of $0$, for all functions $_H_S$ from natural numbers $x_386$ and elements $_x_388$ of $Q_$ of $x_386$ to elements of $Q_$ of the sum of $x_386$ and $1$, for all natural numbers $x_385$, $Q_$ holds for $x_385$.",
    "output": "postulate nat_rect_Type1 : (Q_ : (_x_385 : Nat) -> Type1) -> (_H_O : Q_ 0) -> (_H_S : (x_386 : Nat) -> (_x_388 : Q_ x_386) -> Q_ (plus x_386 1)) -> (x_385 : Nat) -> Q_ x_385"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ProdF. For all sets $A$ and $B$, for all functions $_f$ from natural numbers to elements of $A$, for all functions $_g$ from natural numbers to elements of $B$, for all natural numbers $_m$ and $_x$, $Prod$ holds for $A$ and $B$.",
    "output": "postulate prodF : (A : Set) -> (B : Set) -> (_f : (_ : Nat) -> A) -> (_g : (_ : Nat) -> B) -> (_m : Nat) -> (_x : Nat) -> Prod A B"
  }
]