[
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Assoc. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $a$ et $b$ et $c$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $b$ et $c$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $b$ et $c$.",
    "output": "postulate assoc : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil xxx a (matita_arithmetics_bigops.op A nil xxx b c)) (matita_arithmetics_bigops.op A nil xxx (matita_arithmetics_bigops.op A nil xxx a b) c))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1544. Låt $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $q$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $a$ som $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $m$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $m$ och $n$. Låt $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $lenm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$. Låt $lenS$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $q$. Låt $ndivnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, för alla element $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $b$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$.",
    "output": "postulate let_clause_1544 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n q)) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a n) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd_aux q m n)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a n)) (matita_arithmetics_gcd.gcd_aux q m n)))))) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (lenS : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) -> (ndivnm : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times n b)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_gcd_SO_to_not_divides. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$.",
    "output": "postulate eq_gcd_SO_to_not_divides : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_CProp3_body. För alla funktioner $Q_$ från element $_x_353$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_true$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_353$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_353$.",
    "output": "postulate bool_rect_CProp3_body : (Q_ : (_x_353 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_353 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_353)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_CProp0. För alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $P$ från element $_z647$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_z648$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_bool.true$, för alla funktioner $_H2$ från element $_z648$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate bool_inv_rect_CProp0 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z647 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H1 : (_z648 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) -> (_H2 : (_z648 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_inv_rect_Type3. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $P$ une fonction des éléments $_z665$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $univs.Type3$. Alors pour toutes les fonctions $_H1$ des éléments $_z666$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $Hterm$ et $matita_arithmetics_nat.O$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_arithmetics_nat.O$, pour toutes les fonctions $_H2$ des éléments $x_378$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_x_380$ des éléments $_z666$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $Hterm$ et $x_378$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $x_378$ et des éléments $_z666$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $Hterm$ et $matita_arithmetics_nat.S$ appliqué à $x_378$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_arithmetics_nat.S$ appliqué à $x_378$, $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.",
    "output": "postulate nat_inv_rect_Type3 : (Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (_z665 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type3) -> (_H1 : (_z666 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term univs.Type3 (P matita_arithmetics_nat.O)) -> (_H2 : (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_380 : (_z666 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_378)) -> cic.Term univs.Type3 (P x_378)) -> (_z666 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_378))) -> cic.Term univs.Type3 (P (matita_arithmetics_nat.S x_378))) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_Type1. Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_94$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H_nmk$ from functions $x_95$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_95$, for all elements $x_94$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_94$.",
    "output": "postulate Not_rect_Type1 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_94 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type1) -> (_H_nmk : (x_95 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type1 (Q_ (matita_basics_logic.nmk _A x_95))) -> (x_94 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term univs.Type1 (Q_ x_94)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_plus_div. För alla element $m$ och $n$ och $q$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $m$ och $q$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $matita_arithmetics_div_and_mod.div$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $m$ och $n$ och $q$.",
    "output": "postulate le_plus_div : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.div m q) (matita_arithmetics_div_and_mod.div n q)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.plus m n) q))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type4. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_122$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_conj$ vara en funktion från element $x_124$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_123$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_124$ och $x_123$. Då för alla element $x_122$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_122$.",
    "output": "postulate And_rect_Type4 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type4) -> (_H_conj : (x_124 : cic.Term cic.prop _A) -> (x_123 : cic.Term cic.prop _B) -> cic.Term univs.Type4 (Q_ (matita_basics_logic.conj _A _B x_124 x_123))) -> (x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type4 (Q_ x_122)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp5. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_618$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_None$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Då för alla funktioner $_H_Some$ från element $x_619$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_619$, för alla element $x_618$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_618$.",
    "output": "postulate option_rect_CProp5 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_618 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_619 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_619))) -> (x_618 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_618)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_to_leb_true. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $n$ et $m$ et $matita_basics_bool.true$.",
    "output": "postulate le_to_leb_true : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Max. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.",
    "output": "postulate max : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_mid. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $l1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $x$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $x$ et $l2$.",
    "output": "postulate Exists_mid : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (x : cic.Term univs.Type0 A) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (P x)) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Smallest_factor_fact. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $n$ et $matita_arithmetics_primes.smallest_factor$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_factorial.fact$ appliqué à $n$.",
    "output": "postulate smallest_factor_fact : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_primes.smallest_factor (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_inv_rect_Type0. För alla element $x1$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $x2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1200$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1201$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Sig_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1200 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1201 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type0 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_exp. För alla element $n$ och $m$ och $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $n$ och $matita_arithmetics_exp.exp$ applicerat på $p$ och $m$.",
    "output": "postulate lt_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp p n) (matita_arithmetics_exp.exp p m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_times_gcd_aux. Soient $p$ et $m$ et $n$ et $d$ et $c$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $__2$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$. Soit $__3$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $p$. Soit $__4$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $d$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $m$. Soit $__5$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $d$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $d$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $p$ et $m$ et $n$.",
    "output": "postulate divides_times_gcd_aux : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le n p)) -> (__4 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c m))) -> (__5 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c n))) -> cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c (matita_arithmetics_gcd.gcd_aux p m n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_times_to_le_div. Soient $a$ et $b$ et $c$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $c$ et $a$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $c$ et $matita_arithmetics_div_and_mod.div$ appliqué à $a$ et $b$.",
    "output": "postulate le_times_to_le_div : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times b c) a)) -> cic.Term cic.prop (matita_arithmetics_nat.le c (matita_arithmetics_div_and_mod.div a b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Or_introl. För alla element $A$ och $B$ av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $A$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $A$ och $B$.",
    "output": "postulate or_introl : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (__ : cic.Term cic.prop A) -> cic.Term cic.prop (matita_basics_logic.Or A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1158$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1159$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate DPair_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1158 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1159 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_Aop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.",
    "output": "postulate filter_Aop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_inv_rect_CProp0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1098$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$. Soit $_H2$ une fonction des éléments $x_635$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_635$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_635$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate option_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_635 : cic.Term univs.Type0 x1) -> (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_m. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.",
    "output": "postulate let_m : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type0_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_142$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_conj$ vara en funktion från element $x_144$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_143$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_144$ och $x_143$. Låt $x_142$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$. Då håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_142$.",
    "output": "postulate And_rect_Type0_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type0) -> (_H_conj : (x_144 : cic.Term cic.prop _A) -> (x_143 : cic.Term cic.prop _B) -> cic.Term univs.Type0 (Q_ (matita_basics_logic.conj _A _B x_144 x_143))) -> (x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type0 (Q_ x_142)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mod_S. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $m$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $m$.",
    "output": "postulate mod_S : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n m)) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.S n) m) (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n m)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "False_ind_body. Låt $Q_$ vara en funktion från element $_x_66$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_66$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_66$.",
    "output": "postulate False_ind_body : (Q_ : (_x_66 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_66 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_66)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_CProp5_body. Soit $Q_$ une fonction des éléments $_x_56$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_I$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.I$, pour tous les éléments $x_56$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_56$.",
    "output": "postulate True_rect_CProp5_body : (Q_ : (_x_56 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_56 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_56)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "B2_def. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_bertrand.B2$ appliqué à $n$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et la fonction qui envoie $p$ à $matita_arithmetics_primes.primeb$ appliqué à $p$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $p$ à $matita_arithmetics_exp.exp$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_chebyshev_psi_bounds.bool_to_nat$ appliqué à $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $n$ et $p$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $n$ et $p$.",
    "output": "postulate B2_def : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_bertrand.B2 n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp p (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_psi_bounds.bool_to_nat (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k n p))) (matita_arithmetics_chebyshev_bertrand.k n p)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_dividesb_true. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_primes.dividesb$ applied to $n$ and $m$ and $matita_basics_bool.true$.",
    "output": "postulate divides_to_dividesb_true : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type1. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_871$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $x_871$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_871$.",
    "output": "postulate Aop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_871 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_871 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type1 (Q_ x_871)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_CProp2. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z1020$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $x_572$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1021$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_572$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_572$, for all functions $_H2$ from elements $x_573$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z1021$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_573$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_573$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Sum_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z1020 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_572 : cic.Term univs.Type0 x1) -> (_z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_572))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_572))) -> (_H2 : (x_573 : cic.Term univs.Type0 x2) -> (_z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_573))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_573))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_sumI. Let $a$ and $b$ and $c$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $b$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $c$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.minus$ applied to $c$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.minus$ applied to $c$ and $b$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $b$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $b$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.minus$ applied to $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $p$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$.",
    "output": "postulate bigop_sumI : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le b c)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus c a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i0) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus c b) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i0) (matita_arithmetics_nat.plus i b)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i b))) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus b a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i0) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i a)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F_ind_aux. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.predicate$ appliqué à $A$, pour toutes les fonctions $__$ des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a$ et des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $n$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $a$.",
    "output": "postulate f_ind_aux : (A : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : cic.Term univs.Type0 (matita_basics_relations.predicate A)) -> (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n)) -> cic.Term cic.prop (P a)) -> (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) n)) -> cic.Term cic.prop (P a)) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) n)) -> cic.Term cic.prop (P a)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_minus_to_plus_r. Låt $a$ och $b$ och $c$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $c$ och $b$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $a$ och $matita_arithmetics_nat.minus$ applicerat på $b$ och $c$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $a$ och $c$ och $b$.",
    "output": "postulate le_minus_to_plus_r : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le c b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le a (matita_arithmetics_nat.minus b c))) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus a c) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_intro. Let $n$ and $m$ and $q$ and $r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $r$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q$ and $m$ and $r$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $n$ and $m$ and $q$ and $r$.",
    "output": "postulate div_mod_spec_intro : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt r m)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r))) -> cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec n m q r)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Increasing_to_le. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.increasing$ applied to $f$. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $i$ to $matita_arithmetics_nat.le$ applied to $m$ and $f$ applied to $i$.",
    "output": "postulate increasing_to_le : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.increasing f)) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.le m (f i)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nill. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $xxx$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$. Alors pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_basics_lists_list.op$ appliqué à $A$ et $nil$ et $xxx$ et $nil$ et $a$ et $a$.",
    "output": "postulate nill : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.op A nil xxx nil a) a)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1194$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1195$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Sig_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1194 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1195 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type1 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_783$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $x_783$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_783$.",
    "output": "postulate Aop_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type4 (Q_ x_783)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_minus_to_plus. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $n$ et $m$ et $p$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_arithmetics_nat.plus$ appliqué à $p$ et $m$.",
    "output": "postulate le_minus_to_plus : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus p m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Tech. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_log.log$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_log.log$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate tech : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Notb. För alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.",
    "output": "postulate notb : (__ : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 matita_basics_bool.bool"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1222. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$. Låt $hd$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $tl$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$. Låt $Hind$ vara en funktion från element $l1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$ och element $l2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$ och element $a$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$ och funktioner $__1$ från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och $x$ och $tl$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $x$ och $n$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $a$ och $n$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.flatten$ applicerat på $A$ och $tl$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.append$ applicerat på $A$ och $a$ och $l2$ och element $__4$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $q$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l1$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $q$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och $a$ och $tl$. Låt $l1$ och $l2$ och $a$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $Hlen$ vara en funktion från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och $x$ och $matita_basics_lists_list.cons$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och $hd$ och $tl$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $x$ och $n$. Låt $Ha$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $a$ och $n$. Då för alla element $Hflat$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.append$ applicerat på $A$ och $hd$ och $matita_basics_lists_list.foldr$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.append$ applicerat på $A$ och $matita_basics_lists_list.nil$ applicerat på $A$ och $tl$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.append$ applicerat på $A$ och $a$ och $l2$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $q$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l1$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $q$, för alla element $q$ och $q1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $Hl1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l1$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $q1$, för alla element $l11$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och funktionen som avbildar $l20$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l11$ och $l20$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l11$ och $n$, för alla element $l12$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $_clearme1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l11$ och $l12$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l11$ och $n$, för alla element $Heql1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l11$ och $l12$, för alla element $Hlenl11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l11$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l1$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $q1$.",
    "output": "postulate let_clause_1222 : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A))) -> (hd : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (tl : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A))) -> (Hind : (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : (x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x tl)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.flatten A tl) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2)))) -> (__4 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q)))) -> cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) a tl)) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (Hlen : (x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x (matita_basics_lists_list.cons (matita_basics_lists_list.list A) hd tl))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)) -> (Ha : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n)) -> (Hflat : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A hd (matita_basics_lists_list.foldr (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.append A) (matita_basics_lists_list.nil A) tl)) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2)))) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q)))) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hl1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n (matita_arithmetics_nat.S q1)))) -> (l11 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex (matita_basics_lists_list.list A) (\\ l20 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l20)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n)))) -> (l12 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l12)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n))) -> (Heql1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l12))) -> (Hlenl11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n q1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_max_to_false. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.false$.",
    "output": "postulate lt_max_to_false : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.max n f) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type2_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_923$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Alors pour tous les éléments $x_923$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_923$.",
    "output": "postulate range_rect_Type2_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type2) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type2 (Q_ x_923)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_rect_Type3. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_536$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_inl$ from elements $x_537$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_537$, for all functions $_H_inr$ from elements $x_538$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_538$, for all elements $x_536$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_536$.",
    "output": "postulate Sum_rect_Type3 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type3) -> (_H_inl : (x_537 : cic.Term univs.Type0 _A) -> cic.Term univs.Type3 (Q_ (matita_basics_types.inl _A _B x_537))) -> (_H_inr : (x_538 : cic.Term univs.Type0 _B) -> cic.Term univs.Type3 (Q_ (matita_basics_types.inr _A _B x_538))) -> (x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type3 (Q_ x_536)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_elim1. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $__$ från element $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $m$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $p$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $m$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $n$.",
    "output": "postulate nat_elim1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (__ : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> cic.Term cic.prop (P p)) -> cic.Term cic.prop (P m)) -> cic.Term cic.prop (P n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ex_inv_ind. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z455$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $x_236$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $x$ and elements $_z456$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.ex$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.ex_intro$ applied to $x1$ and $x2$ and $x$ and $x_236$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.ex_intro$ applied to $x1$ and $x2$ and $x$ and $x_236$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate ex_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.ex x1 x2)) -> (P : (_z455 : cic.Term cic.prop (matita_basics_logic.ex x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x : cic.Term univs.Type0 x1) -> (x_236 : cic.Term cic.prop (x2 x)) -> (_z456 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.ex x1 x2)) Hterm (matita_basics_logic.ex_intro x1 x2 x x_236))) -> cic.Term cic.prop (P (matita_basics_logic.ex_intro x1 x2 x x_236))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Monotonic_lt_times_l. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.monotonic$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.lt$ et la fonction qui envoie $t$ à $matita_arithmetics_nat.times$ appliqué à $t$ et $c$.",
    "output": "postulate monotonic_lt_times_l : (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.lt (\\ t : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times t c))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_CProp3. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_961$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_961$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_961$.",
    "output": "postulate Dop_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_961 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_961 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_961)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_r_ind_body. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Then for all functions $Q_$ from elements $x_1337$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1336$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1335$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $_x_1338$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_lstar_r_O$ from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$ and $matita_arithmetics_lstar.lstar_r_O$ applied to $B$ and $_R$ and $b$, for all functions $_H_lstar_r_S$ from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1340$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1339$ of $cic.Term$ of $cic.prop$ and $_R$ applied to $b$ and $b2$ and elements $_x_1342$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $l$ and $b1$ and $b$ and $x_1340$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$ and $b2$ and $matita_arithmetics_lstar.lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $x_1340$ and $b2$ and $x_1339$, for all elements $x_1337$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $x_1336$ and $x_1335$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $x_1338$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_1337$ and $x_1336$ and $x_1335$ and $x_1338$.",
    "output": "postulate lstar_r_ind_body : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (Q_ : (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (_x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Univ cic.prop) -> (_H_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (_H_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1340 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (x_1339 : cic.Term cic.prop (_R b b2)) -> (_x_1342 : cic.Term cic.prop (Q_ l b1 b x_1340)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b x_1340 b2 x_1339))) -> (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Term cic.prop (Q_ x_1337 x_1336 x_1335 x_1338)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_rect_CProp4. Soient $x1$ et $x2$ et $x3$ et $x4$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$. Alors pour toutes les fonctions $P$ des éléments $_z1470$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $x_839$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $x4$ et $x2$ et des éléments $x_838$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x1$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x3$ et $x2$ et $x4$ et des éléments $_z1471$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $Hterm$ et $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_839$ et $x_838$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_839$ et $x_838$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp4 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1470 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop) -> (_H1 : (x_839 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_838 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1471 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_839 x_838))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_839 x_838))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_All. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ och $Q$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $A$ och $P$ och $l$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $Q$ och $l$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och funktionen som avbildar $x$ som $matita_basics_logic.And$ applicerat på $P$ applicerat på $x$ och $Q$ applicerat på $x$.",
    "output": "postulate Exists_All : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A Q l)) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ x : cic.Term univs.Type0 A -> matita_basics_logic.And (P x) (Q x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16001. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $d$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $n$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $d$.",
    "output": "postulate let_clause_16001 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n c) (matita_arithmetics_nat.times m d)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_rect_CProp3_body. Låt $Q_$ vara en funktion från element $_x_491$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_491$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_491$.",
    "output": "postulate void_rect_CProp3_body : (Q_ : (_x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) -> (x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term cic.prop (Q_ x_491)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_inv_rect_CProp3. Pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $P$ des éléments $_z695$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z696$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $Hterm$ et $matita_arithmetics_nat.O$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.O$, pour toutes les fonctions $_H2$ des éléments $x_402$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_x_404$ des éléments $_z696$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $Hterm$ et $x_402$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x_402$ et des éléments $_z696$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $Hterm$ et $matita_arithmetics_nat.S$ appliqué à $x_402$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.S$ appliqué à $x_402$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate nat_inv_rect_CProp3 : (Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (_z695 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H1 : (_z696 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term cic.prop (P matita_arithmetics_nat.O)) -> (_H2 : (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_404 : (_z696 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_402)) -> cic.Term cic.prop (P x_402)) -> (_z696 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_402))) -> cic.Term cic.prop (P (matita_arithmetics_nat.S x_402))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Antisymmetric_divides. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $m$.",
    "output": "postulate antisymmetric_divides : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides m n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_CProp1_body. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_162$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_conj$ från element $x_164$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_163$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_164$ och $x_163$, för alla element $x_162$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_162$.",
    "output": "postulate And_rect_CProp1_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_162 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop) -> (_H_conj : (x_164 : cic.Term cic.prop _A) -> (x_163 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_164 x_163))) -> (x_162 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term cic.prop (Q_ x_162)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_ind_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_1$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_refl$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_1$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $x_2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_1$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_1$ and $x_2$.",
    "output": "postulate eq_ind_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_1 : cic.Term univs.Type2 A) -> (_x_2 : cic.Term cic.prop (matita_basics_logic.eq A _x x_1)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_1 : cic.Term univs.Type2 A) -> (x_2 : cic.Term cic.prop (matita_basics_logic.eq A _x x_1)) -> cic.Term cic.prop (Q_ x_1 x_2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type0. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_833$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_835$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_834$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_835$ och $x_834$. Då för alla element $x_833$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_833$.",
    "output": "postulate div_mod_spec_rect_Type0 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type0) -> (_H_div_mod_spec_intro : (x_835 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_834 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_835 x_834))) -> (x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type0 (Q_ x_833)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nill. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $xxx$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $nil$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $nil$ och $xxx$ och $nil$ och $a$ och $a$.",
    "output": "postulate nill : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil xxx nil a) a)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_ind_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_638$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Soit $x_638$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_638$.",
    "output": "postulate DPair_ind_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_638)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_length2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.plus$ appliqué à $matita_basics_lists_list.length$ appliqué à $A$ et $matita_basics_lists_list.filter$ appliqué à $A$ et $p$ et $l$ et $matita_basics_lists_list.length$ appliqué à $A$ et $matita_basics_lists_list.filter$ appliqué à $A$ et la fonction qui envoie $x$ à $matita_basics_bool.notb$ appliqué à $p$ appliqué à $x$ et $l$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l$.",
    "output": "postulate filter_length2 : (A : cic.Univ univs.Type0) -> (p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus (matita_basics_lists_list.length A (matita_basics_lists_list.filter A p l)) (matita_basics_lists_list.length A (matita_basics_lists_list.filter A (\\ x : cic.Term univs.Type0 A -> matita_basics_bool.notb (p x)) l))) (matita_basics_lists_list.length A l))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type0. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_19$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_19$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Alors pour tous les éléments $x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_19$ et $x_20$.",
    "output": "postulate eq_rect_Type0 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_19 : cic.Term univs.Type2 A) -> (_x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Univ univs.Type0) -> (_H_refl : cic.Term univs.Type0 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_19 : cic.Term univs.Type2 A) -> (x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Term univs.Type0 (Q_ x_19 x_20)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_660$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_DPair$ be a function from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$. Let $x_660$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_660$.",
    "output": "postulate DPair_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_660)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "RC_reflexive. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $R$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.reflexive$ applied to $A$ and $matita_basics_relations.RC$ applied to $A$ and $R$.",
    "output": "postulate RC_reflexive : (A : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> cic.Term cic.prop (matita_basics_relations.reflexive A (matita_basics_relations.RC A R))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_CProp4. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1734$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1735$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1734 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1735 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Or. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate Or : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_CProp4. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$. Alors pour toutes les fonctions $P$ des éléments $_z1008$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $x_557$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1009$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_557$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_557$, pour toutes les fonctions $_H2$ des éléments $x_558$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1009$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_558$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_558$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Sum_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z1008 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_557 : cic.Term univs.Type0 x1) -> (_z1009 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_557))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_557))) -> (_H2 : (x_558 : cic.Term univs.Type0 x2) -> (_z1009 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_558))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_558))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp3. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1542$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des éléments $_z1543$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1542 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1543 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_ind2. Låt $T1$ och $T2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $l1$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T1$. Låt $l2$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T2$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T2$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $T1$ och $l1$ och $matita_basics_lists_list.length$ applicerat på $T2$ och $l2$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_lists_list.nil$ applicerat på $T1$ och $matita_basics_lists_list.nil$ applicerat på $T2$, för alla funktioner $__2$ från element $tl1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T1$ och element $tl2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T2$ och element $hd1$ av $cic.Term$ av $univs.Type0$ och $T1$ och element $hd2$ av $cic.Term$ av $univs.Type0$ och $T2$ och element $__2$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $tl1$ och $tl2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_lists_list.cons$ applicerat på $T1$ och $hd1$ och $tl1$ och $matita_basics_lists_list.cons$ applicerat på $T2$ och $hd2$ och $tl2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $l1$ och $l2$.",
    "output": "postulate list_ind2 : (T1 : cic.Univ univs.Type0) -> (T2 : cic.Univ univs.Type0) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list T1)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list T2)) -> (P : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list T1)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list T2)) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length T1 l1) (matita_basics_lists_list.length T2 l2))) -> (__1 : cic.Term cic.prop (P (matita_basics_lists_list.nil T1) (matita_basics_lists_list.nil T2))) -> (__2 : (tl1 : cic.Term univs.Type0 (matita_basics_lists_list.list T1)) -> (tl2 : cic.Term univs.Type0 (matita_basics_lists_list.list T2)) -> (hd1 : cic.Term univs.Type0 T1) -> (hd2 : cic.Term univs.Type0 T2) -> (__2 : cic.Term cic.prop (P tl1 tl2)) -> cic.Term cic.prop (P (matita_basics_lists_list.cons T1 hd1 tl1) (matita_basics_lists_list.cons T2 hd2 tl2))) -> cic.Term cic.prop (P l1 l2)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_times_times. Soient $a$ et $b$ et $c$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.div$ appliqué à $a$ et $b$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $c$.",
    "output": "postulate div_times_times : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div a b) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_Aop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $return_sort$. Alors pour toutes les fonctions $case_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.",
    "output": "postulate match_Aop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort) -> (case_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_range. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $A$, for all elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $A$.",
    "output": "postulate mk_range : (A : cic.Univ univs.Type0) -> (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (matita_arithmetics_bigops.range A)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_gcd_l. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $n$.",
    "output": "postulate divides_gcd_l : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Is_nil. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate is_nil : (A : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_793$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type0$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_793$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_793$.",
    "output": "postulate Aop_rect_Type0_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_793 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type0) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_793 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type0 (Q_ x_793)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Smallest_factor_to_min. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$ and $matita_arithmetics_minimization.min$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and the function that maps $m$ to $matita_arithmetics_nat.eqb$ applied to $matita_arithmetics_div_and_mod.mod$ applied to $n$ and $m$ and $matita_arithmetics_nat.O$.",
    "output": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dividesb. Let $__$ and $__1$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_bool.bool$.",
    "output": "postulate dividesb : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type4. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_122$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H_conj$ des éléments $x_124$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_123$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_124$ et $x_123$, pour tous les éléments $x_122$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_122$.",
    "output": "postulate And_rect_Type4 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type4) -> (_H_conj : (x_124 : cic.Term cic.prop _A) -> (x_123 : cic.Term cic.prop _B) -> cic.Term univs.Type4 (Q_ (matita_basics_logic.conj _A _B x_124 x_123))) -> (x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type4 (Q_ x_122)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15623. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15623 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_rect_CProp5. Pour toutes les fonctions $Q_$ des éléments $_x_490$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $x_490$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_490$.",
    "output": "postulate void_rect_CProp5 : (Q_ : (_x_490 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) -> (x_490 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term cic.prop (Q_ x_490)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type5. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_893$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type5$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_893$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_893$.",
    "output": "postulate ACop_rect_Type5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_893 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type5) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_893 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type5 (Q_ x_893)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Length_map. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $B$ and $matita_basics_lists_list.map$ applied to $A$ and $B$ and $f$ and $l$ and $matita_basics_lists_list.length$ applied to $A$ and $l$.",
    "output": "postulate length_map : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length B (matita_basics_lists_list.map A B f l)) (matita_basics_lists_list.length A l))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ord_times. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $p$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_ord.ord$ applied to $m$ and $p$ and $matita_arithmetics_ord.ord$ applied to $n$ and $p$.",
    "output": "postulate ord_times : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord (matita_arithmetics_nat.times m n) p) (matita_arithmetics_nat.plus (matita_arithmetics_ord.ord m p) (matita_arithmetics_ord.ord n p)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_inv_ind. Soit $x1$ un élément de $cic.Univ$ de $cic.prop$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$. Alors pour toutes les fonctions $P$ des éléments $_z257$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $x_80$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ et des éléments $_z258$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.Not$ appliqué à $x1$ et $Hterm$ et $matita_basics_logic.nmk$ appliqué à $x1$ et $x_80$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_logic.nmk$ appliqué à $x1$ et $x_80$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Not_inv_ind : (x1 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) -> (P : (_z257 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ cic.prop) -> (_H1 : (x_80 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z258 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_80))) -> cic.Term cic.prop (P (matita_basics_logic.nmk x1 x_80))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type1_r. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $a$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $P$ be a function from elements $x$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$ to elements of $cic.Univ$ of $univs.Type1$. Let $__$ be an element of $cic.Term$ of $univs.Type1$ and $P$ applied to $a$ and $matita_basics_logic.refl$ applied to $A$ and $a$. Let $x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $p$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$, $cic.Term$ holds for $univs.Type1$ and $P$ applied to $x$ and $p$.",
    "output": "postulate eq_rect_Type1_r : (A : cic.Univ univs.Type2) -> (a : cic.Term univs.Type2 A) -> (P : (x : cic.Term univs.Type2 A) -> (__ : cic.Term cic.prop (matita_basics_logic.eq A x a)) -> cic.Univ univs.Type1) -> (__ : cic.Term univs.Type1 (P a (matita_basics_logic.refl A a))) -> (x : cic.Term univs.Type2 A) -> (p : cic.Term cic.prop (matita_basics_logic.eq A x a)) -> cic.Term univs.Type1 (P x p)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sub_hkO. Soient $h$ et $k$ des fonctions des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $I$ et $J$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.upto$ appliqué à $A$ et $I$ et $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_bigops.sub_hk$ appliqué à $h$ et $k$ et $A$ et $I$ et $J$.",
    "output": "postulate sub_hkO : (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (A : cic.Univ univs.Type0) -> (I : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (J : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.upto A I) matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k A I J)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_ind_body. Låt $Q_$ vara en funktion från element $_x_365$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_O$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$. Låt $_H_S$ vara en funktion från element $x_366$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_368$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_366$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_366$. Låt $x_365$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_365$.",
    "output": "postulate nat_ind_body : (Q_ : (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_368 : cic.Term cic.prop (Q_ x_366)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_366))) -> (x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_365)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exp_plus_times. Let $n$ and $p$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_exp.exp$ applied to $n$ and $matita_arithmetics_nat.plus$ applied to $p$ and $q$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $n$ and $p$ and $matita_arithmetics_exp.exp$ applied to $n$ and $q$.",
    "output": "postulate exp_plus_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp n (matita_arithmetics_nat.plus p q)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp n p) (matita_arithmetics_exp.exp n q)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_inv_ind. Let $x1$ and $x2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z724$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z725$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $x1$, for all functions $_H2$ from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_419$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $x1$ and $m$ and functions $_x_421$ from elements $_z725$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $m$ and elements $_z725$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2$ and $matita_arithmetics_nat.S$ applied to $m$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.S$ applied to $m$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $x2$.",
    "output": "postulate le_inv_ind : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_Hterm : cic.Term cic.prop (matita_arithmetics_nat.le x1 x2)) -> (P : (_z724 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H1 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 x1)) -> cic.Term cic.prop (P x1)) -> (_H2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_419 : cic.Term cic.prop (matita_arithmetics_nat.le x1 m)) -> (_x_421 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 m)) -> cic.Term cic.prop (P m)) -> (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P x2)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type0. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type2$, pour tous les éléments $_x$ de $cic.Term$ de $univs.Type2$ et de $A$, pour toutes les fonctions $Q_$ des éléments $x_19$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_H_refl$ de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_19$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_19$ et $x_20$.",
    "output": "postulate eq_rect_Type0 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_19 : cic.Term univs.Type2 A) -> (_x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Univ univs.Type0) -> (_H_refl : cic.Term univs.Type0 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_19 : cic.Term univs.Type2 A) -> (x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Term univs.Type0 (Q_ x_19 x_20)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_inv_rect_Type2. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1254$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z1255$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Prod$ applied to $x1$ and $x2$ and $_fst$ and $_snd$ to elements of $cic.Term$ of $univs.Type2$ and $P$ applied to $matita_basics_types.mk_Prod$ applied to $x1$ and $x2$ and $_fst$ and $_snd$, $cic.Term$ holds for $univs.Type2$ and $P$ applied to $Hterm$.",
    "output": "postulate Prod_inv_rect_Type2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1254 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ univs.Type2) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1255 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type2 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ex_ind_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_235$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and $_P$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_ex_intro$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $x_236$ of $cic.Term$ of $cic.prop$ and $_P$ applied to $x$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.ex_intro$ applied to $A$ and $_P$ and $x$ and $x_236$, for all elements $x_235$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and $_P$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_235$.",
    "output": "postulate ex_ind_body : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_235 : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Univ cic.prop) -> (_H_ex_intro : (x : cic.Term univs.Type0 A) -> (x_236 : cic.Term cic.prop (_P x)) -> cic.Term cic.prop (Q_ (matita_basics_logic.ex_intro A _P x x_236))) -> (x_235 : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Term cic.prop (Q_ x_235)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_ind_body. För alla funktioner $Q_$ från element $_x_40$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_I$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.I$, för alla element $x_40$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_40$.",
    "output": "postulate True_ind_body : (Q_ : (_x_40 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_40 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_40)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Found_min_spec. Soient $n$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.true$, pour toutes les fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_minimization.min_spec$ appliqué à $n$ et $b$ et $f$ et $m$.",
    "output": "postulate found_min_spec : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus n b))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.min_spec n b f m)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_ind_l_aux. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Univ$ of $cic.prop$. Let $b2$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $P$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b2$. Let $__1$ be a function from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b1$ and $b$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$, for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $b$ and $b2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $l$ and $b1$.",
    "output": "postulate lstar_ind_l_aux : (B : cic.Univ univs.Type0) -> (R : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (b2 : cic.Term univs.Type0 B) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) -> (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b2)) -> (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (R b1 b)) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b2)) -> cic.Term cic.prop (P l b1)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_17041. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors pour tous les éléments $a$ et $x1029$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x1029$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.O$ et $matita_arithmetics_sigma_pi.plusAC$ et $x1029$ et $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_17041 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x1029 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bijn_n_Sn. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $f$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $f$ och $matita_arithmetics_nat.S$ applicerat på $n$.",
    "output": "postulate bijn_n_Sn : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n))) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exp_pi. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $matita_arithmetics_exp.exp$ applicerat på $f$ applicerat på $i$ och $m$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $m$.",
    "output": "postulate exp_pi : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_Sig. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla element $return_sort$ av $cic.Sort$, för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_mk_Sig$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.",
    "output": "postulate match_Sig : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ return_sort) -> (case_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term return_sort (return_type (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nilr_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_basics_lists_list.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $nil$ et $a$.",
    "output": "postulate nilr_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.op A nil xxx a nil) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nill_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $nil$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $xxx$ and $nil$ and $a$ and $a$.",
    "output": "postulate nill_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil xxx nil a) a)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "All_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate All_body : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Max_spec_inv_ind. Soit $x1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $x3$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.max_spec$ appliqué à $x1$ et $x2$ et $x3$. Soit $P$ une fonction des éléments $_z1769$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_975$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $x1$ et des éléments $_x_974$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $x2$ appliqué à $m$ et $matita_basics_bool.true$ et des fonctions $_x_973$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $x2$ appliqué à $i$ et $matita_basics_bool.false$ et des éléments $_z1770$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x3$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $m$. Soit $_H2$ une fonction des fonctions $_x_976$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $x2$ appliqué à $i$ et $matita_basics_bool.false$ et des éléments $_z1770$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x3$ et $matita_arithmetics_nat.O$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.O$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $x3$.",
    "output": "postulate max_spec_inv_ind : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_Hterm : cic.Term cic.prop (matita_arithmetics_minimization.max_spec x1 x2 x3)) -> (P : (_z1769 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_975 : cic.Term cic.prop (matita_arithmetics_nat.lt m x1)) -> (_x_974 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x2 m) matita_basics_bool.true)) -> (_x_973 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i x1)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x2 i) matita_basics_bool.false)) -> (_z1770 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x3 m)) -> cic.Term cic.prop (P m)) -> (_H2 : (_x_976 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i x1)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x2 i) matita_basics_bool.false)) -> (_z1770 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x3 matita_arithmetics_nat.O)) -> cic.Term cic.prop (P matita_arithmetics_nat.O)) -> cic.Term cic.prop (P x3)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_inv_rect_Type0. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Soit $P$ une fonction des éléments $_z936$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H1$ une fonction des éléments $_z937$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.it$. Alors $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.",
    "output": "postulate unit_inv_rect_Type0 : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z936 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type0) -> (_H1 : (_z937 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term univs.Type0 (P matita_basics_types.it)) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_smallest_factor_to_not_divides. Låt $n$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $i$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_primes.smallest_factor$ applicerat på $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $i$ och $n$.",
    "output": "postulate lt_smallest_factor_to_not_divides : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp2_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_627$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_627$, för alla element $x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_626$.",
    "output": "postulate option_rect_CProp2_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_627 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) -> (x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_626)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_range. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $return_sort$. Låt $case_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Låt $z$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.",
    "output": "postulate match_range : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ return_sort) -> (case_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (z : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_Type5. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_85$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type5$, pour toutes les fonctions $_H_nmk$ des fonctions $x_86$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_86$, pour tous les éléments $x_85$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_85$.",
    "output": "postulate Not_rect_Type5 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_85 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type5) -> (_H_nmk : (x_86 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type5 (Q_ (matita_basics_logic.nmk _A x_86))) -> (x_85 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term univs.Type5 (Q_ x_85)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_rect_CProp3. Let $Q_$ be a function from elements $_x_513$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_it$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.it$. Let $x_513$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_513$.",
    "output": "postulate unit_rect_CProp3 : (Q_ : (_x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H_it : cic.Term cic.prop (Q_ matita_basics_types.it)) -> (x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term cic.prop (Q_ x_513)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F_invert_permut. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $m$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $matita_arithmetics_permutation.invert_permut$ appliqué à $n$ et $f$ et $m$ et $m$.",
    "output": "postulate f_invert_permut : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_permutation.invert_permut n f m)) m)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_ind. Soit $Q_$ une fonction des éléments $_x_495$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_it$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.it$. Alors pour tous les éléments $x_495$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_495$.",
    "output": "postulate unit_ind : (Q_ : (_x_495 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H_it : cic.Term cic.prop (Q_ matita_basics_types.it)) -> (x_495 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term cic.prop (Q_ x_495)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Extract_pair. Let $A$ and $B$ and $C$ and $D$ be elements of $cic.Univ$ of $univs.Type0$. Let $u$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $A$ and $B$. Let $Q$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $C$ and $D$. Let $x$ be an element of $cic.Term$ of $univs.Type0$ and $C$. Let $y$ be an element of $cic.Term$ of $univs.Type0$ and $D$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $C$ and $D$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and the function that maps $__$ to $matita_basics_types.Prod$ applied to $C$ and $D$ and the function that maps $a$ and $b$ to $Q$ applied to $a$ and $b$ and $u$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and the function that maps $a$ to $matita_basics_logic.ex$ applied to $B$ and the function that maps $b$ to $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $A$ and $B$ and $matita_basics_types.mk_Prod$ applied to $A$ and $B$ and $a$ and $b$ and $u$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $C$ and $D$ and $Q$ applied to $a$ and $b$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$.",
    "output": "postulate extract_pair : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (D : cic.Univ univs.Type0) -> (u : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (Q : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 (matita_basics_types.Prod C D)) -> (x : cic.Term univs.Type0 C) -> (y : cic.Term univs.Type0 D) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (matita_basics_types.match_Prod A B univs.Type0 (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> matita_basics_types.Prod C D) (\\ a : cic.Term univs.Type0 A -> \\ b : cic.Term univs.Type0 B -> Q a b) u) (matita_basics_types.mk_Prod C D x y))) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ a : cic.Term univs.Type0 A -> matita_basics_logic.ex B (\\ b : cic.Term univs.Type0 B -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.mk_Prod A B a b) u) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (Q a b) (matita_basics_types.mk_Prod C D x y)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_rect_Type1_body. Let $Q_$ be a function from elements $_x_487$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $univs.Type1$. Let $x_487$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$. Then $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_487$.",
    "output": "postulate void_rect_Type1_body : (Q_ : (_x_487 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ univs.Type1) -> (x_487 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term univs.Type1 (Q_ x_487)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_smallest_factor_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $matita_arithmetics_primes.smallest_factor$ appliqué à $n$ et $n$.",
    "output": "postulate divides_smallest_factor_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_primes.smallest_factor n) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Hint_declaration_Type1. För alla element $A$ av $cic.Univ$ av $univs.Type1$, för alla element $_a$ och $_b$ av $cic.Term$ av $univs.Type1$ och $A$, håller $cic.Univ$ för $univs.Type0$.",
    "output": "postulate hint_declaration_Type1 : (A : cic.Univ univs.Type1) -> (_a : cic.Term univs.Type1 A) -> (_b : cic.Term univs.Type1 A) -> cic.Univ univs.Type0"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_4$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_5$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$. Alors $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_4$ et $x_5$.",
    "output": "postulate eq_rect_Type4 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) -> (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_4 : cic.Term univs.Type2 A) -> (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Term univs.Type4 (Q_ x_4 x_5)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_times_times. För alla element $a$ och $b$ och $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $c$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $b$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.div$ applicerat på $a$ och $b$ och $matita_arithmetics_div_and_mod.div$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $c$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $c$.",
    "output": "postulate div_times_times : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div a b) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_inv_rect_CProp3. Pour tous les éléments $x1$ et $x2$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1278$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1279$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Prod_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1278 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1279 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Monotonic_iter2. Soit $g$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soient $a$ et $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ une fonction des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x$ et $g$ appliqué à $x$. Alors pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $j$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_iteration.iter$ appliqué à $matita_arithmetics_nat.nat$ et $g$ et $i$ et $a$ et $matita_arithmetics_iteration.iter$ appliqué à $matita_arithmetics_nat.nat$ et $g$ et $j$ et $a$.",
    "output": "postulate monotonic_iter2 : (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le x (g x))) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i j)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_iteration.iter matita_arithmetics_nat.nat g i a) (matita_arithmetics_iteration.iter matita_arithmetics_nat.nat g j a))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Max_spec. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Univ$ för $cic.prop$.",
    "output": "postulate max_spec : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_inv_ind. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Soit $P$ une fonction des éléments $_z906$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $_z907$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.it$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate unit_inv_ind : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z906 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H1 : (_z907 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_inv_rect_Type1. Låt $x1$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $x1$. Då för alla funktioner $P$ från element $_z281$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $x1$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från funktioner $x_95$ från element $__$ av $cic.Term$ av $cic.prop$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ och element $_z282$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.Not$ applicerat på $x1$ och $Hterm$ och $matita_basics_logic.nmk$ applicerat på $x1$ och $x_95$ till element av $cic.Term$ av $univs.Type1$ och $P$ applicerat på $matita_basics_logic.nmk$ applicerat på $x1$ och $x_95$, håller $cic.Term$ för $univs.Type1$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Not_inv_rect_Type1 : (x1 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) -> (P : (_z281 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ univs.Type1) -> (_H1 : (x_95 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z282 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_95))) -> cic.Term univs.Type1 (P (matita_basics_logic.nmk x1 x_95))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_Type2_body. Let $Q_$ be a function from elements $_x_48$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_I$ be an element of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_logic.I$. Then for all elements $x_48$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_48$.",
    "output": "postulate True_rect_Type2_body : (Q_ : (_x_48 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type2) -> (_H_I : cic.Term univs.Type2 (Q_ matita_basics_logic.I)) -> (x_48 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term univs.Type2 (Q_ x_48)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type1_body. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_700$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H_mk_Prod$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$, pour tous les éléments $x_700$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_700$.",
    "output": "postulate Prod_rect_Type1_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type1) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type1 (Q_ x_700)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Log_div. Let $p$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_log.log$ applied to $p$ and $matita_arithmetics_div_and_mod.div$ applied to $n$ and $m$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_log.log$ applied to $p$ and $n$ and $matita_arithmetics_log.log$ applied to $p$ and $m$.",
    "output": "postulate log_div : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_div_and_mod.div n m)) (matita_arithmetics_nat.minus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_Not. Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $return_sort$. Then for all functions $case_nmk$ from functions $__$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $__$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate match_Not : (_A : cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ return_sort) -> (case_nmk : (__ : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type (matita_basics_logic.nmk _A __))) -> (z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_CProp4. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_929$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_range$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$, för alla element $x_929$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_929$.",
    "output": "postulate range_rect_CProp4 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_929)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pred_Sn. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.pred$ applied to $matita_arithmetics_nat.S$ applied to $n$.",
    "output": "postulate pred_Sn : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_CProp0. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_166$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_conj$ des éléments $x_168$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_167$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_168$ et $x_167$, pour tous les éléments $x_166$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_166$.",
    "output": "postulate And_rect_CProp0 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop) -> (_H_conj : (x_168 : cic.Term cic.prop _A) -> (x_167 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_168 x_167))) -> (x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term cic.prop (Q_ x_166)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_append. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $l1$ och $l2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $A$ och $a$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $l2$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_lists_list.mem$ applicerat på $A$ och $a$ och $l1$ och $matita_basics_lists_list.mem$ applicerat på $A$ och $a$ och $l2$.",
    "output": "postulate mem_append : (A : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem A a (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_lists_list.mem A a l1) (matita_basics_lists_list.mem A a l2))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_Type3. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1710$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type3$. Alors pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $x2$ et $x2$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $x1$ et $x2$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et des éléments $_z1711$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_Dop$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ et $_null$ et $_distr$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ et $_null$ et $_distr$, $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Dop_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1710 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1711 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type3 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_gcd. Let $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $n$.",
    "output": "postulate divides_to_gcd : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_inv_rect_Type4. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Alors pour toutes les fonctions $P$ des éléments $_z912$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des éléments $_z913$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.",
    "output": "postulate unit_inv_rect_Type4 : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z912 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type4) -> (_H1 : (_z913 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term univs.Type4 (P matita_basics_types.it)) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1034. Soient $n$ et $m$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soient $x2515$ et $x2516$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_1034 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_4$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $x_5$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$. Then $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_4$ and $x_5$.",
    "output": "postulate eq_rect_Type4 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) -> (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_4 : cic.Term univs.Type2 A) -> (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Term univs.Type4 (Q_ x_4 x_5)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_plus_n. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $matita_arithmetics_nat.plus$ applied to $n$ and $m$.",
    "output": "postulate le_plus_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le m (matita_arithmetics_nat.plus n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_a. Soient $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $a$ et $b$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.S$ appliqué à $b$ et $a$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $matita_basics_bool.true$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $b$ et $a$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $matita_basics_bool.true$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $matita_arithmetics_nat.S$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $f$ appliqué à $a$.",
    "output": "postulate bigop_a : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b) a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus b a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f (matita_arithmetics_nat.S i0)) (matita_arithmetics_nat.plus i a))) (f a)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Max_spec_ind. För alla element $_n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $Q_$ från element $x_971$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_972$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $x_971$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_found_max_spec$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_975$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $_n$ och element $x_974$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $x_973$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $m$ och $matita_arithmetics_minimization.found_max_spec$ applicerat på $_n$ och $_f$ och $m$ och $x_975$ och $x_974$ och $x_973$, för alla funktioner $_H_not_found_max_spec$ från funktioner $x_976$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_minimization.not_found_max_spec$ applicerat på $_n$ och $_f$ och $x_976$, för alla element $x_971$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $x_972$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $x_971$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_971$ och $x_972$.",
    "output": "postulate max_spec_ind : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (Q_ : (x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Univ cic.prop) -> (_H_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_975 : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (x_974 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_973 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ m (matita_arithmetics_minimization.found_max_spec _n _f m x_975 x_974 x_973))) -> (_H_not_found_max_spec : (x_976 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O (matita_arithmetics_minimization.not_found_max_spec _n _f x_976))) -> (x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Term cic.prop (Q_ x_971 x_972)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_Type2_body. Pour toutes les fonctions $Q_$ des éléments $_x_48$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $univs.Type2$, pour tous les éléments $_H_I$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_logic.I$, pour tous les éléments $x_48$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_48$.",
    "output": "postulate True_rect_Type2_body : (Q_ : (_x_48 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type2) -> (_H_I : cic.Term univs.Type2 (Q_ matita_basics_logic.I)) -> (x_48 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term univs.Type2 (Q_ x_48)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type4. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $Q_$ des éléments $_x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H_div_mod_spec_intro$ des éléments $x_815$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_814$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_815$ et $x_814$, pour tous les éléments $x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_813$.",
    "output": "postulate div_mod_spec_rect_Type4 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type4) -> (_H_div_mod_spec_intro : (x_815 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_814 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_815 x_814))) -> (x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type4 (Q_ x_813)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Monotonic_iter2. Soit $g$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soient $a$ et $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $__$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x$ et $g$ appliqué à $x$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $j$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_iteration.iter$ appliqué à $matita_arithmetics_nat.nat$ et $g$ et $i$ et $a$ et $matita_arithmetics_iteration.iter$ appliqué à $matita_arithmetics_nat.nat$ et $g$ et $j$ et $a$.",
    "output": "postulate monotonic_iter2 : (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le x (g x))) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i j)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_iteration.iter matita_arithmetics_nat.nat g i a) (matita_arithmetics_iteration.iter matita_arithmetics_nat.nat g j a))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_CProp5_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $Q_$ från element $_x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_div_mod_spec_intro$ från element $x_843$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_842$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_843$ och $x_842$, för alla element $x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_841$.",
    "output": "postulate div_mod_spec_rect_CProp5_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) -> (_H_div_mod_spec_intro : (x_843 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_842 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_843 x_842))) -> (x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term cic.prop (Q_ x_841)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1404$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1405$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_lists_list.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_lists_list.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1404 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1405 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_false. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $p$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $a$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.filter$ applicerat på $A$ och $p$ och $matita_basics_lists_list.cons$ applicerat på $A$ och $a$ och $l$ och $matita_basics_lists_list.filter$ applicerat på $A$ och $p$ och $l$.",
    "output": "postulate filter_false : (A : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 A) -> (p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.filter A p (matita_basics_lists_list.cons A a l)) (matita_basics_lists_list.filter A p l))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pos_div. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $m$.",
    "output": "postulate pos_div : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O (matita_arithmetics_div_and_mod.div n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_refl$ un élément de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Alors pour tous les éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $__$ et $z$.",
    "output": "postulate match_eq : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type2 A) -> (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Univ return_sort) -> (case_refl : cic.Term return_sort (return_type _x (matita_basics_logic.refl A _x))) -> (__ : cic.Term univs.Type2 A) -> (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Term return_sort (return_type __ z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type1. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_899$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Låt $x_899$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$. Då håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_899$.",
    "output": "postulate ACop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type1 (Q_ x_899)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1617. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $gcd1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $nm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $p$ and $a$ and $matita_arithmetics_nat.times$ applied to $m$ and $b$.",
    "output": "postulate let_clause_1617 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a) (matita_arithmetics_nat.times m b)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type2. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_134$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H_conj$ from elements $x_136$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_135$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_136$ and $x_135$, for all elements $x_134$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_134$.",
    "output": "postulate And_rect_Type2 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_134 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type2) -> (_H_conj : (x_136 : cic.Term cic.prop _A) -> (x_135 : cic.Term cic.prop _B) -> cic.Term univs.Type2 (Q_ (matita_basics_logic.conj _A _B x_136 x_135))) -> (x_134 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type2 (Q_ x_134)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_plus_to_minus_r. Let $a$ and $b$ and $c$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.plus$ applied to $a$ and $b$ and $c$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.minus$ applied to $c$ and $b$.",
    "output": "postulate le_plus_to_minus_r : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus a b) c)) -> cic.Term cic.prop (matita_arithmetics_nat.le a (matita_arithmetics_nat.minus c b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type5_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_668$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type5$, för alla funktioner $_H_mk_Sig$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$, för alla element $x_668$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_668$.",
    "output": "postulate Sig_rect_Type5_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type5) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type5 (Q_ x_668)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type1. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_829$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type1$. Då för alla funktioner $_H_div_mod_spec_intro$ från element $x_831$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_830$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_831$ och $x_830$, för alla element $x_829$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_829$.",
    "output": "postulate div_mod_spec_rect_Type1 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type1) -> (_H_div_mod_spec_intro : (x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_831 x_830))) -> (x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type1 (Q_ x_829)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_priml1. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_div_and_mod.div$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_log.log$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$.",
    "output": "postulate le_priml1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.minus (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.plus (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_602$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$, för alla element $_H_None$ av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_603$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_603$, för alla element $x_602$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_602$.",
    "output": "postulate option_rect_Type2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type2) -> (_H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_603 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))) -> (x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type2 (Q_ x_602)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_plus_Sn_r. For all elements $a$ and $x$ and $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.plus$ applied to $a$ and $x$ and $matita_arithmetics_nat.S$ applied to $n$.",
    "output": "postulate lt_plus_Sn_r : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.lt a (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus a x) (matita_arithmetics_nat.S n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_inv_plus_l. Låt $x$ och $y$ och $z$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $x$ och $y$ och $z$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $x$ och $z$ och $matita_arithmetics_nat.lt$ applicerat på $y$ och $matita_arithmetics_nat.minus$ applicerat på $z$ och $x$.",
    "output": "postulate lt_inv_plus_l : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus x y) z)) -> cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.lt x z) (matita_arithmetics_nat.lt y (matita_arithmetics_nat.minus z x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Let $p$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $lt1p$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $m$ and $x2515$ and $x2516$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lt1p : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Inl. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_types.Sum$ appliqué à $A$ et $B$.",
    "output": "postulate inl : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 (matita_basics_types.Sum A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_inv_rect_Type0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1596$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H1$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1597$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$. Then $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.",
    "output": "postulate ACop_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (P : (_z1596 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1597 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp2. För alla element $_A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_627$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_627$, för alla element $x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_626$.",
    "output": "postulate option_rect_CProp2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_627 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) -> (x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_626)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Extract_pair. Låt $A$ och $B$ och $C$ och $D$ vara element av $cic.Univ$ av $univs.Type0$. Låt $u$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$. Då för alla funktioner $Q$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $C$, för alla element $y$ av $cic.Term$ av $univs.Type0$ och $D$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$ och $matita_basics_types.match_Prod$ applicerat på $A$ och $B$ och $univs.Type0$ och funktionen som avbildar $__$ som $matita_basics_types.Prod$ applicerat på $C$ och $D$ och funktionen som avbildar $a$ och $b$ som $Q$ applicerat på $a$ och $b$ och $u$ och $matita_basics_types.mk_Prod$ applicerat på $C$ och $D$ och $x$ och $y$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och funktionen som avbildar $a$ som $matita_basics_logic.ex$ applicerat på $B$ och funktionen som avbildar $b$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $a$ och $b$ och $u$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$ och $Q$ applicerat på $a$ och $b$ och $matita_basics_types.mk_Prod$ applicerat på $C$ och $D$ och $x$ och $y$.",
    "output": "postulate extract_pair : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (D : cic.Univ univs.Type0) -> (u : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (Q : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 (matita_basics_types.Prod C D)) -> (x : cic.Term univs.Type0 C) -> (y : cic.Term univs.Type0 D) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (matita_basics_types.match_Prod A B univs.Type0 (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> matita_basics_types.Prod C D) (\\ a : cic.Term univs.Type0 A -> \\ b : cic.Term univs.Type0 B -> Q a b) u) (matita_basics_types.mk_Prod C D x y))) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ a : cic.Term univs.Type0 A -> matita_basics_logic.ex B (\\ b : cic.Term univs.Type0 B -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.mk_Prod A B a b) u) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (Q a b) (matita_basics_types.mk_Prod C D x y)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp4. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_614$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_None$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_615$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_615$, pour tous les éléments $x_614$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_614$.",
    "output": "postulate option_rect_CProp4 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_614 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_615 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_615))) -> (x_614 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_614)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp3_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_907$.",
    "output": "postulate ACop_rect_CProp3_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_907)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Foldr. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_b$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $_l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then $cic.Term$ holds for $univs.Type0$ and $B$.",
    "output": "postulate foldr : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_ind. Let $Q_$ be a function from elements $_x_326$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_true$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$. Let $_H_false$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$. Let $x_326$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_326$.",
    "output": "postulate bool_ind : (Q_ : (_x_326 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_326 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_326)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_1_fact. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_factorial.fact$ applicerat på $n$.",
    "output": "postulate le_1_fact : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_factorial.fact n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_inv_ind. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $x1$, for all elements $x3$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $x4$ and $x5$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $_Hterm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x5$, for all functions $P$ from elements $_z2089$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_z2088$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z2087$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z2092$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x3$ and $matita_arithmetics_nat.O$ and elements $_z2091$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x4$ and $b$ and elements $_z2090$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x5$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$, for all functions $_H2$ from elements $b1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_x_1236$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $b1$ and $b$ and elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_x_1235$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $x1$ and $x2$ and $l$ and $b$ and $b2$ and functions $_x_1238$ from elements $_z2092$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x3$ and $l$ and elements $_z2091$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x4$ and $b$ and elements $_z2090$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x5$ and $b2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ and $b2$ and elements $_z2092$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x3$ and $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and elements $_z2091$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x4$ and $b1$ and elements $_z2090$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x5$ and $b2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$ and $b2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $x3$ and $x4$ and $x5$.",
    "output": "postulate lstar_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 (matita_basics_relations.relation x1)) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 x1) -> (x5 : cic.Term univs.Type0 x1) -> (_Hterm : cic.Term cic.prop (matita_arithmetics_lstar.lstar x1 x2 x3 x4 x5)) -> (P : (_z2089 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_z2088 : cic.Term univs.Type0 x1) -> (_z2087 : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (_H1 : (b : cic.Term univs.Type0 x1) -> (_z2092 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x3 matita_arithmetics_nat.O)) -> (_z2091 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x4 b)) -> (_z2090 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x5 b)) -> cic.Term cic.prop (P matita_arithmetics_nat.O b b)) -> (_H2 : (b1 : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (_x_1236 : cic.Term cic.prop (x2 b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 x1) -> (_x_1235 : cic.Term cic.prop (matita_arithmetics_lstar.lstar x1 x2 l b b2)) -> (_x_1238 : (_z2092 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x3 l)) -> (_z2091 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x4 b)) -> (_z2090 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x5 b2)) -> cic.Term cic.prop (P l b b2)) -> (_z2092 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x3 (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (_z2091 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x4 b1)) -> (_z2090 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x5 b2)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2)) -> cic.Term cic.prop (P x3 x4 x5)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pi_p_primeb4. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och funktionen som avbildar $p$ som $matita_arithmetics_primes.primeb$ applicerat på $p$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $p$ som $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $matita_arithmetics_exp.exp$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $matita_arithmetics_exp.exp$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och funktionen som avbildar $p$ som $matita_arithmetics_primes.primeb$ applicerat på $p$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $p$ som $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $matita_arithmetics_exp.exp$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $matita_arithmetics_exp.exp$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $i$.",
    "output": "postulate pi_p_primeb4 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_div_and_mod.div n (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S i))))))) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_div_and_mod.div n (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S i))))))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dpi1__o__op. Soit $x0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x1$ un élément de $cic.Term$ de $univs.Type0$ et de $x0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $matita_basics_lists_list.Aop$ appliqué à $x0$ et $x1$ et $x2$, pour tous les éléments $_x_807$ et $_x_808$ de $cic.Term$ de $univs.Type0$ et de $x0$, $cic.Term$ tient pour $univs.Type0$ et $x0$.",
    "output": "postulate dpi1__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_basics_lists_list.Aop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_basics_lists_list.Aop x0 x1) x2)) -> (_x_807 : cic.Term univs.Type0 x0) -> (_x_808 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_Type2. För alla element $_A$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_91$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H_nmk$ från funktioner $x_92$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_92$, för alla element $x_91$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_91$.",
    "output": "postulate Not_rect_Type2 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_91 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type2) -> (_H_nmk : (x_92 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type2 (Q_ (matita_basics_logic.nmk _A x_92))) -> (x_91 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term univs.Type2 (Q_ x_91)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_CProp2. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Alors pour toutes les fonctions $P$ des éléments $_z1152$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1153$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate DPair_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1152 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1153 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "R3. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $a0$ vara ett element av $cic.Term$ av $univs.Type0$ och $T0$. Låt $T1$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$. Låt $a1$ vara ett element av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$. Låt $T2$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $a2$ vara ett element av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$. Låt $T3$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $p1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ och element $x2$ av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $x0$ och $p0$ och $x1$ och $p1$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T2$ applicerat på $x0$ och $p0$ och $x1$ och $p1$ och $matita_basics_logic.R2$ applicerat på $T0$ och $a0$ och $T1$ och $a1$ och $T2$ och $a2$ och $x0$ och $p0$ och $x1$ och $p1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $_a3$ av $cic.Term$ av $univs.Type0$ och $T3$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $a2$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T2$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $a2$, för alla element $b0$ av $cic.Term$ av $univs.Type0$ och $T0$, för alla element $e0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $b0$, för alla element $b1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $b0$ och $e0$, för alla element $e1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $b0$ och $e0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $b0$ och $e0$ och $b1$, för alla element $b2$ av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $b0$ och $e0$ och $b1$ och $e1$, för alla element $e2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T2$ applicerat på $b0$ och $e0$ och $b1$ och $e1$ och $matita_basics_logic.R2$ applicerat på $T0$ och $a0$ och $T1$ och $a1$ och $T2$ och $a2$ och $b0$ och $e0$ och $b1$ och $e1$ och $b2$, håller $cic.Term$ för $univs.Type0$ och $T3$ applicerat på $b0$ och $e0$ och $b1$ och $e1$ och $b2$ och $e2$.",
    "output": "postulate R3 : (T0 : cic.Univ univs.Type0) -> (a0 : cic.Term univs.Type0 T0) -> (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) -> (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) -> (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1))) -> (T3 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> (x2 : cic.Term univs.Type0 (T2 x0 p0 x1 p1)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T2 x0 p0 x1 p1)) (matita_basics_logic.R2 T0 a0 T1 a1 T2 a2 x0 p0 x1 p1) x2)) -> cic.Univ univs.Type0) -> (_a3 : cic.Term univs.Type0 (T3 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1) a2 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1))) a2))) -> (b0 : cic.Term univs.Type0 T0) -> (e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 b0)) -> (b1 : cic.Term univs.Type0 (T1 b0 e0)) -> (e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 b0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 b0 e0) b1)) -> (b2 : cic.Term univs.Type0 (T2 b0 e0 b1 e1)) -> (e2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T2 b0 e0 b1 e1)) (matita_basics_logic.R2 T0 a0 T1 a1 T2 a2 b0 e0 b1 e1) b2)) -> cic.Term univs.Type0 (T3 b0 e0 b1 e1 b2 e2)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Tight_apart. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_eq$ and $_ap$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Univ$ holds for $cic.prop$.",
    "output": "postulate tight_apart : (A : cic.Univ univs.Type0) -> (_eq : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_ap : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_inv_ind. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$. Let $P$ be a function from elements $_z1632$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $_z1633$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.range$ applied to $x1$ and $Hterm$ and $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate range_inv_ind : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> (P : (_z1632 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ cic.prop) -> (_H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1633 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16002. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $d$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $c$.",
    "output": "postulate let_clause_16002 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_list. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $return_sort$, for all elements $case_nil$ of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_lists_list.nil$ applied to $_A$, for all functions $case_cons$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $__$ and $__1$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate match_list : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ return_sort) -> (case_nil : cic.Term return_sort (return_type (matita_basics_lists_list.nil _A))) -> (case_cons : (__ : cic.Term univs.Type0 _A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type (matita_basics_lists_list.cons _A __ __1))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_CProp3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1740$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $x1$ och $x2$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ och element $_z1741$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_Dop$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ och $_null$ och $_distr$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ och $_null$ och $_distr$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1740 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1741 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Plus_div. Soient $n$ et $m$ et $d$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $d$. Alors pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $d$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $d$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $n$ et $m$ et $d$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $d$ et $matita_arithmetics_div_and_mod.div$ appliqué à $m$ et $d$.",
    "output": "postulate plus_div : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O d)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides d n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides d m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.plus n m) d) (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.div n d) (matita_arithmetics_div_and_mod.div m d)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_783$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$. Alors pour tous les éléments $x_783$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_783$.",
    "output": "postulate Aop_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type4 (Q_ x_783)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_Type3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1380$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H1$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och element $_z1381$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_lists_list.mk_Aop$ applicerat på $x1$ och $x2$ och $op$ och $_nill$ och $_nilr$ och $_assoc$ till element av $cic.Term$ av $univs.Type3$ och $P$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $x1$ och $x2$ och $op$ och $_nill$ och $_nilr$ och $_assoc$. Då håller $cic.Term$ för $univs.Type3$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Aop_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1380 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1381 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type3 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_682$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Sig$ une fonction des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$. Alors pour tous les éléments $x_682$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_682$.",
    "output": "postulate Sig_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_682)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_921$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Då för alla element $x_921$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_921$.",
    "output": "postulate range_rect_Type3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type3) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type3 (Q_ x_921)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_Type0. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_97$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_nmk$ vara en funktion från funktioner $x_98$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_98$. Då för alla element $x_97$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_97$.",
    "output": "postulate Not_rect_Type0 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_97 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type0) -> (_H_nmk : (x_98 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type0 (Q_ (matita_basics_logic.nmk _A x_98))) -> (x_97 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term univs.Type0 (Q_ x_97)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_ex. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and $_P$ to elements of $cic.Univ$ of $return_sort$. Let $return$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and $_P$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$. Let $z$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and $_P$. Then $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate filter_ex : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pi_p_primeb. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och funktionen som avbildar $p$ som $matita_arithmetics_primes.primeb$ applicerat på $p$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $p$ som $matita_arithmetics_exp.exp$ applicerat på $p$ och $matita_arithmetics_ord.ord$ applicerat på $n$ och $p$.",
    "output": "postulate pi_p_primeb : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp p (matita_arithmetics_ord.ord n p))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_r_S. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $b1$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b$. Låt $b2$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $R$ applicerat på $b$ och $b2$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $R$ och $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$.",
    "output": "postulate lstar_r_S : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (R b b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$. Då för alla funktioner $case_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.",
    "output": "postulate match_Aop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort) -> (case_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_le_to_leb_false. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_nat.le$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_nat.leb$ applied to $n$ and $m$ and $matita_basics_bool.false$.",
    "output": "postulate not_le_to_leb_false : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.false)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_to_exp1. Låt $p$ och $n$ och $q$ och $r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $n$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $q$ och $r$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $r$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $q$ och $r$.",
    "output": "postulate p_ord_to_exp1 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prime_nth_prime. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_primes.nth_prime$ applicerat på $n$.",
    "output": "postulate prime_nth_prime : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_primes.prime (matita_arithmetics_primes.nth_prime n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_inv_rect_CProp2. För alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $P$ från element $_z701$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_z702$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $matita_arithmetics_nat.O$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.O$, för alla funktioner $_H2$ från element $x_406$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_x_408$ från element $_z702$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $x_406$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x_406$ och element $_z702$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $matita_arithmetics_nat.S$ applicerat på $x_406$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_406$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate nat_inv_rect_CProp2 : (Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (_z701 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H1 : (_z702 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term cic.prop (P matita_arithmetics_nat.O)) -> (_H2 : (x_406 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_408 : (_z702 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_406)) -> cic.Term cic.prop (P x_406)) -> (_z702 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_406))) -> cic.Term cic.prop (P (matita_arithmetics_nat.S x_406))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Upto. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $A$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.",
    "output": "postulate upto : (A : cic.Univ univs.Type0) -> (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_smallest_factor_to_not_divides. Let $n$ and $i$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $i$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $i$ and $n$.",
    "output": "postulate lt_smallest_factor_to_not_divides : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1544. Låt $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $q$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $a$ som $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $m$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $m$ och $n$. Låt $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $lenm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$, för alla element $lenS$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $q$, för alla element $ndivnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, för alla element $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $n$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $b$ och $matita_arithmetics_gcd.gcd_aux$ applicerat på $q$ och $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$.",
    "output": "postulate let_clause_1544 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n q)) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a n) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd_aux q m n)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a n)) (matita_arithmetics_gcd.gcd_aux q m n)))))) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (lenS : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) -> (ndivnm : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times n b)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_CProp1_body. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_112$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_nmk$ vara en funktion från funktioner $x_113$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_113$. Då för alla element $x_112$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_112$.",
    "output": "postulate Not_rect_CProp1_body : (_A : cic.Univ cic.prop) -> (Q_ : (_x_112 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_113 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_113))) -> (x_112 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_112)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bijn_transpose. Let $n$ and $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $j$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to $matita_arithmetics_permutation.transpose$ applied to $i$ and $j$ and $n$.",
    "output": "postulate bijn_transpose : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn (matita_arithmetics_permutation.transpose i j) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_max_spec. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $__$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_found_max_spec$ from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $_n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $__2$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $i$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $m$ and $matita_arithmetics_minimization.found_max_spec$ applied to $_n$ and $_f$ and $m$ and $__$ and $__1$ and $__2$, for all functions $case_not_found_max_spec$ from functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_minimization.not_found_max_spec$ applied to $_n$ and $_f$ and $__$, for all elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $__$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $__$ and $z$.",
    "output": "postulate match_max_spec : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Univ return_sort) -> (case_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2))) -> (case_not_found_max_spec : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type matita_arithmetics_nat.O (matita_arithmetics_minimization.not_found_max_spec _n _f __))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Term return_sort (return_type __ z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp3. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_879$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $x_879$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_879$.",
    "output": "postulate Aop_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_879)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_CProp5_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_706$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_706$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_706$.",
    "output": "postulate Prod_rect_CProp5_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_706)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15623. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $d$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $m$ et $d$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $c$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15623 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_divides_to_p_ord_O. Let $n$ and $i$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_primes.nth_prime$ applied to $i$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $matita_arithmetics_primes.nth_prime$ applied to $i$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$.",
    "output": "postulate not_divides_to_p_ord_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides (matita_arithmetics_primes.nth_prime i) n))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n (matita_arithmetics_primes.nth_prime i)) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_nat.O n))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_fwd_plus_plus_ge. Soient $m1$ et $m2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $m2$ et $m1$. Soient $n1$ et $n2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $m1$ et $n1$ et $matita_arithmetics_nat.plus$ appliqué à $m2$ et $n2$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n1$ et $n2$.",
    "output": "postulate le_fwd_plus_plus_ge : (m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le m2 m1)) -> (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m1 n1) (matita_arithmetics_nat.plus m2 n2))) -> cic.Term cic.prop (matita_arithmetics_nat.le n1 n2)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_CProp1. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_712$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_712$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_712$.",
    "output": "postulate Prod_rect_CProp1 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_712)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_discr. Soient $x$ et $y$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x$ et $y$, $cic.Term$ tient pour $univs.Type2$ et $matita_arithmetics_nat.match_nat$ appliqué à $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et $matita_arithmetics_nat.match_nat$ appliqué à $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $P$ et la fonction qui envoie $_z23$ à $P$ et la fonction qui envoie $u0$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $P$ et $y$ et la fonction qui envoie $t0$ à $matita_arithmetics_nat.match_nat$ appliqué à $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $P$ et la fonction qui envoie $u0$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.R0$ appliqué à $matita_arithmetics_nat.nat$ et $t0$ et $u0$ et la fonction qui envoie $_e0$ à $P$ et la fonction qui envoie $_z24$ à $P$ et $y$ et $x$.",
    "output": "postulate nat_discr : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x y)) -> cic.Term univs.Type2 (matita_arithmetics_nat.match_nat (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.univ univs.Type2) (matita_arithmetics_nat.match_nat (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.univ univs.Type2) (cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 P (\\ _z23 : cic.Term univs.Type1 P -> P))) (\\ u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> P)) y) (\\ t0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.match_nat (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.univ univs.Type2) (cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> P)) (\\ u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_logic.R0 matita_arithmetics_nat.nat t0) u0) (\\ _e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_logic.R0 matita_arithmetics_nat.nat t0) u0) -> P)) (\\ _z24 : ((_e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_logic.R0 matita_arithmetics_nat.nat t0) u0)) -> cic.Term univs.Type1 P) -> P))) y) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_minr. For all elements $i$ and $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $matita_arithmetics_nat.min$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $m$.",
    "output": "postulate le_minr : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.min n m))) -> cic.Term cic.prop (matita_arithmetics_nat.le i m)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_Type1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1524$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1525$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $cic.Term$ holds for $univs.Type1$ and $P$ applied to $Hterm$.",
    "output": "postulate Aop_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1524 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1525 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Injective_invert_permut. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $matita_arithmetics_permutation.invert_permut$ applied to $n$ and $f$ and $n$.",
    "output": "postulate injective_invert_permut : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.injn (matita_arithmetics_permutation.invert_permut n f) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_gcd_aux. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd_aux$ applied to $p$ and $m$ and $n$ and $n$.",
    "output": "postulate divides_to_gcd_aux : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux p m n) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_CProp0. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $Q_$ från element $_x_115$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_nmk$ från funktioner $x_116$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_116$, för alla element $x_115$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_115$.",
    "output": "postulate Not_rect_CProp0 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_115 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_116 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_116))) -> (x_115 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_115)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_602$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_None$ vara ett element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Då för alla funktioner $_H_Some$ från element $x_603$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_603$, för alla element $x_602$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_602$.",
    "output": "postulate option_rect_Type2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type2) -> (_H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_603 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))) -> (x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type2 (Q_ x_602)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_inv_rect_Type3. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1578$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H1$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1579$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.",
    "output": "postulate ACop_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (P : (_z1578 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1579 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type3 (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_CProp0_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_776$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_nil$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$. Let $_H_cons$ be a function from elements $x_778$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_777$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_780$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_777$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_778$ and $x_777$. Let $x_776$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_776$.",
    "output": "postulate list_rect_CProp0_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_778 : cic.Term univs.Type0 _A) -> (x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_780 : cic.Term cic.prop (Q_ x_777)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_778 x_777))) -> (x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_776)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z2006$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $q$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_1193$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2$ och $matita_arithmetics_nat.times$ applicerat på $x1$ och $q$ och element $_z2007$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_arithmetics_primes.divides$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_primes.quotient$ applicerat på $x1$ och $x2$ och $q$ och $x_1193$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_primes.quotient$ applicerat på $x1$ och $x2$ och $q$ och $x_1193$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate divides_inv_ind : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_primes.divides x1 x2)) -> (P : (_z2006 : cic.Term cic.prop (matita_arithmetics_primes.divides x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1193 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.times x1 q))) -> (_z2007 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_primes.divides x1 x2)) Hterm (matita_arithmetics_primes.quotient x1 x2 q x_1193))) -> cic.Term cic.prop (P (matita_arithmetics_primes.quotient x1 x2 q x_1193))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Split_rev_len. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $l$ and $acc$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split_rev$ applied to $A$ and $l$ and $acc$ and $n$ and $matita_arithmetics_nat.plus$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $acc$.",
    "output": "postulate split_rev_len : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (acc : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split_rev A l acc n))) (matita_arithmetics_nat.plus n (matita_basics_lists_list.length A acc)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_ind_r_aux. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $b1$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $P$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b1$. Let $__1$ be a function from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b2$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$, for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $b$ and $b1$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $l$ and $b2$.",
    "output": "postulate lstar_ind_r_aux : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (b1 : cic.Term univs.Type0 B) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) -> (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b1)) -> (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__2 : cic.Term cic.prop (R b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b2)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b1)) -> cic.Term cic.prop (P l b2)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_953$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_Dop$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ et $_null$ et $_distr$. Soit $x_953$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_953$.",
    "output": "postulate Dop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type1 (Q_ x_953)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type4$. Then for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_666$.",
    "output": "postulate Sig_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type4) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type4 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type4 (Q_ x_666)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Iter. Soit $H$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $__$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $H$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$, pour tous les éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $H$, $cic.Term$ tient pour $univs.Type0$ et $H$.",
    "output": "postulate iter : (H : cic.Univ univs.Type0) -> (__ : (__ : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Checker_spec. Soit $tl$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_chebyshev_bertrand256.checker$ appliqué à $l$ et $matita_basics_bool.true$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$ et $l$ et $matita_basics_lists_list.cons$ appliqué à $matita_arithmetics_nat.nat$ et $a$ et $tl$, pour tous les éléments $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $p$ et $tl$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $pp$ à $matita_basics_logic.And$ appliqué à $matita_basics_logic.And$ appliqué à $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $pp$ et $l$ et $matita_arithmetics_nat.lt$ appliqué à $pp$ et $p$ et $matita_arithmetics_nat.le$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $pp$.",
    "output": "postulate checker_spec : (tl : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.checker l) matita_basics_bool.true)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) l (matita_basics_lists_list.cons matita_arithmetics_nat.nat a tl))) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat p tl)) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ pp : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_basics_lists_list.mem matita_arithmetics_nat.nat pp l) (matita_arithmetics_nat.lt pp p)) (matita_arithmetics_nat.le p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) pp))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_Type5_body. For all functions $Q_$ from elements $_x_332$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type5$, for all elements $_H_true$ of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_332$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_332$.",
    "output": "postulate bool_rect_Type5_body : (Q_ : (_x_332 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type5) -> (_H_true : cic.Term univs.Type5 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type5 (Q_ matita_basics_bool.false)) -> (x_332 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type5 (Q_ x_332)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_791$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$. Soit $x_791$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_791$.",
    "output": "postulate Aop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type1 (Q_ x_791)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z323$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $x_120$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_119$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z324$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_120$ och $x_119$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_120$ och $x_119$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate And_inv_ind : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z323 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_120 : cic.Term cic.prop x1) -> (x_119 : cic.Term cic.prop x2) -> (_z324 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_120 x_119))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_120 x_119))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_to_not_le. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $m$ et $n$.",
    "output": "postulate lt_to_not_le : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le m n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Fold_true. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla funktioner $p$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $B$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $a$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_basics_lists_list.fold$ applicerat på $A$ och $B$ och $op$ och $nil$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_basics_lists_list.cons$ applicerat på $A$ och $a$ och $l$ och $op$ applicerat på $f$ applicerat på $a$ och $matita_basics_lists_list.fold$ applicerat på $A$ och $B$ och $op$ och $nil$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $l$.",
    "output": "postulate fold_true : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (nil : cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_basics_lists_list.fold A B op nil (\\ i : cic.Term univs.Type0 A -> p i) (\\ i : cic.Term univs.Type0 A -> f i) (matita_basics_lists_list.cons A a l)) (op (f a) (matita_basics_lists_list.fold A B op nil (\\ i : cic.Term univs.Type0 A -> p i) (\\ i : cic.Term univs.Type0 A -> f i) l)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_inv_rect_Type1. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $P$ be a function from elements $_z677$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H1$ be a function from elements $_z678$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.O$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_arithmetics_nat.O$. Then for all functions $_H2$ from elements $x_386$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_x_388$ from elements $_z678$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $x_386$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $x_386$ and elements $_z678$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.S$ applied to $x_386$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_arithmetics_nat.S$ applied to $x_386$, $cic.Term$ holds for $univs.Type1$ and $P$ applied to $Hterm$.",
    "output": "postulate nat_inv_rect_Type1 : (Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (_z677 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type1) -> (_H1 : (_z678 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term univs.Type1 (P matita_arithmetics_nat.O)) -> (_H2 : (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_388 : (_z678 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_386)) -> cic.Term univs.Type1 (P x_386)) -> (_z678 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_386))) -> cic.Term univs.Type1 (P (matita_arithmetics_nat.S x_386))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_to_not_eq. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $m$.",
    "output": "postulate lt_to_not_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_inv_rect_Type1. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $P$ be a function from elements $_z677$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H1$ from elements $_z678$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.O$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_arithmetics_nat.O$, for all functions $_H2$ from elements $x_386$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_x_388$ from elements $_z678$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $x_386$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $x_386$ and elements $_z678$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.S$ applied to $x_386$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_arithmetics_nat.S$ applied to $x_386$, $cic.Term$ holds for $univs.Type1$ and $P$ applied to $Hterm$.",
    "output": "postulate nat_inv_rect_Type1 : (Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (_z677 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type1) -> (_H1 : (_z678 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term univs.Type1 (P matita_arithmetics_nat.O)) -> (_H2 : (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_388 : (_z678 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_386)) -> cic.Term univs.Type1 (P x_386)) -> (_z678 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_386))) -> cic.Term univs.Type1 (P (matita_arithmetics_nat.S x_386))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_Type0. Pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour toutes les fonctions $P$ des éléments $_z617$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H1$ des éléments $_z618$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.true$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_bool.true$, pour toutes les fonctions $_H2$ des éléments $_z618$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_bool.false$, $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.",
    "output": "postulate bool_inv_rect_Type0 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z617 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type0) -> (_H1 : (_z618 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type0 (P matita_basics_bool.true)) -> (_H2 : (_z618 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type0 (P matita_basics_bool.false)) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Fold_true. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $op$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $a$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_basics_lists_list.fold$ applicerat på $A$ och $B$ och $op$ och $nil$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_basics_lists_list.cons$ applicerat på $A$ och $a$ och $l$ och $op$ applicerat på $f$ applicerat på $a$ och $matita_basics_lists_list.fold$ applicerat på $A$ och $B$ och $op$ och $nil$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $l$.",
    "output": "postulate fold_true : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (nil : cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_basics_lists_list.fold A B op nil (\\ i : cic.Term univs.Type0 A -> p i) (\\ i : cic.Term univs.Type0 A -> f i) (matita_basics_lists_list.cons A a l)) (op (f a) (matita_basics_lists_list.fold A B op nil (\\ i : cic.Term univs.Type0 A -> p i) (\\ i : cic.Term univs.Type0 A -> f i) l)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp0_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_662$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Alors pour tous les éléments $x_662$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_662$.",
    "output": "postulate DPair_rect_CProp0_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_662)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_ACop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$. Let $case_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Then for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate match_ACop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ return_sort) -> (case_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (z : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Reverse_reverse. Let $S$ be an element of $cic.Univ$ of $univs.Type0$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $S$ and $matita_basics_lists_list.reverse$ applied to $S$ and $matita_basics_lists_list.reverse$ applied to $S$ and $l$ and $l$.",
    "output": "postulate reverse_reverse : (S : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.reverse S l)) l)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_CProp0. För alla element $x1$ av $cic.Univ$ av $univs.Type0$, för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1758$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $x1$ och $x2$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ och element $_z1759$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_Dop$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ och $_null$ och $_distr$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ och $_null$ och $_distr$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1758 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1759 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1034. Låt $n$ och $m$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Då för alla element $x2515$ och $x2516$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2515$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $x2515$ och $x2516$ och $matita_arithmetics_nat.times$ applicerat på $x2516$ och $matita_arithmetics_div_and_mod.div$ applicerat på $x2515$ och $x2516$.",
    "output": "postulate let_clause_1034 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_a. Let $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $b$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.S$ applied to $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $matita_basics_bool.true$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.minus$ applied to $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $matita_basics_bool.true$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $matita_arithmetics_nat.S$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $f$ applied to $a$.",
    "output": "postulate bigop_a : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b) a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus b a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f (matita_arithmetics_nat.S i0)) (matita_arithmetics_nat.plus i a))) (f a)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp5_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_680$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Sig$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$, för alla element $x_680$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_680$.",
    "output": "postulate Sig_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_680)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type2_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_869$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type2$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_869$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_869$.",
    "output": "postulate Aop_rect_Type2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type2) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type2 (Q_ x_869)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bi_reflexive. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla element $_R$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$, håller $cic.Univ$ för $cic.prop$.",
    "output": "postulate bi_reflexive : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Increasing_to_monotonic. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.increasing$ appliqué à $f$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.monotonic$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.lt$ et $f$.",
    "output": "postulate increasing_to_monotonic : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.increasing f)) -> cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.lt f)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Contract_pair. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $e$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $A$ et $B$ et $matita_basics_types.match_Prod$ appliqué à $A$ et $B$ et $univs.Type0$ et la fonction qui envoie $__$ à $matita_basics_types.Prod$ appliqué à $A$ et $B$ et la fonction qui envoie $a$ et $b$ à $matita_basics_types.mk_Prod$ appliqué à $A$ et $B$ et $a$ et $b$ et $e$ et $e$.",
    "output": "postulate contract_pair : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (e : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.match_Prod A B univs.Type0 (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> matita_basics_types.Prod A B) (\\ a : cic.Term univs.Type0 A -> \\ b : cic.Term univs.Type0 B -> matita_basics_types.mk_Prod A B a b) e) e)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_CProp4_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_704$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Prod$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$, för alla element $x_704$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_704$.",
    "output": "postulate Prod_rect_CProp4_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_704)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_sqrt_log. För alla element $n$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $b$ och $n$ och $matita_arithmetics_sqrt.sqrt$ applicerat på $n$.",
    "output": "postulate le_sqrt_log : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log b n) (matita_arithmetics_sqrt.sqrt n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$. Then for all elements $x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_801$.",
    "output": "postulate Aop_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_801)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type4. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_813$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_815$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_814$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_815$ och $x_814$. Då för alla element $x_813$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_813$.",
    "output": "postulate div_mod_spec_rect_Type4 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type4) -> (_H_div_mod_spec_intro : (x_815 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_814 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_815 x_814))) -> (x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type4 (Q_ x_813)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type4_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_891$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H_mk_ACop$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$, pour tous les éléments $x_891$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_891$.",
    "output": "postulate ACop_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type4 (Q_ x_891)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_686$.",
    "output": "postulate Sig_rect_CProp1_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_686)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Hint_declaration_CProp1. Pour tous les éléments $A$ de $cic.Univ$ de $cic.prop$, pour tous les éléments $_a$ et $_b$ de $cic.Term$ de $cic.prop$ et de $A$, $cic.Univ$ tient pour $univs.Type0$.",
    "output": "postulate hint_declaration_CProp1 : (A : cic.Univ cic.prop) -> (_a : cic.Term cic.prop A) -> (_b : cic.Term cic.prop A) -> cic.Univ univs.Type0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_exp1. För alla element $p$ och $n$ och $q$ och $r$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $r$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $q$ och $r$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $n$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $q$ och $r$.",
    "output": "postulate p_ord_exp1 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p r))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "False_rect_CProp1_body. Låt $Q_$ vara en funktion från element $_x_77$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $cic.prop$. Låt $x_77$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_77$.",
    "output": "postulate False_rect_CProp1_body : (Q_ : (_x_77 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_77 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_77)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Reverse_append. Let $S$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $l1$ and $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $S$ and $matita_basics_lists_list.reverse$ applied to $S$ and $matita_basics_lists_list.append$ applied to $S$ and $l1$ and $l2$ and $matita_basics_lists_list.append$ applied to $S$ and $matita_basics_lists_list.reverse$ applied to $S$ and $l2$ and $matita_basics_lists_list.reverse$ applied to $S$ and $l1$.",
    "output": "postulate reverse_append : (S : cic.Univ univs.Type0) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.append S l1 l2)) (matita_basics_lists_list.append S (matita_basics_lists_list.reverse S l2) (matita_basics_lists_list.reverse S l1)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp2_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_801$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_801$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_801$.",
    "output": "postulate Aop_rect_CProp2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_801)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "LePsi_r2. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $n$ and $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applied to $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applied to $n$ and $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applied to $n$.",
    "output": "postulate lePsi_r2 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp n (matita_arithmetics_chebyshev_chebyshev_psi.prim n)) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_chebyshev_psi.Psi n) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_previous_prime5. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $ltml$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_primes.nth_prime$ applied to $n$ and $m$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.",
    "output": "postulate let_previous_prime5 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltml : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n) m)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type4. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_863$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_863$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_863$.",
    "output": "postulate Aop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type4 (Q_ x_863)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_exp_to_lt1. Soient $a$ et $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $a$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $n$ et $a$ et $matita_arithmetics_exp.exp$ appliqué à $m$ et $a$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$.",
    "output": "postulate lt_exp_to_lt1 : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp n a) (matita_arithmetics_exp.exp m a))) -> cic.Term cic.prop (matita_arithmetics_nat.lt n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type0. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_873$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_873$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_873$.",
    "output": "postulate Aop_rect_Type0 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_873 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type0) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_873 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type0 (Q_ x_873)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_inv_S. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b2$, pour tous les éléments $l0$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.plus$ appliqué à $l0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex2$ appliqué à $B$ et la fonction qui envoie $b$ à $R$ appliqué à $b1$ et $b$ et la fonction qui envoie $b$ à $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l0$ et $b$ et $b2$.",
    "output": "postulate lstar_inv_S : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)) -> (l0 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus l0 (matita_arithmetics_nat.S matita_arithmetics_nat.O)) l)) -> cic.Term cic.prop (matita_basics_logic.ex2 B (\\ b : cic.Term univs.Type0 B -> R b1 b) (\\ b : cic.Term univs.Type0 B -> matita_arithmetics_lstar.lstar B R l0 b b2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type5. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_594$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type5$. Då för alla element $_H_None$ av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_595$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_595$, för alla element $x_594$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_594$.",
    "output": "postulate option_rect_Type5 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type5) -> (_H_None : cic.Term univs.Type5 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_595 : cic.Term univs.Type0 _A) -> cic.Term univs.Type5 (Q_ (matita_basics_types.Some _A x_595))) -> (x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type5 (Q_ x_594)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Times_mod. Soient $a$ et $b$ et $c$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $a$ et $b$.",
    "output": "postulate times_mod : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b c)) (matita_arithmetics_nat.times c (matita_arithmetics_div_and_mod.mod a b)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F_max_true. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $matita_arithmetics_minimization.max$ applicerat på $n$ och $f$ och $matita_basics_bool.true$.",
    "output": "postulate f_max_true : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.max n f)) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Max'_body. Soit $__$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $__1$ des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.",
    "output": "postulate max'_body : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_inv_rect_CProp0. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1296$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H1$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1297$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Prod_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1296 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1297 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lprim_invariant. Let $n$ and $i$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $acc$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $i$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_chebyshev_bertrand256.primes_below$ applied to $acc$ and $i$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_chebyshev_bertrand256.primes_below$ applied to $matita_arithmetics_chebyshev_bertrand256.lprim$ applied to $n$ and $i$ and $acc$ and $matita_arithmetics_nat.plus$ applied to $n$ and $i$.",
    "output": "postulate lprim_invariant : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below acc i)) -> cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below (matita_arithmetics_chebyshev_bertrand256.lprim n i acc) (matita_arithmetics_nat.plus n i))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_945$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_Dop$ be a function from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$. Then for all elements $x_945$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_945$.",
    "output": "postulate Dop_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type4 (Q_ x_945)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1569. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $d$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $n$ and $c$ and $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_1569 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n c) (matita_arithmetics_nat.times m d)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15623. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15623 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_fact_B. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_factorial.fact$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_factorial.fact$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_factorization.B$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.",
    "output": "postulate eq_fact_B : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_factorial.fact n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_exp1. For all elements $p$ and $n$ and $q$ and $r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $r$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $q$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $q$ and $r$.",
    "output": "postulate p_ord_exp1 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p r))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "All_append. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soient $l1$ et $l2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.All$ appliqué à $A$ et $P$ et $l1$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.All$ appliqué à $A$ et $P$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.All$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$.",
    "output": "postulate All_append : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.All A P l1)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A P l2)) -> cic.Term cic.prop (matita_basics_lists_list.All A P (matita_basics_lists_list.append A l1 l2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type3. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_130$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type3$, för alla funktioner $_H_conj$ från element $x_132$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_131$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_132$ och $x_131$, för alla element $x_130$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_130$.",
    "output": "postulate And_rect_Type3 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type3) -> (_H_conj : (x_132 : cic.Term cic.prop _A) -> (x_131 : cic.Term cic.prop _B) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.conj _A _B x_132 x_131))) -> (x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type3 (Q_ x_130)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Congruent. Pour tous les éléments $_n$ et $_m$ et $_p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate congruent : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_10336. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Hind$ une fonction des éléments $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $m$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $p$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$. Alors pour tous les éléments $Hm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous les éléments $Hlt$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous les éléments $Ha$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_10336 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi p) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred p) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) p) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))) -> (Hm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))) -> (Hlt : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))) -> (Ha : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type4. For all elements $_n$ and $_m$ and $_q$ and $_r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Q_$ from elements $_x_813$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_div_mod_spec_intro$ from elements $x_815$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_814$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_815$ and $x_814$, for all elements $x_813$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_813$.",
    "output": "postulate div_mod_spec_rect_Type4 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type4) -> (_H_div_mod_spec_intro : (x_815 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_814 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_815 x_814))) -> (x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type4 (Q_ x_813)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_911$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_ACop$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$, pour tous les éléments $x_911$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_911$.",
    "output": "postulate ACop_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_911)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exp_pi_bc. Soient $a$ et $b$ et $c$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $a$ et $matita_arithmetics_nat.minus$ appliqué à $c$ et $b$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $c$ et $b$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $matita_basics_bool.true$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $b$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $b$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $c$ et $b$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $matita_basics_bool.true$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $b$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $matita_arithmetics_nat.times$ appliqué à $a$ et $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $b$.",
    "output": "postulate exp_pi_bc : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus c b)) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus c b) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i b)) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i b)))) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus c b) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i b)) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times a (f i0)) (matita_arithmetics_nat.plus i b))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_CProp2. Let $Q_$ be a function from elements $_x_405$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_O$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$, for all functions $_H_S$ from elements $x_406$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_408$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_406$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_406$, for all elements $x_405$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_405$.",
    "output": "postulate nat_rect_CProp2 : (Q_ : (_x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_406 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_408 : cic.Term cic.prop (Q_ x_406)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_406))) -> (x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_405)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Injective_to_injn. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_relations.injective$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $f$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$.",
    "output": "postulate injective_to_injn : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat f)) -> cic.Term cic.prop (matita_arithmetics_permutation.injn f n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1536$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1537$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1536 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1537 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_CProp3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_28$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_29$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_28$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_refl$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Låt $x_28$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Då för alla element $x_29$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_28$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_28$ och $x_29$.",
    "output": "postulate eq_rect_CProp3 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_28 : cic.Term univs.Type2 A) -> (_x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_28 : cic.Term univs.Type2 A) -> (x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Term cic.prop (Q_ x_28 x_29)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_ind_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_943$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$. Låt $x_943$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_943$.",
    "output": "postulate Dop_ind_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_943)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_CProp2. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $P$ une fonction des éléments $_z635$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $_z636$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.true$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_bool.true$. Soit $_H2$ une fonction des éléments $_z636$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_bool.false$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate bool_inv_rect_CProp2 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z635 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H1 : (_z636 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) -> (_H2 : (_z636 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_lt_O. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$.",
    "output": "postulate divides_to_lt_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_863$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$. Let $x_863$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_863$.",
    "output": "postulate Aop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type4 (Q_ x_863)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_le_S_S_to_not_le. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $n$ et $m$.",
    "output": "postulate not_le_S_S_to_not_le : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F_false_to_le_max. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $n$ et $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $i$ à $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.lt$ appliqué à $i$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.true$, pour toutes les fonctions $__1$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_minimization.max$ appliqué à $n$ et $f$ et $p$.",
    "output": "postulate f_false_to_le_max : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> (__1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.max n f) p)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Op. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $_xxx$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$, för alla element $_x_807$ och $_x_808$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $A$.",
    "output": "postulate op : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (_xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (_x_807 : cic.Term univs.Type0 A) -> (_x_808 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_891$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_891$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_891$.",
    "output": "postulate ACop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type4 (Q_ x_891)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1561. Soient $p$ et $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Soit $gcd1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $nm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$, pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$, pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$, pour tous les éléments $H0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $p$ et $a$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $b$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_1561 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a) (matita_arithmetics_nat.times m b)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type4_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_945$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$. Låt $x_945$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$. Då håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_945$.",
    "output": "postulate Dop_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type4 (Q_ x_945)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp3_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_None$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_623$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_623$. Alors pour tous les éléments $x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_622$.",
    "output": "postulate option_rect_CProp3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_623 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> (x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_622)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Congruent_n_mod_n. Soient $n$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_congruence.congruent$ appliqué à $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $p$ et $p$.",
    "output": "postulate congruent_n_mod_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n p) p)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1704$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H1$ be a function from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $x1$ and $x2$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ and elements $_z1705$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $x1$ and $x2$ and $sum$ and $prod$ and $_null$ and $_distr$. Then $cic.Term$ holds for $univs.Type4$ and $P$ applied to $Hterm$.",
    "output": "postulate Dop_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1704 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1705 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Primes_below_to_bertrand. För alla element $pm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $pm$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_chebyshev_bertrand256.primes_below$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $pm$, för alla funktioner $__2$ från element $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $p$ och $l$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $pp$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.And$ applicerat på $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $pp$ och $l$ och $matita_arithmetics_nat.lt$ applicerat på $pp$ och $p$ och $matita_arithmetics_nat.le$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $pp$, för alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__4$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $pm$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_chebyshev_bertrand.bertrand$ applicerat på $n$.",
    "output": "postulate primes_below_to_bertrand : (pm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.prime pm)) -> (__1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below l (matita_arithmetics_nat.S pm))) -> (__2 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat p l)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) p)) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ pp : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_basics_lists_list.mem matita_arithmetics_nat.nat pp l) (matita_arithmetics_nat.lt pp p)) (matita_arithmetics_nat.le p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) pp))))) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt n pm)) -> cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand.bertrand n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp3. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1542$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1543$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1542 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1543 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "To_min. Let $i$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $matita_arithmetics_nat.min$ applied to $n$ and $m$.",
    "output": "postulate to_min : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i m)) -> cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.min n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Transpose_i_j_j. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_permutation.transpose$ applied to $i$ and $j$ and $j$ and $i$.",
    "output": "postulate transpose_i_j_j : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.transpose i j j) i)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F3_ind. Soient $A1$ et $A2$ et $A3$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $A3$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $P$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$. Soit $__$ une fonction des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$. Soit $a1$ un élément de $cic.Term$ de $univs.Type0$ et de $A1$. Soit $a2$ un élément de $cic.Term$ de $univs.Type0$ et de $A2$. Alors pour tous les éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $a1$ et $a2$ et $a3$.",
    "output": "postulate f3_ind : (A1 : cic.Univ univs.Type0) -> (A2 : cic.Univ univs.Type0) -> (A3 : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3)) -> (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> cic.Term cic.prop (P a1 a2 a3)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pair_elim. Pour tous les éléments $A$ et $B$ et $C$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $T$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $C$, pour tous les éléments $p$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $C$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $__$ des éléments $lft$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $rgt$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $A$ et $B$ et $p$ et $matita_basics_types.mk_Prod$ appliqué à $A$ et $B$ et $lft$ et $rgt$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $A$ et $B$ et $lft$ et $rgt$ et $T$ appliqué à $lft$ et $rgt$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $p$ et $matita_basics_types.match_Prod$ appliqué à $A$ et $B$ et $univs.Type0$ et la fonction qui envoie $_0$ à $C$ et la fonction qui envoie $lft$ et $rgt$ à $T$ appliqué à $lft$ et $rgt$ et $p$.",
    "output": "postulate pair_elim : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (T : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (p : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (P : (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> cic.Univ cic.prop) -> (__ : (lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt))) -> cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C) (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T lft rgt) p))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type3_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_598$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type3$. Då för alla element $_H_None$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_599$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_599$, för alla element $x_598$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_598$.",
    "output": "postulate option_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_598 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type3) -> (_H_None : cic.Term univs.Type3 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_599 : cic.Term univs.Type0 _A) -> cic.Term univs.Type3 (Q_ (matita_basics_types.Some _A x_599))) -> (x_598 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type3 (Q_ x_598)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1428$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des éléments $_z1429$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_lists_list.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1428 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1429 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_to_lt_to_lt. Let $n$ and $m$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $p$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $p$.",
    "output": "postulate le_to_lt_to_lt : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m p)) -> cic.Term cic.prop (matita_arithmetics_nat.lt n p)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_rect_CProp0. För alla element $x1$ och $x2$ och $x3$ och $x4$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$, för alla funktioner $P$ från element $_z1494$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_859$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x4$ och $x2$ och element $x_858$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x1$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x3$ och $x2$ och $x4$ och element $_z1495$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $Hterm$ och $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_859$ och $x_858$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_859$ och $x_858$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp0 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1494 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop) -> (_H1 : (x_859 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_858 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1495 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_859 x_858))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_859 x_858))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_rect_CProp3. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z365$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $x_156$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_155$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z366$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_156$ and $x_155$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_156$ and $x_155$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate And_inv_rect_CProp3 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z365 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_156 : cic.Term cic.prop x1) -> (x_155 : cic.Term cic.prop x2) -> (_z366 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_156 x_155))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_156 x_155))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_maxl. För alla element $i$ och $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.max$ applicerat på $n$ och $m$ och $i$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $i$.",
    "output": "postulate le_maxl : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i)) -> cic.Term cic.prop (matita_arithmetics_nat.le n i)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_ex. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and $_P$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_ex_intro$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $_P$ applied to $x$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_logic.ex_intro$ applied to $A$ and $_P$ and $x$ and $__$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and $_P$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate match_ex : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Univ return_sort) -> (case_ex_intro : (x : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (_P x)) -> cic.Term return_sort (return_type (matita_basics_logic.ex_intro A _P x __))) -> (z : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_rect_Type3. Pour toutes les fonctions $Q_$ des éléments $_x_485$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $univs.Type3$, pour tous les éléments $x_485$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_485$.",
    "output": "postulate void_rect_Type3 : (Q_ : (_x_485 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ univs.Type3) -> (x_485 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term univs.Type3 (Q_ x_485)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_lstar. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_lstar_O$ from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$ and $matita_arithmetics_lstar.lstar_O$ applied to $B$ and $_R$ and $b$, for all functions $case_lstar_S$ from elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__$ of $cic.Term$ of $cic.prop$ and $_R$ applied to $b1$ and $b$ and elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $_R$ and $l$ and $b$ and $b2$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$ and $b2$ and $matita_arithmetics_lstar.lstar_S$ applied to $B$ and $_R$ and $b1$ and $b$ and $__$ and $l$ and $b2$ and $__1$, for all elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__1$ and $__2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $_R$ and $__$ and $__1$ and $__2$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $__$ and $__1$ and $__2$ and $z$.",
    "output": "postulate match_lstar : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) -> cic.Univ return_sort) -> (case_lstar_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))) -> (case_lstar_S : (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_S B _R b1 b __ l b2 __1))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) -> cic.Term return_sort (return_type __ __1 __2 z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_955$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$. Då för alla element $x_955$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_955$.",
    "output": "postulate Dop_rect_Type0 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type0) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type0 (Q_ x_955)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15624. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $d$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $c$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15624 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_CProp4. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1008$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $x_557$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1009$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_557$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_557$, for all functions $_H2$ from elements $x_558$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z1009$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_558$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_558$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Sum_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z1008 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_557 : cic.Term univs.Type0 x1) -> (_z1009 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_557))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_557))) -> (_H2 : (x_558 : cic.Term univs.Type0 x2) -> (_z1009 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_558))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_558))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15625. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $pnm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15625 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16171. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $gcd1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $nm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$. Let $b$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $b$ and $matita_arithmetics_nat.times$ applied to $p$ and $a$.",
    "output": "postulate let_clause_16171 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m b) (matita_arithmetics_nat.times p a)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16001. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $d$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $n$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $d$.",
    "output": "postulate let_clause_16001 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n c) (matita_arithmetics_nat.times m d)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Increasing_to_le2. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.increasing$ applicerat på $f$. Låt $m$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $f$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.le$ applicerat på $f$ applicerat på $i$ och $m$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $f$ applicerat på $matita_arithmetics_nat.S$ applicerat på $i$.",
    "output": "postulate increasing_to_le2 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.increasing f)) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (f matita_arithmetics_nat.O) m)) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.le (f i) m) (matita_arithmetics_nat.lt m (f (matita_arithmetics_nat.S i)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_909$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_ACop$ une fonction des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$. Alors pour tous les éléments $x_909$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_909$.",
    "output": "postulate ACop_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_909)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_Type1_body. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_94$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_nmk$ vara en funktion från funktioner $x_95$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_95$. Då för alla element $x_94$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_94$.",
    "output": "postulate Not_rect_Type1_body : (_A : cic.Univ cic.prop) -> (Q_ : (_x_94 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type1) -> (_H_nmk : (x_95 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type1 (Q_ (matita_basics_logic.nmk _A x_95))) -> (x_94 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term univs.Type1 (Q_ x_94)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unique_body. Låt $H$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$. Då håller $cic.Univ$ för $cic.prop$.",
    "output": "postulate unique_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_Type3. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z599$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H1$ from elements $_z600$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z600$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.",
    "output": "postulate bool_inv_rect_Type3 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z599 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type3) -> (_H1 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type3 (P matita_basics_bool.true)) -> (_H2 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type3 (P matita_basics_bool.false)) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_CProp3_body. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_708$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Prod$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$, pour tous les éléments $x_708$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_708$.",
    "output": "postulate Prod_rect_CProp3_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_708)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_S_S_to_le. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$.",
    "output": "postulate le_S_S_to_le : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (matita_arithmetics_nat.le n m)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nil_to_nil. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $l1$ et $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$ et $matita_basics_lists_list.nil$ appliqué à $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.nil$ appliqué à $A$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l2$ et $matita_basics_lists_list.nil$ appliqué à $A$.",
    "output": "postulate nil_to_nil : (A : cic.Univ univs.Type0) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A l1 l2) (matita_basics_lists_list.nil A))) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.nil A)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l2 (matita_basics_lists_list.nil A)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Axiom. Let $s$ be an element of $Sort$. Let $a$ be an element of $Univ$ of $s$. Then $Term$ applied to $s$ and $a$ is a type.",
    "output": "postulate Term : (s : Sort) -> (a : Univ s) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_ind_body. Pour tous les éléments $_n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $Q_$ des éléments $x_417$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_418$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $x_417$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_le_n$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_n$ et $matita_arithmetics_nat.le_n$ appliqué à $_n$, pour toutes les fonctions $_H_le_S$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_419$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $m$ et des éléments $_x_421$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $m$ et $x_419$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.le_S$ appliqué à $_n$ et $m$ et $x_419$, pour tous les éléments $x_417$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $x_418$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $x_417$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_417$ et $x_418$.",
    "output": "postulate le_ind_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Univ cic.prop) -> (_H_le_n : cic.Term cic.prop (Q_ _n (matita_arithmetics_nat.le_n _n))) -> (_H_le_S : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m)) -> (_x_421 : cic.Term cic.prop (Q_ m x_419)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m x_419))) -> (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Term cic.prop (Q_ x_417 x_418)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eqb_elim. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Let $__$ be a function from elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.true$. Then for all functions $__1$ from elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $matita_arithmetics_nat.eqb$ applied to $n$ and $m$.",
    "output": "postulate eqb_elim : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (__ : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (__ : (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)) -> cic.Term cic.prop (P matita_basics_bool.true)) -> (__1 : (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))) -> cic.Term cic.prop (P matita_basics_bool.false)) -> cic.Term cic.prop (P (matita_arithmetics_nat.eqb n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_inv_rect_CProp4. Soit $x1$ un élément de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z293$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $x_101$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ et des éléments $_z294$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.Not$ appliqué à $x1$ et $Hterm$ et $matita_basics_logic.nmk$ appliqué à $x1$ et $x_101$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_logic.nmk$ appliqué à $x1$ et $x_101$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Not_inv_rect_CProp4 : (x1 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) -> (P : (_z293 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ cic.prop) -> (_H1 : (x_101 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z294 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_101))) -> cic.Term cic.prop (P (matita_basics_logic.nmk x1 x_101))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_rect_Type4. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z329$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des éléments $x_124$ de $cic.Term$ de $cic.prop$ et de $x1$ et des éléments $x_123$ de $cic.Term$ de $cic.prop$ et de $x2$ et des éléments $_z330$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.And$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_logic.conj$ appliqué à $x1$ et $x2$ et $x_124$ et $x_123$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_logic.conj$ appliqué à $x1$ et $x2$ et $x_124$ et $x_123$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.",
    "output": "postulate And_inv_rect_Type4 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z329 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (x_124 : cic.Term cic.prop x1) -> (x_123 : cic.Term cic.prop x2) -> (_z330 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_124 x_123))) -> cic.Term univs.Type4 (P (matita_basics_logic.conj x1 x2 x_124 x_123))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_rect_Type2_body. Låt $Q_$ vara en funktion från element $_x_503$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_it$ vara ett element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.it$. Låt $x_503$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Då håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_503$.",
    "output": "postulate unit_rect_Type2_body : (Q_ : (_x_503 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type2) -> (_H_it : cic.Term univs.Type2 (Q_ matita_basics_types.it)) -> (x_503 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term univs.Type2 (Q_ x_503)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type2_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_672$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_mk_Sig$ vara en funktion från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$. Låt $x_672$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$. Då håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_672$.",
    "output": "postulate Sig_rect_Type2_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type2) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type2 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type2 (Q_ x_672)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp5. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_905$.",
    "output": "postulate ACop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_905)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_div_mod_spec. For all elements $_n$ and $_m$ and $_q$ and $_r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate filter_div_mod_spec : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Rcomp. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_R1$ et $_R2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$, pour tous les éléments $_a1$ et $_a2$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate Rcomp : (A : cic.Univ univs.Type0) -> (_R1 : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_R2 : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_a1 : cic.Term univs.Type0 A) -> (_a2 : cic.Term univs.Type0 A) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_le_Sn_n. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et $n$.",
    "output": "postulate not_le_Sn_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) n))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Permut_n_to_le. Soit $h$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soient $k$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $k$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $h$ et $n$. Soit $__2$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $k$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $h$ appliqué à $m$ et $m$. Soit $j$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__3$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $k$ et $j$. Soit $__4$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $k$ et $h$ appliqué à $j$.",
    "output": "postulate permut_n_to_le : (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le k n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.permut h n)) -> (__2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (h m) m)) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le k j)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> cic.Term cic.prop (matita_arithmetics_nat.le k (h j))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dpi1__o__aop. Pour tous les éléments $x0$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $x0$, pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $matita_arithmetics_bigops.ACop$ appliqué à $x0$ et $x1$ et $x2$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_bigops.Aop$ appliqué à $x0$ et $x1$.",
    "output": "postulate dpi1__o__aop : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2)) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x0 x1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_ind_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_716$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_nil$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$. Låt $_H_cons$ vara en funktion från element $x_718$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_717$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_720$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_717$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_718$ och $x_717$. Då för alla element $x_716$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_716$.",
    "output": "postulate list_ind_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_716 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_718 : cic.Term univs.Type0 _A) -> (x_717 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_720 : cic.Term cic.prop (Q_ x_717)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_718 x_717))) -> (x_716 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_716)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_73. For all elements $x$ and $y$ and $z$ and $x134$ and $x135$ and $x136$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.plus$ applied to $x134$ and $matita_arithmetics_nat.plus$ applied to $x135$ and $x136$ and $matita_arithmetics_nat.plus$ applied to $x135$ and $matita_arithmetics_nat.plus$ applied to $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x134 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x135 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x136 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus x134 (matita_arithmetics_nat.plus x135 x136)) (matita_arithmetics_nat.plus x135 (matita_arithmetics_nat.plus x134 x136)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1224$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1225$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Sig_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1225 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Injective_compose. Låt $A$ och $B$ och $C$ vara element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $g$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_relations.injective$ applicerat på $A$ och $B$ och $f$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_relations.injective$ applicerat på $B$ och $C$ och $g$, håller $cic.Term$ för $cic.prop$ och $matita_basics_relations.injective$ applicerat på $A$ och $C$ och funktionen som avbildar $x$ som $g$ applicerat på $f$ applicerat på $x$.",
    "output": "postulate injective_compose : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (g : (__ : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (__ : cic.Term cic.prop (matita_basics_relations.injective A B f)) -> (__1 : cic.Term cic.prop (matita_basics_relations.injective B C g)) -> cic.Term cic.prop (matita_basics_relations.injective A C (\\ x : cic.Term univs.Type0 A -> g (f x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Fst_body. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla element $_xxx$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, håller $cic.Term$ för $univs.Type0$ och $A$.",
    "output": "postulate fst_body : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> cic.Term univs.Type0 A"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_rect_Type4_body. Let $Q_$ be a function from elements $_x_483$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $univs.Type4$. Then for all elements $x_483$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_483$.",
    "output": "postulate void_rect_Type4_body : (Q_ : (_x_483 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ univs.Type4) -> (x_483 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term univs.Type4 (Q_ x_483)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_CProp4. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1140$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $x2$ applied to $dpi1$ and elements $_z1141$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate DPair_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1141 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_gcd_aux. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd_aux$ applied to $p$ and $m$ and $n$ and $n$.",
    "output": "postulate divides_to_gcd_aux : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux p m n) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_ind. Let $Q_$ be a function from elements $_x_482$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $cic.prop$. Let $x_482$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_482$.",
    "output": "postulate void_ind : (Q_ : (_x_482 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) -> (x_482 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term cic.prop (Q_ x_482)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_873$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_mk_Aop$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$. Då för alla element $x_873$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_873$.",
    "output": "postulate Aop_rect_Type0 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_873 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type0) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_873 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type0 (Q_ x_873)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_CProp5_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Then for all elements $x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_931$.",
    "output": "postulate range_rect_CProp5_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_931)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1595. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $primepn$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $primepm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $lt1gcd$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $m$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_primes.smallest_factor$ applicerat på $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$.",
    "output": "postulate let_clause_1595 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (primepn : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (primepm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (lt1gcd : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m)))) -> (H : cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_primes.smallest_factor (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_gcd.gcd p m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Fmin_false. För alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $n$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $matita_arithmetics_minimization.let_m$ applicerat på $f$ och $n$ och $b$ och $matita_basics_bool.false$ och funktionen som avbildar $__$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.let_m$ applicerat på $f$ och $n$ och $b$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$.",
    "output": "postulate fmin_false : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.let_m f n b)) matita_basics_bool.false) (\\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.let_m f n b)) matita_basics_bool.false) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.let_m f n b) (matita_arithmetics_nat.plus n b)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Injective_times_r. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_relations.injective$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $m$ som $matita_arithmetics_nat.times$ applicerat på $n$ och $m$.",
    "output": "postulate injective_times_r : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_DPair. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $return_sort$. Soit $return$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$. Alors pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.",
    "output": "postulate filter_DPair : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sigma_p_dividesb. För alla element $m$ och $n$ och $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_bigops.bigop$ applicerat på $m$ och funktionen som avbildar $i$ som $matita_arithmetics_primes.dividesb$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $i$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $m$ och $n$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $i$ som $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate sigma_p_dividesb : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__2 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p n))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_bigops.bigop m (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.dividesb (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S i)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p m) n)) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.S matita_arithmetics_nat.O)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_CProp4. Pour toutes les fonctions $Q_$ des éléments $_x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_true$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.true$, pour tous les éléments $_H_false$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.false$, pour tous les éléments $x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_347$.",
    "output": "postulate bool_rect_CProp4 : (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_347)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_discr. Låt $a1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $a2$ av $cic.Term$ av $univs.Type0$ och $a1$, för alla element $x$ och $y$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $a1$ och $a2$, för alla element $_e$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.Dop$ applicerat på $a1$ och $a2$ och $x$ och $y$, håller $cic.Term$ för $univs.Type2$ och $matita_arithmetics_bigops.match_Dop$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $t0$ och $t1$ och $t2$ och $t3$ som $matita_arithmetics_bigops.match_Dop$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $u0$ och $u1$ och $u2$ och $u3$ som $cic.prod$ applicerat på $cic.succ$ applicerat på $univs.Type1$ och $univs.Type1$ och $cic.univ$ applicerat på $univs.Type1$ och funktionen som avbildar $P$ som $cic.prod$ applicerat på $univs.Type1$ och $univs.Type1$ och $cic.prod$ applicerat på $cic.prop$ och $univs.Type1$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $a1$ och $a2$ och $matita_basics_logic.R0$ applicerat på $matita_arithmetics_bigops.ACop$ applicerat på $a1$ och $a2$ och $t0$ och $u0$ och funktionen som avbildar $e0$ som $cic.prod$ applicerat på $cic.prop$ och $univs.Type1$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och funktionen som avbildar $x0$ och $p0$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__1$ som $a1$ applicerat på $u0$ och $e0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $a1$ och $a2$ och $t0$ och funktionen som avbildar $x0$ och $p0$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__1$ som $a1$ och $t1$ och $u0$ och $e0$ och $u1$ och funktionen som avbildar $e1$ som $cic.prod$ applicerat på $cic.prop$ och $univs.Type1$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och funktionen som avbildar $x0$ och $p0$ och $x1$ och $p1$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $a$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $a1$ och $x1$ applicerat på $a$ och $a2$ och $a2$ applicerat på $u0$ och $e0$ och $u1$ och $e1$ och $matita_basics_logic.R2$ applicerat på $matita_arithmetics_bigops.ACop$ applicerat på $a1$ och $a2$ och $t0$ och funktionen som avbildar $x0$ och $p0$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__1$ som $a1$ och $t1$ och funktionen som avbildar $x0$ och $p0$ och $x1$ och $__$ som $cic.lift$ applicerat på $cic.prop$ och $univs.Type0$ och funktionen som avbildar $x01$ och $p01$ och $x11$ och $p1$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $a$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $a1$ och $x11$ applicerat på $a$ och $a2$ och $a2$ applicerat på $x0$ och $p0$ och $x1$ och $__$ och $t2$ och $u0$ och $e0$ och $u1$ och $e1$ och $u2$ och funktionen som avbildar $e2$ som $cic.prod$ applicerat på $cic.prop$ och $univs.Type1$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och funktionen som avbildar $x0$ och $p0$ och $x1$ och $p1$ och $x2$ och $p2$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $a$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $b$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $c$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $a1$ och $x1$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $a1$ och $a2$ och $x0$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $a1$ och $a2$ och $x0$ och $x1$ applicerat på $a$ och $b$ och $x1$ applicerat på $a$ och $c$ applicerat på $u0$ och $e0$ och $u1$ och $e1$ och $u2$ och $e2$ och $matita_basics_logic.R3$ applicerat på $matita_arithmetics_bigops.ACop$ applicerat på $a1$ och $a2$ och $t0$ och funktionen som avbildar $x0$ och $p0$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__$ som $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $a1$ och funktionen som avbildar $__1$ som $a1$ och $t1$ och funktionen som avbildar $x0$ och $p0$ och $x1$ och $__$ som $cic.lift$ applicerat på $cic.prop$ och $univs.Type0$ och funktionen som avbildar $x01$ och $p01$ och $x11$ och $p1$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $a$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $a1$ och $x11$ applicerat på $a$ och $a2$ och $a2$ applicerat på $x0$ och $p0$ och $x1$ och $__$ och $t2$ och funktionen som avbildar $x0$ och $p0$ och $x1$ och $p1$ och $x2$ och $__$ som $cic.lift$ applicerat på $cic.prop$ och $univs.Type0$ och funktionen som avbildar $x01$ och $p01$ och $x11$ och $p11$ och $x21$ och $p2$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $a$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $b$ som $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $a1$ och funktionen som avbildar $c$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $a1$ och $x11$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $a1$ och $a2$ och $x01$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $a1$ och $a2$ och $x01$ och $x11$ applicerat på $a$ och $b$ och $x11$ applicerat på $a$ och $c$ applicerat på $x0$ och $p0$ och $x1$ och $p1$ och $x2$ och $__$ och $t3$ och $u0$ och $e0$ och $u1$ och $e1$ och $u2$ och $e2$ och $u3$ och funktionen som avbildar $_e3$ som $P$ och funktionen som avbildar $_z61$ som $P$ och $y$ och $x$.",
    "output": "postulate Dop_discr : (a1 : cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 a1) -> (x : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2)) -> (y : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop a1 a2)) x y)) -> cic.Term univs.Type2 (matita_arithmetics_bigops.match_Dop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) -> cic.univ univs.Type2) (\\ t0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ t1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ t2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t1 a a2) a2)) -> \\ t3 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> (c : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t1 a (matita_arithmetics_bigops.aop__o__op a1 a2 t0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 t0 (t1 a b) (t1 a c)))) -> matita_arithmetics_bigops.match_Dop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) -> cic.univ univs.Type2) (\\ u0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ u1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ u2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u1 a a2) a2)) -> \\ u3 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> (c : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u1 a (matita_arithmetics_bigops.aop__o__op a1 a2 u0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 u0 (u1 a b) (u1 a c)))) -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) u0) (\\ e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) u0) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 u0 e0) u1) (\\ e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 u0 e0) u1) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> \\ x1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a a2) a2)) u0 e0 u1 e1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 __)) t2 u0 e0 u1 e1) u2) (\\ e2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> \\ x1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a a2) a2)) u0 e0 u1 e1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 __)) t2 u0 e0 u1 e1) u2) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> \\ x1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> \\ x2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a a2) a2)) -> \\ p2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> \\ x10 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x00 p00)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x0 p0 x1 p1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : cic.Term univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.lift cic.prop univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> \\ x10 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x011 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p011 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x011) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x01 p01 x11 __)) t2 x0 p0 x1 p1) x2) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ c : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a (matita_arithmetics_bigops.aop__o__op a1 a2 x0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 x0 (x1 a b) (x1 a c)))))) u0 e0 u1 e1 u2 e2)) (matita_basics_logic.R3 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 __)) t2 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> \\ x2 : cic.Term cic.prop ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 p1) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 p1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : cic.Term univs.Type0 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.lift cic.prop univs.Type0 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> \\ x12 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x02 p02) x12) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x12 a a2) a2)) x01 p01 x11 __)) t2 x0 p0 x1 p1) x2) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> \\ x21 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) -> \\ p2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2))) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> \\ x12 : cic.Term univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) x02 p02) -> \\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) x02 p02)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x02 p02) x12) -> cic.lift cic.prop univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> \\ x10 : ((__2 : cic.Term univs.Type0 a1) -> (__3 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __3 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x011 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p011 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x011) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __3 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x02 p02 x12 __1)) t2 x01 p01 x11 p11) x21) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ c : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a (matita_arithmetics_bigops.aop__o__op a1 a2 x01 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __)) t3 u0 e0 u1 e1 u2 e2) u3) (\\ _e3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> \\ x1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> \\ x2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a a2) a2)) -> \\ p2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> \\ x10 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x00 p00)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x0 p0 x1 p1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : cic.Term univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.lift cic.prop univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> \\ x10 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x011 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p011 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x011) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x01 p01 x11 __)) t2 x0 p0 x1 p1) x2) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ c : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a (matita_arithmetics_bigops.aop__o__op a1 a2 x0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 x0 (x1 a b) (x1 a c)))))) u0 e0 u1 e1 u2 e2)) (matita_basics_logic.R3 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 __)) t2 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> \\ x2 : cic.Term cic.prop ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 p1) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 p1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : cic.Term univs.Type0 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.lift cic.prop univs.Type0 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> \\ x12 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x02 p02) x12) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x12 a a2) a2)) x01 p01 x11 __)) t2 x0 p0 x1 p1) x2) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> \\ x21 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) -> \\ p2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2))) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> \\ x12 : cic.Term univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) x02 p02) -> \\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) x02 p02)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x02 p02) x12) -> cic.lift cic.prop univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> \\ x10 : ((__2 : cic.Term univs.Type0 a1) -> (__3 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __3 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x011 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p011 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x011) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __3 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x02 p02 x12 __1)) t2 x01 p01 x11 p11) x21) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ c : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a (matita_arithmetics_bigops.aop__o__op a1 a2 x01 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __)) t3 u0 e0 u1 e1 u2 e2) u3) -> P))))) (\\ _z61 : ((e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) u0)) -> (e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 u0 e0) u1)) -> (e2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> \\ x1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a a2) a2)) u0 e0 u1 e1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 __)) t2 u0 e0 u1 e1) u2)) -> (_e3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x0) -> \\ x1 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> \\ x2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a a2) a2)) -> \\ p2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x00) -> \\ x10 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x00 p00)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x0 p0 x1 p1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : cic.Term univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.lift cic.prop univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> \\ x10 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x011 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p011 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x011) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x01 p01 x11 __)) t2 x0 p0 x1 p1) x2) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ c : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x1 a (matita_arithmetics_bigops.aop__o__op a1 a2 x0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 x0 (x1 a b) (x1 a c)))))) u0 e0 u1 e1 u2 e2)) (matita_basics_logic.R3 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 __)) t2 (\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x0) -> \\ x1 : cic.Term univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0) -> \\ p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x0 p0) x1) -> \\ x2 : cic.Term cic.prop ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 p1) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) x0 p0 x1 p1)) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : cic.Term univs.Type0 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01) -> \\ __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) x01 p01)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> cic.lift cic.prop univs.Type0 ((\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> \\ x12 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x02 p02) x12) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x12 a a2) a2)) x01 p01 x11 __)) t2 x0 p0 x1 p1) x2) -> cic.lift cic.prop univs.Type0 ((\\ x01 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p01 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x01) -> \\ x11 : ((__1 : cic.Term univs.Type0 a1) -> (__2 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x01 p01) x11) -> \\ x21 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2)) -> \\ p2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a a2) a2))) (matita_basics_logic.R2 (matita_arithmetics_bigops.ACop a1 a2) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 (\\ x02 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p02 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x02) -> \\ x12 : cic.Term univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) x02 p02) -> \\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) x02 p02)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> a1))) t1 x02 p02) x12) -> cic.lift cic.prop univs.Type0 ((\\ x00 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p00 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x00) -> \\ x10 : ((__2 : cic.Term univs.Type0 a1) -> (__3 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ p10 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __3 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 (\\ x011 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> \\ p011 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) t0 x011) -> cic.prod univs.Type0 univs.Type0 a1 (\\ __2 : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __3 : cic.Term univs.Type0 a1 -> a1))) t1 x00 p00) x10) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x10 a a2) a2)) x02 p02 x12 __1)) t2 x01 p01 x11 p11) x21) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ c : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (x11 a (matita_arithmetics_bigops.aop__o__op a1 a2 x01 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 x01 (x11 a b) (x11 a c)))))) x0 p0 x1 p1 x2 __)) t3 u0 e0 u1 e1 u2 e2) u3)) -> cic.Term univs.Type1 P) -> P))) y) x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type0_body. För alla element $_A$ och $_B$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_702$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_Prod$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$, för alla element $x_702$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_702$.",
    "output": "postulate Prod_rect_Type0_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type0) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type0 (Q_ x_702)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_a. For all elements $a$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $b$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.S$ applied to $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $matita_basics_bool.true$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.minus$ applied to $b$ and $a$ and the function that maps $i$ to the function that maps $i0$ to $matita_basics_bool.true$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to the function that maps $i0$ to $f$ applied to $matita_arithmetics_nat.S$ applied to $i0$ applied to $matita_arithmetics_nat.plus$ applied to $i$ and $a$ and $f$ applied to $a$.",
    "output": "postulate bigop_a : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b) a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus b a) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f (matita_arithmetics_nat.S i0)) (matita_arithmetics_nat.plus i a))) (f a)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_inv_rect_CProp0. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1296$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1297$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Prod_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1296 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1297 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1009. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $Hfn$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $n$ och $matita_basics_bool.false$, för alla element $Hmax$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_minimization.max$ applicerat på $m$ och $f$ och $n$, för alla element $Hmax0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $m$ och $f$ och $n$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $m$ och funktionen som avbildar $__$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $m$ och $f$ och $matita_arithmetics_nat.O$, för alla funktioner $auto$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$, för alla element $auto'$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $m$ och $f$ och $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$.",
    "output": "postulate let_clause_1009 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (Hfn : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f n) matita_basics_bool.false)) -> (Hmax : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.max m f) n)) -> (Hmax0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max m f) n)) -> (_clearme : cic.Term cic.prop (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i m) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i m) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max m f) matita_arithmetics_nat.O))) -> (auto : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> (auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max m f) matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp3_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_None$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_623$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_623$, pour tous les éléments $x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_622$.",
    "output": "postulate option_rect_CProp3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_623 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> (x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_622)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp4. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_614$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_None$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Låt $_H_Some$ vara en funktion från element $x_615$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_615$. Låt $x_614$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_614$.",
    "output": "postulate option_rect_CProp4 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_614 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_615 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_615))) -> (x_614 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_614)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Times_n_O. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $matita_arithmetics_nat.O$.",
    "output": "postulate times_n_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O (matita_arithmetics_nat.times n matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type1. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_16$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_17$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_16$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_refl$ vara ett element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Låt $x_16$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $x_17$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_16$. Då håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_16$ och $x_17$.",
    "output": "postulate eq_rect_Type1 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_16 : cic.Term univs.Type2 A) -> (_x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Univ univs.Type1) -> (_H_refl : cic.Term univs.Type1 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_16 : cic.Term univs.Type2 A) -> (x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Term univs.Type1 (Q_ x_16 x_17)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_divides. For all elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$, for all elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_bool.bool$.",
    "output": "postulate list_divides : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nth_opt. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.option$ applied to $A$.",
    "output": "postulate nth_opt : (A : cic.Univ univs.Type0) -> (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 (matita_basics_types.option A)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "All_mp. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $P$ et $Q$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $__$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q$ appliqué à $a$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.All$ appliqué à $A$ et $P$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.All$ appliqué à $A$ et $Q$ et $l$.",
    "output": "postulate All_mp : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q a)) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A P l)) -> cic.Term cic.prop (matita_basics_lists_list.All A Q l)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_map_some. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Then for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $A$, for all elements $v$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $B$ and $matita_basics_types.option_map$ applied to $A$ and $B$ and $f$ and $x$ and $matita_basics_types.Some$ applied to $B$ and $v$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and the function that maps $y$ to $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $matita_basics_types.Some$ applied to $A$ and $y$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $f$ applied to $y$ and $v$.",
    "output": "postulate option_map_some : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (x : cic.Term univs.Type0 (matita_basics_types.option A)) -> (v : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option B)) (matita_basics_types.option_map A B f x) (matita_basics_types.Some B v))) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ y : cic.Term univs.Type0 A -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x (matita_basics_types.Some A y)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f y) v)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ex_ind. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_235$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $A$ et $_P$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_ex_intro$ une fonction des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $x_236$ de $cic.Term$ de $cic.prop$ et de $_P$ appliqué à $x$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.ex_intro$ appliqué à $A$ et $_P$ et $x$ et $x_236$. Alors pour tous les éléments $x_235$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $A$ et $_P$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_235$.",
    "output": "postulate ex_ind : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_235 : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Univ cic.prop) -> (_H_ex_intro : (x : cic.Term univs.Type0 A) -> (x_236 : cic.Term cic.prop (_P x)) -> cic.Term cic.prop (Q_ (matita_basics_logic.ex_intro A _P x x_236))) -> (x_235 : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Term cic.prop (Q_ x_235)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Andb_elim. Let $b1$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all functions $P$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_bool.match_bool$ applied to $cic.type$ applied to $cic.z$ and the function that maps $__$ to $cic.univ$ applied to $cic.prop$ and $P$ applied to $b2$ and $P$ applied to $matita_basics_bool.false$ and $b1$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $matita_basics_bool.andb$ applied to $b1$ and $b2$.",
    "output": "postulate andb_elim : (b1 : cic.Term univs.Type0 matita_basics_bool.bool) -> (b2 : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (__ : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_bool.match_bool (cic.type cic.z) (\\ __ : cic.Term univs.Type0 matita_basics_bool.bool -> cic.univ cic.prop) (P b2) (P matita_basics_bool.false) b1)) -> cic.Term cic.prop (P (matita_basics_bool.andb b1 b2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Smallest_factor_to_prime. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_primes.smallest_factor$ applicerat på $n$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $n$.",
    "output": "postulate smallest_factor_to_prime : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor n) n)) -> cic.Term cic.prop (matita_arithmetics_primes.prime n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Congruent_n_mod_times. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $p$ och $p$.",
    "output": "postulate congruent_n_mod_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m p)) p)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Min_to_min_spec. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $b$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $n$ and $b$ and $f$ and $m$.",
    "output": "postulate min_to_min_spec : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min n b f) m)) -> cic.Term cic.prop (matita_arithmetics_minimization.min_spec n b f m)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_range. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_bigops.range$ appliqué à $A$.",
    "output": "postulate mk_range : (A : cic.Univ univs.Type0) -> (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (matita_arithmetics_bigops.range A)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1561. For all elements $p$ and $m$ and $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $gcd1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $nm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $p$ and $a$ and $matita_arithmetics_nat.times$ applied to $m$ and $b$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_1561 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a) (matita_arithmetics_nat.times m b)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Gcd_1_to_divides_times_to_divides. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $m$.",
    "output": "postulate gcd_1_to_divides_times_to_divides : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times n m))) -> cic.Term cic.prop (matita_arithmetics_primes.divides p m)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_CProp2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_766$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_nil$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$, för alla funktioner $_H_cons$ från element $x_768$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_767$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_770$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_767$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_768$ och $x_767$, för alla element $x_766$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_766$.",
    "output": "postulate list_rect_CProp2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_766 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_768 : cic.Term univs.Type0 _A) -> (x_767 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_770 : cic.Term cic.prop (Q_ x_767)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_768 x_767))) -> (x_766 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_766)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_666$.",
    "output": "postulate Sig_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type4) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type4 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type4 (Q_ x_666)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type0. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_702$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_mk_Prod$ vara en funktion från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$. Då för alla element $x_702$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_702$.",
    "output": "postulate Prod_rect_Type0 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type0) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type0 (Q_ x_702)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1617. Soient $p$ et $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Soit $gcd1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $nm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$. Soit $b$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$. Soit $H$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$. Alors pour tous les éléments $H0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $p$ et $a$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $b$.",
    "output": "postulate let_clause_1617 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a) (matita_arithmetics_nat.times m b)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_times_div_div_times. Låt $a$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $m$ och $matita_arithmetics_div_and_mod.div$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $m$.",
    "output": "postulate le_times_div_div_times : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.div n m)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times a n) m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F_ind. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.predicate$ appliqué à $A$, pour toutes les fonctions $__$ des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a$ et des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $a$.",
    "output": "postulate f_ind : (A : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : cic.Term univs.Type0 (matita_basics_relations.predicate A)) -> (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n)) -> cic.Term cic.prop (P a)) -> (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) n)) -> cic.Term cic.prop (P a)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (P a)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_p_ord_inv. Låt $p$ och $m$ och $x$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_ord.ord$ applicerat på $x$ och $p$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.div$ applicerat på $matita_arithmetics_ord.p_ord_inv$ applicerat på $p$ och $m$ och $x$ och $m$ och $matita_arithmetics_ord.ord_rem$ applicerat på $x$ och $p$.",
    "output": "postulate div_p_ord_inv : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_ord.ord x p) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div (matita_arithmetics_ord.p_ord_inv p m x) m) (matita_arithmetics_ord.ord_rem x p))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_inv_S_dx. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex2$ applicerat på $B$ och funktionen som avbildar $b$ som $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b$ och funktionen som avbildar $b$ som $R$ applicerat på $b$ och $b2$.",
    "output": "postulate lstar_inv_S_dx : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2)) -> cic.Term cic.prop (matita_basics_logic.ex2 B (\\ b : cic.Term univs.Type0 B -> matita_arithmetics_lstar.lstar B R l b1 b) (\\ b : cic.Term univs.Type0 B -> R b b2))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_previous_prime7. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $ltml$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_primes.nth_prime$ applied to $n$ and $m$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.",
    "output": "postulate let_previous_prime7 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltml : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n) m)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_exp_priml. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$.",
    "output": "postulate le_exp_priml : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_exp.exp (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type1. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_Sig$ vara en funktion från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$. Då för alla element $x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_674$.",
    "output": "postulate Sig_rect_Type1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type1) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type1 (Q_ x_674)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp5_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_877$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_877$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_877$.",
    "output": "postulate Aop_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_877 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_877 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_877)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Example4. $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_primes.primeb$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_bool.true$.",
    "output": "postulate example4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.primeb (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_CProp3. Låt $Q_$ vara en funktion från element $_x_401$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_O$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$. Låt $_H_S$ vara en funktion från element $x_402$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_404$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_402$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_402$. Låt $x_401$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_401$.",
    "output": "postulate nat_rect_CProp3 : (Q_ : (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_404 : cic.Term cic.prop (Q_ x_402)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_402))) -> (x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_401)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_CProp4_body. Let $Q_$ be a function from elements $_x_54$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_I$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.I$. Let $x_54$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_54$.",
    "output": "postulate True_rect_CProp4_body : (Q_ : (_x_54 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_54 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_54)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_CProp5. För alla element $_n$ och $_m$ och $_q$ och $_r$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $Q_$ från element $_x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_div_mod_spec_intro$ från element $x_843$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_842$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_843$ och $x_842$, för alla element $x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_841$.",
    "output": "postulate div_mod_spec_rect_CProp5 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) -> (_H_div_mod_spec_intro : (x_843 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_842 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_843 x_842))) -> (x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term cic.prop (Q_ x_841)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_unit. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $return_sort$. Let $case_it$ be an element of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.it$. Let $z$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Then $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate match_unit : (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ return_sort) -> (case_it : cic.Term return_sort (return_type matita_basics_types.it)) -> (z : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_rect_Type2_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_541$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type2$. Alors pour toutes les fonctions $_H_inl$ des éléments $x_542$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_542$, pour toutes les fonctions $_H_inr$ des éléments $x_543$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_543$, pour tous les éléments $x_541$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_541$.",
    "output": "postulate Sum_rect_Type2_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type2) -> (_H_inl : (x_542 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))) -> (_H_inr : (x_543 : cic.Term univs.Type0 _B) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))) -> (x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type2 (Q_ x_541)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Type. Om $Nat$, så $Sort$.",
    "output": "postulate type : Nat -> Sort"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_Type1. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z996$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från element $x_547$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_z997$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_547$ till element av $cic.Term$ av $univs.Type1$ och $P$ applicerat på $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_547$, för alla funktioner $_H2$ från element $x_548$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z997$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_548$ till element av $cic.Term$ av $univs.Type1$ och $P$ applicerat på $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_548$, håller $cic.Term$ för $univs.Type1$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Sum_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z996 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (x_547 : cic.Term univs.Type0 x1) -> (_z997 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_547))) -> cic.Term univs.Type1 (P (matita_basics_types.inl x1 x2 x_547))) -> (_H2 : (x_548 : cic.Term univs.Type0 x2) -> (_z997 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_548))) -> cic.Term univs.Type1 (P (matita_basics_types.inr x1 x2 x_548))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Max_spec_ind_body. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $Q_$ be a function from elements $x_971$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_972$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_971$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_found_max_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_975$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $_n$ and elements $x_974$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $x_973$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $m$ and $matita_arithmetics_minimization.found_max_spec$ applied to $_n$ and $_f$ and $m$ and $x_975$ and $x_974$ and $x_973$. Then for all functions $_H_not_found_max_spec$ from functions $x_976$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_minimization.not_found_max_spec$ applied to $_n$ and $_f$ and $x_976$, for all elements $x_971$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $x_972$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_971$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_971$ and $x_972$.",
    "output": "postulate max_spec_ind_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (Q_ : (x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Univ cic.prop) -> (_H_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_975 : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (x_974 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_973 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ m (matita_arithmetics_minimization.found_max_spec _n _f m x_975 x_974 x_973))) -> (_H_not_found_max_spec : (x_976 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O (matita_arithmetics_minimization.not_found_max_spec _n _f x_976))) -> (x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Term cic.prop (Q_ x_971 x_972)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_CProp0_body. Soit $Q_$ une fonction des éléments $_x_413$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_O$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.O$. Soit $_H_S$ une fonction des éléments $x_414$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_416$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_414$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.S$ appliqué à $x_414$. Soit $x_413$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_413$.",
    "output": "postulate nat_rect_CProp0_body : (Q_ : (_x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_414 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_416 : cic.Term cic.prop (Q_ x_414)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_414))) -> (x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_413)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_not_bertrand_to_bertrand1. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_chebyshev_bertrand.not_bertrand$ applied to $n$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $x$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $x$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, for all functions $__3$ from elements $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $x$ and $p$ and elements $__4$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.prime$ applied to $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $p$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_arithmetics_nat.lt$ applied to $n$ and $p$ and $matita_arithmetics_nat.le$ applied to $p$ and $x$ and $matita_arithmetics_primes.prime$ applied to $p$.",
    "output": "postulate not_not_bertrand_to_bertrand1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_chebyshev_bertrand.not_bertrand n))) -> (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n x)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le x (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (__3 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt x p)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.le p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.prime p))) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.lt n p) (matita_arithmetics_nat.le p x)) (matita_arithmetics_primes.prime p)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Position_of_aux_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_found$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $_l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Då för alla element $_acc$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.option$ applicerat på $matita_arithmetics_nat.nat$.",
    "output": "postulate position_of_aux_body : (A : cic.Univ univs.Type0) -> (_found : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (_acc : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_basics_types.option matita_arithmetics_nat.nat)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Decidable_not. Låt $P$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.decidable$ applicerat på $P$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.decidable$ applicerat på $matita_basics_logic.Not$ applicerat på $P$.",
    "output": "postulate decidable_not : (P : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.decidable P)) -> cic.Term cic.prop (matita_basics_logic.decidable (matita_basics_logic.Not P))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_Dop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$. Let $case_mk_Dop$ be a function from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$. Let $z$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate match_Dop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ return_sort) -> (case_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_Type3_body. Låt $Q_$ vara en funktion från element $_x_377$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_O$ vara ett element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_nat.O$. Då för alla funktioner $_H_S$ från element $x_378$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_380$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $x_378$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_378$, för alla element $x_377$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_377$.",
    "output": "postulate nat_rect_Type3_body : (Q_ : (_x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type3) -> (_H_O : cic.Term univs.Type3 (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_380 : cic.Term univs.Type3 (Q_ x_378)) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_nat.S x_378))) -> (x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type3 (Q_ x_377)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $len$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $lep$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$, pour tous les éléments $ltp$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $Hc$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$ et $matita_basics_bool.true$, pour tous les éléments $H2n$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) p)) matita_basics_bool.true)) -> (H2n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_B1_theta. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_chebyshev_bertrand.not_bertrand$ applicerat på $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_bertrand.B1$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_chebyshev_chebyshev_theta.theta$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate le_B1_theta : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))))))))))))) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand.not_bertrand n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_bertrand.B1 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Assoc. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $a$ et $b$ et $c$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $b$ et $c$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $b$ et $c$.",
    "output": "postulate assoc : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil xxx a (matita_arithmetics_bigops.op A nil xxx b c)) (matita_arithmetics_bigops.op A nil xxx (matita_arithmetics_bigops.op A nil xxx a b) c))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_875$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_875$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_875$.",
    "output": "postulate Aop_rect_CProp4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_875 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_875 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_875)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_4$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_4$ and $x_5$.",
    "output": "postulate eq_rect_Type4 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) -> (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_4 : cic.Term univs.Type2 A) -> (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Term univs.Type4 (Q_ x_4 x_5)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Then $cic.Univ$ holds for $cic.prop$.",
    "output": "postulate And : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_rect_CProp0. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z383$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $x_168$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_167$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z384$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_168$ och $x_167$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_168$ och $x_167$. Då håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate And_inv_rect_CProp0 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z383 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_168 : cic.Term cic.prop x1) -> (x_167 : cic.Term cic.prop x2) -> (_z384 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_168 x_167))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_168 x_167))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_inv_rect_CProp1. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$. Let $P$ be a function from elements $_z179$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z180$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.True$ and $Hterm$ and $matita_basics_logic.I$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.I$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate True_inv_rect_CProp1 : (Hterm : cic.Term cic.prop matita_basics_logic.True) -> (P : (_z179 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H1 : (_z180 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I)) -> cic.Term cic.prop (P matita_basics_logic.I)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_ind. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_638$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_638$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_638$.",
    "output": "postulate DPair_ind : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_638)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Times_n_O. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $matita_arithmetics_nat.O$.",
    "output": "postulate times_n_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O (matita_arithmetics_nat.times n matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exp_to_fact2. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_factorial.fact$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_factorial.fact$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.",
    "output": "postulate exp_to_fact2 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_exp.exp (matita_arithmetics_factorial.fact n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type3_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_867$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type3$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_867$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_867$.",
    "output": "postulate Aop_rect_Type3_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_867 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type3) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_867 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type3 (Q_ x_867)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Injective_notb. $cic.Term$ håller för $cic.prop$ och $matita_basics_relations.injective$ applicerat på $matita_basics_bool.bool$ och $matita_basics_bool.bool$ och $matita_basics_bool.notb$.",
    "output": "postulate injective_notb : cic.Term cic.prop (matita_basics_relations.injective matita_basics_bool.bool matita_basics_bool.bool matita_basics_bool.notb)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15691. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $d$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Alors pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $n$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $d$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15691 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n c) (matita_arithmetics_nat.times m d)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Transitive_le. $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.transitive$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.le$.",
    "output": "postulate transitive_le : cic.Term cic.prop (matita_basics_relations.transitive matita_arithmetics_nat.nat matita_arithmetics_nat.le)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_aux_to_not_mod_O. Soient $p$ et $n$ et $m$ et $q$ et $r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $p$, pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord_aux$ appliqué à $p$ et $n$ et $m$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $q$ et $r$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $r$ et $m$ et $matita_arithmetics_nat.O$.",
    "output": "postulate p_ord_aux_to_not_mod_O : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n p)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux p n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod r m) matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type2_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_951$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_mk_Dop$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ et $_null$ et $_distr$. Soit $x_951$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_951$.",
    "output": "postulate Dop_rect_Type2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_951 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type2) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_951 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type2 (Q_ x_951)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type5_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_919$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type5$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Then for all elements $x_919$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_919$.",
    "output": "postulate range_rect_Type5_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_919 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type5) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_919 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type5 (Q_ x_919)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "False_rect_CProp2. För alla funktioner $Q_$ från element $_x_76$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $cic.prop$, för alla element $x_76$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_76$.",
    "output": "postulate False_rect_CProp2 : (Q_ : (_x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_76)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_log2_sqrt. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_log.log$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_sqrt.sqrt$ appliqué à $n$.",
    "output": "postulate lt_log2_sqrt : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) n)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_sqrt.sqrt n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. För alla element $p$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $lt1p$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $m$ och $x2515$ och $x2516$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2515$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x2516$ och $matita_arithmetics_div_and_mod.div$ applicerat på $x2515$ och $x2516$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $x2515$ och $x2516$.",
    "output": "postulate let_clause_1033 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lt1p : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_Type4_body. Låt $Q_$ vara en funktion från element $_x_329$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_true$ vara ett element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_bool.true$. Då för alla element $_H_false$ av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_329$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_329$.",
    "output": "postulate bool_rect_Type4_body : (Q_ : (_x_329 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type4) -> (_H_true : cic.Term univs.Type4 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type4 (Q_ matita_basics_bool.false)) -> (x_329 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ x_329)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_forall_to_exists. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.decidable$ applied to $P$ applied to $i$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $cic.prod$ applied to $univs.Type0$ and $cic.prop$ and $matita_arithmetics_nat.nat$ and the function that maps $i$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and the function that maps $__1$ to $P$ applied to $i$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $i$ to $matita_basics_logic.And$ applied to $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and $matita_basics_logic.Not$ applied to $P$ applied to $i$.",
    "output": "postulate not_forall_to_exists : (P : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.decidable (P i))) -> (__1 : cic.Term cic.prop (matita_basics_logic.Not (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n) (\\ __1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> P i))))) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.Not (P i))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_not_bertrand_to_bertrand1. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_chebyshev_bertrand.not_bertrand$ applicerat på $n$. Låt $x$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $x$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $__3$ vara en funktion från element $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x$ och $p$ och element $__4$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.prime$ applicerat på $p$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $p$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $n$ och $p$ och $matita_arithmetics_nat.le$ applicerat på $p$ och $x$ och $matita_arithmetics_primes.prime$ applicerat på $p$.",
    "output": "postulate not_not_bertrand_to_bertrand1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_chebyshev_bertrand.not_bertrand n))) -> (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n x)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le x (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (__3 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt x p)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.le p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.prime p))) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.lt n p) (matita_arithmetics_nat.le p x)) (matita_arithmetics_primes.prime p)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Monotonic_iter2. För alla funktioner $g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $a$ och $i$ och $j$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $__$ från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x$ och $g$ applicerat på $x$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $j$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_iteration.iter$ applicerat på $matita_arithmetics_nat.nat$ och $g$ och $i$ och $a$ och $matita_arithmetics_iteration.iter$ applicerat på $matita_arithmetics_nat.nat$ och $g$ och $j$ och $a$.",
    "output": "postulate monotonic_iter2 : (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le x (g x))) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i j)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_iteration.iter matita_arithmetics_nat.nat g i a) (matita_arithmetics_iteration.iter matita_arithmetics_nat.nat g j a))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_Type4. För alla funktioner $Q_$ från element $_x_329$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type4$, för alla element $_H_true$ av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_329$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_329$.",
    "output": "postulate bool_rect_Type4 : (Q_ : (_x_329 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type4) -> (_H_true : cic.Term univs.Type4 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type4 (Q_ matita_basics_bool.false)) -> (x_329 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ x_329)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_CProp4_body. Låt $Q_$ vara en funktion från element $_x_347$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_true$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$. Låt $_H_false$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$. Låt $x_347$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_347$.",
    "output": "postulate bool_rect_CProp4_body : (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_347)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exp_sigma. Låt $n$ och $a$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $a$ och $matita_arithmetics_exp.exp$ applicerat på $a$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $i$ som $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate exp_sigma : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a)) (matita_arithmetics_exp.exp a (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.S matita_arithmetics_nat.O))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ord_rem. För alla element $__$ och $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.",
    "output": "postulate ord_rem : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp5. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_905$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_ACop$ une fonction des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$. Soit $x_905$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_905$.",
    "output": "postulate ACop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_905)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type1. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_138$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H_conj$ des éléments $x_140$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_139$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_140$ et $x_139$, pour tous les éléments $x_138$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_138$.",
    "output": "postulate And_rect_Type1 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type1) -> (_H_conj : (x_140 : cic.Term cic.prop _A) -> (x_139 : cic.Term cic.prop _B) -> cic.Term univs.Type1 (Q_ (matita_basics_logic.conj _A _B x_140 x_139))) -> (x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type1 (Q_ x_138)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$ à des éléments de $cic.Univ$ de $univs.Type4$, pour tous les éléments $_H_refl$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_4$ et $x_5$.",
    "output": "postulate eq_rect_Type4 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) -> (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_4 : cic.Term univs.Type2 A) -> (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Term univs.Type4 (Q_ x_4 x_5)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_eq_S. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $m$.",
    "output": "postulate not_eq_S : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $x1$. Then for all functions $P$ from elements $_z1308$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $x1$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H1$ from elements $_z1309$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $x1$ and $Hterm$ and $matita_basics_lists_list.nil$ applied to $x1$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $matita_basics_lists_list.nil$ applied to $x1$, for all functions $_H2$ from elements $x_723$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $x_722$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $x1$ and functions $_x_725$ from elements $_z1309$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $x1$ and $Hterm$ and $x_722$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $x_722$ and elements $_z1309$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $x1$ and $Hterm$ and $matita_basics_lists_list.cons$ applied to $x1$ and $x_723$ and $x_722$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $matita_basics_lists_list.cons$ applied to $x1$ and $x_723$ and $x_722$, $cic.Term$ holds for $univs.Type4$ and $P$ applied to $Hterm$.",
    "output": "postulate list_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (P : (_z1308 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> cic.Univ univs.Type4) -> (_H1 : (_z1309 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.nil x1))) -> cic.Term univs.Type4 (P (matita_basics_lists_list.nil x1))) -> (_H2 : (x_723 : cic.Term univs.Type0 x1) -> (x_722 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (_x_725 : (_z1309 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm x_722)) -> cic.Term univs.Type4 (P x_722)) -> (_z1309 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.cons x1 x_723 x_722))) -> cic.Term univs.Type4 (P (matita_basics_lists_list.cons x1 x_723 x_722))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type1. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_16$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_17$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_16$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_16$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_17$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_16$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_16$ et $x_17$.",
    "output": "postulate eq_rect_Type1 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_16 : cic.Term univs.Type2 A) -> (_x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Univ univs.Type1) -> (_H_refl : cic.Term univs.Type1 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_16 : cic.Term univs.Type2 A) -> (x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Term univs.Type1 (Q_ x_16 x_17)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp5_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_797$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $x_797$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_797$.",
    "output": "postulate Aop_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_797)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_Dop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.",
    "output": "postulate filter_Dop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_676$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_mk_Sig$ une fonction des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$. Soit $x_676$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_676$.",
    "output": "postulate Sig_rect_Type0 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type0) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type0 (Q_ x_676)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "M. Pour tous les éléments $_m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.",
    "output": "postulate M : (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Leq_sqrt_n. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $n$.",
    "output": "postulate leq_sqrt_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p1$ and $p2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $g1$ and $g2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $n1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Hind$ from functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$ and functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $g1$ applied to $i$ and $g2$ applied to $i$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_bigops.bigop$ applied to $n1$ and the function that maps $i$ to $p1$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $g1$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $n1$ and the function that maps $i$ to $p2$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $g2$ applied to $i$, for all functions $H1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.S$ applied to $n1$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$, for all functions $H2$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.S$ applied to $n1$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $g1$ applied to $i$ and $g2$ applied to $i$, for all elements $Hp2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $n1$ and $matita_basics_bool.true$, for all elements $Hp1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $n1$ and $matita_basics_bool.true$, for all elements $x2515$ and $x2516$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (g1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) -> (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_bigops.bigop n1 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g1 i)) (matita_arithmetics_bigops.bigop n1 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p2 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g2 i)))) -> (H1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n1))) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) -> (H2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n1))) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> (Hp2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 n1) matita_basics_bool.true)) -> (Hp1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 n1) matita_basics_bool.true)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_Type0. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_97$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $_H_nmk$ från funktioner $x_98$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_98$, för alla element $x_97$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_97$.",
    "output": "postulate Not_rect_Type0 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_97 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type0) -> (_H_nmk : (x_98 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type0 (Q_ (matita_basics_logic.nmk _A x_98))) -> (x_97 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term univs.Type0 (Q_ x_97)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type5_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_865$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type5$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_865$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_865$.",
    "output": "postulate Aop_rect_Type5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_865 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type5) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_865 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type5 (Q_ x_865)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_CProp3_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_761$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_nil$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$. Då för alla funktioner $_H_cons$ från element $x_763$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_762$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_765$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_762$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_763$ och $x_762$, för alla element $x_761$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_761$.",
    "output": "postulate list_rect_CProp3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_763 : cic.Term univs.Type0 _A) -> (x_762 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_765 : cic.Term cic.prop (Q_ x_762)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_763 x_762))) -> (x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_761)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eqb_false_to_not_eq. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.eqb$ appliqué à $n$ et $m$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $m$.",
    "output": "postulate eqb_false_to_not_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.eqb n m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_intro. Soient $n$ et $m$ et $q$ et $r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $r$ et $m$. Alors pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q$ et $m$ et $r$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $n$ et $m$ et $q$ et $r$.",
    "output": "postulate div_mod_spec_intro : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt r m)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r))) -> cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec n m q r)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type3_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_696$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_696$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_696$.",
    "output": "postulate Prod_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type3) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type3 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type3 (Q_ x_696)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1560$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des éléments $_z1561$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1560 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1561 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_filter_l. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $S$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $x$ vara ett element av $cic.Term$ av $univs.Type0$ och $S$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $S$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $x$ och $matita_basics_bool.true$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $S$ och $x$ och $l$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $S$ och $x$ och $matita_basics_lists_list.filter$ applicerat på $S$ och $f$ och $l$.",
    "output": "postulate mem_filter_l : (S : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 S) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (x : cic.Term univs.Type0 S) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f x) matita_basics_bool.true)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.mem S x l)) -> cic.Term cic.prop (matita_basics_lists_list.mem S x (matita_basics_lists_list.filter S f l))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type4_body. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $Q_$ des éléments $_x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H_div_mod_spec_intro$ des éléments $x_815$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_814$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_815$ et $x_814$, pour tous les éléments $x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_813$.",
    "output": "postulate div_mod_spec_rect_Type4_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type4) -> (_H_div_mod_spec_intro : (x_815 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_814 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_815 x_814))) -> (x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type4 (Q_ x_813)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type2_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type2$, for all elements $_H_None$ of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_603$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_603$, for all elements $x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_602$.",
    "output": "postulate option_rect_Type2_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type2) -> (_H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_603 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))) -> (x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type2 (Q_ x_602)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type2_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_951$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ et $_null$ et $_distr$, pour tous les éléments $x_951$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_951$.",
    "output": "postulate Dop_rect_Type2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_951 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type2) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_951 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type2 (Q_ x_951)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_Type3. Låt $Q_$ vara en funktion från element $_x_377$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_O$ vara ett element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_nat.O$. Låt $_H_S$ vara en funktion från element $x_378$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_380$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $x_378$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_378$. Låt $x_377$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_377$.",
    "output": "postulate nat_rect_Type3 : (Q_ : (_x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type3) -> (_H_O : cic.Term univs.Type3 (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_380 : cic.Term univs.Type3 (Q_ x_378)) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_nat.S x_378))) -> (x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type3 (Q_ x_377)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_previous_prime6. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $ltml$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_primes.nth_prime$ appliqué à $n$ et $m$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.",
    "output": "postulate let_previous_prime6 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltml : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n) m)) -> (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type4. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_891$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_891$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_891$.",
    "output": "postulate ACop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type4 (Q_ x_891)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type0. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_927$.",
    "output": "postulate range_rect_Type0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type0) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type0 (Q_ x_927)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_inv_rect_CProp3. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $P$ be a function from elements $_z695$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z696$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.O$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$. Let $_H2$ be a function from elements $x_402$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_x_404$ from elements $_z696$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $x_402$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $x_402$ and elements $_z696$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.S$ applied to $x_402$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.S$ applied to $x_402$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate nat_inv_rect_CProp3 : (Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (_z695 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H1 : (_z696 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term cic.prop (P matita_arithmetics_nat.O)) -> (_H2 : (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_404 : (_z696 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_402)) -> cic.Term cic.prop (P x_402)) -> (_z696 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_402))) -> cic.Term cic.prop (P (matita_arithmetics_nat.S x_402))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_S. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $m$.",
    "output": "postulate le_S : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Conf3. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $A$ et $B$, pour tous les éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate Conf3 : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_relations.relation2 A B)) -> (__1 : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_CProp2. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1020$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $x_572$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1021$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_572$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_572$. Then for all functions $_H2$ from elements $x_573$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z1021$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_573$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_573$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Sum_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z1020 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_572 : cic.Term univs.Type0 x1) -> (_z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_572))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_572))) -> (_H2 : (x_573 : cic.Term univs.Type0 x2) -> (_z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_573))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_573))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_upper_bound3. Låt $n$ och $m$ och $x$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.",
    "output": "postulate let_upper_bound3 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem. Låt $H$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $__$ av $cic.Term$ av $univs.Type0$ och $H$, för alla element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$, håller $cic.Univ$ för $cic.prop$.",
    "output": "postulate mem : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 H) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop. Soit $__$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__1$ une fonction des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $H$ un élément de $cic.Univ$ de $univs.Type0$. Soit $__2$ un élément de $cic.Term$ de $univs.Type0$ et de $H$. Soit $__3$ une fonction des éléments $__3$ de $cic.Term$ de $univs.Type0$ et de $H$ et des éléments $__4$ de $cic.Term$ de $univs.Type0$ et de $H$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$. Alors pour toutes les fonctions $__4$ des éléments $__4$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$, $cic.Term$ tient pour $univs.Type0$ et $H$.",
    "output": "postulate bigop : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (H : cic.Univ univs.Type0) -> (__2 : cic.Term univs.Type0 H) -> (__3 : (__3 : cic.Term univs.Type0 H) -> (__4 : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H) -> (__4 : (__4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 H) -> cic.Term univs.Type0 H"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_min_spec. Låt $_n$ och $_b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.min_spec$ applicerat på $_n$ och $_b$ och $_f$ och $__$ till element av $cic.Univ$ av $return_sort$. Låt $case_found_min_spec$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_b$ och $m$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $matita_arithmetics_nat.plus$ applicerat på $_n$ och $_b$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $__3$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_b$ och $i$ och element $__4$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $m$ och $matita_arithmetics_minimization.found_min_spec$ applicerat på $_n$ och $_b$ och $_f$ och $m$ och $__$ och $__1$ och $__2$ och $__3$. Låt $case_not_found_min_spec$ vara en funktion från funktioner $__$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_b$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_nat.plus$ applicerat på $_n$ och $_b$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $_n$ och $_b$ och $matita_arithmetics_minimization.not_found_min_spec$ applicerat på $_n$ och $_b$ och $_f$ och $__$. Då för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.min_spec$ applicerat på $_n$ och $_b$ och $_f$ och $__$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $__$ och $z$.",
    "output": "postulate match_min_spec : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f __)) -> cic.Univ return_sort) -> (case_found_min_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus _n _b))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3))) -> (case_not_found_min_spec : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus _n _b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus _n _b) (matita_arithmetics_minimization.not_found_min_spec _n _b _f __))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f __)) -> cic.Term return_sort (return_type __ z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_CProp0. Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_115$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_nmk$ from functions $x_116$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_116$, for all elements $x_115$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_115$.",
    "output": "postulate Not_rect_CProp0 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_115 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_116 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_116))) -> (x_115 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_115)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_863$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $x_863$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_863$.",
    "output": "postulate Aop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type4 (Q_ x_863)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ord_ord_rem. For all elements $p$ and $q$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $q$, for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $q$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord$ applied to $matita_arithmetics_ord.ord_rem$ applied to $m$ and $p$ and $q$ and $matita_arithmetics_ord.ord$ applied to $m$ and $q$.",
    "output": "postulate ord_ord_rem : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.prime q)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt q p)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord (matita_arithmetics_ord.ord_rem m p) q) (matita_arithmetics_ord.ord m q))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type1_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_899$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_899$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_899$.",
    "output": "postulate ACop_rect_Type1_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type1 (Q_ x_899)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp2_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_801$.",
    "output": "postulate Aop_rect_CProp2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_801)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Rev_append_body. Låt $H$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $__$ och $__1$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$.",
    "output": "postulate rev_append_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Term univs.Type0 (matita_basics_lists_list.list H)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_inv_rect_Type2. Pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, pour toutes les fonctions $P$ des éléments $_z924$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H1$ des éléments $_z925$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $Hterm$.",
    "output": "postulate unit_inv_rect_Type2 : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z924 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type2) -> (_H1 : (_z925 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term univs.Type2 (P matita_basics_types.it)) -> cic.Term univs.Type2 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_686$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Then for all elements $x_686$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_686$.",
    "output": "postulate Sig_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_686)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_CProp1. Pour tous les éléments $x1$ et $x2$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1026$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $x_577$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1027$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_577$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_577$, pour toutes les fonctions $_H2$ des éléments $x_578$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1027$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_578$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_578$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Sum_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z1026 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_577 : cic.Term univs.Type0 x1) -> (_z1027 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_577))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_577))) -> (_H2 : (x_578 : cic.Term univs.Type0 x2) -> (_z1027 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_578))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_578))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_log_n_n. Let $p$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_log.log$ applied to $p$ and $n$ and $n$.",
    "output": "postulate lt_log_n_n : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_log.log p n) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_map. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $f$ och $g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla funktioner $__$ från element $x$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $f$ applicerat på $x$ och $g$ applicerat på $x$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $B$ och $matita_basics_lists_list.map$ applicerat på $A$ och $B$ och $f$ och $l$ och $matita_basics_lists_list.map$ applicerat på $A$ och $B$ och $g$ och $l$.",
    "output": "postulate eq_map : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (g : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : (x : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f x) (g x))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list B)) (matita_basics_lists_list.map A B f l) (matita_basics_lists_list.map A B g l))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Times_exp. For all elements $n$ and $m$ and $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $n$ and $p$ and $matita_arithmetics_exp.exp$ applied to $m$ and $p$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.times$ applied to $n$ and $m$ and $p$.",
    "output": "postulate times_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp n p) (matita_arithmetics_exp.exp m p)) (matita_arithmetics_exp.exp (matita_arithmetics_nat.times n m) p))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_Type2_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_646$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_646$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_646$.",
    "output": "postulate DPair_rect_Type2_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_646 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type2) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type2 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_646 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type2 (Q_ x_646)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_Aop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$. Alors pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.",
    "output": "postulate match_Aop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort) -> (case_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16003. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Då för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $c$.",
    "output": "postulate let_clause_16003 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp1_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_686$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Sig$ vara en funktion från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$. Låt $x_686$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_686$.",
    "output": "postulate Sig_rect_CProp1_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_686)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_CProp3. För alla funktioner $Q_$ från element $_x_401$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_O$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$, för alla funktioner $_H_S$ från element $x_402$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_404$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_402$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_402$, för alla element $x_401$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_401$.",
    "output": "postulate nat_rect_CProp3 : (Q_ : (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_404 : cic.Term cic.prop (Q_ x_402)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_402))) -> (x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_401)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15623. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $d$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Alors pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $m$ et $d$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $c$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15623 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_inv_rect_CProp3. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1278$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H1$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1279$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Prod_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1278 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1279 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Times_pi. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla funktioner $f$ och $g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $matita_arithmetics_nat.times$ applicerat på $f$ applicerat på $i$ och $g$ applicerat på $i$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $g$ applicerat på $i$.",
    "output": "postulate times_pi : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times (f i) (g i))) (matita_arithmetics_nat.times (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g i))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_rect_Type1. Låt $Q_$ vara en funktion från element $_x_505$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $univs.Type1$. Då för alla element $_H_it$ av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.it$, för alla element $x_505$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_505$.",
    "output": "postulate unit_rect_Type1 : (Q_ : (_x_505 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type1) -> (_H_it : cic.Term univs.Type1 (Q_ matita_basics_types.it)) -> (x_505 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term univs.Type1 (Q_ x_505)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_inv_rect_Type0. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$, for all functions $P$ from elements $_z1662$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H1$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $_z1663$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.range$ applied to $x1$ and $Hterm$ and $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.",
    "output": "postulate range_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> (P : (_z1662 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ univs.Type0) -> (_H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1663 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type3. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_787$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type3$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_787$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_787$.",
    "output": "postulate Aop_rect_Type3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type3) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type3 (Q_ x_787)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_Type3. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $P$ une fonction des éléments $_z599$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $univs.Type3$. Soit $_H1$ une fonction des éléments $_z600$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.true$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_basics_bool.true$. Soit $_H2$ une fonction des éléments $_z600$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_basics_bool.false$. Alors $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.",
    "output": "postulate bool_inv_rect_Type3 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z599 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type3) -> (_H1 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type3 (P matita_basics_bool.true)) -> (_H2 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type3 (P matita_basics_bool.false)) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_Type0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_650$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_DPair$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$, för alla element $x_650$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_650$.",
    "output": "postulate DPair_rect_Type0 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type0) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type0 (Q_ x_650)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_ex2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soient $_P$ et $_Q$ des fonctions des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex2$ appliqué à $A$ et $_P$ et $_Q$ à des éléments de $cic.Univ$ de $return_sort$. Alors pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex2$ appliqué à $A$ et $_P$ et $_Q$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex2$ appliqué à $A$ et $_P$ et $_Q$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.",
    "output": "postulate filter_ex2 : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_801$.",
    "output": "postulate Aop_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_801)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Or_intror. Pour tous les éléments $A$ et $B$ de $cic.Univ$ de $cic.prop$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $B$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Or$ appliqué à $A$ et $B$.",
    "output": "postulate or_intror : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (__ : cic.Term cic.prop B) -> cic.Term cic.prop (matita_basics_logic.Or A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_to_leb_true. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_nat.leb$ applied to $n$ and $m$ and $matita_basics_bool.true$.",
    "output": "postulate le_to_leb_true : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Log_exp. För alla element $p$ och $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $n$ och $m$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $m$.",
    "output": "postulate log_exp : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p n) m)) (matita_arithmetics_nat.plus n (matita_arithmetics_log.log p m)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_CProp1. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_965$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$, för alla element $x_965$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_965$.",
    "output": "postulate Dop_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_965 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_965 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_965)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_inv_rect_CProp4. Soit $x1$ un élément de $cic.Univ$ de $cic.prop$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$. Alors pour toutes les fonctions $P$ des éléments $_z293$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $x_101$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ et des éléments $_z294$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.Not$ appliqué à $x1$ et $Hterm$ et $matita_basics_logic.nmk$ appliqué à $x1$ et $x_101$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_logic.nmk$ appliqué à $x1$ et $x_101$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Not_inv_rect_CProp4 : (x1 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) -> (P : (_z293 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ cic.prop) -> (_H1 : (x_101 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z294 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_101))) -> cic.Term cic.prop (P (matita_basics_logic.nmk x1 x_101))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_upper_bound5. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $ltml$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_primes.nth_prime$ applied to $n$ and $m$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.",
    "output": "postulate let_upper_bound5 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltml : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n) m)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mod_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $n$ et $matita_arithmetics_nat.O$.",
    "output": "postulate mod_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n n) matita_arithmetics_nat.O)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_ind_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_638$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_DPair$ be a function from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$. Then for all elements $x_638$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_638$.",
    "output": "postulate DPair_ind_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_638)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ld_to_prime. Låt $i$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $acc$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $i$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_chebyshev_bertrand256.primes_below$ applicerat på $acc$ och $i$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_chebyshev_bertrand256.list_divides$ applicerat på $acc$ och $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $i$.",
    "output": "postulate ld_to_prime : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below acc i)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_primes.prime i)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Length_tail1. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_basics_lists_list.length$ applicerat på $A$ och $matita_basics_lists_list.tail$ applicerat på $A$ och $l$ och $matita_basics_lists_list.length$ applicerat på $A$ och $l$.",
    "output": "postulate length_tail1 : (A : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O (matita_basics_lists_list.length A l))) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_basics_lists_list.length A (matita_basics_lists_list.tail A l)) (matita_basics_lists_list.length A l))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_CProp0_body. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_776$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_nil$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_778$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_777$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_780$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_777$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_778$ et $x_777$, pour tous les éléments $x_776$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_776$.",
    "output": "postulate list_rect_CProp0_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_778 : cic.Term univs.Type0 _A) -> (x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_780 : cic.Term cic.prop (Q_ x_777)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_778 x_777))) -> (x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_776)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_Type3. Let $Q_$ be a function from elements $_x_46$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_I$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_logic.I$. Let $x_46$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$. Then $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_46$.",
    "output": "postulate True_rect_Type3 : (Q_ : (_x_46 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type3) -> (_H_I : cic.Term univs.Type3 (Q_ matita_basics_logic.I)) -> (x_46 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term univs.Type3 (Q_ x_46)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Log_div. For all elements $p$ and $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_log.log$ applied to $p$ and $matita_arithmetics_div_and_mod.div$ applied to $n$ and $m$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_log.log$ applied to $p$ and $n$ and $matita_arithmetics_log.log$ applied to $p$ and $m$.",
    "output": "postulate log_div : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_div_and_mod.div n m)) (matita_arithmetics_nat.minus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_commute. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p11$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p12$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p21$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p22$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $op$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla funktioner $__2$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $j$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $j$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_basics_bool.andb$ applicerat på $p11$ applicerat på $i$ och $p12$ applicerat på $i$ och $j$ och $matita_basics_bool.andb$ applicerat på $p21$ applicerat på $j$ och $p22$ applicerat på $i$ och $j$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p11$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $matita_arithmetics_bigops.bigop$ applicerat på $m$ och funktionen som avbildar $j$ som $p12$ applicerat på $i$ och $j$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $j$ som $f$ applicerat på $i$ och $j$ och $matita_arithmetics_bigops.bigop$ applicerat på $m$ och funktionen som avbildar $j$ som $p21$ applicerat på $j$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $j$ som $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p22$ applicerat på $i$ och $j$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $j$.",
    "output": "postulate bigop_commute : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p11 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p12 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p21 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p22 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt j m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.andb (p11 i) (p12 i j)) (matita_basics_bool.andb (p21 j) (p22 i j)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p11 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop m (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p12 i j) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i j))) (matita_arithmetics_bigops.bigop m (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p21 j) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p22 i j) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i j))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_map. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $l$. Soit $__1$ une fonction des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q$ appliqué à $f$ appliqué à $a$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $B$ et $Q$ et $matita_basics_lists_list.map$ appliqué à $A$ et $B$ et $f$ et $l$.",
    "output": "postulate Exists_map : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q (f a))) -> cic.Term cic.prop (matita_basics_lists_list.Exists B Q (matita_basics_lists_list.map A B f l))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_899$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_899$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_899$.",
    "output": "postulate ACop_rect_Type1_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type1 (Q_ x_899)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15623. For all elements $m$ and $n$ and $a$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $pnm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15623 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_CProp0_body. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_166$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_conj$ des éléments $x_168$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_167$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_168$ et $x_167$, pour tous les éléments $x_166$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_166$.",
    "output": "postulate And_rect_CProp0_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop) -> (_H_conj : (x_168 : cic.Term cic.prop _A) -> (x_167 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_168 x_167))) -> (x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term cic.prop (Q_ x_166)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_905$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_905$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_905$.",
    "output": "postulate ACop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_905)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$. Let $P$ be a function from elements $_z1686$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $_z1687$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.range$ applied to $x1$ and $Hterm$ and $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate range_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> (P : (_z1686 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ cic.prop) -> (_H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1687 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Confluent1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_relations.predicate$ applied to $A$.",
    "output": "postulate confluent1 : (A : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> cic.Term univs.Type0 (matita_basics_relations.predicate A)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_Type4. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z978$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$. Alors pour toutes les fonctions $_H1$ des éléments $x_527$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z979$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_527$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_527$, pour toutes les fonctions $_H2$ des éléments $x_528$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z979$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_528$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_528$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Sum_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z978 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (x_527 : cic.Term univs.Type0 x1) -> (_z979 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_527))) -> cic.Term univs.Type4 (P (matita_basics_types.inl x1 x2 x_527))) -> (_H2 : (x_528 : cic.Term univs.Type0 x2) -> (_z979 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_528))) -> cic.Term univs.Type4 (P (matita_basics_types.inr x1 x2 x_528))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type0_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_676$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_mk_Sig$ une fonction des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$. Alors pour tous les éléments $x_676$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_676$.",
    "output": "postulate Sig_rect_Type0_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type0) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type0 (Q_ x_676)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_lstar_r. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__1$ and $__2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $cic.Univ$ of $return_sort$. Then for all functions $return$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $__$ and $__1$ and $__2$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate filter_lstar_r : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_rect_Type4. Låt $x1$ och $x2$ och $x3$ och $x4$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$. Då för alla funktioner $P$ från element $_z1440$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H1$ från element $x_815$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x4$ och $x2$ och element $x_814$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x1$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x3$ och $x2$ och $x4$ och element $_z1441$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $Hterm$ och $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_815$ och $x_814$ till element av $cic.Term$ av $univs.Type4$ och $P$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_815$ och $x_814$, håller $cic.Term$ för $univs.Type4$ och $P$ applicerat på $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type4 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1440 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ univs.Type4) -> (_H1 : (x_815 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_814 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1441 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_815 x_814))) -> cic.Term univs.Type4 (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_815 x_814))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_min. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $b$ et $matita_basics_bool.true$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_minimization.min$ appliqué à $n$ et $b$ et $f$ et $b$.",
    "output": "postulate true_min : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f b) matita_basics_bool.true)) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min n b f) b)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_rect_CProp2. Soient $x1$ et $x2$ et $x3$ et $x4$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$. Alors pour toutes les fonctions $P$ des éléments $_z1482$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $x_851$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $x4$ et $x2$ et des éléments $x_850$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x1$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x3$ et $x2$ et $x4$ et des éléments $_z1483$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $Hterm$ et $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_851$ et $x_850$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_851$ et $x_850$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp2 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1482 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop) -> (_H1 : (x_851 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_850 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1483 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Contract_pair. Pour tous les éléments $A$ et $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $e$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $A$ et $B$ et $matita_basics_types.match_Prod$ appliqué à $A$ et $B$ et $univs.Type0$ et la fonction qui envoie $__$ à $matita_basics_types.Prod$ appliqué à $A$ et $B$ et la fonction qui envoie $a$ et $b$ à $matita_basics_types.mk_Prod$ appliqué à $A$ et $B$ et $a$ et $b$ et $e$ et $e$.",
    "output": "postulate contract_pair : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (e : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.match_Prod A B univs.Type0 (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> matita_basics_types.Prod A B) (\\ a : cic.Term univs.Type0 A -> \\ b : cic.Term univs.Type0 B -> matita_basics_types.mk_Prod A B a b) e) e)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp4. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_795$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_795$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_795$.",
    "output": "postulate Aop_rect_CProp4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_795)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_inv_rect_CProp3. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$. Let $P$ be a function from elements $_z1080$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $_z1081$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$, for all functions $_H2$ from elements $x_623$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1081$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_623$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_623$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate option_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1080 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1081 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_623 : cic.Term univs.Type0 x1) -> (_z1081 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_623))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_623))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bc2. Låt $n$ och $k$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_factorial.fact$ applicerat på $k$ och $matita_arithmetics_factorial.fact$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $n$ och $k$ och $matita_arithmetics_factorial.fact$ applicerat på $n$.",
    "output": "postulate bc2 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le k n)) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times (matita_arithmetics_factorial.fact k) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.minus n k))) (matita_arithmetics_factorial.fact n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_add. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $l1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.cons$ applied to $A$ and $x$ and $l2$.",
    "output": "postulate Exists_add : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (x : cic.Term univs.Type0 A) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_10471. Låt $n1$ och $n2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ och $p2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$. Låt $f1$ och $f2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.iso$ applicerat på $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$, för alla funktioner $h$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $__$ som $matita_arithmetics_nat.nat$ och funktionen som avbildar $k$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.And$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n1$ och funktionen som avbildar $__$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ och funktionen som avbildar $__1$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $f1$ applicerat på $i$ och $f2$ applicerat på $h$ applicerat på $i$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h$ och $k$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $k$ och $h$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$, för alla funktioner $k$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_basics_logic.And$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n1$ och funktionen som avbildar $__$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ och funktionen som avbildar $__1$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $f1$ applicerat på $i$ och $f2$ applicerat på $h$ applicerat på $i$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h$ och $k$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $k$ och $h$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$, för alla element $_clearme2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n1$ och funktionen som avbildar $__$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ och funktionen som avbildar $__1$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $f1$ applicerat på $i$ och $f2$ applicerat på $h$ applicerat på $i$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h$ och $k$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$, för alla funktioner $same$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n1$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $f1$ applicerat på $i$ och $f2$ applicerat på $h$ applicerat på $i$, för alla element $i$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $Hind$ från funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.O$ och $n1$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h$ och $k$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $matita_arithmetics_nat.O$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $m$ och $f$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $k$ och $h$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $m$ och $f$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $matita_arithmetics_nat.O$ och $p1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.O$ och funktionen som avbildar $i0$ som $p1$ applicerat på $i0$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i0$ som $f1$ applicerat på $i0$ och $matita_arithmetics_bigops.bigop$ applicerat på $m$ och funktionen som avbildar $i0$ som $f$ applicerat på $i0$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i0$ som $f2$ applicerat på $i0$, för alla funktioner $p20$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.O$ och $n1$, för alla element $sub1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h$ och $k$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $matita_arithmetics_nat.O$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $matita_arithmetics_nat.S$ applicerat på $m$ och $p20$, för alla element $sub2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $k$ och $h$ och $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $matita_arithmetics_nat.S$ applicerat på $m$ och $p20$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $matita_arithmetics_nat.O$ och $p1$, för alla element $x2571$ och $x2572$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2571$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x2572$ och $matita_arithmetics_div_and_mod.div$ applicerat på $x2571$ och $x2572$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $x2571$ och $x2572$.",
    "output": "postulate let_clause_10471 : (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (_clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) -> (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (\\ __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.nat)) (\\ k : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> matita_basics_logic.And (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n1) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1) -> cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))))) (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 n2 p2) (matita_arithmetics_bigops.mk_range B f1 n1 p1))))) -> (k : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n1) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1) -> cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))))) (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 n2 p2) (matita_arithmetics_bigops.mk_range B f1 n1 p1)))) -> (_clearme2 : cic.Term cic.prop (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n1) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1) -> cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))))) (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)))) -> (same : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) -> (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1) (matita_arithmetics_bigops.mk_range B f2 m f))) -> (__2 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 m f) (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 i0) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f1 i0)) (matita_arithmetics_bigops.bigop m (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f2 i0)))) -> (p20 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) -> (sub1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1) (matita_arithmetics_bigops.mk_range B f2 (matita_arithmetics_nat.S m) p20))) -> (sub2 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 (matita_arithmetics_nat.S m) p20) (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1))) -> (x2571 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2572 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2571 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2572 (matita_arithmetics_div_and_mod.div x2571 x2572)) (matita_arithmetics_div_and_mod.mod x2571 x2572)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_CProp4_body. For all functions $Q_$ from elements $_x_347$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_true$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_347$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_347$.",
    "output": "postulate bool_rect_CProp4_body : (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_347)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_mop. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $B$ och $nil$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $a$ och $_x_969$ och $_x_970$ av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $univs.Type0$ och $B$.",
    "output": "postulate let_mop : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (R : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (a : cic.Term univs.Type0 B) -> (_x_969 : cic.Term univs.Type0 B) -> (_x_970 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_r_ind_body. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $Q_$ vara en funktion från element $x_1337$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_1336$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1335$ av $cic.Term$ av $univs.Type0$ och $B$ och element $_x_1338$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $x_1337$ och $x_1336$ och $x_1335$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_lstar_r_O$ vara en funktion från element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$ och $b$ och $b$ och $matita_arithmetics_lstar.lstar_r_O$ applicerat på $B$ och $_R$ och $b$. Då för alla funktioner $_H_lstar_r_S$ från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1340$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $l$ och $b1$ och $b$ och element $b2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1339$ av $cic.Term$ av $cic.prop$ och $_R$ applicerat på $b$ och $b2$ och element $_x_1342$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $l$ och $b1$ och $b$ och $x_1340$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$ och $matita_arithmetics_lstar.lstar_r_S$ applicerat på $B$ och $_R$ och $l$ och $b1$ och $b$ och $x_1340$ och $b2$ och $x_1339$, för alla element $x_1337$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $x_1336$ och $x_1335$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $x_1338$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $x_1337$ och $x_1336$ och $x_1335$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_1337$ och $x_1336$ och $x_1335$ och $x_1338$.",
    "output": "postulate lstar_r_ind_body : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (Q_ : (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (_x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Univ cic.prop) -> (_H_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (_H_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1340 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (x_1339 : cic.Term cic.prop (_R b b2)) -> (_x_1342 : cic.Term cic.prop (Q_ l b1 b x_1340)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b x_1340 b2 x_1339))) -> (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Term cic.prop (Q_ x_1337 x_1336 x_1335 x_1338)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_Dop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $nil$, pour toutes les fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $nil$ et $nil$, pour toutes les fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $nil$.",
    "output": "postulate mk_Dop : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a nil) nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A nil sum b c)) (matita_arithmetics_bigops.aop__o__op A nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_927$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_927$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_927$.",
    "output": "postulate range_rect_Type0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type0) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type0 (Q_ x_927)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Min_spec_ind_body. Soient $_n$ et $_b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $Q_$ une fonction des éléments $x_1075$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_1076$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $x_1075$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_found_min_spec$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_1080$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_b$ et $m$ et des éléments $x_1079$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $matita_arithmetics_nat.plus$ appliqué à $_n$ et $_b$ et des éléments $x_1078$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $_f$ appliqué à $m$ et $matita_basics_bool.true$ et des fonctions $x_1077$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_b$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $_f$ appliqué à $i$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $m$ et $matita_arithmetics_minimization.found_min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $m$ et $x_1080$ et $x_1079$ et $x_1078$ et $x_1077$. Soit $_H_not_found_min_spec$ une fonction des fonctions $x_1081$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_b$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $_n$ et $_b$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $_f$ appliqué à $i$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $_n$ et $_b$ et $matita_arithmetics_minimization.not_found_min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $x_1081$. Soit $x_1075$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $x_1076$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $x_1075$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_1075$ et $x_1076$.",
    "output": "postulate min_spec_ind_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (Q_ : (x_1075 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1076 : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f x_1075)) -> cic.Univ cic.prop) -> (_H_found_min_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le _b m)) -> (x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus _n _b))) -> (x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ m (matita_arithmetics_minimization.found_min_spec _n _b _f m x_1080 x_1079 x_1078 x_1077))) -> (_H_not_found_min_spec : (x_1081 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus _n _b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.plus _n _b) (matita_arithmetics_minimization.not_found_min_spec _n _b _f x_1081))) -> (x_1075 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1076 : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f x_1075)) -> cic.Term cic.prop (Q_ x_1075 x_1076)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_ind. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1104$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1105$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate DPair_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1104 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1105 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_686$.",
    "output": "postulate Sig_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_686)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp4. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_652$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_DPair$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$, för alla element $x_652$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_652$.",
    "output": "postulate DPair_rect_CProp4 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_652)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_17041. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $a$ and $x1029$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1029$ and $matita_arithmetics_bigops.aop__o__op$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_sigma_pi.plusAC$ and $x1029$ and $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_17041 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x1029 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $len$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $p$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lep$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_sqrt.sqrt$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $p$. Let $ltp$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $p$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $Hc$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_nat.leb$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_chebyshev_bertrand.k$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $p$ and $matita_basics_bool.true$. Let $H2n$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $x2515$ and $x2516$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) p)) matita_basics_bool.true)) -> (H2n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_Type0. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_650$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_650$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_650$.",
    "output": "postulate DPair_rect_Type0 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type0) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type0 (Q_ x_650)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1013. För alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $n$ och $m$ och $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $Hind$ från element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $i$ och $f$ och $m$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.O$, för alla element $fi$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$, för alla element $eqm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $i$ och $m$, för alla element $fm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_basics_bool.false$ och $matita_basics_bool.true$.",
    "output": "postulate let_clause_1013 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max i f) m)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)) -> (fi : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)) -> (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i m)) -> (fm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) matita_basics_bool.false matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_Type1. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z611$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H1$ be a function from elements $_z612$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_basics_bool.true$. Then for all functions $_H2$ from elements $_z612$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $univs.Type1$ and $P$ applied to $Hterm$.",
    "output": "postulate bool_inv_rect_Type1 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z611 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type1) -> (_H1 : (_z612 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type1 (P matita_basics_bool.true)) -> (_H2 : (_z612 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type1 (P matita_basics_bool.false)) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type4_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_590$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_None$ be an element of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$. Let $_H_Some$ be a function from elements $x_591$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_591$. Let $x_590$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$. Then $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_590$.",
    "output": "postulate option_rect_Type4_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_590 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type4) -> (_H_None : cic.Term univs.Type4 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_591 : cic.Term univs.Type0 _A) -> cic.Term univs.Type4 (Q_ (matita_basics_types.Some _A x_591))) -> (x_590 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type4 (Q_ x_590)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dividesb. Låt $__$ och $__1$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.",
    "output": "postulate dividesb : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Breakup_pair. För alla element $A$ och $B$ och $C$ av $cic.Univ$ av $univs.Type0$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla funktioner $R$ från element $__$ av $cic.Term$ av $univs.Type0$ och $C$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $R$ applicerat på $P$ applicerat på $matita_basics_types.fst$ applicerat på $A$ och $B$ och $x$ och $matita_basics_types.snd$ applicerat på $A$ och $B$ och $x$, håller $cic.Term$ för $cic.prop$ och $R$ applicerat på $matita_basics_types.match_Prod$ applicerat på $A$ och $B$ och $univs.Type0$ och funktionen som avbildar $_0$ som $C$ och funktionen som avbildar $a$ och $b$ som $P$ applicerat på $a$ och $b$ och $x$.",
    "output": "postulate breakup_pair : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (x : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (R : (__ : cic.Term univs.Type0 C) -> cic.Univ cic.prop) -> (P : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (__ : cic.Term cic.prop (R (P (matita_basics_types.fst A B x) (matita_basics_types.snd A B x)))) -> cic.Term cic.prop (R (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C) (\\ a : cic.Term univs.Type0 A -> \\ b : cic.Term univs.Type0 B -> P a b) x))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_Type0_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_650$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_650$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_650$.",
    "output": "postulate DPair_rect_Type0_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type0) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type0 (Q_ x_650)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_CProp5_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_931$.",
    "output": "postulate range_rect_CProp5_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_931)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_gcd_aux_mn. För alla element $p$ och $m$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_gcd.gcd_aux$ applicerat på $p$ och $m$ och $n$ och $m$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_gcd.gcd_aux$ applicerat på $p$ och $m$ och $n$ och $n$.",
    "output": "postulate divides_gcd_aux_mn : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n p)) -> cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd_aux p m n) m) (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd_aux p m n) n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_CProp4. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z623$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z624$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.true$. Let $_H2$ be a function from elements $_z624$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.false$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate bool_inv_rect_CProp4 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z623 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H1 : (_z624 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) -> (_H2 : (_z624 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_Aop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$. Let $_nill$ be a function from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $nil$ and $a$ and $a$. Then for all functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $nil$ and $a$, for all functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $nil$.",
    "output": "postulate mk_Aop : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_CProp0. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_166$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_conj$ från element $x_168$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_167$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_168$ och $x_167$, för alla element $x_166$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_166$.",
    "output": "postulate And_rect_CProp0 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop) -> (_H_conj : (x_168 : cic.Term cic.prop _A) -> (x_167 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_168 x_167))) -> (x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term cic.prop (Q_ x_166)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z972$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $x_522$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_z973$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_522$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_522$, för alla funktioner $_H2$ från element $x_523$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z973$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_523$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_523$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Sum_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z972 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_522 : cic.Term univs.Type0 x1) -> (_z973 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_522))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_522))) -> (_H2 : (x_523 : cic.Term univs.Type0 x2) -> (_z973 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_523))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_523))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_map. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $__$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $__1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $A$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.option$ applied to $B$.",
    "output": "postulate option_map : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (__ : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 (matita_basics_types.option A)) -> cic.Term univs.Type0 (matita_basics_types.option B)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_inv_rect_Type1. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z996$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H1$ be a function from elements $x_547$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z997$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_547$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_547$. Then for all functions $_H2$ from elements $x_548$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z997$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_548$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_548$, $cic.Term$ holds for $univs.Type1$ and $P$ applied to $Hterm$.",
    "output": "postulate Sum_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z996 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (x_547 : cic.Term univs.Type0 x1) -> (_z997 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_547))) -> cic.Term univs.Type1 (P (matita_basics_types.inl x1 x2 x_547))) -> (_H2 : (x_548 : cic.Term univs.Type0 x2) -> (_z997 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_548))) -> cic.Term univs.Type1 (P (matita_basics_types.inr x1 x2 x_548))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1222. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$. Soit $hd$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $tl$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$. Alors pour toutes les fonctions $Hind$ des éléments $l1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$ et des éléments $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$ et des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$ et des fonctions $__1$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $x$ et $tl$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $x$ et $n$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $a$ et $n$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.flatten$ appliqué à $A$ et $tl$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.append$ appliqué à $A$ et $a$ et $l2$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $q$ à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l1$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $q$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $a$ et $tl$, pour tous les éléments $l1$ et $l2$ et $a$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour toutes les fonctions $Hlen$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $x$ et $matita_basics_lists_list.cons$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $hd$ et $tl$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $x$ et $n$, pour tous les éléments $Ha$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $a$ et $n$, pour tous les éléments $Hflat$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.append$ appliqué à $A$ et $hd$ et $matita_basics_lists_list.foldr$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.append$ appliqué à $A$ et $matita_basics_lists_list.nil$ appliqué à $A$ et $tl$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.append$ appliqué à $A$ et $a$ et $l2$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $q$ à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l1$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $q$, pour tous les éléments $q$ et $q1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $Hl1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l1$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $q1$, pour tous les éléments $l11$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et la fonction qui envoie $l20$ à $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l11$ et $l20$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l11$ et $n$, pour tous les éléments $l12$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $_clearme1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l11$ et $l12$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l11$ et $n$, pour tous les éléments $Heql1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l11$ et $l12$, pour tous les éléments $Hlenl11$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l11$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l1$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $q1$.",
    "output": "postulate let_clause_1222 : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A))) -> (hd : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (tl : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A))) -> (Hind : (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : (x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x tl)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.flatten A tl) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2)))) -> (__4 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q)))) -> cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) a tl)) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (Hlen : (x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x (matita_basics_lists_list.cons (matita_basics_lists_list.list A) hd tl))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)) -> (Ha : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n)) -> (Hflat : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A hd (matita_basics_lists_list.foldr (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.append A) (matita_basics_lists_list.nil A) tl)) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2)))) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q)))) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hl1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n (matita_arithmetics_nat.S q1)))) -> (l11 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex (matita_basics_lists_list.list A) (\\ l20 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l20)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n)))) -> (l12 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l12)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n))) -> (Heql1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l12))) -> (Hlenl11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n q1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pi1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $_xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $f$. Then $cic.Term$ holds for $univs.Type0$ and $A$.",
    "output": "postulate pi1 : (A : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f)) -> cic.Term univs.Type0 A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_length_to_mem. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $matita_arithmetics_nat.nat$ och $l$ och $matita_arithmetics_nat.S$ applicerat på $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.unique$ applicerat på $matita_arithmetics_nat.nat$ och $l$. Låt $__2$ vara en funktion från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $x$ och $l$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $n$ och $l$.",
    "output": "postulate eq_length_to_mem : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length matita_arithmetics_nat.nat l) (matita_arithmetics_nat.S n))) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.unique matita_arithmetics_nat.nat l)) -> (__2 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat x l)) -> cic.Term cic.prop (matita_arithmetics_nat.le x n)) -> cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat n l)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp0. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_634$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_None$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Låt $_H_Some$ vara en funktion från element $x_635$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_635$. Låt $x_634$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_634$.",
    "output": "postulate option_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_635 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) -> (x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_634)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $nil$ och $a$ och $a$, för alla funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $nil$ och $a$, för alla funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$.",
    "output": "postulate mk_Aop : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nilr_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $xxx$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $nil$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_basics_lists_list.op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ and $a$.",
    "output": "postulate nilr_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.op A nil xxx a nil) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1559. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $divnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Let $H$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$. Let $d$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $auto$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $d$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $n$.",
    "output": "postulate let_clause_1559 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O d))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prime_to_lt_O. For all elements $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$.",
    "output": "postulate prime_to_lt_O : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_CProp2. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1152$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $x2$ applied to $dpi1$ and elements $_z1153$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate DPair_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1152 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1153 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_append_l1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all elements $l1$ and $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $A$ and $a$ and $l1$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.mem$ applied to $A$ and $a$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$.",
    "output": "postulate mem_append_l1 : (A : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem A a l1)) -> cic.Term cic.prop (matita_basics_lists_list.mem A a (matita_basics_lists_list.append A l1 l2))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Leb_false_to_not_le. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $n$ et $m$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $n$ et $m$.",
    "output": "postulate leb_false_to_not_le : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Fact. Soit $__$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.",
    "output": "postulate fact : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_hd. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.option$ applied to $A$.",
    "output": "postulate option_hd : (A : cic.Univ univs.Type0) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 (matita_basics_types.option A)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_rect_Type2. Soit $Q_$ une fonction des éléments $_x_503$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $_H_it$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.it$, pour tous les éléments $x_503$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_503$.",
    "output": "postulate unit_rect_Type2 : (Q_ : (_x_503 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type2) -> (_H_it : cic.Term univs.Type2 (Q_ matita_basics_types.it)) -> (x_503 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term univs.Type2 (Q_ x_503)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_Type0_body. Soit $Q_$ une fonction des éléments $_x_344$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_true$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_bool.true$. Soit $_H_false$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_bool.false$. Alors pour tous les éléments $x_344$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_344$.",
    "output": "postulate bool_rect_Type0_body : (Q_ : (_x_344 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type0) -> (_H_true : cic.Term univs.Type0 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type0 (Q_ matita_basics_bool.false)) -> (x_344 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ x_344)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_Type3. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_88$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type3$. Alors pour toutes les fonctions $_H_nmk$ des fonctions $x_89$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_89$, pour tous les éléments $x_88$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_88$.",
    "output": "postulate Not_rect_Type3 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_88 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type3) -> (_H_nmk : (x_89 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.nmk _A x_89))) -> (x_88 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term univs.Type3 (Q_ x_88)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_to_not_zero. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.not_zero$ applied to $m$.",
    "output": "postulate lt_to_not_zero : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_arithmetics_nat.not_zero m)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_Type2_body. För alla funktioner $Q_$ från element $_x_381$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $univs.Type2$, för alla element $_H_O$ av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_nat.O$, för alla funktioner $_H_S$ från element $x_382$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_384$ av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $x_382$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_382$, för alla element $x_381$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_381$.",
    "output": "postulate nat_rect_Type2_body : (Q_ : (_x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type2) -> (_H_O : cic.Term univs.Type2 (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_384 : cic.Term univs.Type2 (Q_ x_382)) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_nat.S x_382))) -> (x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type2 (Q_ x_381)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_p_ord_q_O. Låt $p$ och $n$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $n$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $q$ och $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $q$ och $matita_arithmetics_nat.O$.",
    "output": "postulate eq_p_ord_q_O : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) q matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_Psil. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $n$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applicerat på $n$.",
    "output": "postulate le_Psil : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi n) (matita_arithmetics_exp.exp n (matita_arithmetics_chebyshev_chebyshev_psi.prim n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Permut_mod. För alla element $p$ och $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $a$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på funktionen som avbildar $n$ som $matita_arithmetics_div_and_mod.mod$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $p$ och $matita_arithmetics_nat.pred$ applicerat på $p$.",
    "output": "postulate permut_mod : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p a))) -> cic.Term cic.prop (matita_arithmetics_permutation.permut (\\ n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a n) p) (matita_arithmetics_nat.pred p))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_CProp4. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_146$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_conj$ från element $x_148$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_147$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_148$ och $x_147$, för alla element $x_146$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_146$.",
    "output": "postulate And_rect_CProp4 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_146 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop) -> (_H_conj : (x_148 : cic.Term cic.prop _A) -> (x_147 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_148 x_147))) -> (x_146 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term cic.prop (Q_ x_146)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_to_le_to_lt_times. Soient $n$ et $m$ et $p$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $p$ et $q$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $q$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $n$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $q$.",
    "output": "postulate lt_to_le_to_lt_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le p q)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times m q))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type5_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_694$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type5$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_694$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_694$.",
    "output": "postulate Prod_rect_Type5_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type5) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type5 (Q_ x_694)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_955$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$, för alla element $x_955$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_955$.",
    "output": "postulate Dop_rect_Type0 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type0) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type0 (Q_ x_955)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_Type0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_873$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $x_873$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_873$.",
    "output": "postulate Aop_rect_Type0 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_873 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type0) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_873 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type0 (Q_ x_873)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp2. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1416$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1417$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_lists_list.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_lists_list.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1416 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1417 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_rect_CProp3. Låt $Q_$ vara en funktion från element $_x_513$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_it$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.it$, för alla element $x_513$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_513$.",
    "output": "postulate unit_rect_CProp3 : (Q_ : (_x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H_it : cic.Term cic.prop (Q_ matita_basics_types.it)) -> (x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term cic.prop (Q_ x_513)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_smallest_factor_to_not_divides. For all elements $n$ and $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $i$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $i$ and $n$.",
    "output": "postulate lt_smallest_factor_to_not_divides : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_max_f_max_g. For all functions $f$ and $g$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g$ applied to $i$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $matita_arithmetics_minimization.max$ applied to $n$ and $g$.",
    "output": "postulate le_max_f_max_g : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (g i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.max n f) (matita_arithmetics_minimization.max n g))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_CProp0. Soit $Q_$ une fonction des éléments $_x_413$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_O$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.O$, pour toutes les fonctions $_H_S$ des éléments $x_414$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_416$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_414$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.S$ appliqué à $x_414$, pour tous les éléments $x_413$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_413$.",
    "output": "postulate nat_rect_CProp0 : (Q_ : (_x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_414 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_416 : cic.Term cic.prop (Q_ x_414)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_414))) -> (x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_413)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Univ$ holds for $univs.Type0$.",
    "output": "postulate Aop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> cic.Univ univs.Type0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Iff_sym. Låt $A$ och $B$ vara element av $cic.Univ$ av $cic.prop$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.iff$ applicerat på $A$ och $B$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.iff$ applicerat på $B$ och $A$.",
    "output": "postulate iff_sym : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) -> cic.Term cic.prop (matita_basics_logic.iff B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_614$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_None$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_615$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_615$. Alors pour tous les éléments $x_614$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_614$.",
    "output": "postulate option_rect_CProp4_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_614 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_615 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_615))) -> (x_614 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_614)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_map. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Då för alla funktioner $__$ från element $x$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $f$ applicerat på $x$ och $g$ applicerat på $x$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $B$ och $matita_basics_lists_list.map$ applicerat på $A$ och $B$ och $f$ och $l$ och $matita_basics_lists_list.map$ applicerat på $A$ och $B$ och $g$ och $l$.",
    "output": "postulate eq_map : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (g : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : (x : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f x) (g x))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list B)) (matita_basics_lists_list.map A B f l) (matita_basics_lists_list.map A B g l))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Minus_le. For all elements $x$ and $y$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.minus$ applied to $x$ and $y$ and $x$.",
    "output": "postulate minus_le : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.minus x y) x)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_963$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ et $_null$ et $_distr$, pour tous les éléments $x_963$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_963$.",
    "output": "postulate Dop_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_963 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_963 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_963)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "False_rect_CProp2_body. Soit $Q_$ une fonction des éléments $_x_76$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $x_76$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_76$.",
    "output": "postulate False_rect_CProp2_body : (Q_ : (_x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_76)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_CProp3_body. Let $Q_$ be a function from elements $_x_401$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_O$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$, for all functions $_H_S$ from elements $x_402$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_404$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_402$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_402$, for all elements $x_401$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_401$.",
    "output": "postulate nat_rect_CProp3_body : (Q_ : (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_404 : cic.Term cic.prop (Q_ x_402)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_402))) -> (x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_401)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Plus_le_0. Soient $x$ et $y$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $x$ et $y$ et $matita_arithmetics_nat.O$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x$ et $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $y$ et $matita_arithmetics_nat.O$.",
    "output": "postulate plus_le_0 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x matita_arithmetics_nat.O) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_Type2. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1122$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1123$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $Hterm$.",
    "output": "postulate DPair_inv_rect_Type2 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1122 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type2) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1123 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type2 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_945$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_945$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_945$.",
    "output": "postulate Dop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type4 (Q_ x_945)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_31$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_32$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_31$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_refl$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_31$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_32$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_31$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_31$ et $x_32$.",
    "output": "postulate eq_rect_CProp2 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_31 : cic.Term univs.Type2 A) -> (_x_32 : cic.Term cic.prop (matita_basics_logic.eq A _x x_31)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_31 : cic.Term univs.Type2 A) -> (x_32 : cic.Term cic.prop (matita_basics_logic.eq A _x x_31)) -> cic.Term cic.prop (Q_ x_31 x_32)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16171. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $gcd1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$. Then for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $nm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$, for all elements $H0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $b$ and $matita_arithmetics_nat.times$ applied to $p$ and $a$.",
    "output": "postulate let_clause_16171 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m b) (matita_arithmetics_nat.times p a)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_CProp1. Låt $Q_$ vara en funktion från element $_x_62$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_I$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.I$. Låt $x_62$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_62$.",
    "output": "postulate True_rect_CProp1 : (Q_ : (_x_62 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_62 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_62)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_aux_to_not_mod_O. Let $p$ and $n$ and $m$ and $q$ and $r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $p$. Then for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord_aux$ applied to $p$ and $n$ and $m$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $q$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_div_and_mod.mod$ applied to $r$ and $m$ and $matita_arithmetics_nat.O$.",
    "output": "postulate p_ord_aux_to_not_mod_O : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n p)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux p n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod r m) matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_p_ord. Let $p$ and $a$ and $b$ and $c$ and $d$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$. Then for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$, for all elements $__4$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $a$ and $b$, for all elements $__5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $m$ and $p$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $c$ and $d$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_primes.divides$ applied to $b$ and $d$ and $matita_arithmetics_nat.le$ applied to $a$ and $c$.",
    "output": "postulate divides_to_p_ord : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__3 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> (__4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat a b))) -> (__5 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord m p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat c d))) -> cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_primes.divides b d) (matita_arithmetics_nat.le a c))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Min_exists. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $t$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $t$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.true$. Soient $k$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $m$, pour toutes les fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, pour tous les éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $t$ et $matita_arithmetics_nat.plus$ appliqué à $k$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_minimization.min$ appliqué à $k$ et $b$ et $f$ et $m$.",
    "output": "postulate min_exists : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (t : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m t)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le b m)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> (__4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_rect_Type4_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_526$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_inl$ une fonction des éléments $x_527$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_527$. Soit $_H_inr$ une fonction des éléments $x_528$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_528$. Soit $x_526$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_526$.",
    "output": "postulate Sum_rect_Type4_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type4) -> (_H_inl : (x_527 : cic.Term univs.Type0 _A) -> cic.Term univs.Type4 (Q_ (matita_basics_types.inl _A _B x_527))) -> (_H_inr : (x_528 : cic.Term univs.Type0 _B) -> cic.Term univs.Type4 (Q_ (matita_basics_types.inr _A _B x_528))) -> (x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type4 (Q_ x_526)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_rect_CProp2_body. Låt $Q_$ vara en funktion från element $_x_492$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $cic.prop$. Låt $x_492$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_492$.",
    "output": "postulate void_rect_CProp2_body : (Q_ : (_x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) -> (x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term cic.prop (Q_ x_492)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1617. Låt $p$ och $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $gcd1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $nm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $p$ och $c$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$, för alla element $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$, för alla element $H0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $p$ och $a$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $b$.",
    "output": "postulate let_clause_1617 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a) (matita_arithmetics_nat.times m b)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_Type0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1398$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och element $_z1399$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_lists_list.mk_Aop$ applicerat på $x1$ och $x2$ och $op$ och $_nill$ och $_nilr$ och $_assoc$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $x1$ och $x2$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Aop_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1398 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1399 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "False_rect_CProp2. For all functions $Q_$ from elements $_x_76$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Univ$ of $cic.prop$, for all elements $x_76$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_76$.",
    "output": "postulate False_rect_CProp2 : (Q_ : (_x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_76)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1524$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H1$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des éléments $_z1525$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$. Alors $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Aop_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1524 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1525 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_SO_to_le_B_exp. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_chebyshev_factorization.B$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.pred$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$.",
    "output": "postulate lt_SO_to_le_B_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mod_aux. För alla element $_p$ och $_m$ och $_n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.",
    "output": "postulate mod_aux : (_p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bi_RC. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.bi_relation$ applied to $A$ and $B$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_relations.bi_relation$ applied to $A$ and $B$.",
    "output": "postulate bi_RC : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$, for all elements $_H_None$ of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_607$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_607$, for all elements $x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_606$.",
    "output": "postulate option_rect_Type1_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type1) -> (_H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_607 : cic.Term univs.Type0 _A) -> cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) -> (x_606 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type1 (Q_ x_606)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_ind. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $x_417$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_418$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $x_417$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_le_n$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_n$ och $matita_arithmetics_nat.le_n$ applicerat på $_n$, för alla funktioner $_H_le_S$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_419$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $m$ och element $_x_421$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $m$ och $x_419$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $m$ och $matita_arithmetics_nat.le_S$ applicerat på $_n$ och $m$ och $x_419$, för alla element $x_417$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $x_418$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $x_417$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_417$ och $x_418$.",
    "output": "postulate le_ind : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Univ cic.prop) -> (_H_le_n : cic.Term cic.prop (Q_ _n (matita_arithmetics_nat.le_n _n))) -> (_H_le_S : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m)) -> (_x_421 : cic.Term cic.prop (Q_ m x_419)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m x_419))) -> (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Term cic.prop (Q_ x_417 x_418)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_Psi_exp4. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.pred$ applicerat på $n$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate le_Psi_exp4 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi n) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred n) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_inv_rect_Type2. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Då för alla funktioner $P$ från element $_z924$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från element $_z925$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.unit$ och $Hterm$ och $matita_basics_types.it$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_types.it$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.",
    "output": "postulate unit_inv_rect_Type2 : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z924 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type2) -> (_H1 : (_z925 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term univs.Type2 (P matita_basics_types.it)) -> cic.Term univs.Type2 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_19$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_20$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_19$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_19$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $x_20$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_19$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_19$ and $x_20$.",
    "output": "postulate eq_rect_Type0_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_19 : cic.Term univs.Type2 A) -> (_x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Univ univs.Type0) -> (_H_refl : cic.Term univs.Type0 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_19 : cic.Term univs.Type2 A) -> (x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Term univs.Type0 (Q_ x_19 x_20)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_CProp5. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Then for all elements $x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_931$.",
    "output": "postulate range_rect_CProp5 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_931)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1551. Låt $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $eqn0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$, för alla element $x347$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $x347$ och $n$.",
    "output": "postulate let_clause_1551 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (x347 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times x347 n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Then for all elements $x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_895$.",
    "output": "postulate ACop_rect_Type3_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type3) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type3 (Q_ x_895)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type4_body. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_917$.",
    "output": "postulate range_rect_Type4_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type4) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type4 (Q_ x_917)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_or_ge. Låt $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_arithmetics_nat.le$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$.",
    "output": "postulate le_or_ge : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.Or (matita_arithmetics_nat.le m n) (matita_arithmetics_nat.le n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_Type2. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1518$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1519$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $cic.Term$ of $univs.Type2$ and $P$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, $cic.Term$ holds for $univs.Type2$ and $P$ applied to $Hterm$.",
    "output": "postulate Aop_inv_rect_Type2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1518 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type2) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1519 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Assoc_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $a$ et $b$ et $c$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $b$ et $c$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $b$ et $c$.",
    "output": "postulate assoc_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil xxx a (matita_arithmetics_bigops.op A nil xxx b c)) (matita_arithmetics_bigops.op A nil xxx (matita_arithmetics_bigops.op A nil xxx a b) c))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_Type3. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_731$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type3$, for all elements $_H_nil$ of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$, for all functions $_H_cons$ from elements $x_733$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_732$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_735$ of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $x_732$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_733$ and $x_732$, for all elements $x_731$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_731$.",
    "output": "postulate list_rect_Type3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type3) -> (_H_nil : cic.Term univs.Type3 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_733 : cic.Term univs.Type0 _A) -> (x_732 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_735 : cic.Term univs.Type3 (Q_ x_732)) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.cons _A x_733 x_732))) -> (x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type3 (Q_ x_731)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_672$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Then for all elements $x_672$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_672$.",
    "output": "postulate Sig_rect_Type2 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type2) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type2 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type2 (Q_ x_672)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "All_mp. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $P$ och $Q$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a$ till element av $cic.Term$ av $cic.prop$ och $Q$ applicerat på $a$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $l$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $Q$ och $l$.",
    "output": "postulate All_mp : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q a)) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A P l)) -> cic.Term cic.prop (matita_basics_lists_list.All A Q l)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Permut_to_bijn. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.bijn$ appliqué à $f$ et $n$.",
    "output": "postulate permut_to_bijn : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F_min_true. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $i$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $i$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $matita_basics_bool.true$.",
    "output": "postulate f_min_true : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.le b i) (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.min n b f)) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Log_exp2. Soient $p$ et $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $m$ et $matita_arithmetics_log.log$ appliqué à $p$ et $n$ et $matita_arithmetics_log.log$ appliqué à $p$ et $matita_arithmetics_exp.exp$ appliqué à $n$ et $m$.",
    "output": "postulate log_exp2 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times m (matita_arithmetics_log.log p n)) (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_CProp1. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_712$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Prod$ vara en funktion från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$. Låt $x_712$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_712$.",
    "output": "postulate Prod_rect_CProp1 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_712)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp0. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_688$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Let $x_688$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_688$.",
    "output": "postulate Sig_rect_CProp0 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_688)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_B2_exp. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_bertrand.B2$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.pred$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $matita_arithmetics_sqrt.sqrt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate le_B2_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_bertrand.B2 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_exp.exp (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.pred (matita_arithmetics_div_and_mod.div (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_Type2_body. Pour toutes les fonctions $Q_$ des éléments $_x_338$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $univs.Type2$, pour tous les éléments $_H_true$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_bool.true$, pour tous les éléments $_H_false$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_bool.false$, pour tous les éléments $x_338$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_338$.",
    "output": "postulate bool_rect_Type2_body : (Q_ : (_x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type2) -> (_H_true : cic.Term univs.Type2 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type2 (Q_ matita_basics_bool.false)) -> (x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ x_338)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_inv_rect_CProp4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1206$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1207$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Sig_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1206 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1207 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_r_inv_lstar. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$.",
    "output": "postulate lstar_r_inv_lstar : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_times. Let $n$ and $m$ and $p$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $p$ and $q$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.times$ applied to $n$ and $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $q$.",
    "output": "postulate lt_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt p q)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times m q))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_divides_to_p_ord_O. Soient $n$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $matita_arithmetics_primes.nth_prime$ appliqué à $i$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord$ appliqué à $n$ et $matita_arithmetics_primes.nth_prime$ appliqué à $i$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.O$ et $n$.",
    "output": "postulate not_divides_to_p_ord_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides (matita_arithmetics_primes.nth_prime i) n))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n (matita_arithmetics_primes.nth_prime i)) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_nat.O n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bijn_fg. For all functions $f$ and $g$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to $f$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to $g$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to the function that maps $p$ to $f$ applied to $g$ applied to $p$ and $n$.",
    "output": "postulate bijn_fg : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.bijn g n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f (g p)) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prime_to_divides_M. Pour tous les éléments $m$ et $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.prime$ appliqué à $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $p$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_binomial.M$ appliqué à $m$.",
    "output": "postulate prime_to_divides_M : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S m) p)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)))) -> cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_binomial.M m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_square_exp. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$.",
    "output": "postulate le_square_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_CProp4_body. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_837$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_div_mod_spec_intro$ des éléments $x_839$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_838$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_839$ et $x_838$, pour tous les éléments $x_837$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_837$.",
    "output": "postulate div_mod_spec_rect_CProp4_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_837 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) -> (_H_div_mod_spec_intro : (x_839 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_838 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_839 x_838))) -> (x_837 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term cic.prop (Q_ x_837)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_Type0_body. För alla funktioner $Q_$ från element $_x_344$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type0$, för alla element $_H_true$ av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_344$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_344$.",
    "output": "postulate bool_rect_Type0_body : (Q_ : (_x_344 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type0) -> (_H_true : cic.Term univs.Type0 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type0 (Q_ matita_basics_bool.false)) -> (x_344 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ x_344)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "R1. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_19$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_19$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Alors pour tous les éléments $x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_19$ et $x_20$.",
    "output": "postulate R1 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_19 : cic.Term univs.Type2 A) -> (_x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Univ univs.Type0) -> (_H_refl : cic.Term univs.Type0 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_19 : cic.Term univs.Type2 A) -> (x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Term univs.Type0 (Q_ x_19 x_20)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16171. Låt $p$ och $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $gcd1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $nm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $p$ och $c$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme0$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$. Låt $b$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$. Låt $H$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$. Då för alla element $H0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $b$ och $matita_arithmetics_nat.times$ applicerat på $p$ och $a$.",
    "output": "postulate let_clause_16171 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m b) (matita_arithmetics_nat.times p a)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_inv_rect_Type2. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$. Då för alla funktioner $P$ från element $_z143$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från element $_z144$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_logic.I$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.",
    "output": "postulate True_inv_rect_Type2 : (Hterm : cic.Term cic.prop matita_basics_logic.True) -> (P : (_z143 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type2) -> (_H1 : (_z144 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I)) -> cic.Term univs.Type2 (P matita_basics_logic.I)) -> cic.Term univs.Type2 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_prim_n1. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_chebyshev_chebyshev_psi.prim$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $n$.",
    "output": "postulate le_prim_n1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Absurd. Let $A$ be an element of $cic.Univ$ of $cic.prop$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $A$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.False$.",
    "output": "postulate absurd : (A : cic.Univ cic.prop) -> (__ : cic.Term cic.prop A) -> (__1 : cic.Term cic.prop (matita_basics_logic.Not A)) -> cic.Term cic.prop matita_basics_logic.False"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1562. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $d$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $c$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_1562 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n c) (matita_arithmetics_nat.times m d)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_length_to_mem. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $matita_arithmetics_nat.nat$ och $l$ och $matita_arithmetics_nat.S$ applicerat på $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.unique$ applicerat på $matita_arithmetics_nat.nat$ och $l$. Då för alla funktioner $__2$ från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $x$ och $l$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $n$ och $l$.",
    "output": "postulate eq_length_to_mem : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length matita_arithmetics_nat.nat l) (matita_arithmetics_nat.S n))) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.unique matita_arithmetics_nat.nat l)) -> (__2 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat x l)) -> cic.Term cic.prop (matita_arithmetics_nat.le x n)) -> cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat n l)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Iter. Pour tous les éléments $H$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $__$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $H$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$, pour tous les éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $H$, $cic.Term$ tient pour $univs.Type0$ et $H$.",
    "output": "postulate iter : (H : cic.Univ univs.Type0) -> (__ : (__ : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_O_to_le_theta_exp_theta. For all elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_chebyshev_chebyshev_theta.theta$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$ and $matita_arithmetics_chebyshev_chebyshev_theta.theta$ applied to $matita_arithmetics_nat.S$ applied to $m$.",
    "output": "postulate lt_O_to_le_theta_exp_theta : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_False. För alla element $return_sort$ av $cic.Sort$, för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.",
    "output": "postulate filter_False : (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $nil$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $nil$.",
    "output": "postulate aop_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil)) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_Type1_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_741$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_nil$ vara ett element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$. Låt $_H_cons$ vara en funktion från element $x_743$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_742$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_745$ av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $x_742$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_743$ och $x_742$. Låt $x_741$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$. Då håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_741$.",
    "output": "postulate list_rect_Type1_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type1) -> (_H_nil : cic.Term univs.Type1 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_743 : cic.Term univs.Type0 _A) -> (x_742 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_745 : cic.Term univs.Type1 (Q_ x_742)) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.cons _A x_743 x_742))) -> (x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type1 (Q_ x_741)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Times_body. Soient $__$ et $__1$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.",
    "output": "postulate times_body : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_bool. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_true$ un élément de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_bool.true$. Alors pour tous les éléments $case_false$ de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_bool.false$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.",
    "output": "postulate match_bool : (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ return_sort) -> (case_true : cic.Term return_sort (return_type matita_basics_bool.true)) -> (case_false : cic.Term return_sort (return_type matita_basics_bool.false)) -> (z : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_aux_0. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord_aux$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $m$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$.",
    "output": "postulate p_ord_aux_0 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux matita_arithmetics_nat.O n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_nat.O n))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter. Soit $T$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $T$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $T$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.list$ appliqué à $T$.",
    "output": "postulate filter : (T : cic.Univ univs.Type0) -> (_p : (__ : cic.Term univs.Type0 T) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list T)) -> cic.Term univs.Type0 (matita_basics_lists_list.list T)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "All_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $_l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then $cic.Univ$ holds for $cic.prop$.",
    "output": "postulate All_body : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_Type4. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_721$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_nil$ be an element of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$. Then for all functions $_H_cons$ from elements $x_723$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_722$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_725$ of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $x_722$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_723$ and $x_722$, for all elements $x_721$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_721$.",
    "output": "postulate list_rect_Type4 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_721 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type4) -> (_H_nil : cic.Term univs.Type4 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_723 : cic.Term univs.Type0 _A) -> (x_722 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_725 : cic.Term univs.Type4 (Q_ x_722)) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.cons _A x_723 x_722))) -> (x_721 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type4 (Q_ x_721)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prime_smallest_factor_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_primes.smallest_factor$ applicerat på $n$.",
    "output": "postulate prime_smallest_factor_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_arithmetics_primes.prime (matita_arithmetics_primes.smallest_factor n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Inl. For all elements $A$ and $B$ of $cic.Univ$ of $univs.Type0$, for all elements $__$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.Sum$ applied to $A$ and $B$.",
    "output": "postulate inl : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 (matita_basics_types.Sum A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Fold. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $_b$ of $cic.Term$ of $univs.Type0$ and $B$, for all functions $_p$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, $cic.Term$ holds for $univs.Type0$ and $B$.",
    "output": "postulate fold : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1078. Let $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $a$ and $b$ and $q$ and $r$. Let $ltrb$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $r$ and $b$. Then for all elements $spec$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q$ and $b$ and $r$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $a$ and $b$ and $q1$ and $r1$, for all elements $ltr1b$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $r1$ and $b$, for all elements $spec1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q1$ and $b$ and $r1$, for all elements $leqq1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $q$ and $q1$, for all elements $ltqq1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $q$ and $q1$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $r$ and $matita_arithmetics_nat.times$ applied to $b$ and $q$.",
    "output": "postulate let_clause_1078 : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) -> (ltrb : cic.Term cic.prop (matita_arithmetics_nat.lt r b)) -> (spec : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r))) -> (_clearme0 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) -> (ltr1b : cic.Term cic.prop (matita_arithmetics_nat.lt r1 b)) -> (spec1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1))) -> (leqq1 : cic.Term cic.prop (matita_arithmetics_nat.le q q1)) -> (ltqq1 : cic.Term cic.prop (matita_arithmetics_nat.lt q q1)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type5_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_668$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type5$. Soit $_H_mk_Sig$ une fonction des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$. Alors pour tous les éléments $x_668$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_668$.",
    "output": "postulate Sig_rect_Type5_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type5) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type5 (Q_ x_668)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_inv_rect_Type0. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $P$ from elements $_z683$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H1$ from elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.O$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_nat.O$, for all functions $_H2$ from elements $x_390$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_x_392$ from elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $x_390$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $x_390$ and elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.S$ applied to $x_390$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_nat.S$ applied to $x_390$, $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.",
    "output": "postulate nat_inv_rect_Type0 : (Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : (_z683 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type0) -> (_H1 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term univs.Type0 (P matita_arithmetics_nat.O)) -> (_H2 : (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_392 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_390)) -> cic.Term univs.Type0 (P x_390)) -> (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_390))) -> cic.Term univs.Type0 (P (matita_arithmetics_nat.S x_390))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15321. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $eqn0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $q$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $eqm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $q$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15321 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_ind. Let $x1$ and $x2$ and $x3$ and $x4$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$. Let $P$ be a function from elements $_z1434$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $x_811$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $x4$ and $x2$ and elements $x_810$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x3$ and $x2$ and $x4$ and elements $_z1435$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $Hterm$ and $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_811$ and $x_810$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_811$ and $x_810$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate div_mod_spec_inv_ind : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1434 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop) -> (_H1 : (x_811 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_810 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1435 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_811 x_810))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_811 x_810))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_Type0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_746$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Soit $_H_cons$ une fonction des éléments $x_748$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_747$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_750$ de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $x_747$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_748$ et $x_747$. Alors pour tous les éléments $x_746$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_746$.",
    "output": "postulate list_rect_Type0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_746 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type0) -> (_H_nil : cic.Term univs.Type0 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_748 : cic.Term univs.Type0 _A) -> (x_747 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_750 : cic.Term univs.Type0 (Q_ x_747)) -> cic.Term univs.Type0 (Q_ (matita_basics_lists_list.cons _A x_748 x_747))) -> (x_746 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type0 (Q_ x_746)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nth_prime_body. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.",
    "output": "postulate nth_prime_body : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Iter_iter. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $g$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $b$ and $c$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_iteration.iter$ applied to $A$ and $g$ and $c$ and $matita_arithmetics_iteration.iter$ applied to $A$ and $g$ and $b$ and $a$ and $matita_arithmetics_iteration.iter$ applied to $A$ and $g$ and $matita_arithmetics_nat.plus$ applied to $b$ and $c$ and $a$.",
    "output": "postulate iter_iter : (A : cic.Univ univs.Type0) -> (g : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_iteration.iter A g c (matita_arithmetics_iteration.iter A g b a)) (matita_arithmetics_iteration.iter A g (matita_arithmetics_nat.plus b c) a))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1607. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $pnm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$.",
    "output": "postulate let_clause_1607 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unique_filter. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $S$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $S$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.unique$ applicerat på $S$ och $l$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.unique$ applicerat på $S$ och $matita_basics_lists_list.filter$ applicerat på $S$ och $f$ och $l$.",
    "output": "postulate unique_filter : (S : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (f : (__ : cic.Term univs.Type0 S) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_basics_lists_list.unique S l)) -> cic.Term cic.prop (matita_basics_lists_list.unique S (matita_basics_lists_list.filter S f l))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Relation3. Pour tous les éléments $__$ et $__1$ et $__2$ de $cic.Univ$ de $univs.Type0$, $cic.Univ$ tient pour $univs.Type0$.",
    "output": "postulate relation3 : (__ : cic.Univ univs.Type0) -> (__1 : cic.Univ univs.Type0) -> (__2 : cic.Univ univs.Type0) -> cic.Univ univs.Type0"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_range. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $return_sort$. Then for all functions $return$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate filter_range : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Split_eq. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$ and $matita_basics_types.snd$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$.",
    "output": "postulate split_eq : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1562. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Då för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $c$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_1562 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n c) (matita_arithmetics_nat.times m d)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pad_bigop_nil. Let $k$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $k$, for all functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $k$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $matita_basics_bool.false$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $f$ applied to $i$ and $nil$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate pad_bigop_nil : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n k)) -> (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i k)) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f i) nil))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.bigop k (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bi_symmetric. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate bi_symmetric : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nth_nil. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_basics_lists_list.nth$ appliqué à $i$ et $A$ et $matita_basics_lists_list.nil$ appliqué à $A$ et $a$ et $a$.",
    "output": "postulate nth_nil : (A : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.nth i A (matita_basics_lists_list.nil A) a) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_min. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $b$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $b$ and $matita_basics_bool.true$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $b$.",
    "output": "postulate true_min : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f b) matita_basics_bool.true)) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min n b f) b)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exp_ord. Låt $p$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $matita_arithmetics_ord.ord$ applicerat på $n$ och $p$ och $matita_arithmetics_ord.ord_rem$ applicerat på $n$ och $p$.",
    "output": "postulate exp_ord : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p (matita_arithmetics_ord.ord n p)) (matita_arithmetics_ord.ord_rem n p)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Then for all elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_4$ and $x_5$.",
    "output": "postulate eq_rect_Type4_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) -> (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_4 : cic.Term univs.Type2 A) -> (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Term univs.Type4 (Q_ x_4 x_5)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_option. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $return_sort$ av $cic.Sort$, för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $return_sort$, för alla element $case_None$ av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $case_Some$ från element $__$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $__$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.",
    "output": "postulate match_option : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ return_sort) -> (case_None : cic.Term return_sort (return_type (matita_basics_types.None _A))) -> (case_Some : (__ : cic.Term univs.Type0 _A) -> cic.Term return_sort (return_type (matita_basics_types.Some _A __))) -> (z : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_Type3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_731$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_nil$ vara ett element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$. Låt $_H_cons$ vara en funktion från element $x_733$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_732$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_735$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $x_732$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_733$ och $x_732$. Då för alla element $x_731$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_731$.",
    "output": "postulate list_rect_Type3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type3) -> (_H_nil : cic.Term univs.Type3 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_733 : cic.Term univs.Type0 _A) -> (x_732 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_735 : cic.Term univs.Type3 (Q_ x_732)) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.cons _A x_733 x_732))) -> (x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type3 (Q_ x_731)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1585. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $m$ and $n$. Let $d$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $auto$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $m$, for all elements $auto'$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $m$ and $d$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$.",
    "output": "postulate let_clause_1585 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides m n)) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O m)) -> (auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times m d))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $x1$. Let $P$ be a function from elements $_z263$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $x1$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H1$ be a function from functions $x_83$ from elements $__$ of $cic.Term$ of $cic.prop$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ and elements $_z264$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.Not$ applied to $x1$ and $Hterm$ and $matita_basics_logic.nmk$ applied to $x1$ and $x_83$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $matita_basics_logic.nmk$ applied to $x1$ and $x_83$. Then $cic.Term$ holds for $univs.Type4$ and $P$ applied to $Hterm$.",
    "output": "postulate Not_inv_rect_Type4 : (x1 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) -> (P : (_z263 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ univs.Type4) -> (_H1 : (x_83 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z264 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_83))) -> cic.Term univs.Type4 (P (matita_basics_logic.nmk x1 x_83))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lop_Sfalse. Låt $m$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $acc$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_chebyshev_bertrand256.list_divides$ applicerat på $acc$ och $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_chebyshev_bertrand256.lprim$ applicerat på $matita_arithmetics_nat.S$ applicerat på $m$ och $i$ och $acc$ och $matita_arithmetics_chebyshev_bertrand256.lprim$ applicerat på $m$ och $matita_arithmetics_nat.S$ applicerat på $i$ och $matita_basics_lists_list.append$ applicerat på $matita_arithmetics_nat.nat$ och $acc$ och $matita_basics_lists_list.cons$ applicerat på $matita_arithmetics_nat.nat$ och $i$ och $matita_basics_lists_list.nil$ applicerat på $matita_arithmetics_nat.nat$.",
    "output": "postulate lop_Sfalse : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (matita_arithmetics_chebyshev_bertrand256.lprim (matita_arithmetics_nat.S m) i acc) (matita_arithmetics_chebyshev_bertrand256.lprim m (matita_arithmetics_nat.S i) (matita_basics_lists_list.append matita_arithmetics_nat.nat acc (matita_basics_lists_list.cons matita_arithmetics_nat.nat i (matita_basics_lists_list.nil matita_arithmetics_nat.nat)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop. Pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $__1$ des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $H$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $H$, pour toutes les fonctions $__3$ des éléments $__3$ de $cic.Term$ de $univs.Type0$ et de $H$ et des éléments $__4$ de $cic.Term$ de $univs.Type0$ et de $H$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$, pour toutes les fonctions $__4$ des éléments $__4$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$, $cic.Term$ tient pour $univs.Type0$ et $H$.",
    "output": "postulate bigop : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (H : cic.Univ univs.Type0) -> (__2 : cic.Term univs.Type0 H) -> (__3 : (__3 : cic.Term univs.Type0 H) -> (__4 : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H) -> (__4 : (__4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 H) -> cic.Term univs.Type0 H"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_CProp3. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour toutes les fonctions $P$ des éléments $_z629$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z630$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.true$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_bool.true$, pour toutes les fonctions $_H2$ des éléments $_z630$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $Hterm$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate bool_inv_rect_CProp3 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z629 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H1 : (_z630 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) -> (_H2 : (_z630 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_CProp2. Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_109$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_nmk$ be a function from functions $x_110$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_110$. Let $x_109$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_109$.",
    "output": "postulate Not_rect_CProp2 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_109 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_110 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_110))) -> (x_109 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_109)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_discr. Soit $a1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $a1$, pour tous les éléments $_e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $a1$ et $x$ et $y$, $cic.Term$ tient pour $univs.Type2$ et $matita_basics_lists_list.match_list$ appliqué à $a1$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et $matita_basics_lists_list.match_list$ appliqué à $a1$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $P$ et la fonction qui envoie $_z47$ à $P$ et la fonction qui envoie $u0$ et $u1$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $P$ et $y$ et la fonction qui envoie $t0$ et $t1$ à $matita_basics_lists_list.match_list$ appliqué à $a1$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $P$ et la fonction qui envoie $u0$ et $u1$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $a1$ et $matita_basics_logic.R0$ appliqué à $a1$ et $t0$ et $u0$ et la fonction qui envoie $e0$ à $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et la fonction qui envoie $x0$ et $p0$ à $matita_basics_lists_list.list$ appliqué à $a1$ appliqué à $u0$ et $e0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $a1$ et $t0$ et la fonction qui envoie $x0$ et $p0$ à $matita_basics_lists_list.list$ appliqué à $a1$ et $t1$ et $u0$ et $e0$ et $u1$ et la fonction qui envoie $_e1$ à $P$ et la fonction qui envoie $_z48$ à $P$ et $y$ et $x$.",
    "output": "postulate list_discr : (a1 : cic.Univ univs.Type0) -> (x : cic.Term univs.Type0 (matita_basics_lists_list.list a1)) -> (y : cic.Term univs.Type0 (matita_basics_lists_list.list a1)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list a1)) x y)) -> cic.Term univs.Type2 (matita_basics_lists_list.match_list a1 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_lists_list.list a1) -> cic.univ univs.Type2) (matita_basics_lists_list.match_list a1 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_lists_list.list a1) -> cic.univ univs.Type2) (cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 P (\\ _z47 : cic.Term univs.Type1 P -> P))) (\\ u0 : cic.Term univs.Type0 a1 -> \\ u1 : cic.Term univs.Type0 (matita_basics_lists_list.list a1) -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> P)) y) (\\ t0 : cic.Term univs.Type0 a1 -> \\ t1 : cic.Term univs.Type0 (matita_basics_lists_list.list a1) -> matita_basics_lists_list.match_list a1 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_lists_list.list a1) -> cic.univ univs.Type2) (cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> P)) (\\ u0 : cic.Term univs.Type0 a1 -> \\ u1 : cic.Term univs.Type0 (matita_basics_lists_list.list a1) -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (\\ e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> matita_basics_lists_list.list a1) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> matita_basics_lists_list.list a1) t1 u0 e0) u1) (\\ _e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> matita_basics_lists_list.list a1) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> matita_basics_lists_list.list a1) t1 u0 e0) u1) -> P))) (\\ _z48 : ((e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0)) -> (_e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> matita_basics_lists_list.list a1) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> matita_basics_lists_list.list a1) t1 u0 e0) u1)) -> cic.Term univs.Type1 P) -> P))) y) x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_Type4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $x2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1110$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1111$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $univs.Type4$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $univs.Type4$ och $P$ applicerat på $Hterm$.",
    "output": "postulate DPair_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1110 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1111 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp1_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_630$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_None$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Låt $_H_Some$ vara en funktion från element $x_631$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_631$. Låt $x_630$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_630$.",
    "output": "postulate option_rect_CProp1_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_631 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_631))) -> (x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_630)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Leb. For all elements $__$ and $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_bool.bool$.",
    "output": "postulate leb : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ord_exp. Let $p$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $m$ and $p$ and $m$.",
    "output": "postulate ord_exp : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord (matita_arithmetics_exp.exp p m) p) m)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_inv_rect_Type0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$, for all functions $P$ from elements $_z1068$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H1$ from elements $_z1069$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_basics_types.None$ applied to $x1$, for all functions $_H2$ from elements $x_611$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1069$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_611$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_611$, $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.",
    "output": "postulate option_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1068 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ univs.Type0) -> (_H1 : (_z1069 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term univs.Type0 (P (matita_basics_types.None x1))) -> (_H2 : (x_611 : cic.Term univs.Type0 x1) -> (_z1069 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_611))) -> cic.Term univs.Type0 (P (matita_basics_types.Some x1 x_611))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lprim. Soient $__$ et $__1$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$.",
    "output": "postulate lprim : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp1_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_911$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_911$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_911$.",
    "output": "postulate ACop_rect_CProp1_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_911)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_r_ind. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $Q_$ be a function from elements $x_1337$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1336$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1335$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $_x_1338$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_lstar_r_O$ be a function from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$ and $matita_arithmetics_lstar.lstar_r_O$ applied to $B$ and $_R$ and $b$. Let $_H_lstar_r_S$ be a function from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1340$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1339$ of $cic.Term$ of $cic.prop$ and $_R$ applied to $b$ and $b2$ and elements $_x_1342$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $l$ and $b1$ and $b$ and $x_1340$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$ and $b2$ and $matita_arithmetics_lstar.lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $x_1340$ and $b2$ and $x_1339$. Let $x_1337$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $x_1336$ and $x_1335$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $x_1338$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $x_1337$ and $x_1336$ and $x_1335$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_1337$ and $x_1336$ and $x_1335$ and $x_1338$.",
    "output": "postulate lstar_r_ind : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (Q_ : (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (_x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Univ cic.prop) -> (_H_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (_H_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1340 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (x_1339 : cic.Term cic.prop (_R b b2)) -> (_x_1342 : cic.Term cic.prop (Q_ l b1 b x_1340)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b x_1340 b2 x_1339))) -> (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Term cic.prop (Q_ x_1337 x_1336 x_1335 x_1338)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Tight_apart. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_eq$ and $_ap$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Univ$ holds for $cic.prop$.",
    "output": "postulate tight_apart : (A : cic.Univ univs.Type0) -> (_eq : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_ap : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_found_min_spec. Soient $n$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour toutes les fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_minimization.min_spec$ appliqué à $n$ et $b$ et $f$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$.",
    "output": "postulate not_found_min_spec : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.min_spec n b f (matita_arithmetics_nat.plus n b))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_max_forall_false. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.And$ applied to $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $i$ to $matita_basics_logic.And$ applied to $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.true$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $matita_basics_bool.true$ and $matita_basics_logic.And$ applied to $cic.prod$ applied to $univs.Type0$ and $cic.prop$ and $matita_arithmetics_nat.nat$ and the function that maps $i$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and the function that maps $__$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.false$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $matita_arithmetics_nat.O$.",
    "output": "postulate exists_max_forall_false : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.And (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.max n f)) matita_basics_bool.true)) (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max n f) matita_arithmetics_nat.O)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_commute. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p11$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p12$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p21$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p22$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $B$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $op$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla funktioner $__2$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $j$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $j$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_basics_bool.andb$ applicerat på $p11$ applicerat på $i$ och $p12$ applicerat på $i$ och $j$ och $matita_basics_bool.andb$ applicerat på $p21$ applicerat på $j$ och $p22$ applicerat på $i$ och $j$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p11$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $matita_arithmetics_bigops.bigop$ applicerat på $m$ och funktionen som avbildar $j$ som $p12$ applicerat på $i$ och $j$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $j$ som $f$ applicerat på $i$ och $j$ och $matita_arithmetics_bigops.bigop$ applicerat på $m$ och funktionen som avbildar $j$ som $p21$ applicerat på $j$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $j$ som $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p22$ applicerat på $i$ och $j$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $j$.",
    "output": "postulate bigop_commute : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p11 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p12 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p21 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p22 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt j m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.andb (p11 i) (p12 i j)) (matita_basics_bool.andb (p21 j) (p22 i j)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p11 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop m (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p12 i j) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i j))) (matita_arithmetics_bigops.bigop m (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p21 j) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p22 i j) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i j))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_discr. Soit $a1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $a2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $a1$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $a1$ et $a2$, pour tous les éléments $_e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $a1$ et $a2$ et $x$ et $y$, $cic.Term$ tient pour $univs.Type2$ et $matita_basics_types.match_Sig$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $t0$ et $t1$ à $matita_basics_types.match_Sig$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $u0$ et $u1$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $a1$ et $matita_basics_logic.R0$ appliqué à $a1$ et $t0$ et $u0$ et la fonction qui envoie $e0$ à $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et la fonction qui envoie $x0$ et $p0$ à $a2$ appliqué à $x0$ appliqué à $u0$ et $e0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $a1$ et $t0$ et la fonction qui envoie $x_19$ et $_x_20$ à $cic.lift$ appliqué à $cic.prop$ et $univs.Type0$ et la fonction qui envoie $x0$ et $p0$ à $a2$ appliqué à $x0$ appliqué à $x_19$ et $_x_20$ et $t1$ et $u0$ et $e0$ et $u1$ et la fonction qui envoie $_e1$ à $P$ et la fonction qui envoie $_z43$ à $P$ et $y$ et $x$.",
    "output": "postulate Sig_discr : (a1 : cic.Univ univs.Type0) -> (a2 : (__ : cic.Term univs.Type0 a1) -> cic.Univ cic.prop) -> (x : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2)) -> (y : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig a1 a2)) x y)) -> cic.Term univs.Type2 (matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) -> cic.univ univs.Type2) (\\ t0 : cic.Term univs.Type0 a1 -> \\ t1 : cic.Term cic.prop (a2 t0) -> matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) -> cic.univ univs.Type2) (\\ u0 : cic.Term univs.Type0 a1 -> \\ u1 : cic.Term cic.prop (a2 u0) -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (\\ e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2 x0) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x_19 : cic.Term univs.Type0 a1 -> \\ _x_20 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x_19) -> cic.lift cic.prop univs.Type0 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> a2 x0) x_19 _x_20)) t1 u0 e0) u1) (\\ _e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2 x0) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x_19 : cic.Term univs.Type0 a1 -> \\ _x_20 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x_19) -> cic.lift cic.prop univs.Type0 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> a2 x0) x_19 _x_20)) t1 u0 e0) u1) -> P))) (\\ _z43 : ((e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0)) -> (_e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2 x0) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x_19 : cic.Term univs.Type0 a1 -> \\ _x_20 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x_19) -> cic.lift cic.prop univs.Type0 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> a2 x0) x_19 _x_20)) t1 u0 e0) u1)) -> cic.Term univs.Type1 P) -> P))) y) x)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_elim_left. Pour tous les éléments $S$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $S$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $S$, pour toutes les fonctions $__1$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $S$ et des éléments $tl$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $S$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $tl$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.append$ appliqué à $S$ et $tl$ et $matita_basics_lists_list.cons$ appliqué à $S$ et $a$ et $matita_basics_lists_list.nil$ appliqué à $S$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $S$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $l$.",
    "output": "postulate list_elim_left : (S : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (P (matita_basics_lists_list.nil S))) -> (__1 : (a : cic.Term univs.Type0 S) -> (tl : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (__1 : cic.Term cic.prop (P tl)) -> cic.Term cic.prop (P (matita_basics_lists_list.append S tl (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))))) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (P l)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bi_symmetric. Pour tous les éléments $A$ et $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate bi_symmetric : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Rev_append. Let $H$ be an element of $cic.Univ$ of $univs.Type0$. Let $__$ and $__1$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $H$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_lists_list.list$ applied to $H$.",
    "output": "postulate rev_append : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Term univs.Type0 (matita_basics_lists_list.list H)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Allr_fwd_append_sn. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$, pour tous les éléments $l1$ et $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Allr$ appliqué à $A$ et $R$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Allr$ appliqué à $A$ et $R$ et $l1$.",
    "output": "postulate Allr_fwd_append_sn : (A : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Allr A R (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_lists_list.Allr A R l1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_rect_CProp3. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Då för alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z365$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_156$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_155$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z366$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_156$ och $x_155$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_156$ och $x_155$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate And_inv_rect_CProp3 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z365 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_156 : cic.Term cic.prop x1) -> (x_155 : cic.Term cic.prop x2) -> (_z366 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_156 x_155))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_156 x_155))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_range. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_enum$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $A$.",
    "output": "postulate mk_range : (A : cic.Univ univs.Type0) -> (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (matita_arithmetics_bigops.range A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_min. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $n$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.le$ applicerat på $b$ och $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_minimization.min$ applicerat på $n$ och $b$ och $f$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$.",
    "output": "postulate lt_min : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.le b i) (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Minus_pred_pred. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $n$ et $matita_arithmetics_nat.pred$ appliqué à $m$ et $matita_arithmetics_nat.minus$ appliqué à $n$ et $m$.",
    "output": "postulate minus_pred_pred : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.pred n) (matita_arithmetics_nat.pred m)) (matita_arithmetics_nat.minus n m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_append. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $l1$ et $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $A$ et $a$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Or$ appliqué à $matita_basics_lists_list.mem$ appliqué à $A$ et $a$ et $l1$ et $matita_basics_lists_list.mem$ appliqué à $A$ et $a$ et $l2$.",
    "output": "postulate mem_append : (A : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem A a (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_lists_list.mem A a l1) (matita_basics_lists_list.mem A a l2))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Psi_2. $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate Psi_2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lt1n$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $x2515$ and $x2516$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lt1n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_sqrt. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $n$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate lt_sqrt : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt n)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_max_spec. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $__$ till element av $cic.Univ$ av $return_sort$. Då för alla funktioner $case_found_max_spec$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $_n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $__2$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $m$ och $matita_arithmetics_minimization.found_max_spec$ applicerat på $_n$ och $_f$ och $m$ och $__$ och $__1$ och $__2$, för alla funktioner $case_not_found_max_spec$ från funktioner $__$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_minimization.not_found_max_spec$ applicerat på $_n$ och $_f$ och $__$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $__$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $__$ och $z$.",
    "output": "postulate match_max_spec : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Univ return_sort) -> (case_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2))) -> (case_not_found_max_spec : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type matita_arithmetics_nat.O (matita_arithmetics_minimization.not_found_max_spec _n _f __))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Term return_sort (return_type __ z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_CProp5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_959$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$, för alla element $x_959$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_959$.",
    "output": "postulate Dop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_959)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_Type0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1728$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H1$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $x2$ et $x2$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $x1$ et $x2$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et des éléments $_z1729$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_Dop$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ et $_null$ et $_distr$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ et $_null$ et $_distr$. Alors $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Dop_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1728 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1729 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Example3. $cic.Term$ håller för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_primes.smallest_factor$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate example3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nill. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $nil$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $xxx$ and $nil$ and $a$ and $a$.",
    "output": "postulate nill : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil xxx nil a) a)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_797$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_797$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_797$.",
    "output": "postulate Aop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_797)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_n_n. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $n$.",
    "output": "postulate divides_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_primes.divides n n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_rect_CProp0. Let $Q_$ be a function from elements $_x_519$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_it$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.it$. Then for all elements $x_519$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_519$.",
    "output": "postulate unit_rect_CProp0 : (Q_ : (_x_519 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H_it : cic.Term cic.prop (Q_ matita_basics_types.it)) -> (x_519 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term cic.prop (Q_ x_519)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_ind2. För alla element $T1$ och $T2$ av $cic.Univ$ av $univs.Type0$, för alla element $l1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T1$, för alla element $l2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T2$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T2$ till element av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $T1$ och $l1$ och $matita_basics_lists_list.length$ applicerat på $T2$ och $l2$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_lists_list.nil$ applicerat på $T1$ och $matita_basics_lists_list.nil$ applicerat på $T2$, för alla funktioner $__2$ från element $tl1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T1$ och element $tl2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $T2$ och element $hd1$ av $cic.Term$ av $univs.Type0$ och $T1$ och element $hd2$ av $cic.Term$ av $univs.Type0$ och $T2$ och element $__2$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $tl1$ och $tl2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_lists_list.cons$ applicerat på $T1$ och $hd1$ och $tl1$ och $matita_basics_lists_list.cons$ applicerat på $T2$ och $hd2$ och $tl2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $l1$ och $l2$.",
    "output": "postulate list_ind2 : (T1 : cic.Univ univs.Type0) -> (T2 : cic.Univ univs.Type0) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list T1)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list T2)) -> (P : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list T1)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list T2)) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length T1 l1) (matita_basics_lists_list.length T2 l2))) -> (__1 : cic.Term cic.prop (P (matita_basics_lists_list.nil T1) (matita_basics_lists_list.nil T2))) -> (__2 : (tl1 : cic.Term univs.Type0 (matita_basics_lists_list.list T1)) -> (tl2 : cic.Term univs.Type0 (matita_basics_lists_list.list T2)) -> (hd1 : cic.Term univs.Type0 T1) -> (hd2 : cic.Term univs.Type0 T2) -> (__2 : cic.Term cic.prop (P tl1 tl2)) -> cic.Term cic.prop (P (matita_basics_lists_list.cons T1 hd1 tl1) (matita_basics_lists_list.cons T2 hd2 tl2))) -> cic.Term cic.prop (P l1 l2)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16003. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$.",
    "output": "postulate let_clause_16003 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nilr_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla element $xxx$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_basics_lists_list.op$ applicerat på $A$ och $nil$ och $xxx$ och $a$ och $nil$ och $a$.",
    "output": "postulate nilr_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.op A nil xxx a nil) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Min_spec_inv_ind. Let $x1$ and $x2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $x3$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $x4$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$. Let $P$ be a function from elements $_z1890$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_1080$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $x2$ and $m$ and elements $_x_1079$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $matita_arithmetics_nat.plus$ applied to $x1$ and $x2$ and elements $_x_1078$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $x3$ applied to $m$ and $matita_basics_bool.true$ and functions $_x_1077$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $x2$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $x3$ applied to $i$ and $matita_basics_bool.false$ and elements $_z1891$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x4$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $m$, for all functions $_H2$ from functions $_x_1081$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $x2$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $x1$ and $x2$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $x3$ applied to $i$ and $matita_basics_bool.false$ and elements $_z1891$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x4$ and $matita_arithmetics_nat.plus$ applied to $x1$ and $x2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $x1$ and $x2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $x4$.",
    "output": "postulate min_spec_inv_ind : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_Hterm : cic.Term cic.prop (matita_arithmetics_minimization.min_spec x1 x2 x3 x4)) -> (P : (_z1890 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le x2 m)) -> (_x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus x1 x2))) -> (_x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 m) matita_basics_bool.true)) -> (_x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le x2 i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 i) matita_basics_bool.false)) -> (_z1891 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x4 m)) -> cic.Term cic.prop (P m)) -> (_H2 : (_x_1081 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le x2 i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus x1 x2))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 i) matita_basics_bool.false)) -> (_z1891 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x4 (matita_arithmetics_nat.plus x1 x2))) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus x1 x2))) -> cic.Term cic.prop (P x4)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_17041. För alla element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $a$ och $x1029$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x1029$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_sigma_pi.plusAC$ och $x1029$ och $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_17041 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x1029 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_lstar_r. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $__$ och $__1$ och $__2$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_lstar_r_O$ från element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.O$ och $b$ och $b$ och $matita_arithmetics_lstar.lstar_r_O$ applicerat på $B$ och $_R$ och $b$, för alla funktioner $case_lstar_r_S$ från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $l$ och $b1$ och $b$ och element $b2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $cic.prop$ och $_R$ applicerat på $b$ och $b2$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$ och $matita_arithmetics_lstar.lstar_r_S$ applicerat på $B$ och $_R$ och $l$ och $b1$ och $b$ och $__$ och $b2$ och $__1$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__1$ och $__2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $__$ och $__1$ och $__2$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $__$ och $__1$ och $__2$ och $z$.",
    "output": "postulate match_lstar_r : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Univ return_sort) -> (case_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (case_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (_R b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b __ b2 __1))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Term return_sort (return_type __ __1 __2 z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate div_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div n n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_exp_to_lt1. For all elements $a$ and $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $a$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_exp.exp$ applied to $n$ and $a$ and $matita_arithmetics_exp.exp$ applied to $m$ and $a$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $m$.",
    "output": "postulate lt_exp_to_lt1 : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp n a) (matita_arithmetics_exp.exp m a))) -> cic.Term cic.prop (matita_arithmetics_nat.lt n m)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Gcd_1_to_lt_O. Låt $i$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $i$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $i$.",
    "output": "postulate gcd_1_to_lt_O : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd i n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O i)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pair_elim. Soient $A$ et $B$ et $C$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $T$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $C$. Soit $p$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $C$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $__$ une fonction des éléments $lft$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $rgt$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $A$ et $B$ et $p$ et $matita_basics_types.mk_Prod$ appliqué à $A$ et $B$ et $lft$ et $rgt$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $A$ et $B$ et $lft$ et $rgt$ et $T$ appliqué à $lft$ et $rgt$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $p$ et $matita_basics_types.match_Prod$ appliqué à $A$ et $B$ et $univs.Type0$ et la fonction qui envoie $_0$ à $C$ et la fonction qui envoie $lft$ et $rgt$ à $T$ appliqué à $lft$ et $rgt$ et $p$.",
    "output": "postulate pair_elim : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (T : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (p : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (P : (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> cic.Univ cic.prop) -> (__ : (lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt))) -> cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C) (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T lft rgt) p))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $Q_$ from elements $_x_686$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_686$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_686$.",
    "output": "postulate Sig_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_686)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_to_le_max. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $n$. Alors pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.true$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $m$ et $matita_arithmetics_minimization.max$ appliqué à $n$ et $f$.",
    "output": "postulate true_to_le_max : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le m (matita_arithmetics_minimization.max n f))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Increasing_to_injective. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.increasing$ applied to $f$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.injective$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $f$.",
    "output": "postulate increasing_to_injective : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.increasing f)) -> cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat f)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15622. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $d$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15622 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_DPair. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $return_sort$. Let $return$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$. Let $z$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$. Then $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate filter_DPair : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_times_gcd_aux. Let $p$ and $m$ and $n$ and $d$ and $c$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $c$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$. Let $__3$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $p$. Let $__4$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $m$. Let $__5$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $matita_arithmetics_gcd.gcd_aux$ applied to $p$ and $m$ and $n$.",
    "output": "postulate divides_times_gcd_aux : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le n p)) -> (__4 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c m))) -> (__5 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c n))) -> cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c (matita_arithmetics_gcd.gcd_aux p m n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Cons. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.list$ appliqué à $A$.",
    "output": "postulate cons : (A : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 (matita_basics_lists_list.list A)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_map_forward. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Then for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $A$ and $a$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.mem$ applied to $B$ and $f$ applied to $a$ and $matita_basics_lists_list.map$ applied to $A$ and $B$ and $f$ and $l$.",
    "output": "postulate mem_map_forward : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (a : cic.Term univs.Type0 A) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem A a l)) -> cic.Term cic.prop (matita_basics_lists_list.mem B (f a) (matita_basics_lists_list.map A B f l))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type1_body. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_700$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_700$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_700$.",
    "output": "postulate Prod_rect_Type1_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type1) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type1 (Q_ x_700)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Låt $p$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $lt1p$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $m$ och $x2515$ och $x2516$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2515$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x2516$ och $matita_arithmetics_div_and_mod.div$ applicerat på $x2515$ och $x2516$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $x2515$ och $x2516$.",
    "output": "postulate let_clause_1033 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lt1p : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_exp1. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $n$ och $p$ och $matita_arithmetics_exp.exp$ applicerat på $m$ och $p$.",
    "output": "postulate lt_exp1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp n p) (matita_arithmetics_exp.exp m p))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_CProp3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1740$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $x1$ och $x2$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ och element $_z1741$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_Dop$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ och $_null$ och $_distr$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $x1$ och $x2$ och $sum$ och $prod$ och $_null$ och $_distr$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1740 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1741 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_795$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$. Then for all elements $x_795$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_795$.",
    "output": "postulate Aop_rect_CProp4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_795)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_rect_CProp4. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z359$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $x_148$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_147$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z360$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_148$ and $x_147$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_148$ and $x_147$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate And_inv_rect_CProp4 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z359 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_148 : cic.Term cic.prop x1) -> (x_147 : cic.Term cic.prop x2) -> (_z360 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_148 x_147))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_148 x_147))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Or_introl. Låt $A$ och $B$ vara element av $cic.Univ$ av $cic.prop$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $A$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $A$ och $B$.",
    "output": "postulate or_introl : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (__ : cic.Term cic.prop A) -> cic.Term cic.prop (matita_basics_logic.Or A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Assoc. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $xxx$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$, för alla element $a$ och $b$ och $c$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_basics_lists_list.op$ applicerat på $A$ och $nil$ och $xxx$ och $a$ och $matita_basics_lists_list.op$ applicerat på $A$ och $nil$ och $xxx$ och $b$ och $c$ och $matita_basics_lists_list.op$ applicerat på $A$ och $nil$ och $xxx$ och $matita_basics_lists_list.op$ applicerat på $A$ och $nil$ och $xxx$ och $a$ och $b$ och $c$.",
    "output": "postulate assoc : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.op A nil xxx a (matita_basics_lists_list.op A nil xxx b c)) (matita_basics_lists_list.op A nil xxx (matita_basics_lists_list.op A nil xxx a b) c))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Log_i_2n. För alla element $n$ och $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $i$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_log.log$ applicerat på $i$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate log_i_2n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log i (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_add. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $l1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $x$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $l2$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.cons$ applied to $A$ and $x$ and $l2$.",
    "output": "postulate Exists_add : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (x : cic.Term univs.Type0 A) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Injective_transpose. Låt $i$ och $j$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_relations.injective$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $j$.",
    "output": "postulate injective_transpose : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_permutation.transpose i j))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_void. For all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $return_sort$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate match_void : (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ return_sort) -> (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat_rect_Type0. Let $Q_$ be a function from elements $_x_389$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H_O$ be an element of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_nat.O$. Let $_H_S$ be a function from elements $x_390$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_392$ of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $x_390$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_390$. Then for all elements $x_389$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_389$.",
    "output": "postulate nat_rect_Type0 : (Q_ : (_x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type0) -> (_H_O : cic.Term univs.Type0 (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_392 : cic.Term univs.Type0 (Q_ x_390)) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_nat.S x_390))) -> (x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (Q_ x_389)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_Type1_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_648$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_648$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_648$.",
    "output": "postulate DPair_rect_Type1_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type1) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type1 (Q_ x_648)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp3_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_799$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $A$ et $_nil$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, pour tous les éléments $x_799$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_799$.",
    "output": "postulate Aop_rect_CProp3_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_799)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Orb_elim. Let $b1$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_bool.match_bool$ applied to $cic.type$ applied to $cic.z$ and the function that maps $__$ to $cic.univ$ applied to $cic.prop$ and $P$ applied to $matita_basics_bool.true$ and $P$ applied to $b2$ and $b1$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $matita_basics_bool.orb$ applied to $b1$ and $b2$.",
    "output": "postulate orb_elim : (b1 : cic.Term univs.Type0 matita_basics_bool.bool) -> (b2 : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (__ : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_bool.match_bool (cic.type cic.z) (\\ __ : cic.Term univs.Type0 matita_basics_bool.bool -> cic.univ cic.prop) (P matita_basics_bool.true) (P b2) b1)) -> cic.Term cic.prop (P (matita_basics_bool.orb b1 b2))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Iter_iter. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $g$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $b$ and $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_iteration.iter$ applied to $A$ and $g$ and $c$ and $matita_arithmetics_iteration.iter$ applied to $A$ and $g$ and $b$ and $a$ and $matita_arithmetics_iteration.iter$ applied to $A$ and $g$ and $matita_arithmetics_nat.plus$ applied to $b$ and $c$ and $a$.",
    "output": "postulate iter_iter : (A : cic.Univ univs.Type0) -> (g : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_iteration.iter A g c (matita_arithmetics_iteration.iter A g b a)) (matita_arithmetics_iteration.iter A g (matita_arithmetics_nat.plus b c) a))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp2_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_658$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_658$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_658$.",
    "output": "postulate DPair_rect_CProp2_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_658)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp1. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1422$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des éléments $_z1423$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_lists_list.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1422 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1423 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "All_nth. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $l$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.option$ applicerat på $A$ och $matita_basics_lists_list.nth_opt$ applicerat på $A$ och $n$ och $l$ och $matita_basics_types.Some$ applicerat på $A$ och $a$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $a$.",
    "output": "postulate All_nth : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.All A P l)) -> (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) (matita_basics_lists_list.nth_opt A n l) (matita_basics_types.Some A a))) -> cic.Term cic.prop (P a)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_prim_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applicerat på $n$ och $n$.",
    "output": "postulate le_prim_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.prim n) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_CProp0_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_967$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$. Låt $x_967$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_967$.",
    "output": "postulate Dop_rect_CProp0_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_967)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_theta_M_theta. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_chebyshev_chebyshev_theta.theta$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_binomial.M$ applied to $m$ and $matita_arithmetics_chebyshev_chebyshev_theta.theta$ applied to $matita_arithmetics_nat.S$ applied to $m$.",
    "output": "postulate le_theta_M_theta : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))) (matita_arithmetics_nat.times (matita_arithmetics_binomial.M m) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bi_RC. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$.",
    "output": "postulate bi_RC : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nil_to_nil. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $l1$ och $l2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $l2$ och $matita_basics_lists_list.nil$ applicerat på $A$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.nil$ applicerat på $A$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l2$ och $matita_basics_lists_list.nil$ applicerat på $A$.",
    "output": "postulate nil_to_nil : (A : cic.Univ univs.Type0) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A l1 l2) (matita_basics_lists_list.nil A))) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.nil A)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l2 (matita_basics_lists_list.nil A)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec. För alla element $_n$ och $_m$ och $_q$ och $_r$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Univ$ för $cic.prop$.",
    "output": "postulate div_mod_spec : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_Type3_body. För alla element $_A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_731$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type3$, för alla element $_H_nil$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$, för alla funktioner $_H_cons$ från element $x_733$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_732$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_735$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $x_732$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_733$ och $x_732$, för alla element $x_731$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_731$.",
    "output": "postulate list_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type3) -> (_H_nil : cic.Term univs.Type3 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_733 : cic.Term univs.Type0 _A) -> (x_732 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_735 : cic.Term univs.Type3 (Q_ x_732)) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.cons _A x_733 x_732))) -> (x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type3 (Q_ x_731)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_rect_Type2. Soient $x1$ et $x2$ et $x3$ et $x4$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$. Alors pour toutes les fonctions $P$ des éléments $_z1452$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H1$ des éléments $x_827$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $x4$ et $x2$ et des éléments $x_826$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x1$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x3$ et $x2$ et $x4$ et des éléments $_z1453$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $Hterm$ et $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_827$ et $x_826$ à des éléments de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_827$ et $x_826$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type2 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1452 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ univs.Type2) -> (_H1 : (x_827 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_826 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1453 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_827 x_826))) -> cic.Term univs.Type2 (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_827 x_826))) -> cic.Term univs.Type2 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_Type1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_741$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_nil$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$. Then for all functions $_H_cons$ from elements $x_743$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_742$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_745$ of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $x_742$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_743$ and $x_742$, for all elements $x_741$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_741$.",
    "output": "postulate list_rect_Type1_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type1) -> (_H_nil : cic.Term univs.Type1 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_743 : cic.Term univs.Type0 _A) -> (x_742 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_745 : cic.Term univs.Type1 (Q_ x_742)) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.cons _A x_743 x_742))) -> (x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type1 (Q_ x_741)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Monotonic_le_plus_r. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.monotonic$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.le$ et la fonction qui envoie $m$ à $matita_arithmetics_nat.plus$ appliqué à $n$ et $m$.",
    "output": "postulate monotonic_le_plus_r : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.le (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.plus n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Commutative_min. $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.commutative$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.min$.",
    "output": "postulate commutative_min : cic.Term cic.prop (matita_basics_relations.commutative matita_arithmetics_nat.nat matita_arithmetics_nat.min)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_Sig. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $_pi2$ av $cic.Term$ av $cic.prop$ och $f$ applicerat på $pi1$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $f$.",
    "output": "postulate mk_Sig : (A : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (f pi1)) -> cic.Term univs.Type0 (matita_basics_types.Sig A f)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_inv_rect_CProp2. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$. Alors pour toutes les fonctions $P$ des éléments $_z1350$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1351$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_768$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $x_767$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ et des fonctions $_x_770$ des éléments $_z1351$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $x_767$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x_767$ et des éléments $_z1351$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.cons$ appliqué à $x1$ et $x_768$ et $x_767$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.cons$ appliqué à $x1$ et $x_768$ et $x_767$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate list_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (P : (_z1350 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1351 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.nil x1))) -> cic.Term cic.prop (P (matita_basics_lists_list.nil x1))) -> (_H2 : (x_768 : cic.Term univs.Type0 x1) -> (x_767 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (_x_770 : (_z1351 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm x_767)) -> cic.Term cic.prop (P x_767)) -> (_z1351 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.cons x1 x_768 x_767))) -> cic.Term cic.prop (P (matita_basics_lists_list.cons x1 x_768 x_767))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type3. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_130$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_conj$ be a function from elements $x_132$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_131$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_132$ and $x_131$. Then for all elements $x_130$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_130$.",
    "output": "postulate And_rect_Type3 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type3) -> (_H_conj : (x_132 : cic.Term cic.prop _A) -> (x_131 : cic.Term cic.prop _B) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.conj _A _B x_132 x_131))) -> (x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type3 (Q_ x_130)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$. Let $P$ be a function from elements $_z1092$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z1093$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$. Then for all functions $_H2$ from elements $x_631$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1093$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_631$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_631$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate option_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1092 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_631 : cic.Term univs.Type0 x1) -> (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_Type4. Låt $Q_$ vara en funktion från element $_x_42$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_I$ vara ett element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_logic.I$. Då för alla element $x_42$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_42$.",
    "output": "postulate True_rect_Type4 : (Q_ : (_x_42 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type4) -> (_H_I : cic.Term univs.Type4 (Q_ matita_basics_logic.I)) -> (x_42 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term univs.Type4 (Q_ x_42)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $len$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $p$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lep$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$. Soit $ltp$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $Hc$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$ et $matita_basics_bool.true$. Soit $H2n$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Alors pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) p)) matita_basics_bool.true)) -> (H2n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Gcd_1_to_lt_n. Let $i$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $i$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$.",
    "output": "postulate gcd_1_to_lt_n : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd i n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_arithmetics_nat.lt i n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_674$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_674$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_674$.",
    "output": "postulate Sig_rect_Type1_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type1) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type1 (Q_ x_674)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_map. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Univ$ of $cic.prop$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $l$. Let $__1$ be a function from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $P$ applied to $a$ to elements of $cic.Term$ of $cic.prop$ and $Q$ applied to $f$ applied to $a$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $B$ and $Q$ and $matita_basics_lists_list.map$ applied to $A$ and $B$ and $f$ and $l$.",
    "output": "postulate Exists_map : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q (f a))) -> cic.Term cic.prop (matita_basics_lists_list.Exists B Q (matita_basics_lists_list.map A B f l))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_913$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_913$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_913$.",
    "output": "postulate ACop_rect_CProp0_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_913)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_lstar_r. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b2$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b2$.",
    "output": "postulate lstar_lstar_r : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type2_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $Q_$ från element $_x_825$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H_div_mod_spec_intro$ från element $x_827$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_826$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_827$ och $x_826$, för alla element $x_825$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_825$.",
    "output": "postulate div_mod_spec_rect_Type2_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_825 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type2) -> (_H_div_mod_spec_intro : (x_827 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_826 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_827 x_826))) -> (x_825 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type2 (Q_ x_825)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bijn_transpose. För alla element $n$ och $i$ och $j$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $j$ och $n$.",
    "output": "postulate bijn_transpose : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn (matita_arithmetics_permutation.transpose i j) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Permut_transpose_r. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soient $m$ et $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $m$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à la fonction qui envoie $n$ à $f$ appliqué à $matita_arithmetics_permutation.transpose$ appliqué à $i$ et $j$ et $n$ et $m$.",
    "output": "postulate permut_transpose_r : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_permutation.permut f m)) -> cic.Term cic.prop (matita_arithmetics_permutation.permut (\\ n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f (matita_arithmetics_permutation.transpose i j n)) m)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Foldr. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors pour tous les éléments $_b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Term$ tient pour $univs.Type0$ et $B$.",
    "output": "postulate foldr : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nat. $cic.Univ$ håller för $univs.Type0$.",
    "output": "postulate nat : cic.Univ univs.Type0"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type1_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_925$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_925$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_925$.",
    "output": "postulate range_rect_Type1_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type1) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type1 (Q_ x_925)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_found_max_spec. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $__$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $n$ och $f$ och $matita_arithmetics_nat.O$.",
    "output": "postulate not_found_max_spec : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.max_spec n f matita_arithmetics_nat.O)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bijn_transpose_l. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ och $i$ och $j$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $f$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på funktionen som avbildar $p$ som $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $j$ och $f$ applicerat på $p$ och $n$.",
    "output": "postulate bijn_transpose_l : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_permutation.transpose i j (f p)) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_inv_rect_CProp0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $x1$, for all functions $P$ from elements $_z1362$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z1363$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $x1$ and $Hterm$ and $matita_basics_lists_list.nil$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_lists_list.nil$ applied to $x1$, for all functions $_H2$ from elements $x_778$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $x_777$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $x1$ and functions $_x_780$ from elements $_z1363$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $x1$ and $Hterm$ and $x_777$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $x_777$ and elements $_z1363$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $x1$ and $Hterm$ and $matita_basics_lists_list.cons$ applied to $x1$ and $x_778$ and $x_777$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_lists_list.cons$ applied to $x1$ and $x_778$ and $x_777$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate list_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (P : (_z1362 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1363 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.nil x1))) -> cic.Term cic.prop (P (matita_basics_lists_list.nil x1))) -> (_H2 : (x_778 : cic.Term univs.Type0 x1) -> (x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (_x_780 : (_z1363 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm x_777)) -> cic.Term cic.prop (P x_777)) -> (_z1363 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.cons x1 x_778 x_777))) -> cic.Term cic.prop (P (matita_basics_lists_list.cons x1 x_778 x_777))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_CProp2_body. Soit $Q_$ une fonction des éléments $_x_356$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_true$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.true$. Soit $_H_false$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.false$. Alors pour tous les éléments $x_356$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_356$.",
    "output": "postulate bool_rect_CProp2_body : (Q_ : (_x_356 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_356 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_356)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_divides_ord_rem. Pour tous les éléments $p$ et $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.prime$ appliqué à $p$, pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $matita_arithmetics_ord.ord_rem$ appliqué à $n$ et $p$ et $matita_arithmetics_ord.ord_rem$ appliqué à $m$ et $p$.",
    "output": "postulate divides_to_divides_ord_rem : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__3 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_ord.ord_rem n p) (matita_arithmetics_ord.ord_rem m p))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_953$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ et $_null$ et $_distr$, pour tous les éléments $x_953$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_953$.",
    "output": "postulate Dop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type1 (Q_ x_953)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_n_fact_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_arithmetics_factorial.fact$ appliqué à $n$.",
    "output": "postulate le_n_fact_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_factorial.fact n))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15441. Soient $p$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Hind$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $q$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $a$ à $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $m$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $m$ et $n$. Soient $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $lenm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$. Soit $lenS$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $q$. Soit $ndivnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$. Soit $b$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$. Alors pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $n$ et $b$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $q$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$.",
    "output": "postulate let_clause_15441 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n q)) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a n) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd_aux q m n)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a n)) (matita_arithmetics_gcd.gcd_aux q m n)))))) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (lenS : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) -> (ndivnm : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)) (matita_arithmetics_nat.times b n)) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n b) (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))) (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord. För alla element $_n$ och $_m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$.",
    "output": "postulate p_ord : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_aux_to_not_mod_O. Soient $p$ et $n$ et $m$ et $q$ et $r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $p$, pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord_aux$ appliqué à $p$ et $n$ et $m$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $q$ et $r$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $r$ et $m$ et $matita_arithmetics_nat.O$.",
    "output": "postulate p_ord_aux_to_not_mod_O : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n p)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux p n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod r m) matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp5. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_797$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_797$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_797$.",
    "output": "postulate Aop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_797)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Find. Pour tous les éléments $A$ et $B$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $B$, pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_types.option$ appliqué à $B$.",
    "output": "postulate find : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 (matita_basics_types.option B)) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 (matita_basics_types.option B)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1222. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_basics_lists_list.list$ applied to $A$. Let $hd$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then for all elements $tl$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_basics_lists_list.list$ applied to $A$, for all functions $Hind$ from elements $l1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$ and elements $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$ and elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$ and functions $__1$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $matita_basics_lists_list.list$ applied to $A$ and $x$ and $tl$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $x$ and $n$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $a$ and $n$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.flatten$ applied to $A$ and $tl$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.append$ applied to $A$ and $a$ and $l2$ and elements $__4$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $q$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $l1$ and $matita_arithmetics_nat.times$ applied to $n$ and $q$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $matita_basics_lists_list.list$ applied to $A$ and $a$ and $tl$, for all elements $l1$ and $l2$ and $a$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all functions $Hlen$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $matita_basics_lists_list.list$ applied to $A$ and $x$ and $matita_basics_lists_list.cons$ applied to $matita_basics_lists_list.list$ applied to $A$ and $hd$ and $tl$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $x$ and $n$, for all elements $Ha$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $a$ and $n$, for all elements $Hflat$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.append$ applied to $A$ and $hd$ and $matita_basics_lists_list.foldr$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_lists_list.nil$ applied to $A$ and $tl$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.append$ applied to $A$ and $a$ and $l2$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $q$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $l1$ and $matita_arithmetics_nat.times$ applied to $n$ and $q$, for all elements $q$ and $q1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $Hl1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $l1$ and $matita_arithmetics_nat.times$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $q1$, for all elements $l11$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_basics_lists_list.list$ applied to $A$ and the function that maps $l20$ to $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l1$ and $matita_basics_lists_list.append$ applied to $A$ and $l11$ and $l20$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $l11$ and $n$, for all elements $l12$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $_clearme1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l1$ and $matita_basics_lists_list.append$ applied to $A$ and $l11$ and $l12$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $l11$ and $n$, for all elements $Heql1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l1$ and $matita_basics_lists_list.append$ applied to $A$ and $l11$ and $l12$, for all elements $Hlenl11$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $l11$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.length$ applied to $A$ and $l1$ and $matita_arithmetics_nat.plus$ applied to $n$ and $matita_arithmetics_nat.times$ applied to $n$ and $q1$.",
    "output": "postulate let_clause_1222 : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A))) -> (hd : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (tl : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A))) -> (Hind : (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : (x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x tl)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.flatten A tl) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2)))) -> (__4 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q)))) -> cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) a tl)) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (Hlen : (x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x (matita_basics_lists_list.cons (matita_basics_lists_list.list A) hd tl))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)) -> (Ha : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n)) -> (Hflat : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A hd (matita_basics_lists_list.foldr (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.append A) (matita_basics_lists_list.nil A) tl)) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2)))) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q)))) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hl1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n (matita_arithmetics_nat.S q1)))) -> (l11 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex (matita_basics_lists_list.list A) (\\ l20 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l20)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n)))) -> (l12 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l12)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n))) -> (Heql1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l11 l12))) -> (Hlenl11 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l11) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n q1)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_656$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_656$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_656$.",
    "output": "postulate DPair_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_656)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Rewrite_l. För alla element $A$ av $cic.Univ$ av $univs.Type2$, för alla element $x$ av $cic.Term$ av $univs.Type2$ och $A$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type2$ och $A$ till element av $cic.Univ$ av $univs.Type2$, för alla element $__$ av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $x$, för alla element $y$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $x$ och $y$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $y$.",
    "output": "postulate rewrite_l : (A : cic.Univ univs.Type2) -> (x : cic.Term univs.Type2 A) -> (P : (__ : cic.Term univs.Type2 A) -> cic.Univ univs.Type2) -> (__ : cic.Term univs.Type2 (P x)) -> (y : cic.Term univs.Type2 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq A x y)) -> cic.Term univs.Type2 (P y)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_Type1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_899$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_ACop$ une fonction des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$. Soit $x_899$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_899$.",
    "output": "postulate ACop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term univs.Type1 (Q_ x_899)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1559. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $divnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$. Då för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$, för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $auto$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.O$ och $d$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $n$.",
    "output": "postulate let_clause_1559 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O d))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m n)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_aux_to_not_mod_O. Soient $p$ et $n$ et $m$ et $q$ et $r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $__2$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $p$. Alors pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord_aux$ appliqué à $p$ et $n$ et $m$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $q$ et $r$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $r$ et $m$ et $matita_arithmetics_nat.O$.",
    "output": "postulate p_ord_aux_to_not_mod_O : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le n p)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux p n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod r m) matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_mk_Prod$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$, pour tous les éléments $x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_702$.",
    "output": "postulate Prod_rect_Type0_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type0) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type0 (Q_ x_702)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_590$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_None$ un élément de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Alors pour toutes les fonctions $_H_Some$ des éléments $x_591$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_591$, pour tous les éléments $x_590$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_590$.",
    "output": "postulate option_rect_Type4_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_590 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type4) -> (_H_None : cic.Term univs.Type4 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_591 : cic.Term univs.Type0 _A) -> cic.Term univs.Type4 (Q_ (matita_basics_types.Some _A x_591))) -> (x_590 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type4 (Q_ x_590)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_CProp5. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $Q_$ des éléments $_x_841$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_div_mod_spec_intro$ des éléments $x_843$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_842$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_843$ et $x_842$, pour tous les éléments $x_841$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_841$.",
    "output": "postulate div_mod_spec_rect_CProp5 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) -> (_H_div_mod_spec_intro : (x_843 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_842 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_843 x_842))) -> (x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term cic.prop (Q_ x_841)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type0_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_833$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_835$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_834$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_835$ och $x_834$. Låt $x_833$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$. Då håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_833$.",
    "output": "postulate div_mod_spec_rect_Type0_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type0) -> (_H_div_mod_spec_intro : (x_835 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_834 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_835 x_834))) -> (x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type0 (Q_ x_833)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Permut_S_mod. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $matita_arithmetics_congruence.S_mod$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och $n$.",
    "output": "postulate permut_S_mod : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_congruence.S_mod (matita_arithmetics_nat.S n)) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Allr. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_R$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $A$, för alla element $_l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, håller $cic.Univ$ för $cic.prop$.",
    "output": "postulate Allr : (A : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Minus_minus_comm. Let $a$ and $b$ and $c$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.minus$ applied to $a$ and $b$ and $c$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.minus$ applied to $a$ and $c$ and $b$.",
    "output": "postulate minus_minus_comm : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus a b) c) (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus a c) b))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Iff_or_r. Let $A$ and $B$ and $C$ be elements of $cic.Univ$ of $cic.prop$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.iff$ applied to $A$ and $B$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.iff$ applied to $matita_basics_logic.Or$ applied to $A$ and $C$ and $matita_basics_logic.Or$ applied to $B$ and $C$.",
    "output": "postulate iff_or_r : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (C : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) -> cic.Term cic.prop (matita_basics_logic.iff (matita_basics_logic.Or A C) (matita_basics_logic.Or B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_dividesb_true1. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_primes.dividesb$ applicerat på $n$ och $m$ och $matita_basics_bool.true$.",
    "output": "postulate divides_to_dividesb_true1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_rect_CProp5. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_561$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_inl$ des éléments $x_562$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_562$, pour toutes les fonctions $_H_inr$ des éléments $x_563$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_563$, pour tous les éléments $x_561$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_561$.",
    "output": "postulate Sum_rect_CProp5 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) -> (_H_inl : (x_562 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_562))) -> (_H_inr : (x_563 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_563))) -> (x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term cic.prop (Q_ x_561)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp3_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_656$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_DPair$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$, för alla element $x_656$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_656$.",
    "output": "postulate DPair_rect_CProp3_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_656)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ld_to_prime. Låt $i$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $acc$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $i$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_chebyshev_bertrand256.primes_below$ applicerat på $acc$ och $i$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_chebyshev_bertrand256.list_divides$ applicerat på $acc$ och $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $i$.",
    "output": "postulate ld_to_prime : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below acc i)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_primes.prime i)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_CProp4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1140$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1141$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate DPair_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1141 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15624. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $d$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Alors pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $m$ et $d$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $c$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15624 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exp_to_fact2. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_factorial.fact$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_factorial.fact$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.",
    "output": "postulate exp_to_fact2 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_exp.exp (matita_arithmetics_factorial.fact n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pad_bigop1. Let $k$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Then for all functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $k$, for all functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $k$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$.",
    "output": "postulate pad_bigop1 : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n k)) -> (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.bigop k (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_10331. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $g1$ and $g2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $n1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Hind$ from functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $g1$ applied to $i$ and $g2$ applied to $i$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_bigops.bigop$ applied to $n1$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $g1$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $n1$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $g2$ applied to $i$, for all functions $Hle$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.S$ applied to $n1$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $g1$ applied to $i$ and $g2$ applied to $i$, for all elements $Hcase$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $n1$ and $matita_basics_bool.true$, for all elements $x2515$ and $x2516$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$.",
    "output": "postulate let_clause_10331 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (g1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_bigops.bigop n1 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g1 i)) (matita_arithmetics_bigops.bigop n1 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g2 i)))) -> (Hle : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n1))) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> (Hcase : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p n1) matita_basics_bool.true)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1648. Låt $n$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posq$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $q$. Då för alla element $n1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $Hind$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n1$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n1$ och funktionen som avbildar $m$ som $matita_basics_bool.andb$ applicerat på $matita_arithmetics_nat.leb$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $m$ och $matita_arithmetics_primes.dividesb$ applicerat på $q$ och $m$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $m$ som $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $q$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n1$ och $q$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $q$ och $matita_arithmetics_nat.S$ applicerat på $n1$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $n1$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n1$ och $q$ och $q$, för alla element $divq$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $q$ och $matita_arithmetics_nat.S$ applicerat på $n1$, för alla element $eqn1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $n1$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n1$ och $q$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $n1$ och $matita_arithmetics_nat.plus$ applicerat på $q$ och $matita_arithmetics_nat.times$ applicerat på $q$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n1$ och $q$.",
    "output": "postulate let_clause_1648 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posq : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) -> (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1) (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.andb (matita_arithmetics_nat.leb (matita_arithmetics_nat.S matita_arithmetics_nat.O) m) (matita_arithmetics_primes.dividesb q m)) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.S matita_arithmetics_nat.O)) q) (matita_arithmetics_div_and_mod.mod n1 q)))) -> (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_primes.divides q (matita_arithmetics_nat.S n1)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n1) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.div n1 q)) q)))) -> (divq : cic.Term cic.prop (matita_arithmetics_primes.divides q (matita_arithmetics_nat.S n1))) -> (eqn1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n1) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.div n1 q)) q))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n1) (matita_arithmetics_nat.plus q (matita_arithmetics_nat.times q (matita_arithmetics_div_and_mod.div n1 q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bertrand. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Univ$ holds for $cic.prop$.",
    "output": "postulate bertrand : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_ind_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_915$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_915$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_915$.",
    "output": "postulate range_ind_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_915 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_915 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_915)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp0_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_805$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.mk_Aop$ applicerat på $A$ och $_nil$ och $op$ och $_nill$ och $_nilr$ och $_assoc$, för alla element $x_805$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_805$.",
    "output": "postulate Aop_rect_CProp0_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_805 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_805 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_805)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_73. Let $x$ and $y$ and $z$ and $x134$ and $x135$ and $x136$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.plus$ applied to $x134$ and $matita_arithmetics_nat.plus$ applied to $x135$ and $x136$ and $matita_arithmetics_nat.plus$ applied to $x135$ and $matita_arithmetics_nat.plus$ applied to $x134$ and $x136$.",
    "output": "postulate let_clause_73 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x134 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x135 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x136 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus x134 (matita_arithmetics_nat.plus x135 x136)) (matita_arithmetics_nat.plus x135 (matita_arithmetics_nat.plus x134 x136)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_CProp3. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_106$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_nmk$ une fonction des fonctions $x_107$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_107$. Alors pour tous les éléments $x_106$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_106$.",
    "output": "postulate Not_rect_CProp3 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_106 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_107 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_107))) -> (x_106 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_106)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_CProp0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_634$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_None$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_635$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_635$, pour tous les éléments $x_634$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_634$.",
    "output": "postulate option_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_635 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) -> (x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_634)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type1_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_953$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type1$, for all functions $_H_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_953$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_953$.",
    "output": "postulate Dop_rect_Type1_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type1 (Q_ x_953)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eqb_false_to_not_eq. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.eqb$ appliqué à $n$ et $m$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $m$.",
    "output": "postulate eqb_false_to_not_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.eqb n m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_sigma. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $p1$ and $p2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $g1$ and $g2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$, for all functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $g1$ applied to $i$ and $g2$ applied to $i$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p1$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $g1$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p2$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $g2$ applied to $i$.",
    "output": "postulate le_sigma : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (g1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) -> (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g1 i)) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p2 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g2 i)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_inv_rect_CProp3. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Let $P$ be a function from elements $_z948$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z949$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.unit$ and $Hterm$ and $matita_basics_types.it$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.it$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate unit_inv_rect_CProp3 : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z948 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H1 : (_z949 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_Type0_r. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $a$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $P$ be a function from elements $x$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$ to elements of $cic.Univ$ of $univs.Type0$. Then for all elements $__$ of $cic.Term$ of $univs.Type0$ and $P$ applied to $a$ and $matita_basics_logic.refl$ applied to $A$ and $a$, for all elements $x$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $p$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$, $cic.Term$ holds for $univs.Type0$ and $P$ applied to $x$ and $p$.",
    "output": "postulate eq_rect_Type0_r : (A : cic.Univ univs.Type2) -> (a : cic.Term univs.Type2 A) -> (P : (x : cic.Term univs.Type2 A) -> (__ : cic.Term cic.prop (matita_basics_logic.eq A x a)) -> cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (P a (matita_basics_logic.refl A a))) -> (x : cic.Term univs.Type2 A) -> (p : cic.Term cic.prop (matita_basics_logic.eq A x a)) -> cic.Term univs.Type0 (P x p)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_rect_CProp3. Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_106$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_nmk$ from functions $x_107$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_107$, for all elements $x_106$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_106$.",
    "output": "postulate Not_rect_CProp3 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_106 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_107 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_107))) -> (x_106 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_106)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_Strue. Soit $k$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $k$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.S$ appliqué à $k$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $op$ appliqué à $f$ appliqué à $k$ et $matita_arithmetics_bigops.bigop$ appliqué à $k$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$.",
    "output": "postulate bigop_Strue : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p k) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S k) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (op (f k) (matita_arithmetics_bigops.bigop k (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_666$.",
    "output": "postulate Sig_rect_Type4 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type4) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type4 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type4 (Q_ x_666)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_n_fn. För alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.increasing$ applicerat på $f$, för alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $f$ applicerat på $n$.",
    "output": "postulate le_n_fn : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.increasing f)) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le n (f n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_discr. Let $a1$ and $a2$ be elements of $cic.Univ$ of $univs.Type0$. Then for all elements $x$ and $y$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $a1$ and $a2$, for all elements $_e$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $a1$ and $a2$ and $x$ and $y$, $cic.Term$ holds for $univs.Type2$ and $matita_basics_types.match_Prod$ applied to $a1$ and $a2$ and $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and the function that maps $t0$ and $t1$ to $matita_basics_types.match_Prod$ applied to $a1$ and $a2$ and $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and the function that maps $u0$ and $u1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $P$ to $cic.prod$ applied to $univs.Type1$ and $univs.Type1$ and $cic.prod$ applied to $cic.prop$ and $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $matita_basics_logic.R0$ applied to $a1$ and $t0$ and $u0$ and the function that maps $e0$ to $cic.prod$ applied to $cic.prop$ and $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and the function that maps $x0$ and $p0$ to $a2$ applied to $u0$ and $e0$ and $matita_basics_logic.R1$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and the function that maps $x0$ and $p0$ to $a2$ and $t1$ and $u0$ and $e0$ and $u1$ and the function that maps $_e1$ to $P$ and the function that maps $_z45$ to $P$ and $y$ and $x$.",
    "output": "postulate Prod_discr : (a1 : cic.Univ univs.Type0) -> (a2 : cic.Univ univs.Type0) -> (x : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) -> (y : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod a1 a2)) x y)) -> cic.Term univs.Type2 (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) -> cic.univ univs.Type2) (\\ t0 : cic.Term univs.Type0 a1 -> \\ t1 : cic.Term univs.Type0 a2 -> matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) -> cic.univ univs.Type2) (\\ u0 : cic.Term univs.Type0 a1 -> \\ u1 : cic.Term univs.Type0 a2 -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (\\ e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> a2) t1 u0 e0) u1) (\\ _e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> a2) t1 u0 e0) u1) -> P))) (\\ _z45 : ((e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0)) -> (_e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) t0 x0) -> a2) t1 u0 e0) u1)) -> cic.Term univs.Type1 P) -> P))) y) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_max_spec. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $__$ to elements of $cic.Univ$ of $return_sort$. Let $case_found_max_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $_n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $__2$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $i$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $m$ and $matita_arithmetics_minimization.found_max_spec$ applied to $_n$ and $_f$ and $m$ and $__$ and $__1$ and $__2$. Let $case_not_found_max_spec$ be a function from functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_minimization.not_found_max_spec$ applied to $_n$ and $_f$ and $__$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $__$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $__$ and $z$.",
    "output": "postulate match_max_spec : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Univ return_sort) -> (case_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2))) -> (case_not_found_max_spec : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type matita_arithmetics_nat.O (matita_arithmetics_minimization.not_found_max_spec _n _f __))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Term return_sort (return_type __ z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15692. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $c$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_15692 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_CProp3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_682$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_682$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_682$.",
    "output": "postulate Sig_rect_CProp3_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_682)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dpi1__o__aop. Let $x0$ be an element of $cic.Univ$ of $univs.Type0$. Let $x1$ be an element of $cic.Term$ of $univs.Type0$ and $x0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$. Let $x3$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $matita_arithmetics_bigops.ACop$ applied to $x0$ and $x1$ and $x2$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x0$ and $x1$.",
    "output": "postulate dpi1__o__aop : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2)) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x0 x1)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_inv_rect_Type3. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1182$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type3$. Alors pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1183$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Sig_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1182 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1183 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type3 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Fold. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_b$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $_p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, $cic.Term$ holds for $univs.Type0$ and $B$.",
    "output": "postulate fold : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pair_eq2. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Then for all elements $a1$ and $a2$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $b1$ and $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $A$ and $B$ and $matita_basics_types.mk_Prod$ applied to $A$ and $B$ and $a1$ and $b1$ and $matita_basics_types.mk_Prod$ applied to $A$ and $B$ and $a2$ and $b2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $b1$ and $b2$.",
    "output": "postulate pair_eq2 : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (a1 : cic.Term univs.Type0 A) -> (a2 : cic.Term univs.Type0 A) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.mk_Prod A B a1 b1) (matita_basics_types.mk_Prod A B a2 b2))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b1 b2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dpi1__o__aop__o__op. Låt $x0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x1$ vara ett element av $cic.Term$ av $univs.Type0$ och $x0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $x3$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $matita_arithmetics_bigops.ACop$ applicerat på $x0$ och $x1$ och $x2$. Låt $_x_887$ och $_x_888$ vara element av $cic.Term$ av $univs.Type0$ och $x0$. Då håller $cic.Term$ för $univs.Type0$ och $x0$.",
    "output": "postulate dpi1__o__aop__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2)) -> (_x_887 : cic.Term univs.Type0 x0) -> (_x_888 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type5. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_919$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type5$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Alors pour tous les éléments $x_919$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_919$.",
    "output": "postulate range_rect_Type5 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_919 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type5) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_919 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type5 (Q_ x_919)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_CProp0. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_776$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_nil$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$. Then for all functions $_H_cons$ from elements $x_778$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_777$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_780$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_777$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_778$ and $x_777$, for all elements $x_776$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_776$.",
    "output": "postulate list_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_778 : cic.Term univs.Type0 _A) -> (x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_780 : cic.Term cic.prop (Q_ x_777)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_778 x_777))) -> (x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_776)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_False. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate filter_False : (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mod_n_n. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $n$ et $matita_arithmetics_nat.O$.",
    "output": "postulate mod_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n n) matita_arithmetics_nat.O)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Congruent_n_n. For all elements $n$ and $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $n$ and $n$ and $p$.",
    "output": "postulate congruent_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent n n p)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prime_to_divides_M. Låt $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $m$ och $p$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_binomial.M$ applicerat på $m$.",
    "output": "postulate prime_to_divides_M : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S m) p)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)))) -> cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_binomial.M m))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_Type1. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1392$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des éléments $_z1393$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_lists_list.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_lists_list.mk_Aop$ appliqué à $x1$ et $x2$ et $op$ et $_nill$ et $_nilr$ et $_assoc$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Aop_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1392 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1393 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp5_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_654$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_DPair$ vara en funktion från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$. Då för alla element $x_654$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_654$.",
    "output": "postulate DPair_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_654 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_654 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_654)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1034. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posp$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_1034 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posp : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Reverse_reverse. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $S$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $l$ och $l$.",
    "output": "postulate reverse_reverse : (S : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.reverse S l)) l)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "R4. Soit $T0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a0$ un élément de $cic.Term$ de $univs.Type0$ et de $T0$. Soit $T1$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a1$ un élément de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$. Soit $T2$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $p0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ et des éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a2$ un élément de $cic.Term$ de $univs.Type0$ et de $T2$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$. Soit $T3$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $p0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ et des éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et des éléments $p1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1$ et des éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $T2$ appliqué à $x0$ et $p0$ et $x1$ et $p1$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T2$ appliqué à $x0$ et $p0$ et $x1$ et $p1$ et $matita_basics_logic.R2$ appliqué à $T0$ et $a0$ et $T1$ et $a1$ et $T2$ et $a2$ et $x0$ et $p0$ et $x1$ et $p1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a3$ un élément de $cic.Term$ de $univs.Type0$ et de $T3$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $a2$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T2$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $a2$. Soit $T4$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $p0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ et des éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et des éléments $p1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1$ et des éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $T2$ appliqué à $x0$ et $p0$ et $x1$ et $p1$ et des éléments $p2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T2$ appliqué à $x0$ et $p0$ et $x1$ et $p1$ et $matita_basics_logic.R2$ appliqué à $T0$ et $a0$ et $T1$ et $a1$ et $T2$ et $a2$ et $x0$ et $p0$ et $x1$ et $p1$ et $x2$ et des éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $T3$ appliqué à $x0$ et $p0$ et $x1$ et $p1$ et $x2$ et $p2$ et des éléments $_p3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T3$ appliqué à $x0$ et $p0$ et $x1$ et $p1$ et $x2$ et $p2$ et $matita_basics_logic.R3$ appliqué à $T0$ et $a0$ et $T1$ et $a1$ et $T2$ et $a2$ et $T3$ et $a3$ et $x0$ et $p0$ et $x1$ et $p1$ et $x2$ et $p2$ et $x3$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_a4$ un élément de $cic.Term$ de $univs.Type0$ et de $T4$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $a2$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T2$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $a2$ et $a3$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T3$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $a2$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T2$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $a2$ et $a3$. Soit $b0$ un élément de $cic.Term$ de $univs.Type0$ et de $T0$. Alors pour tous les éléments $e0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $b0$, pour tous les éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $b0$ et $e0$, pour tous les éléments $e1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $b0$ et $e0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $b0$ et $e0$ et $b1$, pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $T2$ appliqué à $b0$ et $e0$ et $b1$ et $e1$, pour tous les éléments $e2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T2$ appliqué à $b0$ et $e0$ et $b1$ et $e1$ et $matita_basics_logic.R2$ appliqué à $T0$ et $a0$ et $T1$ et $a1$ et $T2$ et $a2$ et $b0$ et $e0$ et $b1$ et $e1$ et $b2$, pour tous les éléments $b3$ de $cic.Term$ de $univs.Type0$ et de $T3$ appliqué à $b0$ et $e0$ et $b1$ et $e1$ et $b2$ et $e2$, pour tous les éléments $e3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T3$ appliqué à $b0$ et $e0$ et $b1$ et $e1$ et $b2$ et $e2$ et $matita_basics_logic.R3$ appliqué à $T0$ et $a0$ et $T1$ et $a1$ et $T2$ et $a2$ et $T3$ et $a3$ et $b0$ et $e0$ et $b1$ et $e1$ et $b2$ et $e2$ et $b3$, $cic.Term$ tient pour $univs.Type0$ et $T4$ appliqué à $b0$ et $e0$ et $b1$ et $e1$ et $b2$ et $e2$ et $b3$ et $e3$.",
    "output": "postulate R4 : (T0 : cic.Univ univs.Type0) -> (a0 : cic.Term univs.Type0 T0) -> (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) -> (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) -> (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1))) -> (T3 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> (x2 : cic.Term univs.Type0 (T2 x0 p0 x1 p1)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T2 x0 p0 x1 p1)) (matita_basics_logic.R2 T0 a0 T1 a1 T2 a2 x0 p0 x1 p1) x2)) -> cic.Univ univs.Type0) -> (a3 : cic.Term univs.Type0 (T3 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1) a2 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1))) a2))) -> (T4 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (p1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> (x2 : cic.Term univs.Type0 (T2 x0 p0 x1 p1)) -> (p2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T2 x0 p0 x1 p1)) (matita_basics_logic.R2 T0 a0 T1 a1 T2 a2 x0 p0 x1 p1) x2)) -> (x3 : cic.Term univs.Type0 (T3 x0 p0 x1 p1 x2 p2)) -> (_p3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T3 x0 p0 x1 p1 x2 p2)) (matita_basics_logic.R3 T0 a0 T1 a1 T2 a2 T3 a3 x0 p0 x1 p1 x2 p2) x3)) -> cic.Univ univs.Type0) -> (_a4 : cic.Term univs.Type0 (T4 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1) a2 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1))) a2) a3 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T3 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1) a2 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) a1))) a2))) a3))) -> (b0 : cic.Term univs.Type0 T0) -> (e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 b0)) -> (b1 : cic.Term univs.Type0 (T1 b0 e0)) -> (e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 b0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 b0 e0) b1)) -> (b2 : cic.Term univs.Type0 (T2 b0 e0 b1 e1)) -> (e2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T2 b0 e0 b1 e1)) (matita_basics_logic.R2 T0 a0 T1 a1 T2 a2 b0 e0 b1 e1) b2)) -> (b3 : cic.Term univs.Type0 (T3 b0 e0 b1 e1 b2 e2)) -> (e3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T3 b0 e0 b1 e1 b2 e2)) (matita_basics_logic.R3 T0 a0 T1 a1 T2 a2 T3 a3 b0 e0 b1 e1 b2 e2) b3)) -> cic.Term univs.Type0 (T4 b0 e0 b1 e1 b2 e2 b3 e3)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_CProp0. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_939$.",
    "output": "postulate range_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_939)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_ind_l. For all elements $B$ of $cic.Univ$ of $univs.Type0$, for all functions $R$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Univ$ of $cic.prop$, for all elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b2$, for all functions $__1$ from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $l$ and $b1$.",
    "output": "postulate lstar_ind_l : (B : cic.Univ univs.Type0) -> (R : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (b2 : cic.Term univs.Type0 B) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) -> (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b2)) -> (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (R b1 b)) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)) -> cic.Term cic.prop (P l b1)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_CProp2_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_963$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null$ and $_distr$, for all elements $x_963$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_963$.",
    "output": "postulate Dop_rect_CProp2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_963 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_963 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_963)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sub0_to_false. Låt $h$ och $k$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $I$ och $J$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.upto$ applicerat på $A$ och $I$ och $matita_arithmetics_nat.O$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h$ och $k$ och $A$ och $J$ och $I$, för alla element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_bigops.upto$ applicerat på $A$ och $J$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_bigops.filter$ applicerat på $A$ och $J$ och $i$ och $matita_basics_bool.false$.",
    "output": "postulate sub0_to_false : (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (A : cic.Univ univs.Type0) -> (I : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (J : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.upto A I) matita_arithmetics_nat.O)) -> (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k A J I)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_bigops.upto A J))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_bigops.filter A J i) matita_basics_bool.false)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dividesb_true_to_lt_O. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $m$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$.",
    "output": "postulate dividesb_true_to_lt_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides m n)) -> cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $ltn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla funktioner $H1$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $x2515$ och $x2516$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2515$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x2516$ och $matita_arithmetics_div_and_mod.div$ applicerat på $x2515$ och $x2516$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $x2515$ och $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltn : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.prime (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (H : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.divides m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_plus. Soient $n$ et $m$ et $p$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $q$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $n$ et $p$ et $matita_arithmetics_nat.plus$ appliqué à $m$ et $q$.",
    "output": "postulate lt_plus : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt p q)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus n p) (matita_arithmetics_nat.plus m q))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_lop. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_bertrand256.list_of_primes$ appliqué à $n$ et $matita_basics_lists_list.cons$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_lists_list.tail$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_bertrand256.list_of_primes$ appliqué à $n$.",
    "output": "postulate eq_lop : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (matita_arithmetics_chebyshev_bertrand256.list_of_primes n) (matita_basics_lists_list.cons matita_arithmetics_nat.nat (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_lists_list.tail matita_arithmetics_nat.nat (matita_arithmetics_chebyshev_bertrand256.list_of_primes n))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Match_Not. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $return_sort$. Låt $case_nmk$ vara en funktion från funktioner $__$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $__$. Låt $z$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.",
    "output": "postulate match_Not : (_A : cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ return_sort) -> (case_nmk : (__ : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type (matita_basics_logic.nmk _A __))) -> (z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1600. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Då för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $c$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $d$.",
    "output": "postulate let_clause_1600 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n c) (matita_arithmetics_nat.times m d)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_to_not_le. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_nat.le$ applicerat på $m$ och $n$.",
    "output": "postulate lt_to_not_le : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le m n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_10336. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $m$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.pred$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$. Låt $Hm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$. Då för alla element $Hlt$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$, för alla element $Ha$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $a$, för alla element $x2515$ och $x2516$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2515$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x2516$ och $matita_arithmetics_div_and_mod.div$ applicerat på $x2515$ och $x2516$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $x2515$ och $x2516$.",
    "output": "postulate let_clause_10336 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi p) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred p) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) p) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))) -> (Hm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))) -> (Hlt : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))) -> (Ha : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_rect_CProp3. Soient $x1$ et $x2$ et $x3$ et $x4$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$. Soit $P$ une fonction des éléments $_z1476$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H1$ des éléments $x_847$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $x4$ et $x2$ et des éléments $x_846$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x1$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x3$ et $x2$ et $x4$ et des éléments $_z1477$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $Hterm$ et $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_847$ et $x_846$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $x1$ et $x2$ et $x3$ et $x4$ et $x_847$ et $x_846$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_CProp3 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1476 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop) -> (_H1 : (x_847 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_846 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1477 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_847 x_846))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_847 x_846))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_Psil1. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $n$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och funktionen som avbildar $p$ som $matita_arithmetics_primes.primeb$ applicerat på $p$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $p$ som $n$.",
    "output": "postulate le_Psil1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_rect_CProp5_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_561$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_inl$ vara en funktion från element $x_562$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.inl$ applicerat på $_A$ och $_B$ och $x_562$. Då för alla funktioner $_H_inr$ från element $x_563$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.inr$ applicerat på $_A$ och $_B$ och $x_563$, för alla element $x_561$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_561$.",
    "output": "postulate Sum_rect_CProp5_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) -> (_H_inl : (x_562 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_562))) -> (_H_inr : (x_563 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_563))) -> (x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term cic.prop (Q_ x_561)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_log_S. Soient $p$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_log.log$ appliqué à $p$ et $n$ et $matita_arithmetics_log.log$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $n$.",
    "output": "postulate le_log_S : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p (matita_arithmetics_nat.S n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1506$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H1$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements $_z1507$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $x1$ and $x2$ and $op$ and $_nill$ and $_nilr$ and $_assoc$. Then $cic.Term$ holds for $univs.Type4$ and $P$ applied to $Hterm$.",
    "output": "postulate Aop_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1506 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1507 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type4 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ex_ind_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $Q_$ från element $_x_235$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och $_P$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_ex_intro$ från element $x$ av $cic.Term$ av $univs.Type0$ och $A$ och element $x_236$ av $cic.Term$ av $cic.prop$ och $_P$ applicerat på $x$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.ex_intro$ applicerat på $A$ och $_P$ och $x$ och $x_236$, för alla element $x_235$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och $_P$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_235$.",
    "output": "postulate ex_ind_body : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_235 : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Univ cic.prop) -> (_H_ex_intro : (x : cic.Term univs.Type0 A) -> (x_236 : cic.Term cic.prop (_P x)) -> cic.Term cic.prop (Q_ (matita_basics_logic.ex_intro A _P x x_236))) -> (x_235 : cic.Term cic.prop (matita_basics_logic.ex A _P)) -> cic.Term cic.prop (Q_ x_235)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_eq. For all elements $A$ of $cic.Univ$ of $univs.Type2$, for all elements $_x$ and $__$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $__$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $__$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $__$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.",
    "output": "postulate filter_eq : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (__ : cic.Term univs.Type2 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Term return_sort (return_type z)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Alors pour toutes les fonctions $P$ des éléments $_z1128$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1129$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.",
    "output": "postulate DPair_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1128 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1129 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type1 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type1 (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Append_cons. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $l$ and $l1$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.append$ applied to $A$ and $l$ and $matita_basics_lists_list.cons$ applied to $A$ and $a$ and $l1$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_lists_list.append$ applied to $A$ and $l$ and $matita_basics_lists_list.cons$ applied to $A$ and $a$ and $matita_basics_lists_list.nil$ applied to $A$ and $l1$.",
    "output": "postulate append_cons : (A : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A l (matita_basics_lists_list.cons A a l1)) (matita_basics_lists_list.append A (matita_basics_lists_list.append A l (matita_basics_lists_list.cons A a (matita_basics_lists_list.nil A))) l1))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_0. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $op$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et la fonction qui envoie $i$ à $matita_basics_bool.true$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $matita_basics_bool.true$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $matita_arithmetics_nat.S$ appliqué à $i$ et $f$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate bigop_0 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f (matita_arithmetics_nat.S i))) (f matita_arithmetics_nat.O)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_body. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__1$ be a function from elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $H$ be an element of $cic.Univ$ of $univs.Type0$. Let $__2$ be an element of $cic.Term$ of $univs.Type0$ and $H$. Then for all functions $__3$ from elements $__3$ of $cic.Term$ of $univs.Type0$ and $H$ and elements $__4$ of $cic.Term$ of $univs.Type0$ and $H$ to elements of $cic.Term$ of $univs.Type0$ and $H$, for all functions $__4$ from elements $__4$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $H$, $cic.Term$ holds for $univs.Type0$ and $H$.",
    "output": "postulate bigop_body : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (H : cic.Univ univs.Type0) -> (__2 : cic.Term univs.Type0 H) -> (__3 : (__3 : cic.Term univs.Type0 H) -> (__4 : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H) -> (__4 : (__4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 H) -> cic.Term univs.Type0 H"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_inv_rect_Type3. Let $x1$ and $x2$ and $x3$ and $x4$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$. Let $P$ be a function from elements $_z1446$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H1$ be a function from elements $x_823$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $x4$ and $x2$ and elements $x_822$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x3$ and $x2$ and $x4$ and elements $_z1447$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $Hterm$ and $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_823$ and $x_822$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_823$ and $x_822$. Then $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.",
    "output": "postulate div_mod_spec_inv_rect_Type3 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1446 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ univs.Type3) -> (_H1 : (x_823 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_822 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1447 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_823 x_822))) -> cic.Term univs.Type3 (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_823 x_822))) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pad_bigop_nil. Låt $k$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $op$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $B$ och $nil$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $k$, för alla funktioner $__1$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $i$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $k$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.false$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $f$ applicerat på $i$ och $nil$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$.",
    "output": "postulate pad_bigop_nil : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n k)) -> (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i k)) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f i) nil))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.bigop k (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Div_mod_spec_rect_Type1. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_829$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_831$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_830$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_831$ och $x_830$. Låt $x_829$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$. Då håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_829$.",
    "output": "postulate div_mod_spec_rect_Type1 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type1) -> (_H_div_mod_spec_intro : (x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_831 x_830))) -> (x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type1 (Q_ x_829)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Unit_rect_CProp4. För alla funktioner $Q_$ från element $_x_509$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_it$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.it$, för alla element $x_509$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_509$.",
    "output": "postulate unit_rect_CProp4 : (Q_ : (_x_509 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H_it : cic.Term cic.prop (Q_ matita_basics_types.it)) -> (x_509 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term cic.prop (Q_ x_509)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_or_false. For all elements $b$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $b$ and $matita_basics_bool.true$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $b$ and $matita_basics_bool.false$.",
    "output": "postulate true_or_false : (b : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b matita_basics_bool.true) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b matita_basics_bool.false))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_inv_rect_Type0. För alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, för alla funktioner $P$ från element $_z155$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från element $_z156$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_logic.I$, håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.",
    "output": "postulate True_inv_rect_Type0 : (Hterm : cic.Term cic.prop matita_basics_logic.True) -> (P : (_z155 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type0) -> (_H1 : (_z156 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I)) -> cic.Term univs.Type0 (P matita_basics_logic.I)) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_rect_Type1. Soit $Q_$ une fonction des éléments $_x_341$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_true$ un élément de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_bool.true$. Soit $_H_false$ un élément de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_bool.false$. Soit $x_341$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_341$.",
    "output": "postulate bool_rect_Type1 : (Q_ : (_x_341 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type1) -> (_H_true : cic.Term univs.Type1 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type1 (Q_ matita_basics_bool.false)) -> (x_341 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ x_341)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_fact. Låt $n$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $i$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $i$ och $matita_arithmetics_factorial.fact$ applicerat på $n$.",
    "output": "postulate divides_fact : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> cic.Term cic.prop (matita_arithmetics_primes.divides i (matita_arithmetics_factorial.fact n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_rect_CProp2. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Then for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z371$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $x_160$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_159$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z372$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_160$ and $x_159$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_160$ and $x_159$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate And_inv_rect_CProp2 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z371 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_160 : cic.Term cic.prop x1) -> (x_159 : cic.Term cic.prop x2) -> (_z372 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_160 x_159))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_160 x_159))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_CProp1. För alla element $_A$ och $_B$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_712$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Prod$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$, för alla element $x_712$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_712$.",
    "output": "postulate Prod_rect_CProp1 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_712)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Range_rect_Type0_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_927$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Låt $x_927$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$. Då håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_927$.",
    "output": "postulate range_rect_Type0_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type0) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type0 (Q_ x_927)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $len$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $lep$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$, pour tous les éléments $ltp$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $Hc$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$ et $matita_basics_bool.true$, pour tous les éléments $H2n$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) p)) matita_basics_bool.true)) -> (H2n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_inv_rect_CProp0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1098$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_635$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_635$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_635$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate option_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_635 : cic.Term univs.Type0 x1) -> (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_inv_rect_Type0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1200$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1201$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Sig_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1200 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1201 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type0 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type0 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "SameF_p. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $__1$ från element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $A$ av $cic.Univ$ av $univs.Type0$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $__2$ som $A$.",
    "output": "postulate sameF_p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (A : cic.Univ univs.Type0) -> cic.Term univs.Type0 (matita_basics_relations.relation (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (\\ __2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> A)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dividesb_div_true. Låt $d$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_primes.dividesb$ applicerat på $d$ och $n$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_primes.dividesb$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $d$ och $n$ och $matita_basics_bool.true$.",
    "output": "postulate dividesb_div_true : (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb d n) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb (matita_arithmetics_div_and_mod.div n d) n) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Inr. Pour tous les éléments $A$ et $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_types.Sum$ appliqué à $A$ et $B$.",
    "output": "postulate inr : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 B) -> cic.Term univs.Type0 (matita_basics_types.Sum A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_4_to_le_B_exp. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_chebyshev_factorization.B$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate lt_4_to_le_B_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1752$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $x2$ et $x2$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $x1$ et $x2$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et des éléments $_z1753$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_Dop$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ et $_null$ et $_distr$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $x1$ et $x2$ et $sum$ et $prod$ et $_null$ et $_distr$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.",
    "output": "postulate Dop_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1752 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1753 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Monotonic_le_plus_r. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.monotonic$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.le$ and the function that maps $m$ to $matita_arithmetics_nat.plus$ applied to $n$ and $m$.",
    "output": "postulate monotonic_le_plus_r : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.le (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.plus n m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Compose. Låt $A$ och $B$ och $C$ vara element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Låt $_g$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $_x$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $C$.",
    "output": "postulate compose : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (_g : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (_x : cic.Term univs.Type0 A) -> cic.Term univs.Type0 C"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_false. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $p$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $a$ and $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.filter$ applied to $A$ and $p$ and $matita_basics_lists_list.cons$ applied to $A$ and $a$ and $l$ and $matita_basics_lists_list.filter$ applied to $A$ and $p$ and $l$.",
    "output": "postulate filter_false : (A : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (a : cic.Term univs.Type0 A) -> (p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.filter A p (matita_basics_lists_list.cons A a l)) (matita_basics_lists_list.filter A p l))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_10131. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $n$ et $m$ et $n0$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $eqm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_minimization.max$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n0$ et $f$ et $m$, pour tous les éléments $fm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.false$, pour tous les éléments $i$ et $j$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $ltj$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $j$ et $matita_arithmetics_nat.S$ appliqué à $n0$, pour tous les éléments $x7$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x7$ et $matita_arithmetics_nat.plus$ appliqué à $m$ et $x7$.",
    "output": "postulate let_clause_10131 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max (matita_arithmetics_nat.S n0) f) m)) -> (fm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltj : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S j) (matita_arithmetics_nat.S n0))) -> (x7 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x7 (matita_arithmetics_nat.plus m x7))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Or_ind. For all elements $_A$ and $_B$ of $cic.Univ$ of $cic.prop$, for all functions $Q_$ from elements $_x_170$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_or_introl$ from elements $x_171$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.or_introl$ applied to $_A$ and $_B$ and $x_171$, for all functions $_H_or_intror$ from elements $x_172$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.or_intror$ applied to $_A$ and $_B$ and $x_172$, for all elements $x_170$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_170$.",
    "output": "postulate Or_ind : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_170 : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Univ cic.prop) -> (_H_or_introl : (x_171 : cic.Term cic.prop _A) -> cic.Term cic.prop (Q_ (matita_basics_logic.or_introl _A _B x_171))) -> (_H_or_intror : (x_172 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.or_intror _A _B x_172))) -> (x_170 : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Term cic.prop (Q_ x_170)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Congruent_times. Låt $n$ och $m$ och $n1$ och $m1$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $n1$ och $p$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $m$ och $m1$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $n1$ och $m1$ och $p$.",
    "output": "postulate congruent_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_congruence.congruent n n1 p)) -> (__2 : cic.Term cic.prop (matita_arithmetics_congruence.congruent m m1 p)) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times n1 m1) p)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_CProp4_body. Låt $Q_$ vara en funktion från element $_x_54$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_I$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.I$, för alla element $x_54$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_54$.",
    "output": "postulate True_rect_CProp4_body : (Q_ : (_x_54 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_54 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_54)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Transpose. Let $__$ and $__1$ and $__2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.",
    "output": "postulate transpose : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_inv_O. För alla element $B$ av $cic.Univ$ av $univs.Type0$, för alla element $R$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $l$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $b1$ och $b2$.",
    "output": "postulate lstar_inv_O : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O l)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b1 b2)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1068. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $permf$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lein$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $lejn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $j$ and $n$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$. Let $lean$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $n$. Let $fa$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$. Let $b$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $b$ and $j$, for all elements $lebn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $n$, for all elements $fb$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $b$ and $j$, for all functions $__$ from elements $i0$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i0$ and $n$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $f$ applied to $i0$ and $n$, for all elements $injf$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$, for all elements $auto$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $b$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$.",
    "output": "postulate let_clause_1068 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) -> (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n)) -> (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le b n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f b) j))) -> (lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n)) -> (fb : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f b) j)) -> (__ : (i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i0 n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (f i0) n)) -> (injf : cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) -> (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16004. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $d$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme0$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Då för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $c$.",
    "output": "postulate let_clause_16004 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Snd. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$, $cic.Term$ tient pour $univs.Type0$ et $B$.",
    "output": "postulate snd : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> cic.Term univs.Type0 B"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Exists_All. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ and $Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $l$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.All$ applied to $A$ and $Q$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and the function that maps $x$ to $matita_basics_logic.And$ applied to $P$ applied to $x$ and $Q$ applied to $x$.",
    "output": "postulate Exists_All : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A Q l)) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ x : cic.Term univs.Type0 A -> matita_basics_logic.And (P x) (Q x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type3_body. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_130$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type3$, pour toutes les fonctions $_H_conj$ des éléments $x_132$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_131$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_132$ et $x_131$, pour tous les éléments $x_130$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_130$.",
    "output": "postulate And_rect_Type3_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type3) -> (_H_conj : (x_132 : cic.Term cic.prop _A) -> (x_131 : cic.Term cic.prop _B) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.conj _A _B x_132 x_131))) -> (x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type3 (Q_ x_130)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_rect_CProp4_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_751$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_nil$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$, for all functions $_H_cons$ from elements $x_753$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_752$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_755$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_752$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_753$ and $x_752$, for all elements $x_751$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_751$.",
    "output": "postulate list_rect_CProp4_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_751 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_753 : cic.Term univs.Type0 _A) -> (x_752 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_755 : cic.Term cic.prop (Q_ x_752)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_753 x_752))) -> (x_751 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_751)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Notb_notb. Soit $b$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_basics_bool.notb$ appliqué à $matita_basics_bool.notb$ appliqué à $b$ et $b$.",
    "output": "postulate notb_notb : (b : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.notb (matita_basics_bool.notb b)) b)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Proj1. For all elements $A$ and $B$ of $cic.Univ$ of $cic.prop$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $A$ and $B$, $cic.Term$ holds for $cic.prop$ and $A$.",
    "output": "postulate proj1 : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.And A B)) -> cic.Term cic.prop A"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ex_inv_ind. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z455$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $x_236$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $x$ and elements $_z456$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.ex$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.ex_intro$ applied to $x1$ and $x2$ and $x$ and $x_236$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.ex_intro$ applied to $x1$ and $x2$ and $x$ and $x_236$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate ex_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.ex x1 x2)) -> (P : (_z455 : cic.Term cic.prop (matita_basics_logic.ex x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x : cic.Term univs.Type0 x1) -> (x_236 : cic.Term cic.prop (x2 x)) -> (_z456 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.ex x1 x2)) Hterm (matita_basics_logic.ex_intro x1 x2 x x_236))) -> cic.Term cic.prop (P (matita_basics_logic.ex_intro x1 x2 x x_236))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sub0_to_false. Let $h$ and $k$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $I$ and $J$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $A$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.upto$ applied to $A$ and $I$ and $matita_arithmetics_nat.O$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.sub_hk$ applied to $h$ and $k$ and $A$ and $J$ and $I$, for all elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_bigops.upto$ applied to $A$ and $J$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_bigops.filter$ applied to $A$ and $J$ and $i$ and $matita_basics_bool.false$.",
    "output": "postulate sub0_to_false : (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (A : cic.Univ univs.Type0) -> (I : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (J : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.upto A I) matita_arithmetics_nat.O)) -> (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k A J I)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_bigops.upto A J))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_bigops.filter A J i) matita_basics_bool.false)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_S. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $R$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$, for all elements $b1$ and $b$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b1$ and $b$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$ and $b2$.",
    "output": "postulate lstar_S : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1561. Soient $p$ et $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Soit $gcd1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $nm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$. Alors pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$, pour tous les éléments $H$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$, pour tous les éléments $H0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $p$ et $a$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $b$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.",
    "output": "postulate let_clause_1561 : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m))))) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m) (matita_arithmetics_nat.times a p)) (matita_arithmetics_gcd.gcd p m)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m))) -> (H0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a) (matita_arithmetics_nat.times m b)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Rev_append_def. Let $S$ be an element of $cic.Univ$ of $univs.Type0$. Let $l1$ and $l2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $S$ and $matita_basics_lists_list.rev_append$ applied to $S$ and $l1$ and $l2$ and $matita_basics_lists_list.append$ applied to $S$ and $matita_basics_lists_list.reverse$ applied to $S$ and $l1$ and $l2$.",
    "output": "postulate rev_append_def : (S : cic.Univ univs.Type0) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.rev_append S l1 l2) (matita_basics_lists_list.append S (matita_basics_lists_list.reverse S l1) l2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mdef. Låt $m$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_binomial.M$ applicerat på $m$ och $matita_arithmetics_binomial.bc$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $m$ och $m$.",
    "output": "postulate Mdef : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_binomial.M m) (matita_arithmetics_binomial.bc (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)) m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_iso. Låt $n1$ och $n2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $p1$ och $p2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $B$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $op$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$, för alla funktioner $f1$ och $f2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.iso$ applicerat på $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $n1$ och funktionen som avbildar $i$ som $p1$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f1$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n2$ och funktionen som avbildar $i$ som $p2$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f2$ applicerat på $i$.",
    "output": "postulate bigop_iso : (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n1 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f1 i)) (matita_arithmetics_bigops.bigop n2 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p2 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f2 i)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Filter_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $A$, pour tous les éléments $_x_941$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_bool.bool$.",
    "output": "postulate filter_body : (A : cic.Univ univs.Type0) -> (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (_x_941 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_15311. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$, for all elements $d$ and $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $eqm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.plus$ applied to $n$ and $matita_arithmetics_nat.times$ applied to $n$ and $p$.",
    "output": "postulate let_clause_15311 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "SameF_upto. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $A$ av $cic.Univ$ av $univs.Type0$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $__1$ som $A$.",
    "output": "postulate sameF_upto : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (A : cic.Univ univs.Type0) -> cic.Term univs.Type0 (matita_basics_relations.relation (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (\\ __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> A)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_divides_to_dividesb_false. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_primes.dividesb$ applicerat på $n$ och $m$ och $matita_basics_bool.false$.",
    "output": "postulate not_divides_to_dividesb_false : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb n m) matita_basics_bool.false)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bool_inv_rect_CProp4. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z623$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $_z624$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z624$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.",
    "output": "postulate bool_inv_rect_CProp4 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z623 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H1 : (_z624 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) -> (_H2 : (_z624 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dpi2. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $f$, $cic.Term$ tient pour $univs.Type0$ et $f$ appliqué à $matita_basics_types.dpi1$ appliqué à $A$ et $f$ et $xxx$.",
    "output": "postulate dpi2 : (A : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f)) -> cic.Term univs.Type0 (f (matita_basics_types.dpi1 A f xxx))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Nilr. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $nil$ et $a$.",
    "output": "postulate nilr : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil xxx a nil) a)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lstar_inv_O. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b1$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b2$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $l$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $b1$ and $b2$.",
    "output": "postulate lstar_inv_O : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O l)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b1 b2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_prime_O. $cic.Term$ håller för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_nat.O$.",
    "output": "postulate not_prime_O : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.prime matita_arithmetics_nat.O))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_plus_div. Soient $m$ et $n$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $q$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $m$ et $q$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $q$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $m$ et $n$ et $q$.",
    "output": "postulate le_plus_div : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.div m q) (matita_arithmetics_div_and_mod.div n q)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.plus m n) q))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_ind_body. Soit $_n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $x_417$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_418$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $x_417$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_le_n$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_n$ et $matita_arithmetics_nat.le_n$ appliqué à $_n$. Soit $_H_le_S$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_419$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $m$ et des éléments $_x_421$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $m$ et $x_419$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.le_S$ appliqué à $_n$ et $m$ et $x_419$. Soit $x_417$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $x_418$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $x_417$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_417$ et $x_418$.",
    "output": "postulate le_ind_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Univ cic.prop) -> (_H_le_n : cic.Term cic.prop (Q_ _n (matita_arithmetics_nat.le_n _n))) -> (_H_le_S : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m)) -> (_x_421 : cic.Term cic.prop (Q_ m x_419)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m x_419))) -> (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Term cic.prop (Q_ x_417 x_418)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_filter_true. Pour tous les éléments $S$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $S$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $S$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $S$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $S$ et $a$ et $matita_basics_lists_list.filter$ appliqué à $S$ et $f$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $a$ et $matita_basics_bool.true$.",
    "output": "postulate mem_filter_true : (S : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 S) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (a : cic.Term univs.Type0 S) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem S a (matita_basics_lists_list.filter S f l))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f a) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_append. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all elements $l1$ and $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $A$ and $a$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_lists_list.mem$ applied to $A$ and $a$ and $l1$ and $matita_basics_lists_list.mem$ applied to $A$ and $a$ and $l2$.",
    "output": "postulate mem_append : (A : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem A a (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_lists_list.mem A a l1) (matita_basics_lists_list.mem A a l2))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_rect_Type5. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_126$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type5$, for all functions $_H_conj$ from elements $x_128$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_127$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_128$ and $x_127$, for all elements $x_126$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_126$.",
    "output": "postulate And_rect_Type5 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_126 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type5) -> (_H_conj : (x_128 : cic.Term cic.prop _A) -> (x_127 : cic.Term cic.prop _B) -> cic.Term univs.Type5 (Q_ (matita_basics_logic.conj _A _B x_128 x_127))) -> (x_126 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type5 (Q_ x_126)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_658$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Soit $x_658$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_658$.",
    "output": "postulate DPair_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_658)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mod_p_ord_inv. För alla element $p$ och $m$ och $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_ord.ord$ applicerat på $x$ och $p$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $matita_arithmetics_ord.p_ord_inv$ applicerat på $p$ och $m$ och $x$ och $m$ och $matita_arithmetics_ord.ord$ applicerat på $x$ och $p$.",
    "output": "postulate mod_p_ord_inv : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_ord.ord x p) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_ord.p_ord_inv p m x) m) (matita_arithmetics_ord.ord x p))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Lt_length_to_not_mem. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.unique$ appliqué à $matita_arithmetics_nat.nat$ et $l$, pour toutes les fonctions $__1$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $x$ et $l$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $x$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_basics_lists_list.length$ appliqué à $matita_arithmetics_nat.nat$ et $l$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $i$ à $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.lt$ appliqué à $i$ et $n$ et $matita_basics_logic.Not$ appliqué à $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $i$ et $l$.",
    "output": "postulate lt_length_to_not_mem : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.unique matita_arithmetics_nat.nat l)) -> (__1 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat x l)) -> cic.Term cic.prop (matita_arithmetics_nat.lt x n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_basics_lists_list.length matita_arithmetics_nat.nat l) n)) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.Not (matita_basics_lists_list.mem matita_arithmetics_nat.nat i l))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Smallest_factor_to_min. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_primes.smallest_factor$ appliqué à $n$ et $matita_arithmetics_minimization.min$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et la fonction qui envoie $m$ à $matita_arithmetics_nat.eqb$ appliqué à $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.O$.",
    "output": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Psidef. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_psi.Psi'$ appliqué à $n$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et la fonction qui envoie $p$ à $matita_arithmetics_primes.primeb$ appliqué à $p$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $p$ à $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_log.log$ appliqué à $p$ et $n$ et la fonction qui envoie $i$ à $matita_basics_bool.true$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $p$.",
    "output": "postulate Psidef : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.Psi' n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop (matita_arithmetics_log.log p n) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_16002. För alla element $m$ och $n$ och $a$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $d$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $c$.",
    "output": "postulate let_clause_16002 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m d) (matita_arithmetics_nat.times n c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "F3_ind_aux. Soient $A1$ et $A2$ et $A3$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $A3$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $P$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$. Soit $__$ une fonction des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$. Alors pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$, pour tous les éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$, pour tous les éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $a1$ et $a2$ et $a3$.",
    "output": "postulate f3_ind_aux : (A1 : cic.Univ univs.Type0) -> (A2 : cic.Univ univs.Type0) -> (A3 : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3)) -> (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Type5. $cic.Sort$.",
    "output": "postulate Type5 : cic.Sort"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_Type5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_947$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type5$. Då för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_Dop$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ och $_null$ och $_distr$, för alla element $x_947$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_947$.",
    "output": "postulate Dop_rect_Type5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_947 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type5) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_947 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type5 (Q_ x_947)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Dop_rect_CProp0_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_967$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Dop$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_Dop$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ et $_null$ et $_distr$. Soit $x_967$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_967$.",
    "output": "postulate Dop_rect_CProp0_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_967)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Min_spec_inv_ind. Soient $x1$ et $x2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $x3$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $x4$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_Hterm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $x1$ et $x2$ et $x3$ et $x4$, pour toutes les fonctions $P$ des éléments $_z1890$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_1080$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x2$ et $m$ et des éléments $_x_1079$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $matita_arithmetics_nat.plus$ appliqué à $x1$ et $x2$ et des éléments $_x_1078$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $x3$ appliqué à $m$ et $matita_basics_bool.true$ et des fonctions $_x_1077$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x2$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $x3$ appliqué à $i$ et $matita_basics_bool.false$ et des éléments $_z1891$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x4$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $m$, pour toutes les fonctions $_H2$ des fonctions $_x_1081$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x2$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $x1$ et $x2$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $x3$ appliqué à $i$ et $matita_basics_bool.false$ et des éléments $_z1891$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x4$ et $matita_arithmetics_nat.plus$ appliqué à $x1$ et $x2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $x1$ et $x2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $x4$.",
    "output": "postulate min_spec_inv_ind : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_Hterm : cic.Term cic.prop (matita_arithmetics_minimization.min_spec x1 x2 x3 x4)) -> (P : (_z1890 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le x2 m)) -> (_x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus x1 x2))) -> (_x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 m) matita_basics_bool.true)) -> (_x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le x2 i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 i) matita_basics_bool.false)) -> (_z1891 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x4 m)) -> cic.Term cic.prop (P m)) -> (_H2 : (_x_1081 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le x2 i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus x1 x2))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 i) matita_basics_bool.false)) -> (_z1891 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x4 (matita_arithmetics_nat.plus x1 x2))) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus x1 x2))) -> cic.Term cic.prop (P x4)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Max. Anta att $Sort$. Anta att $Sort$. Då $Sort$.",
    "output": "postulate max : Sort -> Sort -> Sort"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_CProp1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_660$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Alors pour tous les éléments $x_660$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_660$.",
    "output": "postulate DPair_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_660)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mk_ACop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $aop$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $nil$. Låt $_comm$ vara en funktion från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $nil$ och $aop$ och $b$ och $a$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $nil$.",
    "output": "postulate mk_ACop : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil aop a b) (matita_arithmetics_bigops.op A nil aop b a))) -> cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Orb_true_r2. Soient $b1$ et $b2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $b2$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_basics_bool.orb$ appliqué à $b1$ et $b2$ et $matita_basics_bool.true$.",
    "output": "postulate orb_true_r2 : (b1 : cic.Term univs.Type0 matita_basics_bool.bool) -> (b2 : cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b2 matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.orb b1 b2) matita_basics_bool.true)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_sum. Låt $k1$ och $k2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $p1$ och $p2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $B$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $op$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $B$ och $nil$, för alla funktioner $f$ och $g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och $matita_arithmetics_bigops.bigop$ applicerat på $k1$ och funktionen som avbildar $i$ som $p1$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $k2$ och funktionen som avbildar $i$ som $p2$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $g$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $k1$ och $k2$ och funktionen som avbildar $i$ som $matita_basics_bool.match_bool$ applicerat på $univs.Type0$ och funktionen som avbildar $__$ som $matita_basics_bool.bool$ och $p1$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $i$ och $k2$ och $p2$ applicerat på $i$ och $matita_arithmetics_nat.leb$ applicerat på $k2$ och $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $matita_basics_bool.match_bool$ applicerat på $univs.Type0$ och funktionen som avbildar $__$ som $B$ och $f$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $i$ och $k2$ och $g$ applicerat på $i$ och $matita_arithmetics_nat.leb$ applicerat på $k2$ och $i$.",
    "output": "postulate bigop_sum : (k1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop k1 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.bigop k2 (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p2 i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g i))) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.plus k1 k2) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.match_bool univs.Type0 (\\ __ : cic.Term univs.Type0 matita_basics_bool.bool -> matita_basics_bool.bool) (p1 (matita_arithmetics_nat.minus i k2)) (p2 i) (matita_arithmetics_nat.leb k2 i)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.match_bool univs.Type0 (\\ __ : cic.Term univs.Type0 matita_basics_bool.bool -> B) (f (matita_arithmetics_nat.minus i k2)) (g i) (matita_arithmetics_nat.leb k2 i))))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "PlusAC. $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$.",
    "output": "postulate plusAC : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop matita_arithmetics_nat.nat matita_arithmetics_nat.O)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_discr. Soit $a1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a2$ un élément de $cic.Term$ de $univs.Type0$ et de $a1$. Alors pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $a1$ et $a2$, pour tous les éléments $_e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.ACop$ appliqué à $a1$ et $a2$ et $x$ et $y$, $cic.Term$ tient pour $univs.Type2$ et $matita_arithmetics_bigops.match_ACop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $t0$ et $t1$ à $matita_arithmetics_bigops.match_ACop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $u0$ et $u1$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $matita_basics_logic.R0$ appliqué à $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $t0$ et $u0$ et la fonction qui envoie $e0$ à $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et la fonction qui envoie $x0$ et $p0$ à $cic.prod$ appliqué à $univs.Type0$ et $cic.prop$ et $a1$ et la fonction qui envoie $a$ à $cic.prod$ appliqué à $univs.Type0$ et $cic.prop$ et $a1$ et la fonction qui envoie $b$ à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $a1$ et $matita_arithmetics_bigops.op$ appliqué à $a1$ et $a2$ et $x0$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $a1$ et $a2$ et $x0$ et $b$ et $a$ appliqué à $u0$ et $e0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $t0$ et la fonction qui envoie $x_19$ et $_x_20$ à $cic.lift$ appliqué à $cic.prop$ et $univs.Type0$ et la fonction qui envoie $x0$ et $p0$ à $cic.prod$ appliqué à $univs.Type0$ et $cic.prop$ et $a1$ et la fonction qui envoie $a$ à $cic.prod$ appliqué à $univs.Type0$ et $cic.prop$ et $a1$ et la fonction qui envoie $b$ à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $a1$ et $matita_arithmetics_bigops.op$ appliqué à $a1$ et $a2$ et $x0$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $a1$ et $a2$ et $x0$ et $b$ et $a$ appliqué à $x_19$ et $_x_20$ et $t1$ et $u0$ et $e0$ et $u1$ et la fonction qui envoie $_e1$ à $P$ et la fonction qui envoie $_z57$ à $P$ et $y$ et $x$.",
    "output": "postulate ACop_discr : (a1 : cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 a1) -> (x : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2)) -> (y : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) x y)) -> cic.Term univs.Type2 (matita_arithmetics_bigops.match_ACop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> cic.univ univs.Type2) (\\ t0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ t1 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 t0 a b) (matita_arithmetics_bigops.op a1 a2 t0 b a))) -> matita_arithmetics_bigops.match_ACop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) -> cic.univ univs.Type2) (\\ u0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ u1 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 u0 a b) (matita_arithmetics_bigops.op a1 a2 u0 b a))) -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) u0) (\\ e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) u0) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) x0) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 x0 a b) (matita_arithmetics_bigops.op a1 a2 x0 b a)))) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 (\\ x_19 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ _x_20 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 x_19) -> cic.lift cic.prop univs.Type0 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 x0) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 x0 a b) (matita_arithmetics_bigops.op a1 a2 x0 b a)))) x_19 _x_20)) t1 u0 e0) u1) (\\ _e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) x0) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 x0 a b) (matita_arithmetics_bigops.op a1 a2 x0 b a)))) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 (\\ x_19 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ _x_20 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 x_19) -> cic.lift cic.prop univs.Type0 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 x0) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 x0 a b) (matita_arithmetics_bigops.op a1 a2 x0 b a)))) x_19 _x_20)) t1 u0 e0) u1) -> P))) (\\ _z57 : ((e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) u0)) -> (_e1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) x0) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 x0 a b) (matita_arithmetics_bigops.op a1 a2 x0 b a)))) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 (\\ x_19 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ _x_20 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 x_19) -> cic.lift cic.prop univs.Type0 ((\\ x0 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) t0 x0) -> cic.prod univs.Type0 cic.prop a1 (\\ a : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 cic.prop a1 (\\ b : cic.Term univs.Type0 a1 -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_arithmetics_bigops.op a1 a2 x0 a b) (matita_arithmetics_bigops.op a1 a2 x0 b a)))) x_19 _x_20)) t1 u0 e0) u1)) -> cic.Term univs.Type1 P) -> P))) y) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_rect_CProp0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_885$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_885$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_885$.",
    "output": "postulate Aop_rect_CProp0_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_885 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_885 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_885)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Monotonic. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate monotonic : (A : cic.Univ univs.Type0) -> (_R : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ex. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate ex : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Ex_intro. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och $P$.",
    "output": "postulate ex_intro : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (x : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (P x)) -> cic.Term cic.prop (matita_basics_logic.ex A P)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Found_min_spec. Let $n$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.true$. Let $__3$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $i$ and elements $__4$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.false$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $n$ and $b$ and $f$ and $m$.",
    "output": "postulate found_min_spec : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus n b))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.min_spec n b f m)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "List_elim_left. Let $S$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$ to elements of $cic.Univ$ of $cic.prop$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_lists_list.nil$ applied to $S$. Let $__1$ be a function from elements $a$ of $cic.Term$ of $univs.Type0$ and $S$ and elements $tl$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $P$ applied to $tl$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_lists_list.append$ applied to $S$ and $tl$ and $matita_basics_lists_list.cons$ applied to $S$ and $a$ and $matita_basics_lists_list.nil$ applied to $S$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $l$.",
    "output": "postulate list_elim_left : (S : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (P (matita_basics_lists_list.nil S))) -> (__1 : (a : cic.Term univs.Type0 S) -> (tl : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (__1 : cic.Term cic.prop (P tl)) -> cic.Term cic.prop (P (matita_basics_lists_list.append S tl (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))))) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (P l)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Allr_fwd_cons. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Allr$ appliqué à $A$ et $R$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Allr$ appliqué à $A$ et $R$ et $l$.",
    "output": "postulate Allr_fwd_cons : (A : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (a : cic.Term univs.Type0 A) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Allr A R (matita_basics_lists_list.cons A a l))) -> cic.Term cic.prop (matita_basics_lists_list.Allr A R l)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_le_to_lt. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $m$ et $n$.",
    "output": "postulate not_le_to_lt : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))) -> cic.Term cic.prop (matita_arithmetics_nat.lt m n)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Eq_rect_CProp0. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all functions $Q_$ from elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_refl$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$, for all elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_37$ and $x_38$.",
    "output": "postulate eq_rect_CProp0 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_37 : cic.Term univs.Type2 A) -> (_x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_37 : cic.Term univs.Type2 A) -> (x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Term cic.prop (Q_ x_37 x_38)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_ind_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_638$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_638$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_638$.",
    "output": "postulate DPair_ind_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_638)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Option_rect_Type5_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_594$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type5$, for all elements $_H_None$ of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_595$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_595$, for all elements $x_594$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_594$.",
    "output": "postulate option_rect_Type5_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type5) -> (_H_None : cic.Term univs.Type5 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_595 : cic.Term univs.Type0 _A) -> cic.Term univs.Type5 (Q_ (matita_basics_types.Some _A x_595))) -> (x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type5 (Q_ x_594)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Times_times. Låt $x$ och $y$ och $z$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.times$ applicerat på $x$ och $matita_arithmetics_nat.times$ applicerat på $y$ och $z$ och $matita_arithmetics_nat.times$ applicerat på $y$ och $matita_arithmetics_nat.times$ applicerat på $x$ och $z$.",
    "output": "postulate times_times : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times x (matita_arithmetics_nat.times y z)) (matita_arithmetics_nat.times y (matita_arithmetics_nat.times x z)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Primeb_true_to_prime. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_primes.primeb$ applicerat på $n$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $n$.",
    "output": "postulate primeb_true_to_prime : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.primeb n) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_primes.prime n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Void_rect_Type2. Låt $Q_$ vara en funktion från element $_x_486$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $univs.Type2$. Låt $x_486$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$. Då håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_486$.",
    "output": "postulate void_rect_Type2 : (Q_ : (_x_486 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ univs.Type2) -> (x_486 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term univs.Type2 (Q_ x_486)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_rect_CProp0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_581$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_inl$ des éléments $x_582$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_582$, pour toutes les fonctions $_H_inr$ des éléments $x_583$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_583$, pour tous les éléments $x_581$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_581$.",
    "output": "postulate Sum_rect_CProp0_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_581 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) -> (_H_inl : (x_582 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_582))) -> (_H_inr : (x_583 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_583))) -> (x_581 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term cic.prop (Q_ x_581)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "And_inv_rect_Type3. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z335$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H1$ be a function from elements $x_132$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_131$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z336$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_132$ and $x_131$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_132$ and $x_131$. Then $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.",
    "output": "postulate And_inv_rect_Type3 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z335 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (x_132 : cic.Term cic.prop x1) -> (x_131 : cic.Term cic.prop x2) -> (_z336 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_132 x_131))) -> cic.Term univs.Type3 (P (matita_basics_logic.conj x1 x2 x_132 x_131))) -> cic.Term univs.Type3 (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Aop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1554$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och element $_z1555$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_Aop$ applicerat på $x1$ och $x2$ och $op$ och $_nill$ och $_nilr$ och $_assoc$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_bigops.mk_Aop$ applicerat på $x1$ och $x2$ och $op$ och $_nill$ och $_nilr$ och $_assoc$. Då håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate Aop_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1554 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1555 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_rect_Type1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_648$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_648$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_648$.",
    "output": "postulate DPair_rect_Type1_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type1) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type1 (Q_ x_648)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_ind. Soit $Q_$ une fonction des éléments $_x_40$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_I$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.I$, pour tous les éléments $x_40$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_40$.",
    "output": "postulate True_ind : (Q_ : (_x_40 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_40 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_40)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_min_f_min_g. For all functions $f$ and $g$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g$ applied to $i$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $g$ and $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$.",
    "output": "postulate le_min_f_min_g : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (g i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.min n b g) (matita_arithmetics_minimization.min n b f))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_CProp3_body. For all functions $Q_$ from elements $_x_58$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_I$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.I$, for all elements $x_58$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.True$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_58$.",
    "output": "postulate True_rect_CProp3_body : (Q_ : (_x_58 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_58 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_58)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_Type0_body. Låt $Q_$ vara en funktion från element $_x_52$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $_H_I$ av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_logic.I$, för alla element $x_52$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_52$.",
    "output": "postulate True_rect_Type0_body : (Q_ : (_x_52 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type0) -> (_H_I : cic.Term univs.Type0 (Q_ matita_basics_logic.I)) -> (x_52 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term univs.Type0 (Q_ x_52)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Mem_append_l2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soient $l1$ et $l2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $A$ et $a$ et $l2$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.mem$ appliqué à $A$ et $a$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$.",
    "output": "postulate mem_append_l2 : (A : cic.Univ univs.Type0) -> (a : cic.Term univs.Type0 A) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem A a l2)) -> cic.Term cic.prop (matita_basics_lists_list.mem A a (matita_basics_lists_list.append A l1 l2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Divides_to_p_ord. Låt $p$ och $a$ och $b$ och $c$ och $d$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$, för alla element $__4$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $n$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $a$ och $b$, för alla element $__5$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $m$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $c$ och $d$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $b$ och $d$ och $matita_arithmetics_nat.le$ applicerat på $a$ och $c$.",
    "output": "postulate divides_to_p_ord : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.prime p)) -> (__3 : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) -> (__4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat a b))) -> (__5 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord m p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat c d))) -> cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_primes.divides b d) (matita_arithmetics_nat.le a c))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Length_rev_append. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $l$ och $acc$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_lists_list.length$ applicerat på $A$ och $matita_basics_lists_list.rev_append$ applicerat på $A$ och $l$ och $acc$ och $matita_arithmetics_nat.plus$ applicerat på $matita_basics_lists_list.length$ applicerat på $A$ och $l$ och $matita_basics_lists_list.length$ applicerat på $A$ och $acc$.",
    "output": "postulate length_rev_append : (A : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (acc : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A (matita_basics_lists_list.rev_append A l acc)) (matita_arithmetics_nat.plus (matita_basics_lists_list.length A l) (matita_basics_lists_list.length A acc)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sig_rect_Type3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $Q_$ from elements $_x_670$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_670$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_670$.",
    "output": "postulate Sig_rect_Type3 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_670 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type3) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type3 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_670 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type3 (Q_ x_670)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_previous_prime5. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $ltml$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_primes.nth_prime$ appliqué à $n$ et $m$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.",
    "output": "postulate let_previous_prime5 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltml : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n) m)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "P_ord_aux_false. För alla element $p$ och $n$ och $m$ och $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $a$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord_aux$ applicerat på $p$ och $n$ och $m$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$.",
    "output": "postulate p_ord_aux_false : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n m) (matita_arithmetics_nat.S a))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux p n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_nat.O n))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Pair_elim2. Let $A$ and $B$ and $C$ and $C'$ be elements of $cic.Univ$ of $univs.Type0$. Let $T$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $C$. Then for all functions $T'$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $C'$, for all elements $p$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $A$ and $B$, for all functions $P$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $A$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $C$ and elements $__2$ of $cic.Term$ of $univs.Type0$ and $C'$ to elements of $cic.Univ$ of $cic.prop$, for all functions $__$ from elements $lft$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $rgt$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $A$ and $B$ and $p$ and $matita_basics_types.mk_Prod$ applied to $A$ and $B$ and $lft$ and $rgt$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_Prod$ applied to $A$ and $B$ and $lft$ and $rgt$ and $T$ applied to $lft$ and $rgt$ and $T'$ applied to $lft$ and $rgt$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $p$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and the function that maps $_0$ to $C$ and the function that maps $lft$ and $rgt$ to $T$ applied to $lft$ and $rgt$ and $p$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and the function that maps $_0$ to $C'$ and the function that maps $lft$ and $rgt$ to $T'$ applied to $lft$ and $rgt$ and $p$.",
    "output": "postulate pair_elim2 : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (C' : cic.Univ univs.Type0) -> (T : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (T' : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C') -> (p : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (P : (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> (__2 : cic.Term univs.Type0 C') -> cic.Univ cic.prop) -> (__ : (lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt) (T' lft rgt))) -> cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C) (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T lft rgt) p) (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C') (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T' lft rgt) p))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "ACop_rect_CProp5_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_905$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_ACop$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$, pour tous les éléments $x_905$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_905$.",
    "output": "postulate ACop_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_905)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "True_rect_CProp5. Låt $Q_$ vara en funktion från element $_x_56$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_I$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.I$. Då för alla element $x_56$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_56$.",
    "output": "postulate True_rect_CProp5 : (Q_ : (_x_56 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_56 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_56)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Psi_def. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ appliqué à $n$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et la fonction qui envoie $p$ à $matita_arithmetics_primes.primeb$ appliqué à $p$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $p$ à $matita_arithmetics_exp.exp$ appliqué à $p$ et $matita_arithmetics_log.log$ appliqué à $p$ et $n$.",
    "output": "postulate psi_def : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp p (matita_arithmetics_log.log p n))))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Not_found_min_spec. Pour tous les éléments $n$ et $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour toutes les fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_minimization.min_spec$ appliqué à $n$ et $b$ et $f$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$.",
    "output": "postulate not_found_min_spec : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.min_spec n b f (matita_arithmetics_nat.plus n b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bi_relation. Låt $__$ och $__1$ vara element av $cic.Univ$ av $univs.Type0$. Då håller $cic.Univ$ för $univs.Type0$.",
    "output": "postulate bi_relation : (__ : cic.Univ univs.Type0) -> (__1 : cic.Univ univs.Type0) -> cic.Univ univs.Type0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "DPair_inv_rect_CProp3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1146$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1147$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.",
    "output": "postulate DPair_inv_rect_CProp3 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1146 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1147 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Bigop_I. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $B$ och $nil$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $n$ och $matita_arithmetics_nat.O$ och funktionen som avbildar $i$ som funktionen som avbildar $i0$ som $p$ applicerat på $i0$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $i$ och $matita_arithmetics_nat.O$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som funktionen som avbildar $i0$ som $f$ applicerat på $i0$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $i$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$.",
    "output": "postulate bigop_I : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus n matita_arithmetics_nat.O) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i0) (matita_arithmetics_nat.plus i matita_arithmetics_nat.O)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i matita_arithmetics_nat.O))) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Prod_rect_Type3_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_696$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_mk_Prod$ vara en funktion från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$. Låt $x_696$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$. Då håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_696$.",
    "output": "postulate Prod_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type3) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type3 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term univs.Type3 (Q_ x_696)"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $len$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $p$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $lep$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$, pour tous les éléments $ltp$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $Hc$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$ et $matita_basics_bool.true$, pour tous les éléments $H2n$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.",
    "output": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) p)) matita_basics_bool.true)) -> (H2n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Le_exp_to_le. Let $b$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $b$ and $n$ and $matita_arithmetics_exp.exp$ applied to $b$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$.",
    "output": "postulate le_exp_to_le : (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp b n) (matita_arithmetics_exp.exp b m))) -> cic.Term cic.prop (matita_arithmetics_nat.le n m)"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Let_clause_10471. Let $n1$ and $n2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p1$ and $p2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$, for all functions $f1$ and $f2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.iso$ applied to $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, for all functions $h$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $cic.prod$ applied to $univs.Type0$ and $univs.Type0$ and $matita_arithmetics_nat.nat$ and the function that maps $__$ to $matita_arithmetics_nat.nat$ and the function that maps $k$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $cic.prod$ applied to $univs.Type0$ and $cic.prop$ and $matita_arithmetics_nat.nat$ and the function that maps $i$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and the function that maps $__$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ and the function that maps $__1$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$ and $matita_arithmetics_bigops.sub_hk$ applied to $h$ and $k$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $matita_arithmetics_bigops.sub_hk$ applied to $k$ and $h$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$, for all functions $k$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $cic.prod$ applied to $univs.Type0$ and $cic.prop$ and $matita_arithmetics_nat.nat$ and the function that maps $i$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and the function that maps $__$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ and the function that maps $__1$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$ and $matita_arithmetics_bigops.sub_hk$ applied to $h$ and $k$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $matita_arithmetics_bigops.sub_hk$ applied to $k$ and $h$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$, for all elements $_clearme2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $cic.prod$ applied to $univs.Type0$ and $cic.prop$ and $matita_arithmetics_nat.nat$ and the function that maps $i$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and the function that maps $__$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ and the function that maps $__1$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$ and $matita_arithmetics_bigops.sub_hk$ applied to $h$ and $k$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, for all functions $same$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $f1$ applied to $i$ and $f2$ applied to $h$ applied to $i$, for all elements $i$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Hind$ from functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.O$ and $n1$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.sub_hk$ applied to $h$ and $k$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $matita_arithmetics_nat.O$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $m$ and $f$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.sub_hk$ applied to $k$ and $h$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $m$ and $f$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $matita_arithmetics_nat.O$ and $p1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.O$ and the function that maps $i0$ to $p1$ applied to $i0$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i0$ to $f1$ applied to $i0$ and $matita_arithmetics_bigops.bigop$ applied to $m$ and the function that maps $i0$ to $f$ applied to $i0$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i0$ to $f2$ applied to $i0$, for all functions $p20$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.O$ and $n1$, for all elements $sub1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.sub_hk$ applied to $h$ and $k$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $matita_arithmetics_nat.O$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $matita_arithmetics_nat.S$ applied to $m$ and $p20$, for all elements $sub2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.sub_hk$ applied to $k$ and $h$ and $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $matita_arithmetics_nat.S$ applied to $m$ and $p20$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $matita_arithmetics_nat.O$ and $p1$, for all elements $x2571$ and $x2572$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2571$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2572$ and $matita_arithmetics_div_and_mod.div$ applied to $x2571$ and $x2572$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2571$ and $x2572$.",
    "output": "postulate let_clause_10471 : (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (_clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) -> (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (\\ __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.nat)) (\\ k : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> matita_basics_logic.And (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n1) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1) -> cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))))) (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 n2 p2) (matita_arithmetics_bigops.mk_range B f1 n1 p1))))) -> (k : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme1 : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n1) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1) -> cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))))) (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 n2 p2) (matita_arithmetics_bigops.mk_range B f1 n1 p1)))) -> (_clearme2 : cic.Term cic.prop (matita_basics_logic.And (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n1) (\\ __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1) -> cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))))) (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)))) -> (same : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f1 i) (f2 (h i)))) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) -> (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1) (matita_arithmetics_bigops.mk_range B f2 m f))) -> (__2 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 m f) (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 i0) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f1 i0)) (matita_arithmetics_bigops.bigop m (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f2 i0)))) -> (p20 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) -> (sub1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k B (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1) (matita_arithmetics_bigops.mk_range B f2 (matita_arithmetics_nat.S m) p20))) -> (sub2 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk k h B (matita_arithmetics_bigops.mk_range B f2 (matita_arithmetics_nat.S m) p20) (matita_arithmetics_bigops.mk_range B f1 matita_arithmetics_nat.O p1))) -> (x2571 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2572 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2571 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2572 (matita_arithmetics_div_and_mod.div x2571 x2572)) (matita_arithmetics_div_and_mod.mod x2571 x2572)))"
  },
  {
    "instruction": "Translate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Injective. Pour tous les éléments $A$ et $B$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Univ$ tient pour $cic.prop$.",
    "output": "postulate injective : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> cic.Univ cic.prop"
  },
  {
    "instruction": "Translate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  ",
    "input": "Sum_rect_CProp1_body. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_576$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_inl$ from elements $x_577$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_577$, for all functions $_H_inr$ from elements $x_578$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_578$, for all elements $x_576$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_576$.",
    "output": "postulate Sum_rect_CProp1_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_576 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) -> (_H_inl : (x_577 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_577))) -> (_H_inr : (x_578 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_578))) -> (x_576 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term cic.prop (Q_ x_576)"
  }
]