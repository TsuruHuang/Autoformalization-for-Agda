[
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "Eq : (x : Elem Num) -> (y : Elem Num) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "Axiom Eq : forall x : Num, forall y : Num, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "axiom Eq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "Eq : (x : Elem Num) -> (y : Elem Num) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "Axiom Eq : forall x : Num, forall y : Num, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "axiom Eq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x = y$.",
    "output": "Eq : (x : Elem Num) -> (y : Elem Num) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x = y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x = y$.",
    "output": "Axiom Eq : forall x : Num, forall y : Num, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x = y$.",
    "output": "axiom Eq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than $y$.",
    "output": "Lt : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than $y$.",
    "output": "Axiom Lt : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than $y$.",
    "output": "axiom Lt (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than $y$.",
    "output": "Lt : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than $y$.",
    "output": "Axiom Lt : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than $y$.",
    "output": "axiom Lt (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x < y$.",
    "output": "Lt : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x < y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x < y$.",
    "output": "Axiom Lt : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x < y$.",
    "output": "axiom Lt (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "Gt : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "Axiom Gt : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "axiom Gt (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "Gt : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "Axiom Gt : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "axiom Gt (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x > y$.",
    "output": "Gt : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x > y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x > y$.",
    "output": "Axiom Gt : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x > y$.",
    "output": "axiom Gt (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "Neq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "Axiom Neq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "axiom Neq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "Neq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "Axiom Neq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "axiom Neq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\neq y$.",
    "output": "Neq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\neq y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\neq y$.",
    "output": "Axiom Neq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\neq y$.",
    "output": "axiom Neq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "Leq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "Axiom Leq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "axiom Leq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "Leq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "Axiom Leq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "axiom Leq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\leq y$.",
    "output": "Leq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\leq y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\leq y$.",
    "output": "Axiom Leq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\leq y$.",
    "output": "axiom Leq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "Geq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "Axiom Geq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "axiom Geq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "Geq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "Axiom Geq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "axiom Geq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\geq y$.",
    "output": "Geq : Elem Num -> Elem Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\geq y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\geq y$.",
    "output": "Axiom Geq : Num -> Num -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\geq y$.",
    "output": "axiom Geq (x y : Num) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "Eqt : (A : Set) -> Elem A -> Elem A -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "Axiom Eqt : forall A : Set, (A -> A -> Prop) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "axiom Eqt (A : Set) (x y : A) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "Eqt : (A : Set) -> Elem A -> Elem A -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "Axiom Eqt : forall A : Set, (A -> A -> Prop) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "axiom Eqt (A : Set) (x y : A) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is positive.",
    "output": "positive : (x : Elem Real) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is positive.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is positive.",
    "output": "Axiom positive : forall x : Real, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is positive.",
    "output": "axiom positive (x : Real) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is positive.",
    "output": "positive : (x : Elem Real) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is positive.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is positive.",
    "output": "Axiom positive : forall x : Real, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is positive.",
    "output": "axiom positive (x : Real) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is positive.",
    "output": "positive : (x : Elem Real) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is positive.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is positive.",
    "output": "Axiom positive : forall x : Real, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is positive.",
    "output": "axiom positive (x : Real) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is negative.",
    "output": "negative : Elem Real -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is negative.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is negative.",
    "output": "Axiom negative : Real -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is negative.",
    "output": "axiom negative (x : Real) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is negative.",
    "output": "negative : Elem Real -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is negative.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is negative.",
    "output": "Axiom negative : Real -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is negative.",
    "output": "axiom negative (x : Real) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is negative.",
    "output": "negative : Elem Real -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is negative.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is negative.",
    "output": "Axiom negative : Real -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is negative.",
    "output": "axiom negative (x : Real) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the sum of $x$ and $y$ is an instance of Numbers.",
    "output": "plus : (x : Elem Num) -> (y : Elem Num) -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the sum of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the sum of $x$ and $y$ is an instance of Numbers.",
    "output": "Axiom plus : forall x : Num, forall y : Num, Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the sum of $x$ and $y$ is an instance of Numbers.",
    "output": "axiom plus (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the sum of $x$ and $y$ is a Number.",
    "output": "plus : (x : Elem Num) -> (y : Elem Num) -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the sum of $x$ and $y$ is a Number.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the sum of $x$ and $y$ is a Number.",
    "output": "Axiom plus : forall x : Num, forall y : Num, Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the sum of $x$ and $y$ is a Number.",
    "output": "axiom plus (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x + y$ is a Number.",
    "output": "plus : (x : Elem Num) -> (y : Elem Num) -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x + y$ is a Number.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x + y$ is a Number.",
    "output": "Axiom plus : forall x : Num, forall y : Num, Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x + y$ is a Number.",
    "output": "axiom plus (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the difference of $x$ and $y$ is an instance of Numbers.",
    "output": "minus : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the difference of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the difference of $x$ and $y$ is an instance of Numbers.",
    "output": "Axiom minus : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the difference of $x$ and $y$ is an instance of Numbers.",
    "output": "axiom minus (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the difference of $x$ and $y$ is a Number.",
    "output": "minus : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the difference of $x$ and $y$ is a Number.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the difference of $x$ and $y$ is a Number.",
    "output": "Axiom minus : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the difference of $x$ and $y$ is a Number.",
    "output": "axiom minus (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x - y$ is a Number.",
    "output": "minus : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x - y$ is a Number.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x - y$ is a Number.",
    "output": "Axiom minus : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x - y$ is a Number.",
    "output": "axiom minus (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the product of $x$ and $y$ is an instance of Numbers.",
    "output": "times : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the product of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the product of $x$ and $y$ is an instance of Numbers.",
    "output": "Axiom times : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the product of $x$ and $y$ is an instance of Numbers.",
    "output": "axiom times (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the product of $x$ and $y$ is a Number.",
    "output": "times : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the product of $x$ and $y$ is a Number.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the product of $x$ and $y$ is a Number.",
    "output": "Axiom times : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the product of $x$ and $y$ is a Number.",
    "output": "axiom times (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x y$ is a Number.",
    "output": "times : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x y$ is a Number.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x y$ is a Number.",
    "output": "Axiom times : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x y$ is a Number.",
    "output": "axiom times (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the quotient of $x$ and $y$ is an instance of Numbers.",
    "output": "div : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the quotient of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the quotient of $x$ and $y$ is an instance of Numbers.",
    "output": "Axiom div : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the quotient of $x$ and $y$ is an instance of Numbers.",
    "output": "axiom div (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the quotient of $x$ and $y$ is a Number.",
    "output": "div : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the quotient of $x$ and $y$ is a Number.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the quotient of $x$ and $y$ is a Number.",
    "output": "Axiom div : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the quotient of $x$ and $y$ is a Number.",
    "output": "axiom div (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\frac{ x}{y}$ is a Number.",
    "output": "div : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\frac{ x}{y}$ is a Number.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\frac{ x}{y}$ is a Number.",
    "output": "Axiom div : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\frac{ x}{y}$ is a Number.",
    "output": "axiom div (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the exponentiation of $x$ and $y$ is an instance of Numbers.",
    "output": "pow : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the exponentiation of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the exponentiation of $x$ and $y$ is an instance of Numbers.",
    "output": "Axiom pow : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the exponentiation of $x$ and $y$ is an instance of Numbers.",
    "output": "axiom pow (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the exponentiation of $x$ and $y$ is a Number.",
    "output": "pow : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the exponentiation of $x$ and $y$ is a Number.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the exponentiation of $x$ and $y$ is a Number.",
    "output": "Axiom pow : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the exponentiation of $x$ and $y$ is a Number.",
    "output": "axiom pow (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x ^ {y}$ is a Number.",
    "output": "pow : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x ^ {y}$ is a Number.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x ^ {y}$ is a Number.",
    "output": "Axiom pow : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x ^ {y}$ is a Number.",
    "output": "axiom pow (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the negation of $x$ is an instance of Numbers.",
    "output": "neg : Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the negation of $x$ is an instance of Numbers.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the negation of $x$ is an instance of Numbers.",
    "output": "Axiom neg : Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the negation of $x$ is an instance of Numbers.",
    "output": "axiom neg (x : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a Number. Then the negation of $x$ is a Number.",
    "output": "neg : Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then the negation of $x$ is a Number.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a Number. Then the negation of $x$ is a Number.",
    "output": "Axiom neg : Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a Number. Then the negation of $x$ is a Number.",
    "output": "axiom neg (x : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a Number. Then $- x$ is a Number.",
    "output": "neg : Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then $- x$ is a Number.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a Number. Then $- x$ is a Number.",
    "output": "Axiom neg : Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a Number. Then $- x$ is a Number.",
    "output": "axiom neg (x : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the square root of $x$ is an instance of Numbers.",
    "output": "sqrt : Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the square root of $x$ is an instance of Numbers.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the square root of $x$ is an instance of Numbers.",
    "output": "Axiom sqrt : Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the square root of $x$ is an instance of Numbers.",
    "output": "axiom sqrt (x : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a Number. Then the square root of $x$ is a Number.",
    "output": "sqrt : Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then the square root of $x$ is a Number.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a Number. Then the square root of $x$ is a Number.",
    "output": "Axiom sqrt : Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a Number. Then the square root of $x$ is a Number.",
    "output": "axiom sqrt (x : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a Number. Then $\\sqrt{ x}$ is a Number.",
    "output": "sqrt : Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then $\\sqrt{ x}$ is a Number.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a Number. Then $\\sqrt{ x}$ is a Number.",
    "output": "Axiom sqrt : Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a Number. Then $\\sqrt{ x}$ is a Number.",
    "output": "axiom sqrt (x : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the logarithm of $x$ and $y$ is an instance of Numbers.",
    "output": "log : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the logarithm of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the logarithm of $x$ and $y$ is an instance of Numbers.",
    "output": "Axiom log : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the logarithm of $x$ and $y$ is an instance of Numbers.",
    "output": "axiom log (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the logarithm of $x$ and $y$ is a Number.",
    "output": "log : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the logarithm of $x$ and $y$ is a Number.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the logarithm of $x$ and $y$ is a Number.",
    "output": "Axiom log : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the logarithm of $x$ and $y$ is a Number.",
    "output": "axiom log (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\log_ x {y}$ is a Number.",
    "output": "log : Elem Num -> Elem Num -> Elem Num ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\log_ x {y}$ is a Number.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\log_ x {y}$ is a Number.",
    "output": "Axiom log : Num -> Num -> Num ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\log_ x {y}$ is a Number.",
    "output": "axiom log (x y : Num) : Num"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the successor of $x$ is an instance of natural numbers.",
    "output": "succ : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the successor of $x$ is an instance of natural numbers.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the successor of $x$ is an instance of natural numbers.",
    "output": "Axiom succ : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the successor of $x$ is an instance of natural numbers.",
    "output": "axiom succ (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a natural number. Then the successor of $x$ is a natural number.",
    "output": "succ : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a natural number. Then the successor of $x$ is a natural number.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a natural number. Then the successor of $x$ is a natural number.",
    "output": "Axiom succ : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a natural number. Then the successor of $x$ is a natural number.",
    "output": "axiom succ (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in N$. Then the successor of $x$ is a natural number.",
    "output": "succ : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in N$. Then the successor of $x$ is a natural number.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in N$. Then the successor of $x$ is a natural number.",
    "output": "Axiom succ : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in N$. Then the successor of $x$ is a natural number.",
    "output": "axiom succ (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of integers. Then the greatest common divisor of $x$ and $y$ is an instance of integers.",
    "output": "gcd : Elem Int -> Elem Int -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of integers. Then the greatest common divisor of $x$ and $y$ is an instance of integers.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of integers. Then the greatest common divisor of $x$ and $y$ is an instance of integers.",
    "output": "Axiom gcd : Int -> Int -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of integers. Then the greatest common divisor of $x$ and $y$ is an instance of integers.",
    "output": "axiom gcd (x y : Int) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be integers. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "gcd : Elem Int -> Elem Int -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be integers. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be integers. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "Axiom gcd : Int -> Int -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be integers. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "axiom gcd (x y : Int) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x , y \\in Z$. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "gcd : Elem Int -> Elem Int -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x , y \\in Z$. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x , y \\in Z$. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "Axiom gcd : Int -> Int -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x , y \\in Z$. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "axiom gcd (x y : Int) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "",
    "output": "abs : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "",
    "output": "Axiom abs : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "",
    "output": "axiom abs (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "",
    "output": "abs : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "",
    "output": "Axiom abs : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "",
    "output": "axiom abs (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "",
    "output": "abs : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "",
    "output": "Axiom abs : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "",
    "output": "axiom abs (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the factorial of $x$ is an instance of natural numbers.",
    "output": "factorial : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the factorial of $x$ is an instance of natural numbers.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the factorial of $x$ is an instance of natural numbers.",
    "output": "Axiom factorial : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the factorial of $x$ is an instance of natural numbers.",
    "output": "axiom factorial (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a natural number. Then the factorial of $x$ is a natural number.",
    "output": "factorial : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a natural number. Then the factorial of $x$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a natural number. Then the factorial of $x$ is a natural number.",
    "output": "Axiom factorial : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a natural number. Then the factorial of $x$ is a natural number.",
    "output": "axiom factorial (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in N$. Then the factorial of $x$ is a natural number.",
    "output": "factorial : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in N$. Then the factorial of $x$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in N$. Then the factorial of $x$ is a natural number.",
    "output": "Axiom factorial : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in N$. Then the factorial of $x$ is a natural number.",
    "output": "axiom factorial (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a natural number. Then $x !$ is a natural number.",
    "output": "factorial : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a natural number. Then $x !$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a natural number. Then $x !$ is a natural number.",
    "output": "Axiom factorial : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a natural number. Then $x !$ is a natural number.",
    "output": "axiom factorial (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in N$. Then $x !$ is a natural number.",
    "output": "factorial : Elem Nat -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in N$. Then $x !$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in N$. Then $x !$ is a natural number.",
    "output": "Axiom factorial : nat -> nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in N$. Then $x !$ is a natural number.",
    "output": "axiom factorial (x : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of integers. Then we can say that $x$ is even.",
    "output": "even : Elem Int -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of integers. Then we can say that $x$ is even.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of integers. Then we can say that $x$ is even.",
    "output": "Axiom even : Int -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of integers. Then we can say that $x$ is even.",
    "output": "axiom even (x : Int) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an integer. Then we can say that $x$ is even.",
    "output": "even : Elem Int -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an integer. Then we can say that $x$ is even.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an integer. Then we can say that $x$ is even.",
    "output": "Axiom even : Int -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an integer. Then we can say that $x$ is even.",
    "output": "axiom even (x : Int) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in Z$. Then we can say that $x$ is even.",
    "output": "even : Elem Int -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in Z$. Then we can say that $x$ is even.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in Z$. Then we can say that $x$ is even.",
    "output": "Axiom even : Int -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in Z$. Then we can say that $x$ is even.",
    "output": "axiom even (x : Int) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of integers. Then $x$ is odd, if $n$ is not even.",
    "output": "def odd : Elem Int -> Prop := n => not (even n) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of integers. Then $x$ is odd, if $n$ is not even.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of integers. Then $x$ is odd, if $n$ is not even.",
    "output": "Definition odd (x : Int) : Prop := ~ even n ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of integers. Then $x$ is odd, if $n$ is not even.",
    "output": "def odd (x : Int) : Prop := ¬ even n"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an integer. Then $x$ is odd, if $n$ is not even.",
    "output": "def odd : Elem Int -> Prop := n => not (even n) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an integer. Then $x$ is odd, if $n$ is not even.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an integer. Then $x$ is odd, if $n$ is not even.",
    "output": "Definition odd (x : Int) : Prop := ~ even n ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an integer. Then $x$ is odd, if $n$ is not even.",
    "output": "def odd (x : Int) : Prop := ¬ even n"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in Z$. Then $x$ is odd, if $n$ is not even.",
    "output": "def odd : Elem Int -> Prop := n => not (even n) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in Z$. Then $x$ is odd, if $n$ is not even.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in Z$. Then $x$ is odd, if $n$ is not even.",
    "output": "Definition odd (x : Int) : Prop := ~ even n ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in Z$. Then $x$ is odd, if $n$ is not even.",
    "output": "def odd (x : Int) : Prop := ¬ even n"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "def divisible : Elem Int -> Elem Int -> Prop := n => m => exists Int (k => Eq n (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "Definition divisible (x y : Int) : Prop := Exist Int (fun k => n = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "def divisible (x y : Int) : Prop := Exist Int (λ k => n = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "def divide : Elem Int -> Elem Int -> Prop := n => m => divisible m n ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "Definition divide (x y : Int) : Prop := divisible m n ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "def divide (x y : Int) : Prop := divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "def divide : Elem Int -> Elem Int -> Prop := n => m => divisible m n ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "Definition divide (x y : Int) : Prop := divisible m n ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "def divide (x y : Int) : Prop := divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "def divide : Elem Int -> Elem Int -> Prop := n => m => divisible m n ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "Definition divide (x y : Int) : Prop := divisible m n ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "def divide (x y : Int) : Prop := divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "def divisor : Elem Int -> Elem Int -> Prop := divide ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "Definition divisor (x y : Int) : Prop := divide ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "def divisor (x y : Int) : Prop := divide"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "def divisor : Elem Int -> Elem Int -> Prop := divide ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "Definition divisor (x y : Int) : Prop := divide ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "def divisor (x y : Int) : Prop := divide"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "def divisor : Elem Int -> Elem Int -> Prop := divide ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "Definition divisor (x y : Int) : Prop := divide ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "def divisor (x y : Int) : Prop := divide"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime : Elem Nat -> Prop := n => not (exists Nat (m => and (Lt 1 m) (and (Lt m n) (divisible n m)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "Definition prime (x : nat) : Prop := ~ Exist nat (fun m => 1 < m /\\ (m < n /\\ divisible n m)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "def prime (x : Nat) : Prop := ¬ Exist Nat (λ m => 1 < m ∧ (m < n ∧ divisible n m))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Booleans are a basic type.",
    "output": "def bool : Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Booleans are a basic type.",
    "output": "postulate bool : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Booleans are a basic type.",
    "output": "Axiom bool : Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Booleans are a basic type.",
    "output": "axiom bool : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Set$. Then $List$ is a set.",
    "output": "def List : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Then $List$ is a set.",
    "output": "postulate List : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Set$. Then $List$ is a set.",
    "output": "Axiom List : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Set$. Then $List$ is a set.",
    "output": "axiom List (x : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List$ applied to $A$. Then $member$ is a proposition.",
    "output": "member : A : Set -> Elem A -> Elem (List A) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List$ applied to $A$. Then $member$ is a proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List$ applied to $A$. Then $member$ is a proposition.",
    "output": "Axiom member : forall A : Set, (A -> List A -> Prop) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List$ applied to $A$. Then $member$ is a proposition.",
    "output": "axiom member (A : Set) (x : A) (y : List A) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "member : A : Set -> Elem A -> Elem (List A) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "Axiom member : forall A : Set, (A -> List A -> Prop) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "axiom member (A : Set) (x : A) (y : List A) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "member : A : Set -> Elem A -> Elem (List A) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "Axiom member : forall A : Set, (A -> List A -> Prop) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "axiom member (A : Set) (x : A) (y : List A) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Set$. Assume that $Set$. Then $function$ is a set.",
    "output": "function : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Assume that $Set$. Then $function$ is a set.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Set$. Assume that $Set$. Then $function$ is a set.",
    "output": "Axiom function : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Set$. Assume that $Set$. Then $function$ is a set.",
    "output": "axiom function (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Set$ and $Set$. Then $function$ is a set.",
    "output": "function : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$ and $Set$. Then $function$ is a set.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Set$ and $Set$. Then $function$ is a set.",
    "output": "Axiom function : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Set$ and $Set$. Then $function$ is a set.",
    "output": "axiom function (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the union of $x$ and $y$ is a set.",
    "output": "union : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the union of $x$ and $y$ is a set.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the union of $x$ and $y$ is a set.",
    "output": "Axiom union : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the union of $x$ and $y$ is a set.",
    "output": "axiom union (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cup y$ is a set.",
    "output": "union : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cup y$ is a set.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cup y$ is a set.",
    "output": "Axiom union : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cup y$ is a set.",
    "output": "axiom union (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the intersection of $x$ and $y$ is a set.",
    "output": "intersection : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the intersection of $x$ and $y$ is a set.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the intersection of $x$ and $y$ is a set.",
    "output": "Axiom intersection : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the intersection of $x$ and $y$ is a set.",
    "output": "axiom intersection (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cap y$ is a set.",
    "output": "intersection : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cap y$ is a set.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cap y$ is a set.",
    "output": "Axiom intersection : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cap y$ is a set.",
    "output": "axiom intersection (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "difference : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "Axiom difference : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "axiom difference (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "difference : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "Axiom difference : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "axiom difference (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "cartesian : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "Axiom cartesian : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "axiom cartesian (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "cartesian : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "Axiom cartesian : Set -> Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "axiom cartesian (x y : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a set. Then the complement of $x$ is a set.",
    "output": "complement : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then the complement of $x$ is a set.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a set. Then the complement of $x$ is a set.",
    "output": "Axiom complement : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a set. Then the complement of $x$ is a set.",
    "output": "axiom complement (x : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a set. Then ${x }^{\\complement}$ is a set.",
    "output": "complement : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then ${x }^{\\complement}$ is a set.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a set. Then ${x }^{\\complement}$ is a set.",
    "output": "Axiom complement : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a set. Then ${x }^{\\complement}$ is a set.",
    "output": "axiom complement (x : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a set. Then the power set of $x$ is a set.",
    "output": "powerset : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then the power set of $x$ is a set.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a set. Then the power set of $x$ is a set.",
    "output": "Axiom powerset : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a set. Then the power set of $x$ is a set.",
    "output": "axiom powerset (x : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a set. Then $\\wp x$ is a set.",
    "output": "powerset : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then $\\wp x$ is a set.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a set. Then $\\wp x$ is a set.",
    "output": "Axiom powerset : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a set. Then $\\wp x$ is a set.",
    "output": "axiom powerset (x : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. The empty set is a set.",
    "output": "emptyset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The empty set is a set.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. The empty set is a set.",
    "output": "Axiom emptyset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. The empty set is a set.",
    "output": "axiom emptyset : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. $\\emptyset$ is a set.",
    "output": "emptyset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $\\emptyset$ is a set.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. $\\emptyset$ is a set.",
    "output": "Axiom emptyset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. $\\emptyset$ is a set.",
    "output": "axiom emptyset : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. The universal set is a set.",
    "output": "universeset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The universal set is a set.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. The universal set is a set.",
    "output": "Axiom universeset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. The universal set is a set.",
    "output": "axiom universeset : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. $\\mathbb{ U}$ is a set.",
    "output": "universeset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $\\mathbb{ U}$ is a set.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. $\\mathbb{ U}$ is a set.",
    "output": "Axiom universeset : Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. $\\mathbb{ U}$ is a set.",
    "output": "axiom universeset : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper subset of $y$.",
    "output": "subset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper subset of $y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper subset of $y$.",
    "output": "Axiom subset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper subset of $y$.",
    "output": "axiom subset (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subset y$.",
    "output": "subset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subset y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subset y$.",
    "output": "Axiom subset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subset y$.",
    "output": "axiom subset (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a subset of $y$.",
    "output": "subseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a subset of $y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a subset of $y$.",
    "output": "Axiom subseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a subset of $y$.",
    "output": "axiom subseteq (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subseteq y$.",
    "output": "subseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subseteq y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subseteq y$.",
    "output": "Axiom subseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subseteq y$.",
    "output": "axiom subseteq (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "superset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "Axiom superset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "axiom superset (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "superset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "Axiom superset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "axiom superset (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "superseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "Axiom superseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "axiom superseteq (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "superseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "Axiom superseteq : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "axiom superseteq (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is equal to $y$.",
    "output": "equalset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is equal to $y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is equal to $y$.",
    "output": "Axiom equalset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is equal to $y$.",
    "output": "axiom equalset (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x = y$.",
    "output": "equalset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x = y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x = y$.",
    "output": "Axiom equalset : Set -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x = y$.",
    "output": "axiom equalset (x y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "element : Elem universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "Axiom element : universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "axiom element (x : universeset) (y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "element : Elem universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "Axiom element : universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "axiom element (x : universeset) (y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\in y$.",
    "output": "element : Elem universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\in y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\in y$.",
    "output": "Axiom element : universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\in y$.",
    "output": "axiom element (x : universeset) (y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "notelement : Elem universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "Axiom notelement : universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "axiom notelement (x : universeset) (y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "notelement : Elem universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "Axiom notelement : universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "axiom notelement (x : universeset) (y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\notin y$.",
    "output": "notelement : Elem universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\notin y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\notin y$.",
    "output": "Axiom notelement : universeset -> Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\notin y$.",
    "output": "axiom notelement (x : universeset) (y : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Set$. Then $positivePart$ is a set.",
    "output": "positivePart : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Then $positivePart$ is a set.",
    "output": "postulate positivePart : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Set$. Then $positivePart$ is a set.",
    "output": "Axiom positivePart : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Set$. Then $positivePart$ is a set.",
    "output": "axiom positivePart (x : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Set$. Then $negativePart$ is a set.",
    "output": "negativePart : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Then $negativePart$ is a set.",
    "output": "postulate negativePart : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Set$. Then $negativePart$ is a set.",
    "output": "Axiom negativePart : Set -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Set$. Then $negativePart$ is a set.",
    "output": "axiom negativePart (x : Set) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a set. Then we can say that $x$ is finite.",
    "output": "finite : Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then we can say that $x$ is finite.",
    "output": "postulate finite : Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a set. Then we can say that $x$ is finite.",
    "output": "Axiom finite : Set -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a set. Then we can say that $x$ is finite.",
    "output": "axiom finite (x : Set) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a set. Then $x$ is infinite, if $A$ is not finite.",
    "output": "def infinite : Set -> Prop := A => not (finite A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a set. Then $x$ is infinite, if $A$ is not finite.",
    "output": "infinite : Set -> Prop\ninfinite = \\ A -> not (finite A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a set. Then $x$ is infinite, if $A$ is not finite.",
    "output": "Definition infinite (x : Set) : Prop := ~ finite A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a set. Then $x$ is infinite, if $A$ is not finite.",
    "output": "def infinite (x : Set) : Prop := ¬ finite A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that for all instances $B$ of elements of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "suchthat : (A : Set) -> (B : Elem A -> Prop) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that for all instances $B$ of elements of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that for all instances $B$ of elements of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "Axiom suchthat : forall A : Set, (((B : A) -> Prop) -> Set) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that for all instances $B$ of elements of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "axiom suchthat (A : Set) (x : (B : A) -> Prop) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every instance $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "suchthat : (A : Set) -> (B : Elem A -> Prop) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every instance $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every instance $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "Axiom suchthat : forall A : Set, (((B : A) -> Prop) -> Set) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every instance $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "axiom suchthat (A : Set) (x : (B : A) -> Prop) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all instances $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "suchthat : (A : Set) -> (B : Elem A -> Prop) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all instances $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all instances $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "Axiom suchthat : forall A : Set, (((B : A) -> Prop) -> Set) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all instances $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "axiom suchthat (A : Set) (x : (B : A) -> Prop) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that for all elements $B$ of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "suchthat : (A : Set) -> (B : Elem A -> Prop) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that for all elements $B$ of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that for all elements $B$ of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "Axiom suchthat : forall A : Set, (((B : A) -> Prop) -> Set) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that for all elements $B$ of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "axiom suchthat (A : Set) (x : (B : A) -> Prop) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every element $B$ of $A$. Then $suchthat$ is a set.",
    "output": "suchthat : (A : Set) -> (B : Elem A -> Prop) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every element $B$ of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every element $B$ of $A$. Then $suchthat$ is a set.",
    "output": "Axiom suchthat : forall A : Set, (((B : A) -> Prop) -> Set) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every element $B$ of $A$. Then $suchthat$ is a set.",
    "output": "axiom suchthat (A : Set) (x : (B : A) -> Prop) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all elements $B$ of $A$. Then $suchthat$ is a set.",
    "output": "suchthat : (A : Set) -> (B : Elem A -> Prop) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all elements $B$ of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all elements $B$ of $A$. Then $suchthat$ is a set.",
    "output": "Axiom suchthat : forall A : Set, (((B : A) -> Prop) -> Set) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all elements $B$ of $A$. Then $suchthat$ is a set.",
    "output": "axiom suchthat (A : Set) (x : (B : A) -> Prop) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an instance of elements of $A$ to propositions. Let $x$ be an instance of elements of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an instance of elements of $A$.",
    "output": "fst : (A : Set) -> (B : Elem A -> Prop) -> Elem (suchthat A B) -> Elem A ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an instance of elements of $A$ to propositions. Let $x$ be an instance of elements of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an instance of elements of $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an instance of elements of $A$ to propositions. Let $x$ be an instance of elements of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an instance of elements of $A$.",
    "output": "Axiom fst : forall A : Set, forall B : (A -> Prop), (suchthat A B -> A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an instance of elements of $A$ to propositions. Let $x$ be an instance of elements of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an instance of elements of $A$.",
    "output": "axiom fst (A : Set) (B : A -> Prop) (x : suchthat A B) : A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an element of $A$.",
    "output": "fst : (A : Set) -> (B : Elem A -> Prop) -> Elem (suchthat A B) -> Elem A ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an element of $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an element of $A$.",
    "output": "Axiom fst : forall A : Set, forall B : (A -> Prop), (suchthat A B -> A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an element of $A$.",
    "output": "axiom fst (A : Set) (B : A -> Prop) (x : suchthat A B) : A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst (A , B , x)$ is an element of $A$.",
    "output": "fst : (A : Set) -> (B : Elem A -> Prop) -> Elem (suchthat A B) -> Elem A ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst (A , B , x)$ is an element of $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst (A , B , x)$ is an element of $A$.",
    "output": "Axiom fst : forall A : Set, forall B : (A -> Prop), (suchthat A B -> A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst (A , B , x)$ is an element of $A$.",
    "output": "axiom fst (A : Set) (B : A -> Prop) (x : suchthat A B) : A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent : (a : Elem Int) -> (b : Elem Int) -> (m : Elem Nat) -> Prop := a => b => m => exists Nat (k => Eq (minus a b) (times k m)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "Definition congruent (a b : Int) (m : nat) : Prop := Exist nat (fun k => a - b = k * m) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "def congruent (a b : Int) (m : Nat) : Prop := Exist Nat (λ k => a - b = k * m)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. $Enum$ is a set.",
    "output": "Enum : Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $Enum$ is a set.",
    "output": "postulate Enum : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. $Enum$ is a set.",
    "output": "Axiom Enum : Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. $Enum$ is a set.",
    "output": "axiom Enum : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. $nil$ is an instance of elements of $Enum$.",
    "output": "nil : Elem Enum ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $nil$ is an instance of elements of $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. $nil$ is an instance of elements of $Enum$.",
    "output": "Axiom nil : Enum ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. $nil$ is an instance of elements of $Enum$.",
    "output": "axiom nil : Enum"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. $nil$ is an element of $Enum$.",
    "output": "nil : Elem Enum ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $nil$ is an element of $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. $nil$ is an element of $Enum$.",
    "output": "Axiom nil : Enum ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. $nil$ is an element of $Enum$.",
    "output": "axiom nil : Enum"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Let $y$ be an instance of elements of $Enum$. Then $cons$ applied to $x$ and $y$ is an instance of elements of $Enum$.",
    "output": "cons : Elem Num -> Elem Enum -> Elem Enum ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Let $y$ be an instance of elements of $Enum$. Then $cons$ applied to $x$ and $y$ is an instance of elements of $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Let $y$ be an instance of elements of $Enum$. Then $cons$ applied to $x$ and $y$ is an instance of elements of $Enum$.",
    "output": "Axiom cons : Num -> Enum -> Enum ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Let $y$ be an instance of elements of $Enum$. Then $cons$ applied to $x$ and $y$ is an instance of elements of $Enum$.",
    "output": "axiom cons (x : Num) (y : Enum) : Enum"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons$ applied to $x$ and $y$ is an element of $Enum$.",
    "output": "cons : Elem Num -> Elem Enum -> Elem Enum ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons$ applied to $x$ and $y$ is an element of $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons$ applied to $x$ and $y$ is an element of $Enum$.",
    "output": "Axiom cons : Num -> Enum -> Enum ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons$ applied to $x$ and $y$ is an element of $Enum$.",
    "output": "axiom cons (x : Num) (y : Enum) : Enum"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons (x , y)$ is an element of $Enum$.",
    "output": "cons : Elem Num -> Elem Enum -> Elem Enum ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons (x , y)$ is an element of $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons (x , y)$ is an element of $Enum$.",
    "output": "Axiom cons : Num -> Enum -> Enum ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons (x , y)$ is an element of $Enum$.",
    "output": "axiom cons (x : Num) (y : Enum) : Enum"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. $enum123$ is an instance of elements of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "def enum123 : Elem Enum := cons 1 (cons 2 (cons 3 nil)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. $enum123$ is an instance of elements of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. $enum123$ is an instance of elements of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "Definition enum123 : Enum := cons 1 (cons 2 (cons 3 nil)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. $enum123$ is an instance of elements of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "def enum123 : Enum := cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "def enum123 : Elem Enum := cons 1 (cons 2 (cons 3 nil)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "Definition enum123 : Enum := cons 1 (cons 2 (cons 3 nil)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "def enum123 : Enum := cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons (1 , cons (2 , cons (3 , nil)))$.",
    "output": "def enum123 : Elem Enum := cons 1 (cons 2 (cons 3 nil)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons (1 , cons (2 , cons (3 , nil)))$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons (1 , cons (2 , cons (3 , nil)))$.",
    "output": "Definition enum123 : Enum := cons 1 (cons 2 (cons 3 nil)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons (1 , cons (2 , cons (3 , nil)))$.",
    "output": "def enum123 : Enum := cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Elem$ holds for $Enum$. Then $enumset$ is a set.",
    "output": "enumset : Elem Enum -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Elem$ holds for $Enum$. Then $enumset$ is a set.",
    "output": "postulate enumset : Enum -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Elem$ holds for $Enum$. Then $enumset$ is a set.",
    "output": "Axiom enumset : Enum -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Elem$ holds for $Enum$. Then $enumset$ is a set.",
    "output": "axiom enumset (x : Enum) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "def rational : Elem Real -> Prop := x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "Definition rational (x : Real) : Prop := Exist Int (fun p => Exist Int (fun q => Neq q 0 /\\ x = p / q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "def rational (x : Real) : Prop := Exist Int (λ p => Exist Int (λ q => q ≠ 0 ∧ x = p / q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is irrational, if $x$ is not rational.",
    "output": "def irrational : Elem Real -> Prop := x => not (rational x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is irrational, if $x$ is not rational.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is irrational, if $x$ is not rational.",
    "output": "Definition irrational (x : Real) : Prop := ~ rational x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is irrational, if $x$ is not rational.",
    "output": "def irrational (x : Real) : Prop := ¬ rational x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is irrational, if $x$ is not rational.",
    "output": "def irrational : Elem Real -> Prop := x => not (rational x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is irrational, if $x$ is not rational.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is irrational, if $x$ is not rational.",
    "output": "Definition irrational (x : Real) : Prop := ~ rational x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is irrational, if $x$ is not rational.",
    "output": "def irrational (x : Real) : Prop := ¬ rational x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x$ is irrational, if $x$ is not rational.",
    "output": "def irrational : Elem Real -> Prop := x => not (rational x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is irrational, if $x$ is not rational.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x$ is irrational, if $x$ is not rational.",
    "output": "Definition irrational (x : Real) : Prop := ~ rational x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x$ is irrational, if $x$ is not rational.",
    "output": "def irrational (x : Real) : Prop := ¬ rational x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the square of $x$ is an instance of real numbers defined as the exponentiation of $x$ and $2$.",
    "output": "def square : Elem Real -> Elem Real := x => pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the square of $x$ is an instance of real numbers defined as the exponentiation of $x$ and $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the square of $x$ is an instance of real numbers defined as the exponentiation of $x$ and $2$.",
    "output": "Definition square (x : Real) : Real := pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the square of $x$ is an instance of real numbers defined as the exponentiation of $x$ and $2$.",
    "output": "def square (x : Real) : Real := pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "def square : Elem Real -> Elem Real := x => pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "Definition square (x : Real) : Real := pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "def square (x : Real) : Real := pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "def square : Elem Real -> Elem Real := x => pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "Definition square (x : Real) : Real := pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "def square (x : Real) : Real := pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "def square : Elem Real -> Elem Real := x => pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "Definition square (x : Real) : Real := pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "def square (x : Real) : Real := pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "def square : Elem Real -> Elem Real := x => pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "Definition square (x : Real) : Real := pow x 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "def square (x : Real) : Real := pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Polynomials are a basic type.",
    "output": "Polynomial : Type ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Polynomials are a basic type.",
    "output": "postulate Polynomial : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Polynomials are a basic type.",
    "output": "Axiom Polynomial : Type ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Polynomials are a basic type.",
    "output": "axiom Polynomial : Type"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is an instance of natural numbers.",
    "output": "degree : (P : Polynomial) -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is an instance of natural numbers.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is an instance of natural numbers.",
    "output": "Axiom degree : forall P : Polynomial, nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is an instance of natural numbers.",
    "output": "axiom degree (P : Polynomial) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is a natural number.",
    "output": "degree : (P : Polynomial) -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is a natural number.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is a natural number.",
    "output": "Axiom degree : forall P : Polynomial, nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is a natural number.",
    "output": "axiom degree (P : Polynomial) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $c$ be an instance of complex numbers. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "isRoot : (c : Elem Complex) -> (P : Polynomial) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $c$ be an instance of complex numbers. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $c$ be an instance of complex numbers. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "Axiom isRoot : forall c : Complex, forall P : Polynomial, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $c$ be an instance of complex numbers. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "axiom isRoot (c : Complex) (P : Polynomial) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $c$ be a complex number. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "isRoot : (c : Elem Complex) -> (P : Polynomial) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $c$ be a complex number. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $c$ be a complex number. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "Axiom isRoot : forall c : Complex, forall P : Polynomial, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $c$ be a complex number. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "axiom isRoot (c : Complex) (P : Polynomial) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $c \\in C$. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "isRoot : (c : Elem Complex) -> (P : Polynomial) -> Prop ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $c \\in C$. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $c \\in C$. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "Axiom isRoot : forall c : Complex, forall P : Polynomial, Prop ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $c \\in C$. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "axiom isRoot (c : Complex) (P : Polynomial) : Prop"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is an instance of cardinals.",
    "output": "cardinality : (A : Set) -> Elem Cardinal ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is an instance of cardinals.",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is an instance of cardinals.",
    "output": "Axiom cardinality : forall A : Set, Cardinal ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is an instance of cardinals.",
    "output": "axiom cardinality (A : Set) : Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is a cardinal.",
    "output": "cardinality : (A : Set) -> Elem Cardinal ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is a cardinal.",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is a cardinal.",
    "output": "Axiom cardinality : forall A : Set, Cardinal ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is a cardinal.",
    "output": "axiom cardinality (A : Set) : Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Then $| A |$ is a cardinal.",
    "output": "cardinality : (A : Set) -> Elem Cardinal ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Then $| A |$ is a cardinal.",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Then $| A |$ is a cardinal.",
    "output": "Axiom cardinality : forall A : Set, Cardinal ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Then $| A |$ is a cardinal.",
    "output": "axiom cardinality (A : Set) : Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if the cardinality of $A$ is equal to the cardinality of $Nat$.",
    "output": "def denumerable : (A : Set) -> Prop := A => Eq (cardinality A) (cardinality Nat) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if the cardinality of $A$ is equal to the cardinality of $Nat$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if the cardinality of $A$ is equal to the cardinality of $Nat$.",
    "output": "Definition denumerable (A : Set) : Prop := cardinality A = cardinality nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if the cardinality of $A$ is equal to the cardinality of $Nat$.",
    "output": "def denumerable (A : Set) : Prop := cardinality A = cardinality Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if $| A | = | Nat |$.",
    "output": "def denumerable : (A : Set) -> Prop := A => Eq (cardinality A) (cardinality Nat) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if $| A | = | Nat |$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if $| A | = | Nat |$.",
    "output": "Definition denumerable (A : Set) : Prop := cardinality A = cardinality nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if $| A | = | Nat |$.",
    "output": "def denumerable (A : Set) : Prop := cardinality A = cardinality Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Vectors are a basic type.",
    "output": "Vector : Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Vectors are a basic type.",
    "output": "postulate Vector : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Vectors are a basic type.",
    "output": "Axiom Vector : Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Vectors are a basic type.",
    "output": "axiom Vector : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of vectors. Then the norm of $x$ is an instance of real numbers.",
    "output": "norm : Elem Vector -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of vectors. Then the norm of $x$ is an instance of real numbers.",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of vectors. Then the norm of $x$ is an instance of real numbers.",
    "output": "Axiom norm : Vector -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of vectors. Then the norm of $x$ is an instance of real numbers.",
    "output": "axiom norm (x : Vector) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a vector. Then the norm of $x$ is a real number.",
    "output": "norm : Elem Vector -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a vector. Then the norm of $x$ is a real number.",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a vector. Then the norm of $x$ is a real number.",
    "output": "Axiom norm : Vector -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a vector. Then the norm of $x$ is a real number.",
    "output": "axiom norm (x : Vector) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a vector. Then $\\| x \\|$ is a real number.",
    "output": "norm : Elem Vector -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a vector. Then $\\| x \\|$ is a real number.",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a vector. Then $\\| x \\|$ is a real number.",
    "output": "Axiom norm : Vector -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a vector. Then $\\| x \\|$ is a real number.",
    "output": "axiom norm (x : Vector) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $v$ be an instance of vectors. Then the length of $v$ is an instance of real numbers defined as the norm of $v$.",
    "output": "def length : (v : Elem Vector) -> Elem Real := v => norm v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $v$ be an instance of vectors. Then the length of $v$ is an instance of real numbers defined as the norm of $v$.",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $v$ be an instance of vectors. Then the length of $v$ is an instance of real numbers defined as the norm of $v$.",
    "output": "Definition length (v : Vector) : Real := norm v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $v$ be an instance of vectors. Then the length of $v$ is an instance of real numbers defined as the norm of $v$.",
    "output": "def length (v : Vector) : Real := norm v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $v$ be a vector. Then the length of $v$ is a real number defined as the norm of $v$.",
    "output": "def length : (v : Elem Vector) -> Elem Real := v => norm v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $v$ be a vector. Then the length of $v$ is a real number defined as the norm of $v$.",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $v$ be a vector. Then the length of $v$ is a real number defined as the norm of $v$.",
    "output": "Definition length (v : Vector) : Real := norm v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $v$ be a vector. Then the length of $v$ is a real number defined as the norm of $v$.",
    "output": "def length (v : Vector) : Real := norm v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $v$ be a vector. Then $\\| v \\|$ is a real number defined as $\\| v \\|$.",
    "output": "def length : (v : Elem Vector) -> Elem Real := v => norm v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $v$ be a vector. Then $\\| v \\|$ is a real number defined as $\\| v \\|$.",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $v$ be a vector. Then $\\| v \\|$ is a real number defined as $\\| v \\|$.",
    "output": "Definition length (v : Vector) : Real := norm v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $v$ be a vector. Then $\\| v \\|$ is a real number defined as $\\| v \\|$.",
    "output": "def length (v : Vector) : Real := norm v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the sum of $x$ and $y$ is an instance of vectors.",
    "output": "resultant : Elem Vector -> Elem Vector -> Elem Vector ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the sum of $x$ and $y$ is an instance of vectors.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the sum of $x$ and $y$ is an instance of vectors.",
    "output": "Axiom resultant : Vector -> Vector -> Vector ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the sum of $x$ and $y$ is an instance of vectors.",
    "output": "axiom resultant (x y : Vector) : Vector"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the sum of $x$ and $y$ is a vector.",
    "output": "resultant : Elem Vector -> Elem Vector -> Elem Vector ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the sum of $x$ and $y$ is a vector.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the sum of $x$ and $y$ is a vector.",
    "output": "Axiom resultant : Vector -> Vector -> Vector ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the sum of $x$ and $y$ is a vector.",
    "output": "axiom resultant (x y : Vector) : Vector"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then $x + y$ is a vector.",
    "output": "resultant : Elem Vector -> Elem Vector -> Elem Vector ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then $x + y$ is a vector.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then $x + y$ is a vector.",
    "output": "Axiom resultant : Vector -> Vector -> Vector ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then $x + y$ is a vector.",
    "output": "axiom resultant (x y : Vector) : Vector"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of natural numbers. Then the Legendre symbol of $x$ and $y$ is an instance of integers.",
    "output": "legendre : Elem Nat -> Elem Nat -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of natural numbers. Then the Legendre symbol of $x$ and $y$ is an instance of integers.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of natural numbers. Then the Legendre symbol of $x$ and $y$ is an instance of integers.",
    "output": "Axiom legendre : nat -> nat -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of natural numbers. Then the Legendre symbol of $x$ and $y$ is an instance of integers.",
    "output": "axiom legendre (x y : Nat) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "legendre : Elem Nat -> Elem Nat -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "Axiom legendre : nat -> nat -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "axiom legendre (x y : Nat) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x , y \\in N$. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "legendre : Elem Nat -> Elem Nat -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x , y \\in N$. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x , y \\in N$. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "Axiom legendre : nat -> nat -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x , y \\in N$. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "axiom legendre (x y : Nat) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "legendre : Elem Nat -> Elem Nat -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "Axiom legendre : nat -> nat -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "axiom legendre (x y : Nat) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x , y \\in N$. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "legendre : Elem Nat -> Elem Nat -> Elem Int ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x , y \\in N$. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x , y \\in N$. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "Axiom legendre : nat -> nat -> Int ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x , y \\in N$. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "axiom legendre (x y : Nat) : Int"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. The number \\(\\pi\\) is an instance of real numbers.",
    "output": "pi : Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The number \\(\\pi\\) is an instance of real numbers.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. The number \\(\\pi\\) is an instance of real numbers.",
    "output": "Axiom pi : Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. The number \\(\\pi\\) is an instance of real numbers.",
    "output": "axiom pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. The number \\(\\pi\\) is a real number.",
    "output": "pi : Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The number \\(\\pi\\) is a real number.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. The number \\(\\pi\\) is a real number.",
    "output": "Axiom pi : Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. The number \\(\\pi\\) is a real number.",
    "output": "axiom pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. $\\pi$ is a real number.",
    "output": "pi : Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $\\pi$ is a real number.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. $\\pi$ is a real number.",
    "output": "Axiom pi : Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. $\\pi$ is a real number.",
    "output": "axiom pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Circles are a basic type.",
    "output": "Circle : Type ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Circles are a basic type.",
    "output": "postulate Circle : Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Circles are a basic type.",
    "output": "Axiom Circle : Type ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Circles are a basic type.",
    "output": "axiom Circle : Type"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is an instance of real numbers.",
    "output": "radius : Circle -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is an instance of real numbers.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is an instance of real numbers.",
    "output": "Axiom radius : Circle -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is an instance of real numbers.",
    "output": "axiom radius (x : Circle) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is a real number.",
    "output": "radius : Circle -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is a real number.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is a real number.",
    "output": "Axiom radius : Circle -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is a real number.",
    "output": "axiom radius (x : Circle) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is an instance of real numbers.",
    "output": "area : Circle -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is an instance of real numbers.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is an instance of real numbers.",
    "output": "Axiom area : Circle -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is an instance of real numbers.",
    "output": "axiom area (x : Circle) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is a real number.",
    "output": "area : Circle -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is a real number.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is a real number.",
    "output": "Axiom area : Circle -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is a real number.",
    "output": "axiom area (x : Circle) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $n$ and $k$ be instances of natural numbers. Then the binomial coefficient of $n$ and $k$ is an instance of natural numbers defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n$ and $k$ be instances of natural numbers. Then the binomial coefficient of $n$ and $k$ is an instance of natural numbers defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $n$ and $k$ be instances of natural numbers. Then the binomial coefficient of $n$ and $k$ is an instance of natural numbers defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $n$ and $k$ be instances of natural numbers. Then the binomial coefficient of $n$ and $k$ is an instance of natural numbers defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "def binomial (n k : Nat) : Nat := factorial n / (factorial k * factorial (n - k))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "def binomial (n k : Nat) : Nat := factorial n / (factorial k * factorial (n - k))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $n , k \\in N$. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n , k \\in N$. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $n , k \\in N$. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $n , k \\in N$. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "def binomial (n k : Nat) : Nat := factorial n / (factorial k * factorial (n - k))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "def binomial (n k : Nat) : Nat := factorial n / (factorial k * factorial (n - k))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $n , k \\in N$. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "def binomial : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat := n => k => div (factorial n) (times (factorial k) (factorial (minus n k))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n , k \\in N$. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $n , k \\in N$. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "Definition binomial (n k : nat) : nat := factorial n / (factorial k * factorial (n - k)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $n , k \\in N$. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "def binomial (n k : Nat) : Nat := factorial n / (factorial k * factorial (n - k))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $n$ and $k$ be instances of natural numbers. Then the set of combinations of $n$ and $k$ is an instance of natural numbers.",
    "output": "combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n$ and $k$ be instances of natural numbers. Then the set of combinations of $n$ and $k$ is an instance of natural numbers.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $n$ and $k$ be instances of natural numbers. Then the set of combinations of $n$ and $k$ is an instance of natural numbers.",
    "output": "Axiom combinations : forall n : nat, forall k : nat, nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $n$ and $k$ be instances of natural numbers. Then the set of combinations of $n$ and $k$ is an instance of natural numbers.",
    "output": "axiom combinations (n k : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "Axiom combinations : forall n : nat, forall k : nat, nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "axiom combinations (n k : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $n , k \\in N$. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n , k \\in N$. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $n , k \\in N$. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "Axiom combinations : forall n : nat, forall k : nat, nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $n , k \\in N$. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "axiom combinations (n k : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "Axiom combinations : forall n : nat, forall k : nat, nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "axiom combinations (n k : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $n , k \\in N$. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "combinations : (n : Elem Nat) -> (k : Elem Nat) -> Elem Nat ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n , k \\in N$. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $n , k \\in N$. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "Axiom combinations : forall n : nat, forall k : nat, nat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $n , k \\in N$. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "axiom combinations (n k : Nat) : Nat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be an instance of natural numbers. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "combinationsFromSet : (A : Set) -> (k : Elem Nat) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be an instance of natural numbers. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be an instance of natural numbers. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "Axiom combinationsFromSet : forall A : Set, forall k : nat, Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be an instance of natural numbers. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "axiom combinationsFromSet (A : Set) (k : Nat) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "combinationsFromSet : (A : Set) -> (k : Elem Nat) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "Axiom combinationsFromSet : forall A : Set, forall k : nat, Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "axiom combinationsFromSet (A : Set) (k : Nat) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "combinationsFromSet : (A : Set) -> (k : Elem Nat) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "Axiom combinationsFromSet : forall A : Set, forall k : nat, Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "axiom combinationsFromSet (A : Set) (k : Nat) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then $\\binom{ A }{ k}$ is a set.",
    "output": "combinationsFromSet : (A : Set) -> (k : Elem Nat) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then $\\binom{ A }{ k}$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then $\\binom{ A }{ k}$ is a set.",
    "output": "Axiom combinationsFromSet : forall A : Set, forall k : nat, Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then $\\binom{ A }{ k}$ is a set.",
    "output": "axiom combinationsFromSet (A : Set) (k : Nat) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then $\\binom{ A }{ k}$ is a set.",
    "output": "combinationsFromSet : (A : Set) -> (k : Elem Nat) -> Set ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then $\\binom{ A }{ k}$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then $\\binom{ A }{ k}$ is a set.",
    "output": "Axiom combinationsFromSet : forall A : Set, forall k : nat, Set ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then $\\binom{ A }{ k}$ is a set.",
    "output": "axiom combinationsFromSet (A : Set) (k : Nat) : Set"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the sine of $x$ is an instance of real numbers.",
    "output": "sin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the sine of $x$ is an instance of real numbers.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the sine of $x$ is an instance of real numbers.",
    "output": "Axiom sin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the sine of $x$ is an instance of real numbers.",
    "output": "axiom sin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then the sine of $x$ is a real number.",
    "output": "sin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the sine of $x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then the sine of $x$ is a real number.",
    "output": "Axiom sin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then the sine of $x$ is a real number.",
    "output": "axiom sin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then the sine of $x$ is a real number.",
    "output": "sin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the sine of $x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then the sine of $x$ is a real number.",
    "output": "Axiom sin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then the sine of $x$ is a real number.",
    "output": "axiom sin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then $\\sin x$ is a real number.",
    "output": "sin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\sin x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then $\\sin x$ is a real number.",
    "output": "Axiom sin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then $\\sin x$ is a real number.",
    "output": "axiom sin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then $\\sin x$ is a real number.",
    "output": "sin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\sin x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then $\\sin x$ is a real number.",
    "output": "Axiom sin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then $\\sin x$ is a real number.",
    "output": "axiom sin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the cosine of $x$ is an instance of real numbers defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "def cos : Elem Real -> Elem Real := x => sin (minus (div pi (nd 2)) x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the cosine of $x$ is an instance of real numbers defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the cosine of $x$ is an instance of real numbers defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "Definition cos (x : Real) : Real := sin (pi / 2 - x) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the cosine of $x$ is an instance of real numbers defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "def cos (x : Real) : Real := sin (pi / 2 - x)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "def cos : Elem Real -> Elem Real := x => sin (minus (div pi (nd 2)) x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "Definition cos (x : Real) : Real := sin (pi / 2 - x) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "def cos (x : Real) : Real := sin (pi / 2 - x)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "def cos : Elem Real -> Elem Real := x => sin (minus (div pi (nd 2)) x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "Definition cos (x : Real) : Real := sin (pi / 2 - x) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "def cos (x : Real) : Real := sin (pi / 2 - x)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "def cos : Elem Real -> Elem Real := x => sin (minus (div pi (nd 2)) x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "Definition cos (x : Real) : Real := sin (pi / 2 - x) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "def cos (x : Real) : Real := sin (pi / 2 - x)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "def cos : Elem Real -> Elem Real := x => sin (minus (div pi (nd 2)) x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "Definition cos (x : Real) : Real := sin (pi / 2 - x) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "def cos (x : Real) : Real := sin (pi / 2 - x)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the tangent of $x$ is an instance of real numbers defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "def tan : Elem Real -> Elem Real := x => div (sin x) (cos x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the tangent of $x$ is an instance of real numbers defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the tangent of $x$ is an instance of real numbers defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "Definition tan (x : Real) : Real := sin x / cos x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the tangent of $x$ is an instance of real numbers defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "def tan (x : Real) : Real := sin x / cos x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "def tan : Elem Real -> Elem Real := x => div (sin x) (cos x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "Definition tan (x : Real) : Real := sin x / cos x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "def tan (x : Real) : Real := sin x / cos x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "def tan : Elem Real -> Elem Real := x => div (sin x) (cos x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "Definition tan (x : Real) : Real := sin x / cos x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "def tan (x : Real) : Real := sin x / cos x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x$ be a real number. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "def tan : Elem Real -> Elem Real := x => div (sin x) (cos x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x$ be a real number. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "Definition tan (x : Real) : Real := sin x / cos x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x$ be a real number. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "def tan (x : Real) : Real := sin x / cos x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $x \\in R$. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "def tan : Elem Real -> Elem Real := x => div (sin x) (cos x) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $x \\in R$. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "Definition tan (x : Real) : Real := sin x / cos x ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $x \\in R$. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "def tan (x : Real) : Real := sin x / cos x"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arcsine of $x$ is an instance of real numbers.",
    "output": "arcsin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arcsine of $x$ is an instance of real numbers.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arcsine of $x$ is an instance of real numbers.",
    "output": "Axiom arcsin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arcsine of $x$ is an instance of real numbers.",
    "output": "axiom arcsin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then the arcsine of $x$ is a real number.",
    "output": "arcsin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the arcsine of $x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then the arcsine of $x$ is a real number.",
    "output": "Axiom arcsin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then the arcsine of $x$ is a real number.",
    "output": "axiom arcsin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then the arcsine of $x$ is a real number.",
    "output": "arcsin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the arcsine of $x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then the arcsine of $x$ is a real number.",
    "output": "Axiom arcsin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then the arcsine of $x$ is a real number.",
    "output": "axiom arcsin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arcsin x$ is a real number.",
    "output": "arcsin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arcsin x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arcsin x$ is a real number.",
    "output": "Axiom arcsin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arcsin x$ is a real number.",
    "output": "axiom arcsin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then $\\arcsin x$ is a real number.",
    "output": "arcsin : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\arcsin x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then $\\arcsin x$ is a real number.",
    "output": "Axiom arcsin : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then $\\arcsin x$ is a real number.",
    "output": "axiom arcsin (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arccosine of $x$ is an instance of real numbers.",
    "output": "arccos : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arccosine of $x$ is an instance of real numbers.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arccosine of $x$ is an instance of real numbers.",
    "output": "Axiom arccos : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arccosine of $x$ is an instance of real numbers.",
    "output": "axiom arccos (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then the arccosine of $x$ is a real number.",
    "output": "arccos : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the arccosine of $x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then the arccosine of $x$ is a real number.",
    "output": "Axiom arccos : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then the arccosine of $x$ is a real number.",
    "output": "axiom arccos (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then the arccosine of $x$ is a real number.",
    "output": "arccos : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the arccosine of $x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then the arccosine of $x$ is a real number.",
    "output": "Axiom arccos : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then the arccosine of $x$ is a real number.",
    "output": "axiom arccos (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arccos x$ is a real number.",
    "output": "arccos : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arccos x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arccos x$ is a real number.",
    "output": "Axiom arccos : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arccos x$ is a real number.",
    "output": "axiom arccos (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then $\\arccos x$ is a real number.",
    "output": "arccos : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\arccos x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then $\\arccos x$ is a real number.",
    "output": "Axiom arccos : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then $\\arccos x$ is a real number.",
    "output": "axiom arccos (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arctangent of $x$ is an instance of real numbers.",
    "output": "arctan : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arctangent of $x$ is an instance of real numbers.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arctangent of $x$ is an instance of real numbers.",
    "output": "Axiom arctan : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arctangent of $x$ is an instance of real numbers.",
    "output": "axiom arctan (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then the arctangent of $x$ is a real number.",
    "output": "arctan : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the arctangent of $x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then the arctangent of $x$ is a real number.",
    "output": "Axiom arctan : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then the arctangent of $x$ is a real number.",
    "output": "axiom arctan (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then the arctangent of $x$ is a real number.",
    "output": "arctan : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the arctangent of $x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then the arctangent of $x$ is a real number.",
    "output": "Axiom arctan : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then the arctangent of $x$ is a real number.",
    "output": "axiom arctan (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arctan x$ is a real number.",
    "output": "arctan : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arctan x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arctan x$ is a real number.",
    "output": "Axiom arctan : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arctan x$ is a real number.",
    "output": "axiom arctan (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x \\in R$. Then $\\arctan x$ is a real number.",
    "output": "arctan : Elem Real -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\arctan x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x \\in R$. Then $\\arctan x$ is a real number.",
    "output": "Axiom arctan : Real -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x \\in R$. Then $\\arctan x$ is a real number.",
    "output": "axiom arctan (x : Real) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the angle between of $x$ and $y$ is an instance of real numbers.",
    "output": "angleBetween : Elem Vector -> Elem Vector -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the angle between of $x$ and $y$ is an instance of real numbers.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the angle between of $x$ and $y$ is an instance of real numbers.",
    "output": "Axiom angleBetween : Vector -> Vector -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the angle between of $x$ and $y$ is an instance of real numbers.",
    "output": "axiom angleBetween (x y : Vector) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the angle between of $x$ and $y$ is a real number.",
    "output": "angleBetween : Elem Vector -> Elem Vector -> Elem Real ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the angle between of $x$ and $y$ is a real number.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the angle between of $x$ and $y$ is a real number.",
    "output": "Axiom angleBetween : Vector -> Vector -> Real ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the angle between of $x$ and $y$ is a real number.",
    "output": "axiom angleBetween (x y : Vector) : Real"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the dot product of $u$ and $v$ is an instance of real numbers defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "def dotProduct : (u : Elem Vector) -> (v : Elem Vector) -> Elem Real := u => v => times (times (length u) (length v)) (cos (angleBetween u v)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the dot product of $u$ and $v$ is an instance of real numbers defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the dot product of $u$ and $v$ is an instance of real numbers defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "Definition dotProduct (u v : Vector) : Real := length u * length v * cos (angleBetween u v) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the dot product of $u$ and $v$ is an instance of real numbers defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "def dotProduct (u v : Vector) : Real := length u * length v * cos (angleBetween u v)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the dot product of $u$ and $v$ is a real number defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "def dotProduct : (u : Elem Vector) -> (v : Elem Vector) -> Elem Real := u => v => times (times (length u) (length v)) (cos (angleBetween u v)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the dot product of $u$ and $v$ is a real number defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the dot product of $u$ and $v$ is a real number defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "Definition dotProduct (u v : Vector) : Real := length u * length v * cos (angleBetween u v) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the dot product of $u$ and $v$ is a real number defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "def dotProduct (u v : Vector) : Real := length u * length v * cos (angleBetween u v)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\cdot v$ is a real number defined as the product of $\\| u \\| \\| v \\|$ and the cosine of the angle between of $u$ and $v$.",
    "output": "def dotProduct : (u : Elem Vector) -> (v : Elem Vector) -> Elem Real := u => v => times (times (length u) (length v)) (cos (angleBetween u v)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\cdot v$ is a real number defined as the product of $\\| u \\| \\| v \\|$ and the cosine of the angle between of $u$ and $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\cdot v$ is a real number defined as the product of $\\| u \\| \\| v \\|$ and the cosine of the angle between of $u$ and $v$.",
    "output": "Definition dotProduct (u v : Vector) : Real := length u * length v * cos (angleBetween u v) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\cdot v$ is a real number defined as the product of $\\| u \\| \\| v \\|$ and the cosine of the angle between of $u$ and $v$.",
    "output": "def dotProduct (u v : Vector) : Real := length u * length v * cos (angleBetween u v)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "def orthogonal : (u : Elem Vector) -> (v : Elem Vector) -> Prop := u => v => Eq (angleBetween u v) (div pi (nd 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "Definition orthogonal (u v : Vector) : Prop := angleBetween u v = pi / 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "def orthogonal (u v : Vector) : Prop := angleBetween u v = pi / 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "def orthogonal : (u : Elem Vector) -> (v : Elem Vector) -> Prop := u => v => Eq (angleBetween u v) (div pi (nd 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "Definition orthogonal (u v : Vector) : Prop := angleBetween u v = pi / 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "def orthogonal (u v : Vector) : Prop := angleBetween u v = pi / 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if the angle between of $u$ and $v$ is equal to $\\frac{ \\pi}{2}$.",
    "output": "def orthogonal : (u : Elem Vector) -> (v : Elem Vector) -> Prop := u => v => Eq (angleBetween u v) (div pi (nd 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if the angle between of $u$ and $v$ is equal to $\\frac{ \\pi}{2}$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if the angle between of $u$ and $v$ is equal to $\\frac{ \\pi}{2}$.",
    "output": "Definition orthogonal (u v : Vector) : Prop := angleBetween u v = pi / 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if the angle between of $u$ and $v$ is equal to $\\frac{ \\pi}{2}$.",
    "output": "def orthogonal (u v : Vector) : Prop := angleBetween u v = pi / 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "def perpendicular : (u : Elem Vector) -> (v : Elem Vector) -> Prop := u => v => orthogonal u v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "Definition perpendicular (u v : Vector) : Prop := orthogonal u v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "def perpendicular (u v : Vector) : Prop := orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "def perpendicular : (u : Elem Vector) -> (v : Elem Vector) -> Prop := u => v => orthogonal u v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "Definition perpendicular (u v : Vector) : Prop := orthogonal u v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "def perpendicular (u v : Vector) : Prop := orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if $u \\perp v$.",
    "output": "def perpendicular : (u : Elem Vector) -> (v : Elem Vector) -> Prop := u => v => orthogonal u v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if $u \\perp v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if $u \\perp v$.",
    "output": "Definition perpendicular (u v : Vector) : Prop := orthogonal u v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if $u \\perp v$.",
    "output": "def perpendicular (u v : Vector) : Prop := orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the sum of $u$ and $v$ is an instance of vectors defined as the sum of $u$ and $v$.",
    "output": "def vectorPlus : (u : Elem Vector) -> (v : Elem Vector) -> Elem Vector := u => v => resultant u v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the sum of $u$ and $v$ is an instance of vectors defined as the sum of $u$ and $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the sum of $u$ and $v$ is an instance of vectors defined as the sum of $u$ and $v$.",
    "output": "Definition vectorPlus (u v : Vector) : Vector := resultant u v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the sum of $u$ and $v$ is an instance of vectors defined as the sum of $u$ and $v$.",
    "output": "def vectorPlus (u v : Vector) : Vector := resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the sum of $u$ and $v$ is a vector defined as the sum of $u$ and $v$.",
    "output": "def vectorPlus : (u : Elem Vector) -> (v : Elem Vector) -> Elem Vector := u => v => resultant u v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the sum of $u$ and $v$ is a vector defined as the sum of $u$ and $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the sum of $u$ and $v$ is a vector defined as the sum of $u$ and $v$.",
    "output": "Definition vectorPlus (u v : Vector) : Vector := resultant u v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the sum of $u$ and $v$ is a vector defined as the sum of $u$ and $v$.",
    "output": "def vectorPlus (u v : Vector) : Vector := resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u + v$ is a vector defined as $u + v$.",
    "output": "def vectorPlus : (u : Elem Vector) -> (v : Elem Vector) -> Elem Vector := u => v => resultant u v ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u + v$ is a vector defined as $u + v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u + v$ is a vector defined as $u + v$.",
    "output": "Definition vectorPlus (u v : Vector) : Vector := resultant u v ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u + v$ is a vector defined as $u + v$.",
    "output": "def vectorPlus (u v : Vector) : Vector := resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop10. We can prove that $0$ is even.",
    "output": "prop10 : Proof (even 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop10. We can prove that $0$ is even.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop10. We can prove that $0$ is even.",
    "output": "Axiom prop10 : even 0 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop10. We can prove that $0$ is even.",
    "output": "axiom prop10 : even 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop10. $0$ is even.",
    "output": "prop10 : Proof (even 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop10. $0$ is even.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop10. $0$ is even.",
    "output": "Axiom prop10 : even 0 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop10. $0$ is even.",
    "output": "axiom prop10 : even 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is even. Then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is even. Then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is even. Then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is even. Then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. For all instances $n$ of natural numbers, if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. For all instances $n$ of natural numbers, if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. For all instances $n$ of natural numbers, if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. For all instances $n$ of natural numbers, if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for every instance $n$ of natural numbers.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for every instance $n$ of natural numbers.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for every instance $n$ of natural numbers.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for every instance $n$ of natural numbers.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for all instances $n$ of natural numbers.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for all instances $n$ of natural numbers.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for all instances $n$ of natural numbers.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for all instances $n$ of natural numbers.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even, only if we can prove that the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even, only if we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even, only if we can prove that the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even, only if we can prove that the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for every natural number $n$.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for every natural number $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for every natural number $n$.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for every natural number $n$.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for all natural numbers $n$.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for all natural numbers $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for all natural numbers $n$.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for all natural numbers $n$.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then $n + 1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then $n + 1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then $n + 1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for every natural number $n$.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for every natural number $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for every natural number $n$.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for every natural number $n$.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for all natural numbers $n$.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for all natural numbers $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for all natural numbers $n$.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for all natural numbers $n$.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "prop20 : (n : Elem Nat) -> Proof (even n) -> Proof (odd (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "Axiom prop20 : forall n : nat, (even n -> odd (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "axiom prop20 (n : Nat) (x : even n) : odd (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is odd. Then we can prove that the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is odd. Then we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is odd. Then we can prove that the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is odd. Then we can prove that the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. For all instances $n$ of natural numbers, if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. For all instances $n$ of natural numbers, if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. For all instances $n$ of natural numbers, if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. For all instances $n$ of natural numbers, if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for every instance $n$ of natural numbers.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for every instance $n$ of natural numbers.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for every instance $n$ of natural numbers.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for every instance $n$ of natural numbers.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for all instances $n$ of natural numbers.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for all instances $n$ of natural numbers.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for all instances $n$ of natural numbers.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for all instances $n$ of natural numbers.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is odd, only if we can prove that the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is odd, only if we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is odd, only if we can prove that the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is odd, only if we can prove that the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for every natural number $n$.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for every natural number $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for every natural number $n$.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for every natural number $n$.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for all natural numbers $n$.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for all natural numbers $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for all natural numbers $n$.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for all natural numbers $n$.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then $n + 1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then $n + 1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then $n + 1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for every natural number $n$.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for every natural number $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for every natural number $n$.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for every natural number $n$.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for all natural numbers $n$.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for all natural numbers $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for all natural numbers $n$.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for all natural numbers $n$.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "prop30 : (n : Elem Nat) -> Proof (odd n) -> Proof (even (plus n 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "Axiom prop30 : forall n : nat, (odd n -> even (n + 1)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "axiom prop30 (n : Nat) (x : odd n) : even (n + 1)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. We can prove that for all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. We can prove that for all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. We can prove that for all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. We can prove that for all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or odd.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or odd.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or odd.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. $n$ is even or odd for every natural number $n$.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or odd for every natural number $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. $n$ is even or odd for every natural number $n$.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. $n$ is even or odd for every natural number $n$.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. $n$ is even or odd for all natural numbers $n$.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or odd for all natural numbers $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. $n$ is even or odd for all natural numbers $n$.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. $n$ is even or odd for all natural numbers $n$.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. All natural numbers $n$ are even or odd.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. All natural numbers $n$ are even or odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. All natural numbers $n$ are even or odd.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. All natural numbers $n$ are even or odd.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop40. All natural numbers are even or odd.",
    "output": "prop40 : Proof (forall Nat (n => or (even n) (odd n))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. All natural numbers are even or odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop40. All natural numbers are even or odd.",
    "output": "Axiom prop40 : All nat (fun n => even n \\/ odd n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop40. All natural numbers are even or odd.",
    "output": "axiom prop40 : All Nat (λ n => even n ∨ odd n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. We can prove that for all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. We can prove that for all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. We can prove that for all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. We can prove that for all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. For all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. For all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. For all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. For all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. For all natural numbers $n$, $n$ is not even and odd.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. For all natural numbers $n$, $n$ is not even and odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. For all natural numbers $n$, $n$ is not even and odd.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. For all natural numbers $n$, $n$ is not even and odd.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. $n$ is not even and odd for every natural number $n$.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. $n$ is not even and odd for every natural number $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. $n$ is not even and odd for every natural number $n$.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. $n$ is not even and odd for every natural number $n$.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. $n$ is not even and odd for all natural numbers $n$.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. $n$ is not even and odd for all natural numbers $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. $n$ is not even and odd for all natural numbers $n$.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. $n$ is not even and odd for all natural numbers $n$.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. No natural number $n$ is even and odd.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. No natural number $n$ is even and odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. No natural number $n$ is even and odd.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. No natural number $n$ is even and odd.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop50. No natural number is even and odd.",
    "output": "prop50 : Proof (forall Nat (n => not (and (even n) (odd n)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. No natural number is even and odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop50. No natural number is even and odd.",
    "output": "Axiom prop50 : All nat (fun n => ~ (even n /\\ odd n)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop50. No natural number is even and odd.",
    "output": "axiom prop50 : All Nat (λ n => ¬ (even n ∧ odd n))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. We can prove that for all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. We can prove that for all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. We can prove that for all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. We can prove that for all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. For all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. For all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. For all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. For all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. For all natural numbers $n$, $n + 0 = n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. For all natural numbers $n$, $n + 0 = n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. For all natural numbers $n$, $n + 0 = n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. For all natural numbers $n$, $n + 0 = n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. $n + 0 = n$ for every natural number $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. $n + 0 = n$ for every natural number $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. $n + 0 = n$ for every natural number $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. $n + 0 = n$ for every natural number $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop60. $n + 0 = n$ for all natural numbers $n$.",
    "output": "prop60 : Proof (forall Nat (n => Eq (plus n 0) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. $n + 0 = n$ for all natural numbers $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop60. $n + 0 = n$ for all natural numbers $n$.",
    "output": "Axiom prop60 : All nat (fun n => n + 0 = n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop60. $n + 0 = n$ for all natural numbers $n$.",
    "output": "axiom prop60 : All Nat (λ n => n + 0 = n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop70. We can prove that $1$ is odd.",
    "output": "prop70 : Proof (odd 1) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop70. We can prove that $1$ is odd.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop70. We can prove that $1$ is odd.",
    "output": "Axiom prop70 : odd 1 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop70. We can prove that $1$ is odd.",
    "output": "axiom prop70 : odd 1"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop70. $1$ is odd.",
    "output": "prop70 : Proof (odd 1) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop70. $1$ is odd.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop70. $1$ is odd.",
    "output": "Axiom prop70 : odd 1 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop70. $1$ is odd.",
    "output": "axiom prop70 : odd 1"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop80. We can prove that $2$ is even.",
    "output": "prop80 : Proof (even 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop80. We can prove that $2$ is even.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop80. We can prove that $2$ is even.",
    "output": "Axiom prop80 : even 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop80. We can prove that $2$ is even.",
    "output": "axiom prop80 : even 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop80. $2$ is even.",
    "output": "prop80 : Proof (even 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop80. $2$ is even.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop80. $2$ is even.",
    "output": "Axiom prop80 : even 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop80. $2$ is even.",
    "output": "axiom prop80 : even 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every natural number $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every natural number $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every natural number $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every natural number $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every natural number $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every natural number $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for every natural number $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for every natural number $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for every natural number $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for all natural numbers $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for all natural numbers $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for all natural numbers $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for every natural number $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for every natural number $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for every natural number $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and prime, then $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and prime, then $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and prime, then $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and prime, then $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and prime, then $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and prime, then $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for every natural number $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for every natural number $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for every natural number $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for all natural numbers $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for all natural numbers $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for all natural numbers $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and prime, only if $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and prime, only if $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and prime, only if $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for every natural number $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for every natural number $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for every natural number $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and prime, only if $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and prime, only if $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and prime, only if $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and prime, then $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and prime, then $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and prime, then $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and prime, only if $n = 2$.",
    "output": "prop90 : (n : Elem Nat) -> Proof (if (and (even n) (prime n)) (Eq n 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and prime, only if $n = 2$.",
    "output": "Axiom prop90 : forall n : nat, (even n /\\ prime n -> n = 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and prime, only if $n = 2$.",
    "output": "axiom prop90 (n : Nat) : even n ∧ prime n → n = 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Assume that we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Assume that we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Assume that we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Assume that we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. For all instances $a$, $b$ and $c$ of integers, if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. For all instances $a$, $b$ and $c$ of integers, if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. For all instances $a$, $b$ and $c$ of integers, if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. For all instances $a$, $b$ and $c$ of integers, if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. If we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$ for all instances $a$, $b$ and $c$ of integers.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. If we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$ for all instances $a$, $b$ and $c$ of integers.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. If we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$ for all instances $a$, $b$ and $c$ of integers.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. If we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$ for all instances $a$, $b$ and $c$ of integers.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. If the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$ for all integers $a$, $b$ and $c$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. If the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$ for all integers $a$, $b$ and $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. If the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$ for all integers $a$, $b$ and $c$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. If the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$ for all integers $a$, $b$ and $c$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if $a + b + c = 0$, then $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if $a + b + c = 0$, then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if $a + b + c = 0$, then $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if $a + b + c = 0$, then $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. If $a + b + c = 0$, then $a b c < 0$ for all integers $a$, $b$ and $c$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. If $a + b + c = 0$, then $a b c < 0$ for all integers $a$, $b$ and $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. If $a + b + c = 0$, then $a b c < 0$ for all integers $a$, $b$ and $c$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. If $a + b + c = 0$, then $a b c < 0$ for all integers $a$, $b$ and $c$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "prop100 : (a : Elem Int) -> (b : Elem Int) -> (c : Elem Int) -> Proof (Eq (plus (plus a b) c) 0) -> Proof (Lt (times (times a b) c) 0) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "Axiom prop100 : forall a : Int, forall b : Int, forall c : Int, (a + b + c = 0 -> a * b * c < 0) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "axiom prop100 (a b c : Int) (x : a + b + c = 0) : a * b * c < 0"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all instances $a$ and $c$ of integers.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all instances $a$ and $c$ of integers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all instances $a$ and $c$ of integers.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all instances $a$ and $c$ of integers.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all instances $a$ and $c$ of integers.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all instances $a$ and $c$ of integers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all instances $a$ and $c$ of integers.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all instances $a$ and $c$ of integers.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all instances $a$ and $c$ of integers.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all instances $a$ and $c$ of integers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all instances $a$ and $c$ of integers.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all instances $a$ and $c$ of integers.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "prop110 : (a : Elem Int) -> (c : Elem Int) -> Proof (and (odd a) (odd c)) -> Proof (forall Int (b => even (plus (times a b) (times b c)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "Axiom prop110 : forall a : Int, forall c : Int, (odd a /\\ odd c -> All Int (fun b => even (a * b + b * c))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "axiom prop110 (a c : Int) (x : odd a ∧ odd c) : All Int (λ b => even (a * b + b * c))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. Let $a$ and $b$ be instances of integers. Then we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be instances of integers. Then we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. Let $a$ and $b$ be instances of integers. Then we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. Let $a$ and $b$ be instances of integers. Then we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. For all instances $a$ and $b$ of integers, we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all instances $a$ and $b$ of integers, we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. For all instances $a$ and $b$ of integers, we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. For all instances $a$ and $b$ of integers, we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. We can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. We can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. We can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. We can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. For all integers $a$ and $b$, the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all integers $a$ and $b$, the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. For all integers $a$ and $b$, the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. For all integers $a$ and $b$, the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. The product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. The product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. The product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. The product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. Let $a , b \\in Z$. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a , b \\in Z$. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. Let $a , b \\in Z$. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. Let $a , b \\in Z$. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. $a b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. $a b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. $a b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. $a b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. $a b$ is even, if and only if $a$ or $b$ is even for all integers $a$ and $b$.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. $a b$ is even, if and only if $a$ or $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. $a b$ is even, if and only if $a$ or $b$ is even for all integers $a$ and $b$.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. $a b$ is even, if and only if $a$ or $b$ is even for all integers $a$ and $b$.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "prop120 : (a : Elem Int) -> (b : Elem Int) -> Proof (iff (even (times a b)) (or (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "Axiom prop120 : forall a : Int, forall b : Int, (even (a * b) <-> even a \\/ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "axiom prop120 (a b : Int) : even (a * b) ↔ even a ∨ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. We can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. We can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. We can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. We can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. We can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. We can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. We can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. We can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all integers $x$ and $y$, if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all integers $x$ and $y$, if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all integers $x$ and $y$, if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. If the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. If the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. If the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. If the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all integers $x$ and $y$, the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all integers $x$ and $y$, the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all integers $x$ and $y$, the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. The product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. The product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. The product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. The product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x , y \\in Z$. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x , y \\in Z$. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x , y \\in Z$. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x , y \\in Z$. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x , y \\in Z$. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x , y \\in Z$. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. If $x y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. If $x y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. If $x y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. If $x y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. $x y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. $x y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. $x y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. $x y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. If $x y$ is odd, then $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. If $x y$ is odd, then $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. If $x y$ is odd, then $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. If $x y$ is odd, then $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. $x y$ is odd, only if $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. $x y$ is odd, only if $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. $x y$ is odd, only if $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. $x y$ is odd, only if $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "prop130 : (x : Elem Int) -> (y : Elem Int) -> Proof (if (odd (times x y)) (and (odd x) (odd y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "Axiom prop130 : forall x : Int, forall y : Int, (odd (x * y) -> odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "axiom prop130 (x y : Int) : odd (x * y) → odd x ∧ odd y"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$. Assume that $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "def same_parity : Elem Int -> Elem Int -> Prop := x => y => or (and (even x) (even y)) (and (odd x) (odd y)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$. Assume that $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$. Assume that $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "Definition same_parity (x y : Int) : Prop := even x /\\ even y \\/ (odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$. Assume that $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "def same_parity (x y : Int) : Prop := even x ∧ even y ∨ (odd x ∧ odd y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$ and $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "def same_parity : Elem Int -> Elem Int -> Prop := x => y => or (and (even x) (even y)) (and (odd x) (odd y)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$ and $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$ and $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "Definition same_parity (x y : Int) : Prop := even x /\\ even y \\/ (odd x /\\ odd y) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$ and $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "def same_parity (x y : Int) : Prop := even x ∧ even y ∨ (odd x ∧ odd y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. Let $x$ and $y$ be instances of integers. Then we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x$ and $y$ be instances of integers. Then we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. Let $x$ and $y$ be instances of integers. Then we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. Let $x$ and $y$ be instances of integers. Then we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. For all instances $x$ and $y$ of integers, we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. For all instances $x$ and $y$ of integers, we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. For all instances $x$ and $y$ of integers, we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. For all instances $x$ and $y$ of integers, we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. We can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all instances $x$ and $y$ of integers.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. We can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all instances $x$ and $y$ of integers.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. We can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all instances $x$ and $y$ of integers.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. We can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all instances $x$ and $y$ of integers.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all integers $x$ and $y$.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all integers $x$ and $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all integers $x$ and $y$.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all integers $x$ and $y$.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even for all integers $x$ and $y$.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even for all integers $x$ and $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even for all integers $x$ and $y$.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even for all integers $x$ and $y$.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "prop140 : (x : Elem Int) -> (y : Elem Int) -> Proof (iff (same_parity x y) (even (plus x y))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "Axiom prop140 : forall x : Int, forall y : Int, (same_parity x y <-> even (x + y)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "axiom prop140 (x y : Int) : same_parity x y ↔ even (x + y)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. Let $n$ be an instance of natural numbers. Then we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n$ be an instance of natural numbers. Then we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. Let $n$ be an instance of natural numbers. Then we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. Let $n$ be an instance of natural numbers. Then we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. For all instances $n$ of natural numbers, we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. For all instances $n$ of natural numbers, we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. For all instances $n$ of natural numbers, we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. For all instances $n$ of natural numbers, we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for every instance $n$ of natural numbers.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for every instance $n$ of natural numbers.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for every instance $n$ of natural numbers.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for every instance $n$ of natural numbers.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for all instances $n$ of natural numbers.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for all instances $n$ of natural numbers.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for all instances $n$ of natural numbers.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for all instances $n$ of natural numbers.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. Let $n$ be a natural number. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n$ be a natural number. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. Let $n$ be a natural number. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. Let $n$ be a natural number. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. For all natural numbers $n$, the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. For all natural numbers $n$, the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. For all natural numbers $n$, the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. For all natural numbers $n$, the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for every natural number $n$.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for every natural number $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for every natural number $n$.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for every natural number $n$.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for all natural numbers $n$.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for all natural numbers $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for all natural numbers $n$.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for all natural numbers $n$.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. Let $n \\in N$. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n \\in N$. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. Let $n \\in N$. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. Let $n \\in N$. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. Let $n$ be a natural number. Then $n ^ {3}- n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n$ be a natural number. Then $n ^ {3}- n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. Let $n$ be a natural number. Then $n ^ {3}- n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. Let $n$ be a natural number. Then $n ^ {3}- n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. For all natural numbers $n$, $n ^ {3}- n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. For all natural numbers $n$, $n ^ {3}- n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. For all natural numbers $n$, $n ^ {3}- n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. For all natural numbers $n$, $n ^ {3}- n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. $n ^ {3}- n$ is even for every natural number $n$.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ is even for every natural number $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. $n ^ {3}- n$ is even for every natural number $n$.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. $n ^ {3}- n$ is even for every natural number $n$.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. $n ^ {3}- n$ is even for all natural numbers $n$.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ is even for all natural numbers $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. $n ^ {3}- n$ is even for all natural numbers $n$.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. $n ^ {3}- n$ is even for all natural numbers $n$.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop150. Let $n \\in N$. Then $n ^ {3}- n$ is even.",
    "output": "prop150 : (n : Elem Nat) -> Proof (even (minus (pow n 3) n)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n \\in N$. Then $n ^ {3}- n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop150. Let $n \\in N$. Then $n ^ {3}- n$ is even.",
    "output": "Axiom prop150 : forall n : nat, even (pow n 3 - n) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop150. Let $n \\in N$. Then $n ^ {3}- n$ is even.",
    "output": "axiom prop150 (n : Nat) : even (pow n 3 - n)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. We can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. We can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. We can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. We can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. We can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. We can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. We can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. We can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. If $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. If $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. If $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. If $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "prop160 : (a : Elem Int) -> (b : Elem Int) -> Proof (if (same_parity (plus a b) (times a b)) (and (even a) (even b))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "Axiom prop160 : forall a : Int, forall b : Int, (same_parity (a + b) (a * b) -> even a /\\ even b) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "axiom prop160 (a b : Int) : same_parity (a + b) (a * b) → even a ∧ even b"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. We can prove that for all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. We can prove that for all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. We can prove that for all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. We can prove that for all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. For all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. For all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. For all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. For all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. For all natural numbers $x$, $x$ is not even and odd.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. For all natural numbers $x$, $x$ is not even and odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. For all natural numbers $x$, $x$ is not even and odd.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. For all natural numbers $x$, $x$ is not even and odd.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. $x$ is not even and odd for every natural number $x$.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. $x$ is not even and odd for every natural number $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. $x$ is not even and odd for every natural number $x$.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. $x$ is not even and odd for every natural number $x$.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. $x$ is not even and odd for all natural numbers $x$.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. $x$ is not even and odd for all natural numbers $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. $x$ is not even and odd for all natural numbers $x$.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. $x$ is not even and odd for all natural numbers $x$.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. No natural number $x$ is even and odd.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. No natural number $x$ is even and odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. No natural number $x$ is even and odd.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. No natural number $x$ is even and odd.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop170. No natural number is even and odd.",
    "output": "prop170 : Proof (forall Nat (x => not (and (even x) (odd x)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. No natural number is even and odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop170. No natural number is even and odd.",
    "output": "Axiom prop170 : All nat (fun x => ~ (even x /\\ odd x)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop170. No natural number is even and odd.",
    "output": "axiom prop170 : All Nat (λ x => ¬ (even x ∧ odd x))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. We can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. We can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. We can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. We can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. For all sets $A$ and $B$, the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. For all sets $A$ and $B$, the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. For all sets $A$ and $B$, the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. For all sets $A$ and $B$, the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. The union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. The union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. The union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. The union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then $A \\cup B = B \\cup A$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then $A \\cup B = B \\cup A$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then $A \\cup B = B \\cup A$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. For all sets $A$ and $B$, $A \\cup B = B \\cup A$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. For all sets $A$ and $B$, $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. For all sets $A$ and $B$, $A \\cup B = B \\cup A$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. For all sets $A$ and $B$, $A \\cup B = B \\cup A$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommUnion. $A \\cup B = B \\cup A$ for all sets $A$ and $B$.",
    "output": "commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. $A \\cup B = B \\cup A$ for all sets $A$ and $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommUnion. $A \\cup B = B \\cup A$ for all sets $A$ and $B$.",
    "output": "Axiom commUnion : forall A : Set, forall B : Set, equalset (union A B) (union B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommUnion. $A \\cup B = B \\cup A$ for all sets $A$ and $B$.",
    "output": "axiom commUnion (A B : Set) : equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. We can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. We can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. We can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. We can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. The intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. The intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. The intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. The intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then $A \\cap B = B \\cap A$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then $A \\cap B = B \\cap A$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then $A \\cap B = B \\cap A$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. For all sets $A$ and $B$, $A \\cap B = B \\cap A$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. For all sets $A$ and $B$, $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. For all sets $A$ and $B$, $A \\cap B = B \\cap A$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. For all sets $A$ and $B$, $A \\cap B = B \\cap A$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "CommIntersection. $A \\cap B = B \\cap A$ for all sets $A$ and $B$.",
    "output": "commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. $A \\cap B = B \\cap A$ for all sets $A$ and $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "CommIntersection. $A \\cap B = B \\cap A$ for all sets $A$ and $B$.",
    "output": "Axiom commIntersection : forall A : Set, forall B : Set, equalset (intersection A B) (intersection B A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "CommIntersection. $A \\cap B = B \\cap A$ for all sets $A$ and $B$.",
    "output": "axiom commIntersection (A B : Set) : equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. We can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. We can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. We can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. We can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. The union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. The union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. The union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. The union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocUnion. $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union (union A B) C) (union A (union B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocUnion. $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom assocUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union (union A B) C) (union A (union B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocUnion. $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "axiom assocUnion (A B C : Set) : equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. We can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. We can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. We can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. We can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. The intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. The intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. The intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. The intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AssocIntersection. $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AssocIntersection. $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom assocIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (intersection A B) C) (intersection A (intersection B C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AssocIntersection. $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "axiom assocIntersection (A B C : Set) : equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. We can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. We can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. We can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. We can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. The union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. The union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. The union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. The union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrUnion. $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrUnion. $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom distrUnion : forall A : Set, forall B : Set, forall C : Set, equalset (union A (intersection B C)) (intersection (union A B) (union A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrUnion. $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "axiom distrUnion (A B C : Set) : equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. We can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. We can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. We can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. We can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. The intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. The intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. The intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. The intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DistrIntersection. $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DistrIntersection. $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom distrIntersection : forall A : Set, forall B : Set, forall C : Set, equalset (intersection A (union B C)) (union (intersection A B) (intersection A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DistrIntersection. $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "axiom distrIntersection (A B C : Set) : equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. Let $A$ be a set. Then we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. Let $A$ be a set. Then we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. Let $A$ be a set. Then we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. Let $A$ be a set. Then we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. For all sets $A$, we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. For all sets $A$, we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. For all sets $A$, we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. For all sets $A$, we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. Let $A$ be a set. Then the union of $A$ and the empty set is equal to $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. Let $A$ be a set. Then the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. Let $A$ be a set. Then the union of $A$ and the empty set is equal to $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. Let $A$ be a set. Then the union of $A$ and the empty set is equal to $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. For all sets $A$, the union of $A$ and the empty set is equal to $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. For all sets $A$, the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. For all sets $A$, the union of $A$ and the empty set is equal to $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. For all sets $A$, the union of $A$ and the empty set is equal to $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. Let $A$ be a set. Then $A \\cup \\emptyset = A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. Let $A$ be a set. Then $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. Let $A$ be a set. Then $A \\cup \\emptyset = A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. Let $A$ be a set. Then $A \\cup \\emptyset = A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. For all sets $A$, $A \\cup \\emptyset = A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. For all sets $A$, $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. For all sets $A$, $A \\cup \\emptyset = A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. For all sets $A$, $A \\cup \\emptyset = A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for every set $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for every set $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for every set $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for every set $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for all sets $A$.",
    "output": "unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for all sets $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for all sets $A$.",
    "output": "Axiom unionEmpty : forall A : Set, equalset (union A emptyset) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for all sets $A$.",
    "output": "axiom unionEmpty (A : Set) : equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "Axiom intersEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "axiom intersEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. Let $A$ be a set. Then we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. Let $A$ be a set. Then we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. Let $A$ be a set. Then we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. Let $A$ be a set. Then we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. For all sets $A$, we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. For all sets $A$, we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. For all sets $A$, we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. For all sets $A$, we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. Let $A$ be a set. Then the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. Let $A$ be a set. Then the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. Let $A$ be a set. Then the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. Let $A$ be a set. Then the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. For all sets $A$, the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. For all sets $A$, the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. For all sets $A$, the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. For all sets $A$, the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. Let $A$ be a set. Then $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. Let $A$ be a set. Then $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. Let $A$ be a set. Then $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. Let $A$ be a set. Then $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. For all sets $A$, $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. For all sets $A$, $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. For all sets $A$, $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. For all sets $A$, $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for every set $A$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for every set $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for every set $A$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for every set $A$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for all sets $A$.",
    "output": "complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for all sets $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for all sets $A$.",
    "output": "Axiom complEnion : forall A : Set, equalset (union A (complement A)) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for all sets $A$.",
    "output": "axiom complEnion (A : Set) : equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. For all sets $A$, we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. For all sets $A$, we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. For all sets $A$, we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. For all sets $A$, we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. Let $A$ be a set. Then the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. Let $A$ be a set. Then the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. Let $A$ be a set. Then the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. Let $A$ be a set. Then the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. For all sets $A$, the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. For all sets $A$, the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. For all sets $A$, the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. For all sets $A$, the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. Let $A$ be a set. Then $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. Let $A$ be a set. Then $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. Let $A$ be a set. Then $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. Let $A$ be a set. Then $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. For all sets $A$, $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. For all sets $A$, $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. For all sets $A$, $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. For all sets $A$, $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for every set $A$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for every set $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for every set $A$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for every set $A$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for all sets $A$.",
    "output": "complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for all sets $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for all sets $A$.",
    "output": "Axiom complIntersection : forall A : Set, equalset (intersection A (complement A)) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for all sets $A$.",
    "output": "axiom complIntersection (A : Set) : equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. Let $A$ be a set. Then we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. Let $A$ be a set. Then we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. Let $A$ be a set. Then we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. Let $A$ be a set. Then we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. For all sets $A$, we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. For all sets $A$, we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. For all sets $A$, we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. For all sets $A$, we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. Let $A$ be a set. Then the union of $A$ and $A$ is equal to $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. Let $A$ be a set. Then the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. Let $A$ be a set. Then the union of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. Let $A$ be a set. Then the union of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. For all sets $A$, the union of $A$ and $A$ is equal to $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. For all sets $A$, the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. For all sets $A$, the union of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. For all sets $A$, the union of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. Let $A$ be a set. Then $A \\cup A = A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. Let $A$ be a set. Then $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. Let $A$ be a set. Then $A \\cup A = A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. Let $A$ be a set. Then $A \\cup A = A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. For all sets $A$, $A \\cup A = A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. For all sets $A$, $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. For all sets $A$, $A \\cup A = A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. For all sets $A$, $A \\cup A = A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. $A \\cup A = A$ for every set $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ for every set $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. $A \\cup A = A$ for every set $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. $A \\cup A = A$ for every set $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemUnion. $A \\cup A = A$ for all sets $A$.",
    "output": "idemUnion : (A : Set) -> Proof (equalset (union A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ for all sets $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemUnion. $A \\cup A = A$ for all sets $A$.",
    "output": "Axiom idemUnion : forall A : Set, equalset (union A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemUnion. $A \\cup A = A$ for all sets $A$.",
    "output": "axiom idemUnion (A : Set) : equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. For all sets $A$, we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. For all sets $A$, we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. For all sets $A$, we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. For all sets $A$, we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. Let $A$ be a set. Then the intersection of $A$ and $A$ is equal to $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. Let $A$ be a set. Then the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. Let $A$ be a set. Then the intersection of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. Let $A$ be a set. Then the intersection of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. For all sets $A$, the intersection of $A$ and $A$ is equal to $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. For all sets $A$, the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. For all sets $A$, the intersection of $A$ and $A$ is equal to $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. For all sets $A$, the intersection of $A$ and $A$ is equal to $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. Let $A$ be a set. Then $A \\cap A = A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. Let $A$ be a set. Then $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. Let $A$ be a set. Then $A \\cap A = A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. Let $A$ be a set. Then $A \\cap A = A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. For all sets $A$, $A \\cap A = A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. For all sets $A$, $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. For all sets $A$, $A \\cap A = A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. For all sets $A$, $A \\cap A = A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. $A \\cap A = A$ for every set $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ for every set $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. $A \\cap A = A$ for every set $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. $A \\cap A = A$ for every set $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IdemIntersection. $A \\cap A = A$ for all sets $A$.",
    "output": "idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ for all sets $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IdemIntersection. $A \\cap A = A$ for all sets $A$.",
    "output": "Axiom idemIntersection : forall A : Set, equalset (intersection A A) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IdemIntersection. $A \\cap A = A$ for all sets $A$.",
    "output": "axiom idemIntersection (A : Set) : equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. Let $A$ be a set. Then we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. Let $A$ be a set. Then we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. Let $A$ be a set. Then we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. Let $A$ be a set. Then we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. For all sets $A$, we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. For all sets $A$, we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. For all sets $A$, we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. For all sets $A$, we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. Let $A$ be a set. Then the union of $A$ and the universal set is equal to the universal set.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. Let $A$ be a set. Then the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. Let $A$ be a set. Then the union of $A$ and the universal set is equal to the universal set.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. Let $A$ be a set. Then the union of $A$ and the universal set is equal to the universal set.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. For all sets $A$, the union of $A$ and the universal set is equal to the universal set.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. For all sets $A$, the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. For all sets $A$, the union of $A$ and the universal set is equal to the universal set.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. For all sets $A$, the union of $A$ and the universal set is equal to the universal set.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. Let $A$ be a set. Then $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. Let $A$ be a set. Then $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. Let $A$ be a set. Then $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. Let $A$ be a set. Then $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. For all sets $A$, $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. For all sets $A$, $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. For all sets $A$, $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. For all sets $A$, $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for every set $A$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for every set $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for every set $A$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for every set $A$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for all sets $A$.",
    "output": "dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for all sets $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for all sets $A$.",
    "output": "Axiom dominUniverse : forall A : Set, equalset (union A universeset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for all sets $A$.",
    "output": "axiom dominUniverse (A : Set) : equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "Axiom dominEmpty : forall A : Set, equalset (intersection A emptyset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "axiom dominEmpty (A : Set) : equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. We can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. We can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. We can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. We can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. The union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. The union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. The union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. The union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then $A \\cup (A \\cap B)= A$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then $A \\cup (A \\cap B)= A$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then $A \\cup (A \\cap B)= A$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, $A \\cup (A \\cap B)= A$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, $A \\cup (A \\cap B)= A$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, $A \\cup (A \\cap B)= A$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbUnion. $A \\cup (A \\cap B)= A$ for all sets $A$ and $B$.",
    "output": "absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. $A \\cup (A \\cap B)= A$ for all sets $A$ and $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbUnion. $A \\cup (A \\cap B)= A$ for all sets $A$ and $B$.",
    "output": "Axiom absorbUnion : forall A : Set, forall B : Set, equalset (union A (intersection A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbUnion. $A \\cup (A \\cap B)= A$ for all sets $A$ and $B$.",
    "output": "axiom absorbUnion (A B : Set) : equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. We can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. We can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. We can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. We can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. The intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. The intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. The intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. The intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then $A \\cap (A \\cup B)= A$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then $A \\cap (A \\cup B)= A$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then $A \\cap (A \\cup B)= A$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, $A \\cap (A \\cup B)= A$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, $A \\cap (A \\cup B)= A$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, $A \\cap (A \\cup B)= A$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AbsorbIntersection. $A \\cap (A \\cup B)= A$ for all sets $A$ and $B$.",
    "output": "absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. $A \\cap (A \\cup B)= A$ for all sets $A$ and $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AbsorbIntersection. $A \\cap (A \\cup B)= A$ for all sets $A$ and $B$.",
    "output": "Axiom absorbIntersection : forall A : Set, forall B : Set, equalset (intersection A (union A B)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AbsorbIntersection. $A \\cap (A \\cup B)= A$ for all sets $A$ and $B$.",
    "output": "axiom absorbIntersection (A B : Set) : equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. For all sets $A$ and $B$, we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. For all sets $A$ and $B$, we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. For all sets $A$ and $B$, we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. For all sets $A$ and $B$, we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. We can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. We can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. We can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. We can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. For all sets $A$ and $B$, the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. For all sets $A$ and $B$, the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. For all sets $A$ and $B$, the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. For all sets $A$ and $B$, the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. The complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. The complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. The complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. The complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. For all sets $A$ and $B$, ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. For all sets $A$ and $B$, ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. For all sets $A$ and $B$, ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. For all sets $A$ and $B$, ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganUnion. ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "demorganUnion : (A : Set) -> (B : Set) -> Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganUnion. ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "Axiom demorganUnion : forall A : Set, forall B : Set, equalset (complement (union A B)) (intersection (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganUnion. ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "axiom demorganUnion (A B : Set) : equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. We can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. We can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. We can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. We can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. The complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. The complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. The complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. The complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "DemorganIntersection. ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "demorganIntersection : (A : Set) -> (B : Set) -> Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "DemorganIntersection. ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "Axiom demorganIntersection : forall A : Set, forall B : Set, equalset (complement (intersection A B)) (union (complement A) (complement B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "DemorganIntersection. ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "axiom demorganIntersection (A B : Set) : equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. Let $A$ be a set. Then we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. Let $A$ be a set. Then we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. Let $A$ be a set. Then we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. Let $A$ be a set. Then we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. For all sets $A$, we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. For all sets $A$, we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. For all sets $A$, we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. For all sets $A$, we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. Let $A$ be a set. Then the complement of the complement of $A$ is equal to $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. Let $A$ be a set. Then the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. Let $A$ be a set. Then the complement of the complement of $A$ is equal to $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. Let $A$ be a set. Then the complement of the complement of $A$ is equal to $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. For all sets $A$, the complement of the complement of $A$ is equal to $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. For all sets $A$, the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. For all sets $A$, the complement of the complement of $A$ is equal to $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. For all sets $A$, the complement of the complement of $A$ is equal to $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. Let $A$ be a set. Then ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. Let $A$ be a set. Then ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. Let $A$ be a set. Then ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. Let $A$ be a set. Then ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. For all sets $A$, ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. For all sets $A$, ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. For all sets $A$, ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. For all sets $A$, ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for every set $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for every set $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for every set $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for every set $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for all sets $A$.",
    "output": "involution : (A : Set) -> Proof (equalset (complement (complement A)) A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for all sets $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for all sets $A$.",
    "output": "Axiom involution : forall A : Set, equalset (complement (complement A)) A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for all sets $A$.",
    "output": "axiom involution (A : Set) : equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. We can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. We can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. We can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. We can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. The intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. The intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. The intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. The intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "IntersectionAsDifference. $A \\cap B = A \\setminus (A \\setminus B)$ for all sets $A$ and $B$.",
    "output": "intersectionAsDifference : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. $A \\cap B = A \\setminus (A \\setminus B)$ for all sets $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "IntersectionAsDifference. $A \\cap B = A \\setminus (A \\setminus B)$ for all sets $A$ and $B$.",
    "output": "Axiom intersectionAsDifference : forall A : Set, forall B : Set, equalset (intersection A B) (difference A (difference A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "IntersectionAsDifference. $A \\cap B = A \\setminus (A \\setminus B)$ for all sets $A$ and $B$.",
    "output": "axiom intersectionAsDifference (A B : Set) : equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEmpty. We can prove that the complement of the empty set is equal to the universal set.",
    "output": "complEmpty : Proof (equalset (complement emptyset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEmpty. We can prove that the complement of the empty set is equal to the universal set.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEmpty. We can prove that the complement of the empty set is equal to the universal set.",
    "output": "Axiom complEmpty : equalset (complement emptyset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEmpty. We can prove that the complement of the empty set is equal to the universal set.",
    "output": "axiom complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEmpty. The complement of the empty set is equal to the universal set.",
    "output": "complEmpty : Proof (equalset (complement emptyset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEmpty. The complement of the empty set is equal to the universal set.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEmpty. The complement of the empty set is equal to the universal set.",
    "output": "Axiom complEmpty : equalset (complement emptyset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEmpty. The complement of the empty set is equal to the universal set.",
    "output": "axiom complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplEmpty. ${\\emptyset }^{\\complement} = \\mathbb{ U}$.",
    "output": "complEmpty : Proof (equalset (complement emptyset) universeset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEmpty. ${\\emptyset }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplEmpty. ${\\emptyset }^{\\complement} = \\mathbb{ U}$.",
    "output": "Axiom complEmpty : equalset (complement emptyset) universeset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplEmpty. ${\\emptyset }^{\\complement} = \\mathbb{ U}$.",
    "output": "axiom complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplUniverse. We can prove that the complement of the universal set is equal to the empty set.",
    "output": "complUniverse : Proof (equalset (complement universeset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplUniverse. We can prove that the complement of the universal set is equal to the empty set.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplUniverse. We can prove that the complement of the universal set is equal to the empty set.",
    "output": "Axiom complUniverse : equalset (complement universeset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplUniverse. We can prove that the complement of the universal set is equal to the empty set.",
    "output": "axiom complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplUniverse. The complement of the universal set is equal to the empty set.",
    "output": "complUniverse : Proof (equalset (complement universeset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplUniverse. The complement of the universal set is equal to the empty set.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplUniverse. The complement of the universal set is equal to the empty set.",
    "output": "Axiom complUniverse : equalset (complement universeset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplUniverse. The complement of the universal set is equal to the empty set.",
    "output": "axiom complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ComplUniverse. ${\\mathbb{ U}}^{\\complement} = \\emptyset$.",
    "output": "complUniverse : Proof (equalset (complement universeset) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplUniverse. ${\\mathbb{ U}}^{\\complement} = \\emptyset$.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ComplUniverse. ${\\mathbb{ U}}^{\\complement} = \\emptyset$.",
    "output": "Axiom complUniverse : equalset (complement universeset) emptyset ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ComplUniverse. ${\\mathbb{ U}}^{\\complement} = \\emptyset$.",
    "output": "axiom complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Assume that we can prove that the intersection of $A$ and $B$ is equal to the empty set. Then we can prove that $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Assume that we can prove that the intersection of $A$ and $B$ is equal to the empty set. Then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Assume that we can prove that the intersection of $A$ and $B$ is equal to the empty set. Then we can prove that $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Assume that we can prove that the intersection of $A$ and $B$ is equal to the empty set. Then we can prove that $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. For all sets $A$ and $B$, if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. For all sets $A$ and $B$, if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. For all sets $A$ and $B$, if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. If we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. If we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. If we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the universal set, only if if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the universal set, only if if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the universal set, only if if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the universal set, only if if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then we can prove that the intersection of $A$ and $B$ is equal to the empty set, only if we can prove that $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then we can prove that the intersection of $A$ and $B$ is equal to the empty set, only if we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then we can prove that the intersection of $A$ and $B$ is equal to the empty set, only if we can prove that $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then we can prove that the intersection of $A$ and $B$ is equal to the empty set, only if we can prove that $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Assume that the intersection of $A$ and $B$ is equal to the empty set. Then $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Assume that the intersection of $A$ and $B$ is equal to the empty set. Then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Assume that the intersection of $A$ and $B$ is equal to the empty set. Then $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Assume that the intersection of $A$ and $B$ is equal to the empty set. Then $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. For all sets $A$ and $B$, if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. For all sets $A$ and $B$, if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. For all sets $A$ and $B$, if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. If the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. If the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. If the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the universal set, only if if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the universal set, only if if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the universal set, only if if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the universal set, only if if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then the intersection of $A$ and $B$ is equal to the empty set, only if $B$ is equal to the complement of $A$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then the intersection of $A$ and $B$ is equal to the empty set, only if $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then the intersection of $A$ and $B$ is equal to the empty set, only if $B$ is equal to the complement of $A$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then the intersection of $A$ and $B$ is equal to the empty set, only if $B$ is equal to the complement of $A$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Assume that $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Assume that $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Assume that $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Assume that $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$, only if if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$, only if if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$, only if if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$, only if if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$ implies $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$ implies $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$ implies $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$ implies $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) -> Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "Axiom uniqComplement : forall A : Set, forall B : Set, (equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "axiom uniqComplement (A B : Set) (x : equalset (union A B) universeset) (y : equalset (intersection A B) emptyset) : equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. Let $A$ be a set. Then we can prove that $A$ is a subset of $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. Let $A$ be a set. Then we can prove that $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. Let $A$ be a set. Then we can prove that $A$ is a subset of $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. Let $A$ be a set. Then we can prove that $A$ is a subset of $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. For all sets $A$, we can prove that $A$ is a subset of $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. For all sets $A$, we can prove that $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. For all sets $A$, we can prove that $A$ is a subset of $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. For all sets $A$, we can prove that $A$ is a subset of $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for every set $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for every set $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for every set $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for every set $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for all sets $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for all sets $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for all sets $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for all sets $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. Let $A$ be a set. Then $A$ is a subset of $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. Let $A$ be a set. Then $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. Let $A$ be a set. Then $A$ is a subset of $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. Let $A$ be a set. Then $A$ is a subset of $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. For all sets $A$, $A$ is a subset of $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. For all sets $A$, $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. For all sets $A$, $A$ is a subset of $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. For all sets $A$, $A$ is a subset of $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. $A$ is a subset of $A$ for every set $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A$ is a subset of $A$ for every set $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. $A$ is a subset of $A$ for every set $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. $A$ is a subset of $A$ for every set $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. $A$ is a subset of $A$ for all sets $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A$ is a subset of $A$ for all sets $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. $A$ is a subset of $A$ for all sets $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. $A$ is a subset of $A$ for all sets $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. Let $A$ be a set. Then $A \\subseteq A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. Let $A$ be a set. Then $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. Let $A$ be a set. Then $A \\subseteq A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. Let $A$ be a set. Then $A \\subseteq A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. For all sets $A$, $A \\subseteq A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. For all sets $A$, $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. For all sets $A$, $A \\subseteq A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. For all sets $A$, $A \\subseteq A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. $A \\subseteq A$ for every set $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ for every set $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. $A \\subseteq A$ for every set $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. $A \\subseteq A$ for every set $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "ReflSubset. $A \\subseteq A$ for all sets $A$.",
    "output": "reflSubset : (A : Set) -> Proof (subseteq A A) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ for all sets $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "ReflSubset. $A \\subseteq A$ for all sets $A$.",
    "output": "Axiom reflSubset : forall A : Set, subseteq A A ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "ReflSubset. $A \\subseteq A$ for all sets $A$.",
    "output": "axiom reflSubset (A : Set) : subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. $A \\subseteq B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. $A \\subseteq B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. $A \\subseteq B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "Axiom antisymmSubset : forall A : Set, forall B : Set, (subseteq A B /\\ subseteq B A <-> equalset A B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "axiom antisymmSubset (A B : Set) : subseteq A B ∧ subseteq B A ↔ equalset A B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. We can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. We can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. We can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. We can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. If $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. If $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. If $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. If $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. If $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. If $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. If $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. If $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "Axiom transitSubset : forall A : Set, forall B : Set, forall C : Set, (subseteq A B /\\ subseteq B C -> subseteq A C) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "axiom transitSubset (A B C : Set) : subseteq A B ∧ subseteq B C → subseteq A C"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that we can prove that $A$ is a subset of $S$. Then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that we can prove that $A$ is a subset of $S$. Then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that we can prove that $A$ is a subset of $S$. Then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that we can prove that $A$ is a subset of $S$. Then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. For all sets $S$ and $A$, if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. For all sets $S$ and $A$, if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. For all sets $S$ and $A$, if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. If we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. If we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. If we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then we can prove that $A$ is a subset of $S$, only if we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then we can prove that $A$ is a subset of $S$, only if we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then we can prove that $A$ is a subset of $S$, only if we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then we can prove that $A$ is a subset of $S$, only if we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A$ is a subset of $S$. Then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A$ is a subset of $S$. Then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A$ is a subset of $S$. Then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A$ is a subset of $S$. Then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. For all sets $S$ and $A$, if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. For all sets $S$ and $A$, if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. For all sets $S$ and $A$, if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. If $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. If $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. If $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A$ is a subset of $S$, only if the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A$ is a subset of $S$, only if the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A$ is a subset of $S$, only if the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A$ is a subset of $S$, only if the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$ implies $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$ implies $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$ implies $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$ implies $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "Axiom prop7 : forall S : Set, forall A : Set, (subseteq A S -> subseteq emptyset A /\\ subseteq A S) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "axiom prop7 (S A : Set) (x : subseteq A S) : subseteq emptyset A ∧ subseteq A S"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. We can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. We can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. We can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. We can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8a. $A \\subseteq B$, if and only if $A \\cap B = A$ for all sets $A$ and $B$.",
    "output": "prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. $A \\subseteq B$, if and only if $A \\cap B = A$ for all sets $A$ and $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8a. $A \\subseteq B$, if and only if $A \\cap B = A$ for all sets $A$ and $B$.",
    "output": "Axiom prop8a : forall A : Set, forall B : Set, (subseteq A B <-> equalset (intersection A B) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8a. $A \\subseteq B$, if and only if $A \\cap B = A$ for all sets $A$ and $B$.",
    "output": "axiom prop8a (A B : Set) : subseteq A B ↔ equalset (intersection A B) A"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. We can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. We can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. We can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. We can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8b. $A \\subseteq B$, if and only if $A \\cup B = B$ for all sets $A$ and $B$.",
    "output": "prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. $A \\subseteq B$, if and only if $A \\cup B = B$ for all sets $A$ and $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8b. $A \\subseteq B$, if and only if $A \\cup B = B$ for all sets $A$ and $B$.",
    "output": "Axiom prop8b : forall A : Set, forall B : Set, (subseteq A B <-> equalset (union A B) B) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8b. $A \\subseteq B$, if and only if $A \\cup B = B$ for all sets $A$ and $B$.",
    "output": "axiom prop8b (A B : Set) : subseteq A B ↔ equalset (union A B) B"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. We can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. We can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. We can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. We can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8c. $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$ for all sets $A$ and $B$.",
    "output": "prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$ for all sets $A$ and $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8c. $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$ for all sets $A$ and $B$.",
    "output": "Axiom prop8c : forall A : Set, forall B : Set, (subseteq A B <-> equalset (difference A B) emptyset) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8c. $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$ for all sets $A$ and $B$.",
    "output": "axiom prop8c (A B : Set) : subseteq A B ↔ equalset (difference A B) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. We can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. We can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. We can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. We can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. For all sets $A$ and $B$, $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. For all sets $A$ and $B$, $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. For all sets $A$ and $B$, $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. For all sets $A$ and $B$, $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop8d. $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop8d. $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "Axiom prop8d : forall A : Set, forall B : Set, (subseteq A B <-> subseteq (complement B) (complement A)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop8d. $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "axiom prop8d (A B : Set) : subseteq A B ↔ subseteq (complement B) (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. We can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. We can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. We can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. We can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. The intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. The intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. The intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. The intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "prop9d : (A : Set) -> (B : Set) -> (C : Set) -> Proof (and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "Axiom prop9d : forall A : Set, forall B : Set, forall C : Set, equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) /\\ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "axiom prop9d (A B C : Set) : equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)) ∧ equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Assume that we can prove that $n$ is not equal to $0$. Then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Assume that we can prove that $n$ is not equal to $0$. Then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Assume that we can prove that $n$ is not equal to $0$. Then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Assume that we can prove that $n$ is not equal to $0$. Then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. For all instances $m$ and $n$ of natural numbers, if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. For all instances $m$ and $n$ of natural numbers, if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. For all instances $m$ and $n$ of natural numbers, if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. For all instances $m$ and $n$ of natural numbers, if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. If we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. If we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. If we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. If we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then we can prove that $n$ is not equal to $0$, only if we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then we can prove that $n$ is not equal to $0$, only if we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then we can prove that $n$ is not equal to $0$, only if we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then we can prove that $n$ is not equal to $0$, only if we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. If $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. If $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. If $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. If $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m , n \\in N$. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m , n \\in N$. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m , n \\in N$. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. If $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. If $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. If $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. If $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) -> Proof (Neq (pow (div m n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "Axiom Thm01 : forall m : nat, forall n : nat, (Neq n 0 -> Neq (pow (m / n) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "axiom Thm01 (m n : Nat) (x : n ≠ 0) : pow (m / n) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. Let $m$ and $n$ be instances of natural numbers. Then we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m$ and $n$ be instances of natural numbers. Then we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. Let $m$ and $n$ be instances of natural numbers. Then we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. Let $m$ and $n$ be instances of natural numbers. Then we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. For all instances $m$ and $n$ of natural numbers, we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. For all instances $m$ and $n$ of natural numbers, we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. For all instances $m$ and $n$ of natural numbers, we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. For all instances $m$ and $n$ of natural numbers, we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. We can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. We can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. We can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. We can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. The exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. The exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. The exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. The exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. Let $m , n \\in N$. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m , n \\in N$. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. Let $m , n \\in N$. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. Let $m , n \\in N$. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. $(\\frac{ m}{n + 1})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. $(\\frac{ m}{n + 1})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. $(\\frac{ m}{n + 1})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. $(\\frac{ m}{n + 1})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01a. Let $m , n \\in N$. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "Thm01a : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq (pow (div m (plus n 1)) 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m , n \\in N$. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01a. Let $m , n \\in N$. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "Axiom Thm01a : forall m : nat, forall n : nat, Neq (pow (m / (n + 1)) 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01a. Let $m , n \\in N$. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "axiom Thm01a (m n : Nat) : pow (m / (n + 1)) 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. Let $q$ be an instance of rational numbers. Then we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q$ be an instance of rational numbers. Then we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. Let $q$ be an instance of rational numbers. Then we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. Let $q$ be an instance of rational numbers. Then we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. For all instances $q$ of rational numbers, we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. For all instances $q$ of rational numbers, we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. For all instances $q$ of rational numbers, we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. For all instances $q$ of rational numbers, we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for every instance $q$ of rational numbers.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for every instance $q$ of rational numbers.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for every instance $q$ of rational numbers.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for every instance $q$ of rational numbers.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for all instances $q$ of rational numbers.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for all instances $q$ of rational numbers.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for all instances $q$ of rational numbers.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for all instances $q$ of rational numbers.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. Let $q$ be a rational number. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q$ be a rational number. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. Let $q$ be a rational number. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. Let $q$ be a rational number. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. For all rational numbers $q$, the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. For all rational numbers $q$, the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. For all rational numbers $q$, the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. For all rational numbers $q$, the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for every rational number $q$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for every rational number $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for every rational number $q$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for every rational number $q$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for all rational numbers $q$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for all rational numbers $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for all rational numbers $q$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for all rational numbers $q$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. Let $q \\in Q$. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q \\in Q$. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. Let $q \\in Q$. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. Let $q \\in Q$. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. Let $q$ be a rational number. Then $q ^ {2}\\neq 2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q$ be a rational number. Then $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. Let $q$ be a rational number. Then $q ^ {2}\\neq 2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. Let $q$ be a rational number. Then $q ^ {2}\\neq 2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. For all rational numbers $q$, $q ^ {2}\\neq 2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. For all rational numbers $q$, $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. For all rational numbers $q$, $q ^ {2}\\neq 2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. For all rational numbers $q$, $q ^ {2}\\neq 2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for every rational number $q$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for every rational number $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for every rational number $q$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for every rational number $q$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for all rational numbers $q$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for all rational numbers $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for all rational numbers $q$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for all rational numbers $q$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01b. Let $q \\in Q$. Then $q ^ {2}\\neq 2$.",
    "output": "Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q \\in Q$. Then $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01b. Let $q \\in Q$. Then $q ^ {2}\\neq 2$.",
    "output": "Axiom Thm01b : forall q : Rat, Neq (pow q 2) 2 ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01b. Let $q \\in Q$. Then $q ^ {2}\\neq 2$.",
    "output": "axiom Thm01b (q : Rat) : pow q 2 ≠ 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. Let $q$ be an instance of rational numbers. Then we can prove that the square root of $2$ is not equal to $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q$ be an instance of rational numbers. Then we can prove that the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. Let $q$ be an instance of rational numbers. Then we can prove that the square root of $2$ is not equal to $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. Let $q$ be an instance of rational numbers. Then we can prove that the square root of $2$ is not equal to $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. For all instances $q$ of rational numbers, we can prove that the square root of $2$ is not equal to $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. For all instances $q$ of rational numbers, we can prove that the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. For all instances $q$ of rational numbers, we can prove that the square root of $2$ is not equal to $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. For all instances $q$ of rational numbers, we can prove that the square root of $2$ is not equal to $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for every instance $q$ of rational numbers.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for every instance $q$ of rational numbers.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for every instance $q$ of rational numbers.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for every instance $q$ of rational numbers.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for all instances $q$ of rational numbers.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for all instances $q$ of rational numbers.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for all instances $q$ of rational numbers.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for all instances $q$ of rational numbers.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. Let $q$ be a rational number. Then the square root of $2$ is not equal to $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q$ be a rational number. Then the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. Let $q$ be a rational number. Then the square root of $2$ is not equal to $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. Let $q$ be a rational number. Then the square root of $2$ is not equal to $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. For all rational numbers $q$, the square root of $2$ is not equal to $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. For all rational numbers $q$, the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. For all rational numbers $q$, the square root of $2$ is not equal to $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. For all rational numbers $q$, the square root of $2$ is not equal to $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for every rational number $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for every rational number $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for every rational number $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for every rational number $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for all rational numbers $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for all rational numbers $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for all rational numbers $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for all rational numbers $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. Let $q \\in Q$. Then the square root of $2$ is not equal to $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q \\in Q$. Then the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. Let $q \\in Q$. Then the square root of $2$ is not equal to $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. Let $q \\in Q$. Then the square root of $2$ is not equal to $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. Let $q$ be a rational number. Then $\\sqrt{ 2}\\neq q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q$ be a rational number. Then $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. Let $q$ be a rational number. Then $\\sqrt{ 2}\\neq q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. Let $q$ be a rational number. Then $\\sqrt{ 2}\\neq q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. For all rational numbers $q$, $\\sqrt{ 2}\\neq q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. For all rational numbers $q$, $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. For all rational numbers $q$, $\\sqrt{ 2}\\neq q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. For all rational numbers $q$, $\\sqrt{ 2}\\neq q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for every rational number $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for every rational number $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for every rational number $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for every rational number $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for all rational numbers $q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for all rational numbers $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for all rational numbers $q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for all rational numbers $q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01c. Let $q \\in Q$. Then $\\sqrt{ 2}\\neq q$.",
    "output": "Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q \\in Q$. Then $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01c. Let $q \\in Q$. Then $\\sqrt{ 2}\\neq q$.",
    "output": "Axiom Thm01c : forall q : Rat, Neq (sqrt 2) q ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01c. Let $q \\in Q$. Then $\\sqrt{ 2}\\neq q$.",
    "output": "axiom Thm01c (q : Rat) : sqrt 2 ≠ q"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01d. We can prove that the square root of $2$ is not rational.",
    "output": "Thm01d : Proof (not (rational (sqrt 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01d. We can prove that the square root of $2$ is not rational.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01d. We can prove that the square root of $2$ is not rational.",
    "output": "Axiom Thm01d : ~ rational (sqrt 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01d. We can prove that the square root of $2$ is not rational.",
    "output": "axiom Thm01d : ¬ rational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01d. The square root of $2$ is not rational.",
    "output": "Thm01d : Proof (not (rational (sqrt 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01d. The square root of $2$ is not rational.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01d. The square root of $2$ is not rational.",
    "output": "Axiom Thm01d : ~ rational (sqrt 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01d. The square root of $2$ is not rational.",
    "output": "axiom Thm01d : ¬ rational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01d. $\\sqrt{ 2}$ is not rational.",
    "output": "Thm01d : Proof (not (rational (sqrt 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01d. $\\sqrt{ 2}$ is not rational.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01d. $\\sqrt{ 2}$ is not rational.",
    "output": "Axiom Thm01d : ~ rational (sqrt 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01d. $\\sqrt{ 2}$ is not rational.",
    "output": "axiom Thm01d : ¬ rational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01e. We can prove that the square root of $2$ is irrational.",
    "output": "Thm01e : Proof (irrational (sqrt 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01e. We can prove that the square root of $2$ is irrational.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01e. We can prove that the square root of $2$ is irrational.",
    "output": "Axiom Thm01e : irrational (sqrt 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01e. We can prove that the square root of $2$ is irrational.",
    "output": "axiom Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01e. The square root of $2$ is irrational.",
    "output": "Thm01e : Proof (irrational (sqrt 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01e. The square root of $2$ is irrational.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01e. The square root of $2$ is irrational.",
    "output": "Axiom Thm01e : irrational (sqrt 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01e. The square root of $2$ is irrational.",
    "output": "axiom Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01e. $\\sqrt{ 2}$ is irrational.",
    "output": "Thm01e : Proof (irrational (sqrt 2)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01e. $\\sqrt{ 2}$ is irrational.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01e. $\\sqrt{ 2}$ is irrational.",
    "output": "Axiom Thm01e : irrational (sqrt 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01e. $\\sqrt{ 2}$ is irrational.",
    "output": "axiom Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for a natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for a natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for a natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for some natural number $p$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for some natural number $p$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for some natural number $p$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that there exist natural numbers $p$ and $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exist natural numbers $p$ and $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that there exist natural numbers $p$ and $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that there exist natural numbers $p$ and $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural numbers $p$ and $q$.",
    "output": "Thm01f : Proof (not (exists Nat (p => exists Nat (q => Eq (square p) (times 2 (square q)))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural numbers $p$ and $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural numbers $p$ and $q$.",
    "output": "Axiom Thm01f : ~ Exist nat (fun p => Exist nat (fun q => square p = 2 * square q)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural numbers $p$ and $q$.",
    "output": "axiom Thm01f : ¬ Exist Nat (λ p => Exist Nat (λ q => square p = 2 * square q))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for a complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for a complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for a complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for some complex number $c$.",
    "output": "Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) -> Proof (exists Complex (c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for some complex number $c$.",
    "output": "Axiom Thm02 : forall P : Polynomial, (degree P > 0 -> Exist Complex (fun c => isRoot c P)) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for some complex number $c$.",
    "output": "axiom Thm02 (P : Polynomial) (x : degree P > 0) : Exist Complex (λ c => isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm03. We can prove that $Rat$ is denumerable.",
    "output": "Thm03 : Proof (denumerable Rat) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03. We can prove that $Rat$ is denumerable.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm03. We can prove that $Rat$ is denumerable.",
    "output": "Axiom Thm03 : denumerable Rat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm03. We can prove that $Rat$ is denumerable.",
    "output": "axiom Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm03. $Rat$ is denumerable.",
    "output": "Thm03 : Proof (denumerable Rat) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03. $Rat$ is denumerable.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm03. $Rat$ is denumerable.",
    "output": "Axiom Thm03 : denumerable Rat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm03. $Rat$ is denumerable.",
    "output": "axiom Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm03a. We can prove that the cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "Thm03a : Proof (Eq (cardinality Nat) (cardinality Rat)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03a. We can prove that the cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm03a. We can prove that the cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "Axiom Thm03a : cardinality nat = cardinality Rat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm03a. We can prove that the cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "axiom Thm03a : cardinality Nat = cardinality Rat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm03a. The cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "Thm03a : Proof (Eq (cardinality Nat) (cardinality Rat)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03a. The cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm03a. The cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "Axiom Thm03a : cardinality nat = cardinality Rat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm03a. The cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "axiom Thm03a : cardinality Nat = cardinality Rat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm03a. $| Nat | = | Rat |$.",
    "output": "Thm03a : Proof (Eq (cardinality Nat) (cardinality Rat)) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03a. $| Nat | = | Rat |$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm03a. $| Nat | = | Rat |$.",
    "output": "Axiom Thm03a : cardinality nat = cardinality Rat ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm03a. $| Nat | = | Rat |$.",
    "output": "axiom Thm03a : cardinality Nat = cardinality Rat"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Assume that we can prove that $u$ is perpendicular to $v$. Then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Assume that we can prove that $u$ is perpendicular to $v$. Then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Assume that we can prove that $u$ is perpendicular to $v$. Then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Assume that we can prove that $u$ is perpendicular to $v$. Then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. For all instances $u$ and $v$ of vectors, if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. For all instances $u$ and $v$ of vectors, if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. For all instances $u$ and $v$ of vectors, if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. For all instances $u$ and $v$ of vectors, if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. If we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all instances $u$ and $v$ of vectors.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. If we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all instances $u$ and $v$ of vectors.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. If we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all instances $u$ and $v$ of vectors.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. If we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all instances $u$ and $v$ of vectors.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then we can prove that $u$ is perpendicular to $v$, only if we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then we can prove that $u$ is perpendicular to $v$, only if we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then we can prove that $u$ is perpendicular to $v$, only if we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then we can prove that $u$ is perpendicular to $v$, only if we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u$ is perpendicular to $v$. Then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u$ is perpendicular to $v$. Then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u$ is perpendicular to $v$. Then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u$ is perpendicular to $v$. Then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. If $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all vectors $u$ and $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. If $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all vectors $u$ and $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. If $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all vectors $u$ and $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. If $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all vectors $u$ and $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, only if the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, only if the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, only if the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, only if the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u \\perp v$. Then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u \\perp v$. Then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u \\perp v$. Then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u \\perp v$. Then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. If $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$ for all vectors $u$ and $v$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. If $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$ for all vectors $u$ and $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. If $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$ for all vectors $u$ and $v$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. If $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$ for all vectors $u$ and $v$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$, only if $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$, only if $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$, only if $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$, only if $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$ implies $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) -> Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$ implies $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$ implies $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "Axiom Thm04 : forall u : Vector, forall v : Vector, (perpendicular u v -> length (resultant u v) = sqrt (square (length u) + square (length v))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$ implies $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "axiom Thm04 (u v : Vector) (x : perpendicular u v) : length (resultant u v) = sqrt (square (length u) + square (length v))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Assume that we can prove that $p$ is prime and $q$ is prime. Then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Assume that we can prove that $p$ is prime and $q$ is prime. Then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Assume that we can prove that $p$ is prime and $q$ is prime. Then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Assume that we can prove that $p$ is prime and $q$ is prime. Then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. For all instances $p$ and $q$ of natural numbers, if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all instances $p$ and $q$ of natural numbers, if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. For all instances $p$ and $q$ of natural numbers, if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. For all instances $p$ and $q$ of natural numbers, if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. If we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all instances $p$ and $q$ of natural numbers.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all instances $p$ and $q$ of natural numbers.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. If we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all instances $p$ and $q$ of natural numbers.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. If we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all instances $p$ and $q$ of natural numbers.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then we can prove that $p$ is prime and $q$ is prime, only if we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then we can prove that $p$ is prime and $q$ is prime, only if we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then we can prove that $p$ is prime and $q$ is prime, only if we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then we can prove that $p$ is prime and $q$ is prime, only if we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all natural numbers $p$ and $q$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all natural numbers $p$ and $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all natural numbers $p$ and $q$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all natural numbers $p$ and $q$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. If $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. If $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. If $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) -> Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "Axiom thm07 : forall p : nat, forall q : nat, (prime p /\\ prime q -> legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "axiom thm07 (p q : Nat) (x : prime p ∧ prime q) : legendre p q * legendre q p = pow (neg 1) ((p - 1) / 2 * ((q - 1) / 2))"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Assume that we can prove that $r$ is equal to the radius of $c$. Then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Assume that we can prove that $r$ is equal to the radius of $c$. Then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Assume that we can prove that $r$ is equal to the radius of $c$. Then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Assume that we can prove that $r$ is equal to the radius of $c$. Then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all circles $c$, for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all circles $c$, for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all circles $c$, for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all circles $c$, for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every instance $r$ of real numbers.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every instance $r$ of real numbers.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every instance $r$ of real numbers.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every instance $r$ of real numbers.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all instances $r$ of real numbers.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all instances $r$ of real numbers.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all instances $r$ of real numbers.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all instances $r$ of real numbers.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then we can prove that $r$ is equal to the radius of $c$, only if we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then we can prove that $r$ is equal to the radius of $c$, only if we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then we can prove that $r$ is equal to the radius of $c$, only if we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then we can prove that $r$ is equal to the radius of $c$, only if we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every real number $r$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every real number $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every real number $r$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every real number $r$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all real numbers $r$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all real numbers $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all real numbers $r$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all real numbers $r$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every circle $c$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every circle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every circle $c$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every circle $c$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all circles $c$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all circles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all circles $c$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all circles $c$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every real number $r$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every real number $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every real number $r$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every real number $r$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all real numbers $r$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all real numbers $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all real numbers $r$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all real numbers $r$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  },
  {
    "instruction": "Translate the following English statement into Dedukti.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) -> Proof (Eq (area c) (times pi (pow r 2))) ."
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Coq.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "Axiom thm09 : forall c : Circle, forall r : Real, (r = radius c -> area c = pi * pow r 2) ."
  },
  {
    "instruction": "Translate the following English statement into Lean.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "axiom thm09 (c : Circle) (r : Real) (x : r = radius c) : area c = pi * pow r 2"
  }
]