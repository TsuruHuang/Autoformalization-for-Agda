[
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is equal to $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x = y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors nous pouvons dire que $x$ est égal à $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x$ est égal à $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x = y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då kan vi säga att $x$ är lika med $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x$ är lika med $y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x = y$.",
    "output": "postulate Eq : (x : Num) -> (y : Num) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x < y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors nous pouvons dire que $x$ est inférieur à $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x$ est inférieur à $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x < y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då kan vi säga att $x$ är mindre än $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x$ är mindre än $y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x < y$.",
    "output": "postulate Lt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x > y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors nous pouvons dire que $x$ est supérieur à $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x$ est supérieur à $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x > y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då kan vi säga att $x$ är större än $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x$ är större än $y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x > y$.",
    "output": "postulate Gt : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is not equal to $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\neq y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors nous pouvons dire que $x$ est inégal à $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x$ est inégal à $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x \\neq y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då kan vi säga att $x$ är inte lika med $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x$ är inte lika med $y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x \\neq y$.",
    "output": "postulate Neq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is less than or equal to $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\leq y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors nous pouvons dire que $x$ est inférieur ou ágal à $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x$ est inférieur ou ágal à $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x \\leq y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då kan vi säga att $x$ är mindre än eller lika med $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x$ är mindre än eller lika med $y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x \\leq y$.",
    "output": "postulate Leq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x$ is greater than or equal to $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then we can say that $x \\geq y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors nous pouvons dire que $x$ est supérieur ou ágal à $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x$ est supérieur ou ágal à $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors nous pouvons dire que $x \\geq y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då kan vi säga att $x$ är större än eller lika med $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x$ är större än eller lika med $y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då kan vi säga att $x \\geq y$.",
    "output": "postulate Geq : Num -> Num -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $A$. Then $Eqt$ is a proposition.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Elem$ tient pour $A$. Supposons que $Elem$ tient pour $A$. Alors $Eqt$ est une proposition.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Elem$ tient pour $A$ et $Elem$ tient pour $A$. Alors $Eqt$ est une proposition.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Elem$ håller för $A$. Anta att $Elem$ håller för $A$. Då är $Eqt$ ett påstående.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Elem$ håller för $A$ och $Elem$ håller för $A$. Då är $Eqt$ ett påstående.",
    "output": "postulate Eqt : (A : Set) -> A -> A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is positive.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is positive.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is positive.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres réels. Alors nous pouvons dire que $x$ est positif.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors nous pouvons dire que $x$ est positif.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors nous pouvons dire que $x$ est positif.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av reella tal. Då kan vi säga att $x$ är positivt.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då kan vi säga att $x$ är positivt.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då kan vi säga att $x$ är positivt.",
    "output": "postulate positive : (x : Real) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then we can say that $x$ is negative.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then we can say that $x$ is negative.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then we can say that $x$ is negative.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres réels. Alors nous pouvons dire que $x$ est negatif.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors nous pouvons dire que $x$ est negatif.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors nous pouvons dire que $x$ est negatif.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av reella tal. Då kan vi säga att $x$ är negativt.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då kan vi säga att $x$ är negativt.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då kan vi säga att $x$ är negativt.",
    "output": "postulate negative : Real -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the sum of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the sum of $x$ and $y$ is a Number.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x + y$ is a Number.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors la somme de $x$ et de $y$ est une instance de nombres.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors la somme de $x$ et de $y$ est un nombre.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors $x + y$ est un nombre.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då är summan av $x$ och $y$ en instans av tal.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är summan av $x$ och $y$ ett tal.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är $x + y$ ett tal.",
    "output": "postulate plus : (x : Num) -> (y : Num) -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the difference of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the difference of $x$ and $y$ is a Number.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x - y$ is a Number.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors la différence de $x$ et de $y$ est une instance de nombres.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors la différence de $x$ et de $y$ est un nombre.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors $x - y$ est un nombre.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då är skillnaden mellan $x$ och $y$ en instans av tal.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är skillnaden mellan $x$ och $y$ ett tal.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är $x - y$ ett tal.",
    "output": "postulate minus : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the product of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the product of $x$ and $y$ is a Number.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x y$ is a Number.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors le produit de $x$ et de $y$ est une instance de nombres.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors le produit de $x$ et de $y$ est un nombre.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors $x y$ est un nombre.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då är produkten av $x$ och $y$ en instans av tal.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är produkten av $x$ och $y$ ett tal.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är $x y$ ett tal.",
    "output": "postulate times : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the quotient of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the quotient of $x$ and $y$ is a Number.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\frac{ x}{y}$ is a Number.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors le quotient de $x$ et de $y$ est une instance de nombres.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors le quotient de $x$ et de $y$ est un nombre.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors $\\frac{ x}{y}$ est un nombre.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då är kvoten av $x$ och $y$ en instans av tal.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är kvoten av $x$ och $y$ ett tal.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är $\\frac{ x}{y}$ ett tal.",
    "output": "postulate div : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the exponentiation of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the exponentiation of $x$ and $y$ is a Number.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $x ^ {y}$ is a Number.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors la puissance de $x$ et de $y$ est une instance de nombres.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors la puissance de $x$ et de $y$ est un nombre.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors $x ^ {y}$ est un nombre.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då är potensen av $x$ och $y$ en instans av tal.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är potensen av $x$ och $y$ ett tal.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är $x ^ {y}$ ett tal.",
    "output": "postulate pow : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the negation of $x$ is an instance of Numbers.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then the negation of $x$ is a Number.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then $- x$ is a Number.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres. Alors la négation de $x$ est une instance de nombres.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre. Alors la négation de $x$ est un nombre.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre. Alors $- x$ est un nombre.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av tal. Då är negationen av $x$ en instans av tal.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett tal. Då är negationen av $x$ ett tal.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett tal. Då är $- x$ ett tal.",
    "output": "postulate neg : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Then the square root of $x$ is an instance of Numbers.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then the square root of $x$ is a Number.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Then $\\sqrt{ x}$ is a Number.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres. Alors la racine carrée de $x$ est une instance de nombres.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre. Alors la racine carrée de $x$ est un nombre.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre. Alors $\\sqrt{ x}$ est un nombre.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av tal. Då är kvadratroten av $x$ en instans av tal.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett tal. Då är kvadratroten av $x$ ett tal.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett tal. Då är $\\sqrt{ x}$ ett tal.",
    "output": "postulate sqrt : Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of Numbers. Then the logarithm of $x$ and $y$ is an instance of Numbers.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then the logarithm of $x$ and $y$ is a Number.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be Numbers. Then $\\log_ x {y}$ is a Number.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres. Alors le logarithme de $x$ et de $y$ est une instance de nombres.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors le logarithme de $x$ et de $y$ est un nombre.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres. Alors $\\log_ x {y}$ est un nombre.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av tal. Då är logaritmen av $x$ och $y$ en instans av tal.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är logaritmen av $x$ och $y$ ett tal.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara tal. Då är $\\log_ x {y}$ ett tal.",
    "output": "postulate log : Num -> Num -> Num"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the successor of $x$ is an instance of natural numbers.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a natural number. Then the successor of $x$ is a natural number.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in N$. Then the successor of $x$ is a natural number.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres naturels. Alors le successeur de $x$ est une instance de nombres naturels.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre naturel. Alors le successeur de $x$ est un nombre naturel.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in N$. Alors le successeur de $x$ est un nombre naturel.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av naturliga tal. Då är efterföljaret av $x$ en instans av naturliga tal.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett naturligt tal. Då är efterföljaret av $x$ ett naturligt tal.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in N$. Då är efterföljaret av $x$ ett naturligt tal.",
    "output": "postulate succ : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of integers. Then the greatest common divisor of $x$ and $y$ is an instance of integers.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be integers. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x , y \\in Z$. Then the greatest common divisor of $x$ and $y$ is an integer.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances d'entiers. Alors le diviseur commun plus grand de $x$ et de $y$ est une instance d'entiers.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des entiers. Alors le diviseur commun plus grand de $x$ et de $y$ est un entier.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x , y \\in Z$. Alors le diviseur commun plus grand de $x$ et de $y$ est un entier.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av heltal. Då är det största gemensama delaret av $x$ och $y$ en instans av heltal.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara heltal. Då är det största gemensama delaret av $x$ och $y$ ett heltal.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x , y \\in Z$. Då är det största gemensama delaret av $x$ och $y$ ett heltal.",
    "output": "postulate gcd : Int -> Int -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av reella tal. Då är [absolute_value_Fun] [absolute_value_Fun] $x$ en instans av reella tal.",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är [absolute_value_Fun] [absolute_value_Fun] $x$ ett reellt tal.",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är [absolute_value_Fun] [absolute_value_Fun] $x$ ett reellt tal.",
    "output": "postulate abs : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of natural numbers. Then the factorial of $x$ is an instance of natural numbers.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a natural number. Then the factorial of $x$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in N$. Then the factorial of $x$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a natural number. Then $x !$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in N$. Then $x !$ is a natural number.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres naturels. Alors la factorielle de $x$ est une instance de nombres naturels.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre naturel. Alors la factorielle de $x$ est un nombre naturel.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in N$. Alors la factorielle de $x$ est un nombre naturel.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre naturel. Alors $x !$ est un nombre naturel.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in N$. Alors $x !$ est un nombre naturel.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av naturliga tal. Då är fakulteten av $x$ en instans av naturliga tal.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett naturligt tal. Då är fakulteten av $x$ ett naturligt tal.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in N$. Då är fakulteten av $x$ ett naturligt tal.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett naturligt tal. Då är $x !$ ett naturligt tal.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in N$. Då är $x !$ ett naturligt tal.",
    "output": "postulate factorial : Nat -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of integers. Then we can say that $x$ is even.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an integer. Then we can say that $x$ is even.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in Z$. Then we can say that $x$ is even.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance d'entiers. Alors nous pouvons dire que $x$ est pair.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un entier. Alors nous pouvons dire que $x$ est pair.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in Z$. Alors nous pouvons dire que $x$ est pair.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av heltal. Då kan vi säga att $x$ är jämnt.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett heltal. Då kan vi säga att $x$ är jämnt.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in Z$. Då kan vi säga att $x$ är jämnt.",
    "output": "postulate even : Int -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of integers. Then $x$ is odd, if $n$ is not even.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an integer. Then $x$ is odd, if $n$ is not even.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in Z$. Then $x$ is odd, if $n$ is not even.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance d'entiers. Alors $x$ est impair si $n$ n'est pas pair.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un entier. Alors $x$ est impair si $n$ n'est pas pair.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in Z$. Alors $x$ est impair si $n$ n'est pas pair.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av heltal. Då är $x$ udda, om $n$ inte är jämnt.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett heltal. Då är $x$ udda, om $n$ inte är jämnt.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in Z$. Då är $x$ udda, om $n$ inte är jämnt.",
    "output": "odd : Int -> Prop\nodd = \\ n -> not (even n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n$ is equal to the product of $k$ and $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n$ is equal to the product of $k$ and $m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if there exists an integer $k$, such that $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for an integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is divisible by $y$, if $n = k m$ for some integer $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des instances d'entiers. Alors $x$ est divisible par $y$ s'il existe un entier $k$ tel que $n$ soit égal au produit de $k$ et de $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des instances d'entiers. Alors $x$ est divisible par $y$ si $n$ est égal au produit de $k$ et de $m$ pour un entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des instances d'entiers. Alors $x$ est divisible par $y$ si $n$ est égal au produit de $k$ et de $m$ pour quelque entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ est divisible par $y$ s'il existe un entier $k$ tel que $n$ soit égal au produit de $k$ et de $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ est divisible par $y$ si $n$ est égal au produit de $k$ et de $m$ pour un entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ est divisible par $y$ si $n$ est égal au produit de $k$ et de $m$ pour quelque entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ est divisible par $y$ s'il existe un entier $k$ tel que $n$ soit égal au produit de $k$ et de $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ est divisible par $y$ si $n$ est égal au produit de $k$ et de $m$ pour un entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ est divisible par $y$ si $n$ est égal au produit de $k$ et de $m$ pour quelque entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ est divisible par $y$ s'il existe un entier $k$ tel que $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ est divisible par $y$ si $n = k m$ pour un entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ est divisible par $y$ si $n = k m$ pour quelque entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ est divisible par $y$ s'il existe un entier $k$ tel que $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ est divisible par $y$ si $n = k m$ pour un entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ est divisible par $y$ si $n = k m$ pour quelque entier $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara instanser av heltal. Då är $x$ delbart med $y$, om det finns ett heltal $k$, så att $n$ är lika med produkten av $k$ och $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara instanser av heltal. Då är $x$ delbart med $y$, om $n$ är lika med produkten av $k$ och $m$ för ett heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara instanser av heltal. Då är $x$ delbart med $y$, om $n$ är lika med produkten av $k$ och $m$ för något heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då är $x$ delbart med $y$, om det finns ett heltal $k$, så att $n$ är lika med produkten av $k$ och $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då är $x$ delbart med $y$, om $n$ är lika med produkten av $k$ och $m$ för ett heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då är $x$ delbart med $y$, om $n$ är lika med produkten av $k$ och $m$ för något heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då är $x$ delbart med $y$, om det finns ett heltal $k$, så att $n$ är lika med produkten av $k$ och $m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då är $x$ delbart med $y$, om $n$ är lika med produkten av $k$ och $m$ för ett heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då är $x$ delbart med $y$, om $n$ är lika med produkten av $k$ och $m$ för något heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då är $x$ delbart med $y$, om det finns ett heltal $k$, så att $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då är $x$ delbart med $y$, om $n = k m$ för ett heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då är $x$ delbart med $y$, om $n = k m$ för något heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då är $x$ delbart med $y$, om det finns ett heltal $k$, så att $n = k m$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då är $x$ delbart med $y$, om $n = k m$ för ett heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då är $x$ delbart med $y$, om $n = k m$ för något heltal $k$.",
    "output": "divisible : Int -> Int -> Prop\ndivisible = \\ n -> \\ m -> exists Int (\\ k -> Eq n (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ divides $y$, if $m$ is divisible by $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des instances d'entiers. Alors $x$ divise $y$ si $m$ est divisible par $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ divise $y$ si $m$ est divisible par $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ divise $y$ si $m$ est divisible par $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara instanser av heltal. Då delar $x$  $y$, om $m$ är delbart med $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då delar $x$  $y$, om $m$ är delbart med $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då delar $x$  $y$, om $m$ är delbart med $n$.",
    "output": "divide : Int -> Int -> Prop\ndivide = \\ n -> \\ m -> divisible m n"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be instances of integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ and $y$ be integers. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x , y \\in Z$. Then $x$ is a divisor of $y$, if $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des instances d'entiers. Alors $x$ est un diviseur de $y$ si $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x$ et $y$ des entiers. Alors $x$ est un diviseur de $y$ si $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $x , y \\in Z$. Alors $x$ est un diviseur de $y$ si $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara instanser av heltal. Då är $x$ ett delare av $y$, om $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ och $y$ vara heltal. Då är $x$ ett delare av $y$, om $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x , y \\in Z$. Då är $x$ ett delare av $y$, om $divide$.",
    "output": "divisor : Int -> Int -> Prop\ndivisor = divide"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of natural numbers. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1$ is less than $m$ and $m$ is less than $n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$ and $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$ and $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a natural number. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that there exists a natural number $m$, such that $1 < m$, $m < n$ and $n$ is divisible by $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for a natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in N$. Then $x$ is prime, if it is not the case that $1 < m$, $m < n$ and $n$ is divisible by $m$ for some natural number $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres naturels. Alors $x$ est premier s'il n'est pas le cas qu'il existe un nombre naturel $m$ tel que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres naturels. Alors $x$ est premier s'il n'est pas le cas que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$ pour un nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres naturels. Alors $x$ est premier s'il n'est pas le cas que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$ pour quelque nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas qu'il existe un nombre naturel $m$ tel que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$ pour un nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$ pour quelque nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas qu'il existe un nombre naturel $m$ tel que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$ pour un nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas que $1$ soit inférieur à $m$ et $m$ soit inférieur à $n$ et $n$ soit divisible par $m$ pour quelque nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas qu'il existe un nombre naturel $m$ tel que $1 < m$ et $m < n$ et $n$ soit divisible par $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas que $1 < m$ et $m < n$ et $n$ soit divisible par $m$ pour un nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas que $1 < m$ et $m < n$ et $n$ soit divisible par $m$ pour quelque nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas qu'il existe un nombre naturel $m$ tel que $1 < m$ et $m < n$ et $n$ soit divisible par $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas que $1 < m$ et $m < n$ et $n$ soit divisible par $m$ pour un nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas que $1 < m$ et $m < n$ et $n$ soit divisible par $m$ pour quelque nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas qu'il existe un nombre naturel $m$ tel que $1 < m$, $m < n$ et $n$ soit divisible par $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas que $1 < m$, $m < n$ et $n$ soit divisible par $m$ pour un nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre naturel. Alors $x$ est premier s'il n'est pas le cas que $1 < m$, $m < n$ et $n$ soit divisible par $m$ pour quelque nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas qu'il existe un nombre naturel $m$ tel que $1 < m$, $m < n$ et $n$ soit divisible par $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas que $1 < m$, $m < n$ et $n$ soit divisible par $m$ pour un nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in N$. Alors $x$ est premier s'il n'est pas le cas que $1 < m$, $m < n$ et $n$ soit divisible par $m$ pour quelque nombre naturel $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av naturliga tal. Då är $x$ primt, om det inte är fallet att det finns ett naturligt tal $m$, så att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av naturliga tal. Då är $x$ primt, om det inte är fallet att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$ för ett naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av naturliga tal. Då är $x$ primt, om det inte är fallet att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$ för något naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att det finns ett naturligt tal $m$, så att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$ för ett naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$ för något naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att det finns ett naturligt tal $m$, så att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$ för ett naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att $1$ är mindre än $m$ och $m$ är mindre än $n$ och $n$ är delbart med $m$ för något naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att det finns ett naturligt tal $m$, så att $1 < m$ och $m < n$ och $n$ är delbart med $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att $1 < m$ och $m < n$ och $n$ är delbart med $m$ för ett naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att $1 < m$ och $m < n$ och $n$ är delbart med $m$ för något naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att det finns ett naturligt tal $m$, så att $1 < m$ och $m < n$ och $n$ är delbart med $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att $1 < m$ och $m < n$ och $n$ är delbart med $m$ för ett naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att $1 < m$ och $m < n$ och $n$ är delbart med $m$ för något naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att det finns ett naturligt tal $m$, så att $1 < m$, $m < n$ och $n$ är delbart med $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att $1 < m$, $m < n$ och $n$ är delbart med $m$ för ett naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett naturligt tal. Då är $x$ primt, om det inte är fallet att $1 < m$, $m < n$ och $n$ är delbart med $m$ för något naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att det finns ett naturligt tal $m$, så att $1 < m$, $m < n$ och $n$ är delbart med $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att $1 < m$, $m < n$ och $n$ är delbart med $m$ för ett naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in N$. Då är $x$ primt, om det inte är fallet att $1 < m$, $m < n$ och $n$ är delbart med $m$ för något naturligt tal $m$.",
    "output": "prime : Nat -> Prop\nprime = \\ n -> not (exists Nat (\\ m -> and (Lt 1 m) (and (Lt m n) (divisible n m))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Booleans are a basic type.",
    "output": "postulate bool : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Des valeurs booléennes sont un type de base.",
    "output": "postulate bool : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Sanningsvärden är en grundtyp.",
    "output": "postulate bool : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Then $List$ is a set.",
    "output": "postulate List : Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Set$. Alors $List$ est un ensemble.",
    "output": "postulate List : Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Set$. Då är $List$ en mängd.",
    "output": "postulate List : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List$ applied to $A$. Then $member$ is a proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$. Assume that $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Elem$ holds for $A$ and $Elem$ holds for $List (A)$. Then $member$ is a proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Elem$ tient pour $A$. Supposons que $Elem$ tient pour $List$ appliqué à $A$. Alors $member$ est une proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Elem$ tient pour $A$. Supposons que $Elem$ tient pour $List (A)$. Alors $member$ est une proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Elem$ tient pour $A$ et $Elem$ tient pour $List (A)$. Alors $member$ est une proposition.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Elem$ håller för $A$. Anta att $Elem$ håller för $List$ applicerat på $A$. Då är $member$ ett påstående.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Elem$ håller för $A$. Anta att $Elem$ håller för $List (A)$. Då är $member$ ett påstående.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Elem$ håller för $A$ och $Elem$ håller för $List (A)$. Då är $member$ ett påstående.",
    "output": "postulate member : (A : Set) -> A -> List A -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Assume that $Set$. Then $function$ is a set.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$ and $Set$. Then $function$ is a set.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Set$. Supposons que $Set$. Alors $function$ est un ensemble.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Set$ et $Set$. Alors $function$ est un ensemble.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Set$. Anta att $Set$. Då är $function$ en mängd.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Set$ och $Set$. Då är $function$ en mängd.",
    "output": "postulate function : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the union of $x$ and $y$ is a set.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cup y$ is a set.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors l'union de $x$ et de $y$ est un ensemble.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors $x \\cup y$ est un ensemble.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är unionen av $x$ och $y$ en mängd.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är $x \\cup y$ en mängd.",
    "output": "postulate union : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the intersection of $x$ and $y$ is a set.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\cap y$ is a set.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors l'intersection de $x$ et de $y$ est un ensemble.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors $x \\cap y$ est un ensemble.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är snittet av $x$ och $y$ en mängd.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är $x \\cap y$ en mängd.",
    "output": "postulate intersection : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors la différence entre $x$ et $y$ est un ensemble.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors $x \\setminus y$ est un ensemble.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är differensen mellan $x$ och $y$ en mängd.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är $x \\setminus y$ en mängd.",
    "output": "postulate difference : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then the difference of $x$ and $y$ is a set.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then $x \\setminus y$ is a set.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors la différence entre $x$ et $y$ est un ensemble.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors $x \\setminus y$ est un ensemble.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är differensen mellan $x$ och $y$ en mängd.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då är $x \\setminus y$ en mängd.",
    "output": "postulate cartesian : Set -> Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then the complement of $x$ is a set.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then ${x }^{\\complement}$ is a set.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un ensemble. Alors le complément de $x$ est un ensemble.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un ensemble. Alors ${x }^{\\complement}$ est un ensemble.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en mängd. Då är komplementet av $x$ en mängd.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en mängd. Då är ${x }^{\\complement}$ en mängd.",
    "output": "postulate complement : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then the power set of $x$ is a set.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then $\\wp x$ is a set.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un ensemble. Alors la puissance de $x$ est un ensemble.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un ensemble. Alors $\\wp x$ est un ensemble.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en mängd. Då är potensmängden av $x$ en mängd.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en mängd. Då är $\\wp x$ en mängd.",
    "output": "postulate powerset : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The empty set is a set.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $\\emptyset$ is a set.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. L'ensemble vide est un ensemble.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. $\\emptyset$ est un ensemble.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Den tomma mängden är en mängd.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. $\\emptyset$ är en mängd.",
    "output": "postulate emptyset : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The universal set is a set.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $\\mathbb{ U}$ is a set.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. L'ensemble universel est un ensemble.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. $\\mathbb{ U}$ est un ensemble.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Den universella mängden är en mängd.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. $\\mathbb{ U}$ är en mängd.",
    "output": "postulate universeset : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper subset of $y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subset y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x$ est un sous-ensemble propre de $y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x \\subset y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x$ är en äkta delmängd av $y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x \\subset y$.",
    "output": "postulate subset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a subset of $y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\subseteq y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x$ est un sous-ensemble de $y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x \\subseteq y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x$ är en delmängd av $y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x \\subseteq y$.",
    "output": "postulate subseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x$ est un sur-ensemble propre de $y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x \\supset y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x$ är en äkta övermängd av $y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x \\supset y$.",
    "output": "postulate superset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is a proper superset of $y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x \\supset y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x$ est un sur-ensemble propre de $y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x \\supset y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x$ är en äkta övermängd av $y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x \\supset y$.",
    "output": "postulate superseteq : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x$ is equal to $y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be sets. Then we can say that $x = y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x$ est égal à $y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des ensembles. Alors nous pouvons dire que $x = y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x$ är lika med $y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara mängder. Då kan vi säga att $x = y$.",
    "output": "postulate equalset : Set -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is an element of $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\in y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance d'éléments de $universeset$. Soit $y$ un ensemble. Alors nous pouvons dire que $x$ est un élément de $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un élément de $universeset$. Soit $y$ un ensemble. Alors nous pouvons dire que $x$ est un élément de $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un élément de $universeset$. Soit $y$ un ensemble. Alors nous pouvons dire que $x \\in y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av element av $universeset$. Låt $y$ vara en mängd. Då kan vi säga att $x$ är ett element av $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett element av $universeset$. Låt $y$ vara en mängd. Då kan vi säga att $x$ är ett element av $y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett element av $universeset$. Låt $y$ vara en mängd. Då kan vi säga att $x \\in y$.",
    "output": "postulate element : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of elements of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x$ is a non-element of $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an element of $universeset$. Let $y$ be a set. Then we can say that $x \\notin y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance d'éléments de $universeset$. Soit $y$ un ensemble. Alors nous pouvons dire que $x$ est un non-élément de $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un élément de $universeset$. Soit $y$ un ensemble. Alors nous pouvons dire que $x$ est un non-élément de $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un élément de $universeset$. Soit $y$ un ensemble. Alors nous pouvons dire que $x \\notin y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av element av $universeset$. Låt $y$ vara en mängd. Då kan vi säga att $x$ är ett icke-element av $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett element av $universeset$. Låt $y$ vara en mängd. Då kan vi säga att $x$ är ett icke-element av $y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett element av $universeset$. Låt $y$ vara en mängd. Då kan vi säga att $x \\notin y$.",
    "output": "postulate notelement : universeset -> Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Then $positivePart$ is a set.",
    "output": "postulate positivePart : Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Set$. Alors $positivePart$ est un ensemble.",
    "output": "postulate positivePart : Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Set$. Då är $positivePart$ en mängd.",
    "output": "postulate positivePart : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Set$. Then $negativePart$ is a set.",
    "output": "postulate negativePart : Set -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Set$. Alors $negativePart$ est un ensemble.",
    "output": "postulate negativePart : Set -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Set$. Då är $negativePart$ en mängd.",
    "output": "postulate negativePart : Set -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a set. Then we can say that $x$ is finite.",
    "output": "postulate finite : Set -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un ensemble. Alors nous pouvons dire que $x$ est [finite_Adj].",
    "output": "postulate finite : Set -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en mängd. Då kan vi säga att $x$ är [finite_Adj].",
    "output": "postulate finite : Set -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a set. Then $x$ is infinite, if $A$ is not finite.",
    "output": "infinite : Set -> Prop\ninfinite = \\ A -> not (finite A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un ensemble. Alors $x$ est [infinite_Adj] si $A$ n'est pas [finite_Adj].",
    "output": "infinite : Set -> Prop\ninfinite = \\ A -> not (finite A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en mängd. Då är $x$ [infinite_Adj], om $A$ inte är [finite_Adj].",
    "output": "infinite : Set -> Prop\ninfinite = \\ A -> not (finite A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that for all instances $B$ of elements of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every instance $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all instances $B$ of elements of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that for all elements $B$ of $A$, $Prop$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for every element $B$ of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Assume that $Prop$ for all elements $B$ of $A$. Then $suchthat$ is a set.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que pour toutes les instances $B$ d'éléments de $A$, $Prop$. Alors $suchthat$ est un ensemble.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Prop$ pour chaque instance $B$ d'éléments de $A$. Alors $suchthat$ est un ensemble.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Prop$ pour toutes les instances $B$ d'éléments de $A$. Alors $suchthat$ est un ensemble.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que pour tous les éléments $B$ de $A$, $Prop$. Alors $suchthat$ est un ensemble.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Prop$ pour chaque élément $B$ de $A$. Alors $suchthat$ est un ensemble.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Supposons que $Prop$ pour tous les éléments $B$ de $A$. Alors $suchthat$ est un ensemble.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att för alla instanser $B$ av element av $A$, $Prop$. Då är $suchthat$ en mängd.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Prop$ för varje instans $B$ av element av $A$. Då är $suchthat$ en mängd.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Prop$ för alla instanser $B$ av element av $A$. Då är $suchthat$ en mängd.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att för alla element $B$ av $A$, $Prop$. Då är $suchthat$ en mängd.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Prop$ för varje element $B$ av $A$. Då är $suchthat$ en mängd.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Anta att $Prop$ för alla element $B$ av $A$. Då är $suchthat$ en mängd.",
    "output": "postulate suchthat : (A : Set) -> ((B : A) -> Prop) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an instance of elements of $A$ to propositions. Let $x$ be an instance of elements of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an instance of elements of $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst$ applied to $A$ and $B$ and $x$ is an element of $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $B$ be a function from an element of $A$ to propositions. Let $x$ be an element of $suchthat$ of $A$ and $B$. Then $fst (A , B , x)$ is an element of $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Soit $B$ une fonction d'une instance d'éléments de $A$ à des propositions. Soit $x$ une instance d'éléments de $suchthat$ de $A$ et de $B$. Alors $fst$ appliqué à $A$ et $B$ et $x$ est une instance d'éléments de $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Soit $B$ une fonction d'un élément de $A$ à des propositions. Soit $x$ un élément de $suchthat$ de $A$ et de $B$. Alors $fst$ appliqué à $A$ et $B$ et $x$ est un élément de $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Soit $B$ une fonction d'un élément de $A$ à des propositions. Soit $x$ un élément de $suchthat$ de $A$ et de $B$. Alors $fst (A , B , x)$ est un élément de $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Låt $B$ vara en funktion från en instans av element av $A$ till påståenden. Låt $x$ vara en instans av element av $suchthat$ av $A$ och $B$. Då är $fst$ applicerat på $A$ och $B$ och $x$ en instans av element av $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Låt $B$ vara en funktion från ett element av $A$ till påståenden. Låt $x$ vara ett element av $suchthat$ av $A$ och $B$. Då är $fst$ applicerat på $A$ och $B$ och $x$ ett element av $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Låt $B$ vara en funktion från ett element av $A$ till påståenden. Låt $x$ vara ett element av $suchthat$ av $A$ och $B$. Då är $fst (A , B , x)$ ett element av $A$.",
    "output": "postulate fst : (A : Set) -> (B : A -> Prop) -> suchthat A B -> A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be instances of integers. Let $m$ be an instance of natural numbers. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if there exists a natural number $k$, such that the difference of $a$ and $b$ is equal to the product of $k$ and $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a$ is congruent to $b$ modulo $m$, if the difference of $a$ and $b$ is equal to the product of $k$ and $m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a$ and $b$ be integers. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m$ be a natural number. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if there exists a natural number $k$, such that $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for a natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $a , b \\in Z$. Let $m \\in N$. Then $a \\equiv b \\pmod{ m}$, if $a - b = k m$ for some natural number $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des instances d'entiers. Soit $m$ une instance de nombres naturels. Alors $a$ est congruent à $b$ modulo $m$ s'il existe un nombre naturel $k$ tel que la différence de $a$ et de $b$ soit égale au produit de $k$ et de $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des instances d'entiers. Soit $m$ une instance de nombres naturels. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des instances d'entiers. Soit $m$ une instance de nombres naturels. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m$ un nombre naturel. Alors $a$ est congruent à $b$ modulo $m$ s'il existe un nombre naturel $k$ tel que la différence de $a$ et de $b$ soit égale au produit de $k$ et de $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m$ un nombre naturel. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m$ un nombre naturel. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m \\in N$. Alors $a$ est congruent à $b$ modulo $m$ s'il existe un nombre naturel $k$ tel que la différence de $a$ et de $b$ soit égale au produit de $k$ et de $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m \\in N$. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m \\in N$. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m$ un nombre naturel. Alors $a$ est congruent à $b$ modulo $m$ s'il existe un nombre naturel $k$ tel que la différence de $a$ et de $b$ soit égale au produit de $k$ et de $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m$ un nombre naturel. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m$ un nombre naturel. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m \\in N$. Alors $a$ est congruent à $b$ modulo $m$ s'il existe un nombre naturel $k$ tel que la différence de $a$ et de $b$ soit égale au produit de $k$ et de $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m \\in N$. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m \\in N$. Alors $a$ est congruent à $b$ modulo $m$ si la différence de $a$ et de $b$ est égale au produit de $k$ et de $m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m$ un nombre naturel. Alors $a \\equiv b \\pmod{ m}$ s'il existe un nombre naturel $k$ tel que $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m$ un nombre naturel. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m$ un nombre naturel. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m \\in N$. Alors $a \\equiv b \\pmod{ m}$ s'il existe un nombre naturel $k$ tel que $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m \\in N$. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a$ et $b$ des entiers. Soit $m \\in N$. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m$ un nombre naturel. Alors $a \\equiv b \\pmod{ m}$ s'il existe un nombre naturel $k$ tel que $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m$ un nombre naturel. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m$ un nombre naturel. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m \\in N$. Alors $a \\equiv b \\pmod{ m}$ s'il existe un nombre naturel $k$ tel que $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m \\in N$. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour un nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $a , b \\in Z$. Soit $m \\in N$. Alors $a \\equiv b \\pmod{ m}$ si $a - b = k m$ pour quelque nombre naturel $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara instanser av heltal. Låt $m$ vara en instans av naturliga tal. Då är $a$ kongruentt med $b$ modulo $m$, om det finns ett naturligt tal $k$, så att skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara instanser av heltal. Låt $m$ vara en instans av naturliga tal. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara instanser av heltal. Låt $m$ vara en instans av naturliga tal. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m$ vara ett naturligt tal. Då är $a$ kongruentt med $b$ modulo $m$, om det finns ett naturligt tal $k$, så att skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m$ vara ett naturligt tal. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m$ vara ett naturligt tal. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m \\in N$. Då är $a$ kongruentt med $b$ modulo $m$, om det finns ett naturligt tal $k$, så att skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m \\in N$. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m \\in N$. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m$ vara ett naturligt tal. Då är $a$ kongruentt med $b$ modulo $m$, om det finns ett naturligt tal $k$, så att skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m$ vara ett naturligt tal. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m$ vara ett naturligt tal. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m \\in N$. Då är $a$ kongruentt med $b$ modulo $m$, om det finns ett naturligt tal $k$, så att skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m \\in N$. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m \\in N$. Då är $a$ kongruentt med $b$ modulo $m$, om skillnaden mellan $a$ och $b$ är lika med produkten av $k$ och $m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m$ vara ett naturligt tal. Då $a \\equiv b \\pmod{ m}$, om det finns ett naturligt tal $k$, så att $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m$ vara ett naturligt tal. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m$ vara ett naturligt tal. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m \\in N$. Då $a \\equiv b \\pmod{ m}$, om det finns ett naturligt tal $k$, så att $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m \\in N$. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a$ och $b$ vara heltal. Låt $m \\in N$. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m$ vara ett naturligt tal. Då $a \\equiv b \\pmod{ m}$, om det finns ett naturligt tal $k$, så att $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m$ vara ett naturligt tal. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m$ vara ett naturligt tal. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m \\in N$. Då $a \\equiv b \\pmod{ m}$, om det finns ett naturligt tal $k$, så att $a - b = k m$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m \\in N$. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för ett naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $a , b \\in Z$. Låt $m \\in N$. Då $a \\equiv b \\pmod{ m}$, om $a - b = k m$ för något naturligt tal $k$.",
    "output": "congruent : (a : Int) -> (b : Int) -> (m : Nat) -> Prop\ncongruent = \\ a -> \\ b -> \\ m -> exists Nat (\\ k -> Eq (minus a b) (times k m))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $Enum$ is a set.",
    "output": "postulate Enum : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. $Enum$ est un ensemble.",
    "output": "postulate Enum : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. $Enum$ är en mängd.",
    "output": "postulate Enum : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $nil$ is an instance of elements of $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $nil$ is an element of $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. $nil$ est une instance d'éléments de $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. $nil$ est un élément de $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. $nil$ är en instans av element av $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. $nil$ är ett element av $Enum$.",
    "output": "postulate nil : Enum"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of Numbers. Let $y$ be an instance of elements of $Enum$. Then $cons$ applied to $x$ and $y$ is an instance of elements of $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons$ applied to $x$ and $y$ is an element of $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a Number. Let $y$ be an element of $Enum$. Then $cons (x , y)$ is an element of $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres. Soit $y$ une instance d'éléments de $Enum$. Alors $cons$ appliqué à $x$ et $y$ est une instance d'éléments de $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre. Soit $y$ un élément de $Enum$. Alors $cons$ appliqué à $x$ et $y$ est un élément de $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre. Soit $y$ un élément de $Enum$. Alors $cons (x , y)$ est un élément de $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av tal. Låt $y$ vara en instans av element av $Enum$. Då är $cons$ applicerat på $x$ och $y$ en instans av element av $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett tal. Låt $y$ vara ett element av $Enum$. Då är $cons$ applicerat på $x$ och $y$ ett element av $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett tal. Låt $y$ vara ett element av $Enum$. Då är $cons (x , y)$ ett element av $Enum$.",
    "output": "postulate cons : Num -> Enum -> Enum"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. $enum123$ is an instance of elements of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons$ applied to $1$ and $cons$ applied to $2$ and $cons$ applied to $3$ and $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. $enum123$ is an element of $Enum$ defined as $cons (1 , cons (2 , cons (3 , nil)))$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. $enum123$ est une instance d'éléments de $Enum$ défini comme $cons$ appliqué à $1$ et $cons$ appliqué à $2$ et $cons$ appliqué à $3$ et $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. $enum123$ est un élément de $Enum$ défini comme $cons$ appliqué à $1$ et $cons$ appliqué à $2$ et $cons$ appliqué à $3$ et $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. $enum123$ est un élément de $Enum$ défini comme $cons (1 , cons (2 , cons (3 , nil)))$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. $enum123$ är en instans av element av $Enum$ definierat som $cons$ applicerat på $1$ och $cons$ applicerat på $2$ och $cons$ applicerat på $3$ och $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. $enum123$ är ett element av $Enum$ definierat som $cons$ applicerat på $1$ och $cons$ applicerat på $2$ och $cons$ applicerat på $3$ och $nil$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. $enum123$ är ett element av $Enum$ definierat som $cons (1 , cons (2 , cons (3 , nil)))$.",
    "output": "enum123 : Enum\nenum123 = cons 1 (cons 2 (cons 3 nil))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Elem$ holds for $Enum$. Then $enumset$ is a set.",
    "output": "postulate enumset : Enum -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Elem$ tient pour $Enum$. Alors $enumset$ est un ensemble.",
    "output": "postulate enumset : Enum -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Elem$ håller för $Enum$. Då är $enumset$ en mängd.",
    "output": "postulate enumset : Enum -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q$ is not equal to $0$ and $x$ is equal to the quotient of $p$ and $q$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $p$, such that there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for an integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exists an integer $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integer $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if there exist integers $p$ and $q$, such that $q \\neq 0$ and $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is rational, if $q \\neq 0$ and $x = \\frac{ p}{q}$ for some integers $p$ and $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres réels. Alors $x$ est rationnel s'il existe un entier $p$ tel que il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres réels. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$ pour un entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres réels. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$ pour quelque entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel s'il existe un entier $p$ tel que il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$ pour un entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$ pour quelque entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel s'il existe un entier $p$ tel que il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$ pour un entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q$ soit inégal à $0$ et $x$ soit égal au quotient de $p$ et de $q$ pour quelque entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel s'il existe un entier $p$ tel que il existe un entier $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$ pour un entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$ pour quelque entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel s'il existe un entier $p$ tel que il existe un entier $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$ pour un entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel s'il existe un entier $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$ pour quelque entier $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel s'il existent des entiers $p$ et $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est rationnel si $q \\neq 0$ et $x = \\frac{ p}{q}$ pour quelques entiers $p$ et $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel s'il existent des entiers $p$ et $q$ tel que $q \\neq 0$ et $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est rationnel si $q \\neq 0$ et $x = \\frac{ p}{q}$ pour quelques entiers $p$ et $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av reella tal. Då är $x$ rationellt, om det finns ett heltal $p$, så att det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av reella tal. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$ för ett heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av reella tal. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$ för något heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om det finns ett heltal $p$, så att det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$ för ett heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$ för något heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om det finns ett heltal $p$, så att det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$ för ett heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q$ är inte lika med $0$ och $x$ är lika med kvoten av $p$ och $q$ för något heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om det finns ett heltal $p$, så att det finns ett heltal $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$ för ett heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$ för något heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om det finns ett heltal $p$, så att det finns ett heltal $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$ för ett heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om det finns ett heltal $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$ för något heltal $p$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om det finns heltal $p$ och $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ rationellt, om $q \\neq 0$ och $x = \\frac{ p}{q}$ för några heltal $p$ och $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om det finns heltal $p$ och $q$, så att $q \\neq 0$ och $x = \\frac{ p}{q}$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ rationellt, om $q \\neq 0$ och $x = \\frac{ p}{q}$ för några heltal $p$ och $q$.",
    "output": "rational : Real -> Prop\nrational = \\ x -> exists Int (\\ p -> exists Int (\\ q -> and (Neq q 0) (Eq x (div p q))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then $x$ is irrational, if $x$ is not rational.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x$ is irrational, if $x$ is not rational.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x$ is irrational, if $x$ is not rational.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres réels. Alors $x$ est irrationnel si $x$ n'est pas rationnel.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x$ est irrationnel si $x$ n'est pas rationnel.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x$ est irrationnel si $x$ n'est pas rationnel.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av reella tal. Då är $x$ irrationellt, om $x$ inte är rationellt.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x$ irrationellt, om $x$ inte är rationellt.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x$ irrationellt, om $x$ inte är rationellt.",
    "output": "irrational : Real -> Prop\nirrational = \\ x -> not (rational x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the square of $x$ is an instance of real numbers defined as the exponentiation of $x$ and $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then the square of $x$ is a real number defined as the exponentiation of $x$ and $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $x ^{ 2}$ is a real number defined as $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres réels. Alors le carré de $x$ est une instance de nombres réels défini comme la puissance de $x$ et de $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors le carré de $x$ est un nombre réel défini comme la puissance de $x$ et de $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors le carré de $x$ est un nombre réel défini comme la puissance de $x$ et de $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $x ^{ 2}$ est un nombre réel défini comme $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $x ^{ 2}$ est un nombre réel défini comme $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av reella tal. Då är kvadraten av $x$ en instans av reella tal definierat som potensen av $x$ och $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är kvadraten av $x$ ett reellt tal definierat som potensen av $x$ och $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är kvadraten av $x$ ett reellt tal definierat som potensen av $x$ och $2$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $x ^{ 2}$ ett reellt tal definierat som $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $x ^{ 2}$ ett reellt tal definierat som $x ^ {2}$.",
    "output": "square : Real -> Real\nsquare = \\ x -> pow x 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Polynomials are a basic type.",
    "output": "postulate Polynomial : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Des polynômes sont un type de base.",
    "output": "postulate Polynomial : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Polynom är en grundtyp.",
    "output": "postulate Polynomial : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is an instance of natural numbers.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $P$ be a polynomial. Then the degree of $P$ is a natural number.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $P$ un polynôme. Alors le degré de $P$ est une instance de nombres naturels.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $P$ un polynôme. Alors le degré de $P$ est un nombre naturel.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $P$ vara ett polynom. Då är graden av $P$ en instans av naturliga tal.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $P$ vara ett polynom. Då är graden av $P$ ett naturligt tal.",
    "output": "postulate degree : (P : Polynomial) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $c$ be an instance of complex numbers. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $c$ be a complex number. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $c \\in C$. Let $P$ be a polynomial. Then we can say that $c$ is a root of $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $c$ une instance de nombres complexes. Soit $P$ un polynôme. Alors nous pouvons dire que $c$ est une racine de $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $c$ un nombre complexe. Soit $P$ un polynôme. Alors nous pouvons dire que $c$ est une racine de $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $c \\in C$. Soit $P$ un polynôme. Alors nous pouvons dire que $c$ est une racine de $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $c$ vara en instans av komplexa tal. Låt $P$ vara ett polynom. Då kan vi säga att $c$ är en rot av $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $c$ vara ett komplext tal. Låt $P$ vara ett polynom. Då kan vi säga att $c$ är en rot av $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $c \\in C$. Låt $P$ vara ett polynom. Då kan vi säga att $c$ är en rot av $P$.",
    "output": "postulate isRoot : (c : Complex) -> (P : Polynomial) -> Prop"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is an instance of cardinals.",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Then the cardinality of $A$ is a cardinal.",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Then $| A |$ is a cardinal.",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Alors le cardinalité de $A$ est une instance de [cardinal_Noun].",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Alors le cardinalité de $A$ est un [cardinal_Noun].",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $A$ un ensemble. Alors $| A |$ est un [cardinal_Noun].",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Då är kardinaliteten av $A$ en instans av [cardinal_Noun].",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Då är kardinaliteten av $A$ en [cardinal_Noun].",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $A$ vara en mängd. Då är $| A |$ en [cardinal_Noun].",
    "output": "postulate cardinality : (A : Set) -> Cardinal"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if the cardinality of $A$ is equal to the cardinality of $Nat$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $A$ be a set. Then $A$ is denumerable, if $| A | = | Nat |$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $A$ un ensemble. Alors $A$ est dénombrable si le cardinalité de $A$ est égal au cardinalité de $Nat$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $A$ un ensemble. Alors $A$ est dénombrable si $| A | = | Nat |$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $A$ vara en mängd. Då är $A$ upräkneligt, om kardinaliteten av $A$ är lika med kardinaliteten av $Nat$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $A$ vara en mängd. Då är $A$ upräkneligt, om $| A | = | Nat |$.",
    "output": "denumerable : (A : Set) -> Prop\ndenumerable = \\ A -> Eq (cardinality A) (cardinality Nat)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Vectors are a basic type.",
    "output": "postulate Vector : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Des vecteurs sont un type de base.",
    "output": "postulate Vector : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Vektorer är en grundtyp.",
    "output": "postulate Vector : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of vectors. Then the norm of $x$ is an instance of real numbers.",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a vector. Then the norm of $x$ is a real number.",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a vector. Then $\\| x \\|$ is a real number.",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate norm : Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $v$ be an instance of vectors. Then the length of $v$ is an instance of real numbers defined as the norm of $v$.",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $v$ be a vector. Then the length of $v$ is a real number defined as the norm of $v$.",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $v$ be a vector. Then $\\| v \\|$ is a real number defined as $\\| v \\|$.",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "length : (v : Vector) -> Real\nlength = \\ v -> norm v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the sum of $x$ and $y$ is an instance of vectors.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the sum of $x$ and $y$ is a vector.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then $x + y$ is a vector.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de vecteurs. Alors l'addition de $x$ et de $y$ est une instance de vecteurs.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des vecteurs. Alors l'addition de $x$ et de $y$ est un vecteur.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des vecteurs. Alors $x + y$ est un vecteur.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av vektorer. Då är resultanten av $x$ och $y$ en instans av vektorer.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara vektorer. Då är resultanten av $x$ och $y$ en vektor.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara vektorer. Då är $x + y$ en vektor.",
    "output": "postulate resultant : Vector -> Vector -> Vector"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of natural numbers. Then the Legendre symbol of $x$ and $y$ is an instance of integers.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x , y \\in N$. Then the Legendre symbol of $x$ and $y$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be natural numbers. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x , y \\in N$. Then $\\left(\\frac{ x }{ y }\\right)$ is an integer.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de nombres naturels. Alors le symbole de Legendre de $x$ et de $y$ est une instance d'entiers.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres naturels. Alors le symbole de Legendre de $x$ et de $y$ est un entier.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x , y \\in N$. Alors le symbole de Legendre de $x$ et de $y$ est un entier.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des nombres naturels. Alors $\\left(\\frac{ x }{ y }\\right)$ est un entier.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x , y \\in N$. Alors $\\left(\\frac{ x }{ y }\\right)$ est un entier.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av naturliga tal. Då är Legendresymbolen av $x$ och $y$ en instans av heltal.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara naturliga tal. Då är Legendresymbolen av $x$ och $y$ ett heltal.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x , y \\in N$. Då är Legendresymbolen av $x$ och $y$ ett heltal.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara naturliga tal. Då är $\\left(\\frac{ x }{ y }\\right)$ ett heltal.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x , y \\in N$. Då är $\\left(\\frac{ x }{ y }\\right)$ ett heltal.",
    "output": "postulate legendre : Nat -> Nat -> Int"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The number \\(\\pi\\) is an instance of real numbers.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. The number \\(\\pi\\) is a real number.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. $\\pi$ is a real number.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Le nombre \\(\\pi\\) est une instance de nombres réels.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Le nombre \\(\\pi\\) est un nombre réel.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. $\\pi$ est un nombre réel.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Talet \\(\\pi\\) är en instans av reella tal.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Talet \\(\\pi\\) är ett reellt tal.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. $\\pi$ är ett reellt tal.",
    "output": "postulate pi : Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Circles are a basic type.",
    "output": "postulate Circle : Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Des cercles sont un type de base.",
    "output": "postulate Circle : Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Cirklar är en grundtyp.",
    "output": "postulate Circle : Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is an instance of real numbers.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the radius of $x$ is a real number.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un cercle. Alors le rayon de $x$ est une instance de nombres réels.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un cercle. Alors le rayon de $x$ est un nombre réel.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en cirkel. Då är radiet av $x$ en instans av reella tal.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en cirkel. Då är radiet av $x$ ett reellt tal.",
    "output": "postulate radius : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is an instance of real numbers.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a circle. Then the area of $x$ is a real number.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un cercle. Alors l'aire de $x$ est une instance de nombres réels.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un cercle. Alors l'aire de $x$ est un nombre réel.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en cirkel. Då är arean av $x$ en instans av reella tal.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en cirkel. Då är arean av $x$ ett reellt tal.",
    "output": "postulate area : Circle -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n$ and $k$ be instances of natural numbers. Then the binomial coefficient of $n$ and $k$ is an instance of natural numbers defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n , k \\in N$. Then the binomial coefficient of $n$ and $k$ is a natural number defined as the quotient of the factorial of $n$ and the product of the factorial of $k$ and the factorial of the difference of $n$ and $k$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n$ and $k$ be natural numbers. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $n , k \\in N$. Then $\\binom{ n }{ k}$ is a natural number defined as $\\frac{ n !}{k ! (n - k)!}$.",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "binomial : (n : Nat) -> (k : Nat) -> Nat\nbinomial = \\ n -> \\ k -> div (factorial n) (times (factorial k) (factorial (minus n k)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n$ and $k$ be instances of natural numbers. Then the set of combinations of $n$ and $k$ is an instance of natural numbers.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n , k \\in N$. Then the set of combinations of $n$ and $k$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n$ and $k$ be natural numbers. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $n , k \\in N$. Then $C^{ n }_{ k}$ is a natural number.",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinations : (n : Nat) -> (k : Nat) -> Nat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be an instance of natural numbers. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then the number of combinations of $A$ and $k$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k$ be a natural number. Then $\\binom{ A }{ k}$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $A$ be a set. Let $k \\in N$. Then $\\binom{ A }{ k}$ is a set.",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "",
    "output": "postulate combinationsFromSet : (A : Set) -> (k : Nat) -> Set"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the sine of $x$ is an instance of real numbers.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the sine of $x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the sine of $x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\sin x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\sin x$ is a real number.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres réels. Alors le sinus de $x$ est une instance de nombres réels.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors le sinus de $x$ est un nombre réel.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors le sinus de $x$ est un nombre réel.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors $\\sin x$ est un nombre réel.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors $\\sin x$ est un nombre réel.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av reella tal. Då är sinusen av $x$ en instans av reella tal.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är sinusen av $x$ ett reellt tal.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är sinusen av $x$ ett reellt tal.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är $\\sin x$ ett reellt tal.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är $\\sin x$ ett reellt tal.",
    "output": "postulate sin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the cosine of $x$ is an instance of real numbers defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then the cosine of $x$ is a real number defined as the sine of the difference of the quotient of the number \\(\\pi\\) and $2$ and $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $\\cos x$ is a real number defined as $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres réels. Alors le cosinus de $x$ est une instance de nombres réels défini comme le sinus de la différence du quotient du nombre \\(\\pi\\) et de $2$ et de $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors le cosinus de $x$ est un nombre réel défini comme le sinus de la différence du quotient du nombre \\(\\pi\\) et de $2$ et de $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors le cosinus de $x$ est un nombre réel défini comme le sinus de la différence du quotient du nombre \\(\\pi\\) et de $2$ et de $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $\\cos x$ est un nombre réel défini comme $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $\\cos x$ est un nombre réel défini comme $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av reella tal. Då är cosinusen av $x$ en instans av reella tal definierat som sinusen av skillnaden mellan kvoten av talet \\(\\pi\\) och $2$ och $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är cosinusen av $x$ ett reellt tal definierat som sinusen av skillnaden mellan kvoten av talet \\(\\pi\\) och $2$ och $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är cosinusen av $x$ ett reellt tal definierat som sinusen av skillnaden mellan kvoten av talet \\(\\pi\\) och $2$ och $x$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $\\cos x$ ett reellt tal definierat som $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $\\cos x$ ett reellt tal definierat som $\\sin (\\frac{ \\pi}{2}- x)$.",
    "output": "cos : Real -> Real\ncos = \\ x -> sin (minus (div pi 2) x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be an instance of real numbers. Then the tangent of $x$ is an instance of real numbers defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then the tangent of $x$ is a real number defined as the quotient of the sine of $x$ and the cosine of $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x$ be a real number. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $x \\in R$. Then $\\tan x$ is a real number defined as $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ une instance de nombres réels. Alors la tangente de $x$ est une instance de nombres réels défini comme le quotient du sinus de $x$ et du cosinus de $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors la tangente de $x$ est un nombre réel défini comme le quotient du sinus de $x$ et du cosinus de $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors la tangente de $x$ est un nombre réel défini comme le quotient du sinus de $x$ et du cosinus de $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x$ un nombre réel. Alors $\\tan x$ est un nombre réel défini comme $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soit $x \\in R$. Alors $\\tan x$ est un nombre réel défini comme $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara en instans av reella tal. Då är tangensen av $x$ en instans av reella tal definierat som kvoten av sinusen av $x$ och cosinusen av $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är tangensen av $x$ ett reellt tal definierat som kvoten av sinusen av $x$ och cosinusen av $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är tangensen av $x$ ett reellt tal definierat som kvoten av sinusen av $x$ och cosinusen av $x$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x$ vara ett reellt tal. Då är $\\tan x$ ett reellt tal definierat som $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $x \\in R$. Då är $\\tan x$ ett reellt tal definierat som $\\frac{ \\sin x}{\\cos x}$.",
    "output": "tan : Real -> Real\ntan = \\ x -> div (sin x) (cos x)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arcsine of $x$ is an instance of real numbers.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the arcsine of $x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the arcsine of $x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arcsin x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\arcsin x$ is a real number.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres réels. Alors l'arcsinus de $x$ est une instance de nombres réels.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors l'arcsinus de $x$ est un nombre réel.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors l'arcsinus de $x$ est un nombre réel.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors $\\arcsin x$ est un nombre réel.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors $\\arcsin x$ est un nombre réel.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av reella tal. Då är arcsinusen för $x$ en instans av reella tal.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är arcsinusen för $x$ ett reellt tal.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är arcsinusen för $x$ ett reellt tal.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är $\\arcsin x$ ett reellt tal.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är $\\arcsin x$ ett reellt tal.",
    "output": "postulate arcsin : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arccosine of $x$ is an instance of real numbers.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the arccosine of $x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the arccosine of $x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arccos x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\arccos x$ is a real number.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres réels. Alors l'arccosinus de $x$ est une instance de nombres réels.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors l'arccosinus de $x$ est un nombre réel.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors l'arccosinus de $x$ est un nombre réel.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors $\\arccos x$ est un nombre réel.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors $\\arccos x$ est un nombre réel.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av reella tal. Då är arccosinusen för $x$ en instans av reella tal.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är arccosinusen för $x$ ett reellt tal.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är arccosinusen för $x$ ett reellt tal.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är $\\arccos x$ ett reellt tal.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är $\\arccos x$ ett reellt tal.",
    "output": "postulate arccos : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be an instance of real numbers. Then the arctangent of $x$ is an instance of real numbers.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then the arctangent of $x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then the arctangent of $x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ be a real number. Then $\\arctan x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x \\in R$. Then $\\arctan x$ is a real number.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ une instance de nombres réels. Alors l'arctangente de $x$ est une instance de nombres réels.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors l'arctangente de $x$ est un nombre réel.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors l'arctangente de $x$ est un nombre réel.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x$ un nombre réel. Alors $\\arctan x$ est un nombre réel.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soit $x \\in R$. Alors $\\arctan x$ est un nombre réel.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara en instans av reella tal. Då är arctangensen för $x$ en instans av reella tal.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är arctangensen för $x$ ett reellt tal.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är arctangensen för $x$ ett reellt tal.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ vara ett reellt tal. Då är $\\arctan x$ ett reellt tal.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x \\in R$. Då är $\\arctan x$ ett reellt tal.",
    "output": "postulate arctan : Real -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be instances of vectors. Then the angle between of $x$ and $y$ is an instance of real numbers.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Let $x$ and $y$ be vectors. Then the angle between of $x$ and $y$ is a real number.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des instances de vecteurs. Alors l'angle entre $x$ et $y$ est une instance de nombres réels.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Soient $x$ et $y$ des vecteurs. Alors l'angle entre $x$ et $y$ est un nombre réel.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara instanser av vektorer. Då är vinkeln mellan $x$ och $y$ en instans av reella tal.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Låt $x$ och $y$ vara vektorer. Då är vinkeln mellan $x$ och $y$ ett reellt tal.",
    "output": "postulate angleBetween : Vector -> Vector -> Real"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the dot product of $u$ and $v$ is an instance of real numbers defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the dot product of $u$ and $v$ is a real number defined as the product of the product of the length of $u$ and the length of $v$ and the cosine of the angle between of $u$ and $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\cdot v$ is a real number defined as the product of $\\| u \\| \\| v \\|$ and the cosine of the angle between of $u$ and $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des instances de vecteurs. Alors le produit scalaire de $u$ et de $v$ est une instance de nombres réels défini comme le produit du produit de la norme de $u$ et de la norme de $v$ et du cosinus de l'angle entre $u$ et $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors le produit scalaire de $u$ et de $v$ est un nombre réel défini comme le produit du produit de la norme de $u$ et de la norme de $v$ et du cosinus de l'angle entre $u$ et $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors $u \\cdot v$ est un nombre réel défini comme le produit de $\\| u \\| \\| v \\|$ et du cosinus de l'angle entre $u$ et $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara instanser av vektorer. Då är punktprodukten av $u$ och $v$ en instans av reella tal definierat som produkten av produkten av normen av $u$ och normen av $v$ och cosinusen av vinkeln mellan $u$ och $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då är punktprodukten av $u$ och $v$ ett reellt tal definierat som produkten av produkten av normen av $u$ och normen av $v$ och cosinusen av vinkeln mellan $u$ och $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då är $u \\cdot v$ ett reellt tal definierat som produkten av $\\| u \\| \\| v \\|$ och cosinusen av vinkeln mellan $u$ och $v$.",
    "output": "dotProduct : (u : Vector) -> (v : Vector) -> Real\ndotProduct = \\ u -> \\ v -> times (times (length u) (length v)) (cos (angleBetween u v))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is orthogonal to $v$, if the angle between of $u$ and $v$ is equal to the quotient of the number \\(\\pi\\) and $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if the angle between of $u$ and $v$ is equal to $\\frac{ \\pi}{2}$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des instances de vecteurs. Alors $u$ est orthogonal à $v$ si l'angle entre $u$ et $v$ est égal au quotient du nombre \\(\\pi\\) et de $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors $u$ est orthogonal à $v$ si l'angle entre $u$ et $v$ est égal au quotient du nombre \\(\\pi\\) et de $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors $u \\perp v$ si l'angle entre $u$ et $v$ est égal à $\\frac{ \\pi}{2}$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara instanser av vektorer. Då är $u$ ortogonalt till $v$, om vinkeln mellan $u$ och $v$ är lika med kvoten av talet \\(\\pi\\) och $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då är $u$ ortogonalt till $v$, om vinkeln mellan $u$ och $v$ är lika med kvoten av talet \\(\\pi\\) och $2$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då $u \\perp v$, om vinkeln mellan $u$ och $v$ är lika med $\\frac{ \\pi}{2}$.",
    "output": "orthogonal : (u : Vector) -> (v : Vector) -> Prop\northogonal = \\ u -> \\ v -> Eq (angleBetween u v) (div pi 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, if $u$ is orthogonal to $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u \\perp v$, if $u \\perp v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des instances de vecteurs. Alors $u$ est perpendiculaire à $v$ si $u$ est orthogonal à $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors $u$ est perpendiculaire à $v$ si $u$ est orthogonal à $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors $u \\perp v$ si $u \\perp v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara instanser av vektorer. Då är $u$ vinkelrätt mot $v$, om $u$ är ortogonalt till $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då är $u$ vinkelrätt mot $v$, om $u$ är ortogonalt till $v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då $u \\perp v$, om $u \\perp v$.",
    "output": "perpendicular : (u : Vector) -> (v : Vector) -> Prop\nperpendicular = \\ u -> \\ v -> orthogonal u v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be instances of vectors. Then the sum of $u$ and $v$ is an instance of vectors defined as the sum of $u$ and $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then the sum of $u$ and $v$ is a vector defined as the sum of $u$ and $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Definition. Let $u$ and $v$ be vectors. Then $u + v$ is a vector defined as $u + v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des instances de vecteurs. Alors la somme de $u$ et de $v$ est une instance de vecteurs défini comme l'addition de $u$ et de $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors la somme de $u$ et de $v$ est un vecteur défini comme l'addition de $u$ et de $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Définition. Soient $u$ et $v$ des vecteurs. Alors $u + v$ est un vecteur défini comme $u + v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara instanser av vektorer. Då är summan av $u$ och $v$ en instans av vektorer definierat som resultanten av $u$ och $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då är summan av $u$ och $v$ en vektor definierat som resultanten av $u$ och $v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Definition. Låt $u$ och $v$ vara vektorer. Då är $u + v$ en vektor definierat som $u + v$.",
    "output": "vectorPlus : (u : Vector) -> (v : Vector) -> Vector\nvectorPlus = \\ u -> \\ v -> resultant u v"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop10. We can prove that $0$ is even.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop10. $0$ is even.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop10. Nous pouvons démontrer que $0$ est pair.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop10. $0$ est pair.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop10. Vi kan bevisa att $0$ är jämnt.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop10. $0$ är jämnt.",
    "output": "postulate prop10 : even 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is even. Then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. For all instances $n$ of natural numbers, if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for every instance $n$ of natural numbers.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd for all instances $n$ of natural numbers.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is even, then we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even, only if we can prove that the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for every natural number $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then the sum of $n$ and $1$ is odd for all natural numbers $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then the sum of $n$ and $1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. For all natural numbers $n$, if $n$ is even, then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for every natural number $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. If $n$ is even, then $n + 1$ is odd for all natural numbers $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n$ be a natural number. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then if $n$ is even, then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Then $n$ is even, only if $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop20. Let $n \\in N$. Assume that $n$ is even. Then $n + 1$ is odd.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ une instance de nombres naturels. Supposons que nous pouvons démontrer que $n$ est pair. Alors nous pouvons démontrer que la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Pour toutes les instances $n$ de nombres naturels, si nous pouvons démontrer que $n$ est pair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Si nous pouvons démontrer que $n$ est pair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est impaire pour chaque instance $n$ de nombres naturels.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Si nous pouvons démontrer que $n$ est pair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est impaire pour toutes les instances $n$ de nombres naturels.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ une instance de nombres naturels. Alors si nous pouvons démontrer que $n$ est pair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ une instance de nombres naturels. Alors nous pouvons démontrer que $n$ est pair seulement si nous pouvons démontrer que la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ un nombre naturel. Supposons que $n$ est pair. Alors la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Pour tous les nombres naturels $n$, si $n$ est pair, alors la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Si $n$ est pair, alors la somme de $n$ et de $1$ est impaire pour chaque nombre naturel $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Si $n$ est pair, alors la somme de $n$ et de $1$ est impaire pour tous les nombres naturels $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ un nombre naturel. Alors si $n$ est pair, alors la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ un nombre naturel. Alors $n$ est pair seulement si la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n \\in N$. Alors si $n$ est pair, alors la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n \\in N$. Alors $n$ est pair seulement si la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n \\in N$. Supposons que $n$ est pair. Alors la somme de $n$ et de $1$ est impaire.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ un nombre naturel. Supposons que $n$ est pair. Alors $n + 1$ est impair.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Pour tous les nombres naturels $n$, si $n$ est pair, alors $n + 1$ est impair.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Si $n$ est pair, alors $n + 1$ est impair pour chaque nombre naturel $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Si $n$ est pair, alors $n + 1$ est impair pour tous les nombres naturels $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ un nombre naturel. Alors si $n$ est pair, alors $n + 1$ est impair.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n$ un nombre naturel. Alors $n$ est pair seulement si $n + 1$ est impair.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n \\in N$. Alors si $n$ est pair, alors $n + 1$ est impair.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n \\in N$. Alors $n$ est pair seulement si $n + 1$ est impair.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop20. Soit $n \\in N$. Supposons que $n$ est pair. Alors $n + 1$ est impair.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara en instans av naturliga tal. Anta att vi kan bevisa att $n$ är jämnt. Då kan vi bevisa att summan av $n$ och $1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. För alla instanser $n$ av naturliga tal, om vi kan bevisa att $n$ är jämnt, så kan vi bevisa att summan av $n$ och $1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Om vi kan bevisa att $n$ är jämnt, så kan vi bevisa att summan av $n$ och $1$ är udda för varje instans $n$ av naturliga tal.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Om vi kan bevisa att $n$ är jämnt, så kan vi bevisa att summan av $n$ och $1$ är udda för alla instanser $n$ av naturliga tal.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara en instans av naturliga tal. Då om vi kan bevisa att $n$ är jämnt, så kan vi bevisa att summan av $n$ och $1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara en instans av naturliga tal. Då kan vi bevisa att $n$ är jämnt, endast om vi kan bevisa att summan av $n$ och $1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara ett naturligt tal. Anta att $n$ är jämnt. Då är summan av $n$ och $1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. För alla naturliga tal $n$, om $n$ är jämnt, så är summan av $n$ och $1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Om $n$ är jämnt, så är summan av $n$ och $1$ udda för varje naturligt tal $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Om $n$ är jämnt, så är summan av $n$ och $1$ udda för alla naturliga tal $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara ett naturligt tal. Då om $n$ är jämnt, så är summan av $n$ och $1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara ett naturligt tal. Då är $n$ jämnt, endast om summan av $n$ och $1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n \\in N$. Då om $n$ är jämnt, så är summan av $n$ och $1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n \\in N$. Då är $n$ jämnt, endast om summan av $n$ och $1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n \\in N$. Anta att $n$ är jämnt. Då är summan av $n$ och $1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara ett naturligt tal. Anta att $n$ är jämnt. Då är $n + 1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. För alla naturliga tal $n$, om $n$ är jämnt, så är $n + 1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Om $n$ är jämnt, så är $n + 1$ udda för varje naturligt tal $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Om $n$ är jämnt, så är $n + 1$ udda för alla naturliga tal $n$.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara ett naturligt tal. Då om $n$ är jämnt, så är $n + 1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n$ vara ett naturligt tal. Då är $n$ jämnt, endast om $n + 1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n \\in N$. Då om $n$ är jämnt, så är $n + 1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n \\in N$. Då är $n$ jämnt, endast om $n + 1$ är udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop20. Låt $n \\in N$. Anta att $n$ är jämnt. Då är $n + 1$ udda.",
    "output": "postulate prop20 : (n : Nat) -> even n -> odd (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Assume that we can prove that $n$ is odd. Then we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. For all instances $n$ of natural numbers, if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for every instance $n$ of natural numbers.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even for all instances $n$ of natural numbers.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then if we can prove that $n$ is odd, then we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is odd, only if we can prove that the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for every natural number $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then the sum of $n$ and $1$ is even for all natural numbers $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then the sum of $n$ and $1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. For all natural numbers $n$, if $n$ is odd, then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for every natural number $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. If $n$ is odd, then $n + 1$ is even for all natural numbers $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n$ be a natural number. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then if $n$ is odd, then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Then $n$ is odd, only if $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop30. Let $n \\in N$. Assume that $n$ is odd. Then $n + 1$ is even.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ une instance de nombres naturels. Supposons que nous pouvons démontrer que $n$ est impair. Alors nous pouvons démontrer que la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Pour toutes les instances $n$ de nombres naturels, si nous pouvons démontrer que $n$ est impair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Si nous pouvons démontrer que $n$ est impair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est paire pour chaque instance $n$ de nombres naturels.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Si nous pouvons démontrer que $n$ est impair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est paire pour toutes les instances $n$ de nombres naturels.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ une instance de nombres naturels. Alors si nous pouvons démontrer que $n$ est impair, alors nous pouvons démontrer que la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ une instance de nombres naturels. Alors nous pouvons démontrer que $n$ est impair seulement si nous pouvons démontrer que la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ un nombre naturel. Supposons que $n$ est impair. Alors la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Pour tous les nombres naturels $n$, si $n$ est impair, alors la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Si $n$ est impair, alors la somme de $n$ et de $1$ est paire pour chaque nombre naturel $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Si $n$ est impair, alors la somme de $n$ et de $1$ est paire pour tous les nombres naturels $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ un nombre naturel. Alors si $n$ est impair, alors la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ un nombre naturel. Alors $n$ est impair seulement si la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n \\in N$. Alors si $n$ est impair, alors la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n \\in N$. Alors $n$ est impair seulement si la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n \\in N$. Supposons que $n$ est impair. Alors la somme de $n$ et de $1$ est paire.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ un nombre naturel. Supposons que $n$ est impair. Alors $n + 1$ est pair.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Pour tous les nombres naturels $n$, si $n$ est impair, alors $n + 1$ est pair.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Si $n$ est impair, alors $n + 1$ est pair pour chaque nombre naturel $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Si $n$ est impair, alors $n + 1$ est pair pour tous les nombres naturels $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ un nombre naturel. Alors si $n$ est impair, alors $n + 1$ est pair.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n$ un nombre naturel. Alors $n$ est impair seulement si $n + 1$ est pair.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n \\in N$. Alors si $n$ est impair, alors $n + 1$ est pair.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n \\in N$. Alors $n$ est impair seulement si $n + 1$ est pair.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop30. Soit $n \\in N$. Supposons que $n$ est impair. Alors $n + 1$ est pair.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara en instans av naturliga tal. Anta att vi kan bevisa att $n$ är udda. Då kan vi bevisa att summan av $n$ och $1$ är jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. För alla instanser $n$ av naturliga tal, om vi kan bevisa att $n$ är udda, så kan vi bevisa att summan av $n$ och $1$ är jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Om vi kan bevisa att $n$ är udda, så kan vi bevisa att summan av $n$ och $1$ är jämn för varje instans $n$ av naturliga tal.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Om vi kan bevisa att $n$ är udda, så kan vi bevisa att summan av $n$ och $1$ är jämn för alla instanser $n$ av naturliga tal.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara en instans av naturliga tal. Då om vi kan bevisa att $n$ är udda, så kan vi bevisa att summan av $n$ och $1$ är jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara en instans av naturliga tal. Då kan vi bevisa att $n$ är udda, endast om vi kan bevisa att summan av $n$ och $1$ är jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara ett naturligt tal. Anta att $n$ är udda. Då är summan av $n$ och $1$ jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. För alla naturliga tal $n$, om $n$ är udda, så är summan av $n$ och $1$ jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Om $n$ är udda, så är summan av $n$ och $1$ jämn för varje naturligt tal $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Om $n$ är udda, så är summan av $n$ och $1$ jämn för alla naturliga tal $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara ett naturligt tal. Då om $n$ är udda, så är summan av $n$ och $1$ jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara ett naturligt tal. Då är $n$ udda, endast om summan av $n$ och $1$ är jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n \\in N$. Då om $n$ är udda, så är summan av $n$ och $1$ jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n \\in N$. Då är $n$ udda, endast om summan av $n$ och $1$ är jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n \\in N$. Anta att $n$ är udda. Då är summan av $n$ och $1$ jämn.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara ett naturligt tal. Anta att $n$ är udda. Då är $n + 1$ jämnt.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. För alla naturliga tal $n$, om $n$ är udda, så är $n + 1$ jämnt.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Om $n$ är udda, så är $n + 1$ jämnt för varje naturligt tal $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Om $n$ är udda, så är $n + 1$ jämnt för alla naturliga tal $n$.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara ett naturligt tal. Då om $n$ är udda, så är $n + 1$ jämnt.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n$ vara ett naturligt tal. Då är $n$ udda, endast om $n + 1$ är jämnt.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n \\in N$. Då om $n$ är udda, så är $n + 1$ jämnt.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n \\in N$. Då är $n$ udda, endast om $n + 1$ är jämnt.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop30. Låt $n \\in N$. Anta att $n$ är udda. Då är $n + 1$ jämnt.",
    "output": "postulate prop30 : (n : Nat) -> odd n -> even (plus n 1)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. We can prove that for all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. We can prove that $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or $n$ is odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or $n$ is odd for every natural number $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. For all natural numbers $n$, $n$ is even or odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or odd for every natural number $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. $n$ is even or odd for all natural numbers $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. All natural numbers $n$ are even or odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop40. All natural numbers are even or odd.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. Nous pouvons démontrer que pour tous les nombres naturels $n$, $n$ est pair ou $n$ est impair.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. Nous pouvons démontrer que $n$ est pair ou $n$ est impair pour chaque nombre naturel $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. Nous pouvons démontrer que $n$ est pair ou $n$ est impair pour tous les nombres naturels $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. Pour tous les nombres naturels $n$, $n$ est pair ou $n$ est impair.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. $n$ est pair ou $n$ est impair pour chaque nombre naturel $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. $n$ est pair ou $n$ est impair pour tous les nombres naturels $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. Pour tous les nombres naturels $n$, $n$ est pair ou impair.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. $n$ est pair ou impair pour chaque nombre naturel $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. $n$ est pair ou impair pour tous les nombres naturels $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. Tous les nombres naturels $n$ sont pairs ou impairs.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop40. Tous les nombres naturels sont pairs ou impairs.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. Vi kan bevisa att för alla naturliga tal $n$, är $n$ jämnt eller $n$ är udda.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. Vi kan bevisa att $n$ är jämnt eller $n$ är udda för varje naturligt tal $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. Vi kan bevisa att $n$ är jämnt eller $n$ är udda för alla naturliga tal $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. För alla naturliga tal $n$, är $n$ jämnt eller $n$ är udda.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. $n$ är jämnt eller $n$ är udda för varje naturligt tal $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. $n$ är jämnt eller $n$ är udda för alla naturliga tal $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. För alla naturliga tal $n$, är $n$ jämnt eller udda.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. $n$ är jämnt eller udda för varje naturligt tal $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. $n$ är jämnt eller udda för alla naturliga tal $n$.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. Alla naturliga tal $n$ är jämna eller udda.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop40. Alla naturliga tal är jämna eller udda.",
    "output": "postulate prop40 : all Nat (\\ n -> or (even n) (odd n))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. We can prove that for all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. We can prove that it is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. For all natural numbers $n$, it is not the case that $n$ is even and $n$ is odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for every natural number $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. It is not the case that $n$ is even and $n$ is odd for all natural numbers $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. For all natural numbers $n$, $n$ is not even and odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. $n$ is not even and odd for every natural number $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. $n$ is not even and odd for all natural numbers $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. No natural number $n$ is even and odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop50. No natural number is even and odd.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Nous pouvons démontrer que pour tous les nombres naturels $n$, il n'est pas le cas que $n$ soit pair et $n$ soit impair.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Nous pouvons démontrer qu'il n'est pas le cas que $n$ soit pair et $n$ soit impair pour chaque nombre naturel $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Nous pouvons démontrer qu'il n'est pas le cas que $n$ soit pair et $n$ soit impair pour tous les nombres naturels $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Pour tous les nombres naturels $n$, il n'est pas le cas que $n$ soit pair et $n$ soit impair.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Il n'est pas le cas que $n$ soit pair et $n$ soit impair pour chaque nombre naturel $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Il n'est pas le cas que $n$ soit pair et $n$ soit impair pour tous les nombres naturels $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Pour tous les nombres naturels $n$, $n$ n'est pas pair et impair.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. $n$ n'est pas pair et impair pour chaque nombre naturel $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. $n$ n'est pas pair et impair pour tous les nombres naturels $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Aucun nombre naturel $n$ n'est pair et impair.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop50. Aucun nombre naturel n'est pair et impair.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. Vi kan bevisa att för alla naturliga tal $n$, är det inte fallet att $n$ är jämnt och $n$ är udda.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. Vi kan bevisa att det inte är fallet att $n$ är jämnt och $n$ är udda för varje naturligt tal $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. Vi kan bevisa att det inte är fallet att $n$ är jämnt och $n$ är udda för alla naturliga tal $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. För alla naturliga tal $n$, är det inte fallet att $n$ är jämnt och $n$ är udda.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. Det är inte fallet att $n$ är jämnt och $n$ är udda för varje naturligt tal $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. Det är inte fallet att $n$ är jämnt och $n$ är udda för alla naturliga tal $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. För alla naturliga tal $n$, är $n$ inte jämnt och udda.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. $n$ är inte jämnt och udda för varje naturligt tal $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. $n$ är inte jämnt och udda för alla naturliga tal $n$.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. Inget naturligt tal $n$ är jämnt och udda.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop50. Inget naturligt tal är jämnt och udda.",
    "output": "postulate prop50 : all Nat (\\ n -> not (and (even n) (odd n)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. We can prove that for all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. We can prove that the sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. For all natural numbers $n$, the sum of $n$ and $0$ is equal to $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for every natural number $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. The sum of $n$ and $0$ is equal to $n$ for all natural numbers $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. For all natural numbers $n$, $n + 0 = n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. $n + 0 = n$ for every natural number $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop60. $n + 0 = n$ for all natural numbers $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. Nous pouvons démontrer que pour tous les nombres naturels $n$, la somme de $n$ et de $0$ est égale à $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. Nous pouvons démontrer que la somme de $n$ et de $0$ est égale à $n$ pour chaque nombre naturel $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. Nous pouvons démontrer que la somme de $n$ et de $0$ est égale à $n$ pour tous les nombres naturels $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. Pour tous les nombres naturels $n$, la somme de $n$ et de $0$ est égale à $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. La somme de $n$ et de $0$ est égale à $n$ pour chaque nombre naturel $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. La somme de $n$ et de $0$ est égale à $n$ pour tous les nombres naturels $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. Pour tous les nombres naturels $n$, $n + 0 = n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. $n + 0 = n$ pour chaque nombre naturel $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop60. $n + 0 = n$ pour tous les nombres naturels $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. Vi kan bevisa att för alla naturliga tal $n$, är summan av $n$ och $0$ lika med $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. Vi kan bevisa att summan av $n$ och $0$ är lika med $n$ för varje naturligt tal $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. Vi kan bevisa att summan av $n$ och $0$ är lika med $n$ för alla naturliga tal $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. För alla naturliga tal $n$, är summan av $n$ och $0$ lika med $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. Summan av $n$ och $0$ är lika med $n$ för varje naturligt tal $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. Summan av $n$ och $0$ är lika med $n$ för alla naturliga tal $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. För alla naturliga tal $n$, $n + 0 = n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. $n + 0 = n$ för varje naturligt tal $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop60. $n + 0 = n$ för alla naturliga tal $n$.",
    "output": "postulate prop60 : all Nat (\\ n -> Eq (plus n 0) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop70. We can prove that $1$ is odd.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop70. $1$ is odd.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop70. Nous pouvons démontrer que $1$ est impair.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop70. $1$ est impair.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop70. Vi kan bevisa att $1$ är udda.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop70. $1$ är udda.",
    "output": "postulate prop70 : odd 1"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop80. We can prove that $2$ is even.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop80. $2$ is even.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop80. Nous pouvons démontrer que $2$ est pair.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop80. $2$ est pair.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop80. Vi kan bevisa att $2$ är jämnt.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop80. $2$ är jämnt.",
    "output": "postulate prop80 : even 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that if $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all instances $n$ of natural numbers, we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every instance $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. We can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all instances $n$ of natural numbers.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be an instance of natural numbers. Then we can prove that $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n$ is equal to $2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n$ is equal to $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and $n$ is prime, then $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and $n$ is prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and $n$ is prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and $n$ is prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then if $n$ is even and prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, if $n$ is even and prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. If $n$ is even and prime, then $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. For all natural numbers $n$, $n$ is even and prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for every natural number $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. $n$ is even and prime, only if $n = 2$ for all natural numbers $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n$ be a natural number. Then $n$ is even and prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then if $n$ is even and prime, then $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop90. Let $n \\in N$. Then $n$ is even and prime, only if $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ une instance de nombres naturels. Alors nous pouvons démontrer que si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour toutes les instances $n$ de nombres naturels, nous pouvons démontrer que si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Nous pouvons démontrer que si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$ pour chaque instance $n$ de nombres naturels.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Nous pouvons démontrer que si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$ pour toutes les instances $n$ de nombres naturels.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour toutes les instances $n$ de nombres naturels, nous pouvons démontrer que $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Nous pouvons démontrer que $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$ pour chaque instance $n$ de nombres naturels.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Nous pouvons démontrer que $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$ pour toutes les instances $n$ de nombres naturels.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ une instance de nombres naturels. Alors nous pouvons démontrer que $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ un nombre naturel. Alors si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour tous les nombres naturels $n$, si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$ pour chaque nombre naturel $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$ pour tous les nombres naturels $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour tous les nombres naturels $n$, $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$ pour chaque nombre naturel $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$ pour tous les nombres naturels $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ un nombre naturel. Alors $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n \\in N$. Alors si $n$ est pair et $n$ est premier, alors $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n \\in N$. Alors $n$ est pair et $n$ est premier seulement si $n$ est égal à $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ un nombre naturel. Alors si $n$ est pair et $n$ est premier, alors $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour tous les nombres naturels $n$, si $n$ est pair et $n$ est premier, alors $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Si $n$ est pair et $n$ est premier, alors $n = 2$ pour chaque nombre naturel $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Si $n$ est pair et $n$ est premier, alors $n = 2$ pour tous les nombres naturels $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour tous les nombres naturels $n$, $n$ est pair et $n$ est premier seulement si $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. $n$ est pair et $n$ est premier seulement si $n = 2$ pour chaque nombre naturel $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. $n$ est pair et $n$ est premier seulement si $n = 2$ pour tous les nombres naturels $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ un nombre naturel. Alors $n$ est pair et $n$ est premier seulement si $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n \\in N$. Alors si $n$ est pair et $n$ est premier, alors $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n \\in N$. Alors $n$ est pair et $n$ est premier seulement si $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ un nombre naturel. Alors si $n$ est pair et premier, alors $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour tous les nombres naturels $n$, si $n$ est pair et premier, alors $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Si $n$ est pair et premier, alors $n = 2$ pour chaque nombre naturel $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Si $n$ est pair et premier, alors $n = 2$ pour tous les nombres naturels $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Pour tous les nombres naturels $n$, $n$ est pair et premier seulement si $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. $n$ est pair et premier seulement si $n = 2$ pour chaque nombre naturel $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. $n$ est pair et premier seulement si $n = 2$ pour tous les nombres naturels $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n$ un nombre naturel. Alors $n$ est pair et premier seulement si $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n \\in N$. Alors si $n$ est pair et premier, alors $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop90. Soit $n \\in N$. Alors $n$ est pair et premier seulement si $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara en instans av naturliga tal. Då kan vi bevisa att om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla instanser $n$ av naturliga tal, kan vi bevisa att om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Vi kan bevisa att om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$ för varje instans $n$ av naturliga tal.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Vi kan bevisa att om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$ för alla instanser $n$ av naturliga tal.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla instanser $n$ av naturliga tal, kan vi bevisa att $n$ är jämnt och $n$ är primt, endast om $n$ är lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Vi kan bevisa att $n$ är jämnt och $n$ är primt, endast om $n$ är lika med $2$ för varje instans $n$ av naturliga tal.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Vi kan bevisa att $n$ är jämnt och $n$ är primt, endast om $n$ är lika med $2$ för alla instanser $n$ av naturliga tal.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara en instans av naturliga tal. Då kan vi bevisa att $n$ är jämnt och $n$ är primt, endast om $n$ är lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara ett naturligt tal. Då om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla naturliga tal $n$, om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$ för varje naturligt tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$ för alla naturliga tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla naturliga tal $n$, är $n$ jämnt och $n$ är primt, endast om $n$ är lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. $n$ är jämnt och $n$ är primt, endast om $n$ är lika med $2$ för varje naturligt tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. $n$ är jämnt och $n$ är primt, endast om $n$ är lika med $2$ för alla naturliga tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara ett naturligt tal. Då är $n$ jämnt och $n$ är primt, endast om $n$ är lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n \\in N$. Då om $n$ är jämnt och $n$ är primt, så är $n$ lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n \\in N$. Då är $n$ jämnt och $n$ är primt, endast om $n$ är lika med $2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara ett naturligt tal. Då om $n$ är jämnt och $n$ är primt, så $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla naturliga tal $n$, om $n$ är jämnt och $n$ är primt, så $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Om $n$ är jämnt och $n$ är primt, så $n = 2$ för varje naturligt tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Om $n$ är jämnt och $n$ är primt, så $n = 2$ för alla naturliga tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla naturliga tal $n$, är $n$ jämnt och $n$ är primt, endast om $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. $n$ är jämnt och $n$ är primt, endast om $n = 2$ för varje naturligt tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. $n$ är jämnt och $n$ är primt, endast om $n = 2$ för alla naturliga tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara ett naturligt tal. Då är $n$ jämnt och $n$ är primt, endast om $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n \\in N$. Då om $n$ är jämnt och $n$ är primt, så $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n \\in N$. Då är $n$ jämnt och $n$ är primt, endast om $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara ett naturligt tal. Då om $n$ är jämnt och primt, så $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla naturliga tal $n$, om $n$ är jämnt och primt, så $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Om $n$ är jämnt och primt, så $n = 2$ för varje naturligt tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Om $n$ är jämnt och primt, så $n = 2$ för alla naturliga tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. För alla naturliga tal $n$, är $n$ jämnt och primt, endast om $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. $n$ är jämnt och primt, endast om $n = 2$ för varje naturligt tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. $n$ är jämnt och primt, endast om $n = 2$ för alla naturliga tal $n$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n$ vara ett naturligt tal. Då är $n$ jämnt och primt, endast om $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n \\in N$. Då om $n$ är jämnt och primt, så $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop90. Låt $n \\in N$. Då är $n$ jämnt och primt, endast om $n = 2$.",
    "output": "postulate prop90 : (n : Nat) -> if (and (even n) (prime n)) (Eq n 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Assume that we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. For all instances $a$, $b$ and $c$ of integers, if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. If we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$ for all instances $a$, $b$ and $c$ of integers.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then if we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be instances of integers. Then we can prove that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if we can prove that the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. If the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$ for all integers $a$, $b$ and $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then the sum of the sum of $a$ and $b$ and $c$ is equal to $0$, only if the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that the sum of the sum of $a$ and $b$ and $c$ is equal to $0$. Then the product of the product of $a$ and $b$ and $c$ is less than $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. For all integers $a$, $b$ and $c$, if $a + b + c = 0$, then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. If $a + b + c = 0$, then $a b c < 0$ for all integers $a$, $b$ and $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a$, $b$ and $c$ be integers. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then if $a + b + c = 0$, then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$, only if $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Then $a + b + c = 0$ implies $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop100. Let $a , b , c \\in Z$. Assume that $a + b + c = 0$. Then $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des instances d'entiers. Supposons que nous pouvons démontrer que la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$. Alors nous pouvons démontrer que le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Pour toutes les instances $a$, $b$ et $c$ d'entiers, si nous pouvons démontrer que la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$, alors nous pouvons démontrer que le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Si nous pouvons démontrer que la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$, alors nous pouvons démontrer que le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$ pour toutes les instances $a$, $b$ et $c$ d'entiers.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des instances d'entiers. Alors si nous pouvons démontrer que la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$, alors nous pouvons démontrer que le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des instances d'entiers. Alors nous pouvons démontrer que la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$ seulement si nous pouvons démontrer que le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des entiers. Supposons que la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$. Alors le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Pour tous les entiers $a$, $b$ et $c$, si la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$, alors le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Si la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$, alors le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$ pour tous les entiers $a$, $b$ et $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des entiers. Alors si la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$, alors le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des entiers. Alors la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$ seulement si le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a , b , c \\in Z$. Alors si la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$, alors le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a , b , c \\in Z$. Alors la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$ seulement si le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a , b , c \\in Z$. Supposons que la somme de la somme de $a$ et de $b$ et de $c$ est égale à $0$. Alors le produit du produit de $a$ et de $b$ et de $c$ est inférieur à $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des entiers. Supposons que $a + b + c = 0$. Alors $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Pour tous les entiers $a$, $b$ et $c$, si $a + b + c = 0$, alors $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Si $a + b + c = 0$, alors $a b c < 0$ pour tous les entiers $a$, $b$ et $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des entiers. Alors si $a + b + c = 0$, alors $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des entiers. Alors $a + b + c = 0$ seulement si $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a$, $b$ et $c$ des entiers. Alors $a + b + c = 0$ implique $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a , b , c \\in Z$. Alors si $a + b + c = 0$, alors $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a , b , c \\in Z$. Alors $a + b + c = 0$ seulement si $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a , b , c \\in Z$. Alors $a + b + c = 0$ implique $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop100. Soient $a , b , c \\in Z$. Supposons que $a + b + c = 0$. Alors $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara instanser av heltal. Anta att vi kan bevisa att summan av summan av $a$ och $b$ och $c$ är lika med $0$. Då kan vi bevisa att produkten av produkten av $a$ och $b$ och $c$ är mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. För alla instanser $a$, $b$ och $c$ av heltal, om vi kan bevisa att summan av summan av $a$ och $b$ och $c$ är lika med $0$, så kan vi bevisa att produkten av produkten av $a$ och $b$ och $c$ är mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Om vi kan bevisa att summan av summan av $a$ och $b$ och $c$ är lika med $0$, så kan vi bevisa att produkten av produkten av $a$ och $b$ och $c$ är mindre än $0$ för alla instanser $a$, $b$ och $c$ av heltal.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara instanser av heltal. Då om vi kan bevisa att summan av summan av $a$ och $b$ och $c$ är lika med $0$, så kan vi bevisa att produkten av produkten av $a$ och $b$ och $c$ är mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara instanser av heltal. Då kan vi bevisa att summan av summan av $a$ och $b$ och $c$ är lika med $0$, endast om vi kan bevisa att produkten av produkten av $a$ och $b$ och $c$ är mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara heltal. Anta att summan av summan av $a$ och $b$ och $c$ är lika med $0$. Då är produkten av produkten av $a$ och $b$ och $c$ mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. För alla heltal $a$, $b$ och $c$, om summan av summan av $a$ och $b$ och $c$ är lika med $0$, så är produkten av produkten av $a$ och $b$ och $c$ mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Om summan av summan av $a$ och $b$ och $c$ är lika med $0$, så är produkten av produkten av $a$ och $b$ och $c$ mindre än $0$ för alla heltal $a$, $b$ och $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara heltal. Då om summan av summan av $a$ och $b$ och $c$ är lika med $0$, så är produkten av produkten av $a$ och $b$ och $c$ mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara heltal. Då är summan av summan av $a$ och $b$ och $c$ lika med $0$, endast om produkten av produkten av $a$ och $b$ och $c$ är mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a , b , c \\in Z$. Då om summan av summan av $a$ och $b$ och $c$ är lika med $0$, så är produkten av produkten av $a$ och $b$ och $c$ mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a , b , c \\in Z$. Då är summan av summan av $a$ och $b$ och $c$ lika med $0$, endast om produkten av produkten av $a$ och $b$ och $c$ är mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a , b , c \\in Z$. Anta att summan av summan av $a$ och $b$ och $c$ är lika med $0$. Då är produkten av produkten av $a$ och $b$ och $c$ mindre än $0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara heltal. Anta att $a + b + c = 0$. Då $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. För alla heltal $a$, $b$ och $c$, om $a + b + c = 0$, så $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Om $a + b + c = 0$, så $a b c < 0$ för alla heltal $a$, $b$ och $c$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara heltal. Då om $a + b + c = 0$, så $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara heltal. Då $a + b + c = 0$, endast om $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a$, $b$ och $c$ vara heltal. Då implicerar $a + b + c = 0$  $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a , b , c \\in Z$. Då om $a + b + c = 0$, så $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a , b , c \\in Z$. Då $a + b + c = 0$, endast om $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a , b , c \\in Z$. Då implicerar $a + b + c = 0$  $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop100. Låt $a , b , c \\in Z$. Anta att $a + b + c = 0$. Då $a b c < 0$.",
    "output": "postulate prop100 : (a : Int) -> (b : Int) -> (c : Int) -> Eq (plus (plus a b) c) 0 -> Lt (times (times a b) c) 0"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all instances $a$ and $c$ of integers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all instances $a$ and $c$ of integers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all instances $a$ and $c$ of integers, if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all instances $a$ and $c$ of integers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then if we can prove that $a$ is odd and $c$ is odd, then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Then we can prove that $a$ is odd and $c$ is odd, only if we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be instances of integers. Assume that we can prove that $a$ is odd and $c$ is odd. Then we can prove that the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then the sum of the product of $a$ and $b$ and the product of $b$ and $c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ is odd and $c$ is odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ is odd and $c$ is odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ is odd and $c$ is odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. For all integers $a$ and $c$, if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. If $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$ for all integers $a$ and $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then if $a$ and $c$ are odd, then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Then $a$ and $c$ are odd, only if $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a$ and $c$ be integers. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then for all integers $b$, $a b + b c$ is even.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for every integer $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop110. Let $a , c \\in Z$. Assume that $a$ and $c$ are odd. Then $a b + b c$ is even for all integers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Supposons que nous pouvons démontrer que $a$ est impair et $c$ est impair. Alors nous pouvons démontrer que pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour toutes les instances $a$ et $c$ d'entiers, si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour toutes les instances $a$ et $c$ d'entiers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour toutes les instances $a$ et $c$ d'entiers, si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$ pour toutes les instances $a$ et $c$ d'entiers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour toutes les instances $a$ et $c$ d'entiers, si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$ pour toutes les instances $a$ et $c$ d'entiers.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Alors si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Alors nous pouvons démontrer que $a$ est impair et $c$ est impair seulement si nous pouvons démontrer que pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Alors si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Alors nous pouvons démontrer que $a$ est impair et $c$ est impair seulement si nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Alors si nous pouvons démontrer que $a$ est impair et $c$ est impair, alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Alors nous pouvons démontrer que $a$ est impair et $c$ est impair seulement si nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Supposons que nous pouvons démontrer que $a$ est impair et $c$ est impair. Alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des instances d'entiers. Supposons que nous pouvons démontrer que $a$ est impair et $c$ est impair. Alors nous pouvons démontrer que la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ est impair et $c$ est impair. Alors pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$ pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$ pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ est impair et $c$ est impair seulement si pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ est impair et $c$ est impair seulement si la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ est impair et $c$ est impair seulement si la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ est impair et $c$ est impair seulement si pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ est impair et $c$ est impair seulement si la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ est impair et $c$ est impair, alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ est impair et $c$ est impair seulement si la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ est impair et $c$ est impair. Alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ est impair et $c$ est impair. Alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ est impair et $c$ est impair. Alors pour tous les entiers $b$, la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ est impair et $c$ est impair. Alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ est impair et $c$ est impair. Alors la somme du produit de $a$ et de $b$ et du produit de $b$ et de $c$ est paire pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ est impair et $c$ est impair. Alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, $a b + b c$ est pair pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour chaque entier $b$ pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour tous les entiers $b$ pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ est impair et $c$ est impair seulement si pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ est impair et $c$ est impair seulement si $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ est impair et $c$ est impair seulement si $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ est impair et $c$ est impair, alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ est impair et $c$ est impair seulement si pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ est impair et $c$ est impair seulement si $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ est impair et $c$ est impair, alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ est impair et $c$ est impair seulement si $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ est impair et $c$ est impair. Alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ est impair et $c$ est impair. Alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ est impair et $c$ est impair. Alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ est impair et $c$ est impair. Alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ est impair et $c$ est impair. Alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ et $c$ sont impairs. Alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ et $c$ sont impairs, alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ et $c$ sont impairs, alors pour tous les entiers $b$, $a b + b c$ est pair pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour chaque entier $b$ pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Pour tous les entiers $a$ et $c$, si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour tous les entiers $b$ pour tous les entiers $a$ et $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ et $c$ sont impairs, alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ et $c$ sont impairs seulement si pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ et $c$ sont impairs seulement si $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Alors $a$ et $c$ sont impairs seulement si $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ et $c$ sont impairs, alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ et $c$ sont impairs seulement si pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ et $c$ sont impairs seulement si $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors si $a$ et $c$ sont impairs, alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Alors $a$ et $c$ sont impairs seulement si $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ et $c$ sont impairs. Alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a$ et $c$ des entiers. Supposons que $a$ et $c$ sont impairs. Alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ et $c$ sont impairs. Alors pour tous les entiers $b$, $a b + b c$ est pair.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ et $c$ sont impairs. Alors $a b + b c$ est pair pour chaque entier $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop110. Soient $a , c \\in Z$. Supposons que $a$ et $c$ sont impairs. Alors $a b + b c$ est pair pour tous les entiers $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Anta att vi kan bevisa att $a$ är udda och $c$ är udda. Då kan vi bevisa att för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla instanser $a$ och $c$ av heltal, om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla instanser $a$ och $c$ av heltal.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla instanser $a$ och $c$ av heltal, om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för varje heltal $b$ för alla instanser $a$ och $c$ av heltal.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla instanser $a$ och $c$ av heltal, om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för alla heltal $b$ för alla instanser $a$ och $c$ av heltal.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Då om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Då kan vi bevisa att $a$ är udda och $c$ är udda, endast om vi kan bevisa att för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Då om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Då kan vi bevisa att $a$ är udda och $c$ är udda, endast om vi kan bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Då om vi kan bevisa att $a$ är udda och $c$ är udda, så kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Då kan vi bevisa att $a$ är udda och $c$ är udda, endast om vi kan bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Anta att vi kan bevisa att $a$ är udda och $c$ är udda. Då kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara instanser av heltal. Anta att vi kan bevisa att $a$ är udda och $c$ är udda. Då kan vi bevisa att summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ är udda och $c$ är udda. Då för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ är udda och $c$ är udda, så för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ är udda och $c$ är udda, så för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för varje heltal $b$ för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla heltal $b$ för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ är udda och $c$ är udda, så för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ udda och $c$ är udda, endast om för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ udda och $c$ är udda, endast om summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ udda och $c$ är udda, endast om summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ är udda och $c$ är udda, så för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ udda och $c$ är udda, endast om för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ udda och $c$ är udda, endast om summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ är udda och $c$ är udda, så är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ udda och $c$ är udda, endast om summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ är jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ är udda och $c$ är udda. Då är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ är udda och $c$ är udda. Då är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ är udda och $c$ är udda. Då för alla heltal $b$, är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ är udda och $c$ är udda. Då är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ är udda och $c$ är udda. Då är summan av produkten av $a$ och $b$ och produkten av $b$ och $c$ jämn för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ är udda och $c$ är udda. Då för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ är udda och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ är udda och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$ för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$ för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ är udda och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ udda och $c$ är udda, endast om för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ udda och $c$ är udda, endast om $a b + b c$ är jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ udda och $c$ är udda, endast om $a b + b c$ är jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ är udda och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ udda och $c$ är udda, endast om för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ udda och $c$ är udda, endast om $a b + b c$ är jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ är udda och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ udda och $c$ är udda, endast om $a b + b c$ är jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ är udda och $c$ är udda. Då är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ är udda och $c$ är udda. Då är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ är udda och $c$ är udda. Då för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ är udda och $c$ är udda. Då är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ är udda och $c$ är udda. Då är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ och $c$ är udda. Då för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$ för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. För alla heltal $a$ och $c$, om $a$ och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Om $a$ och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$ för alla heltal $a$ och $c$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ och $c$ udda, endast om för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ och $c$ udda, endast om $a b + b c$ är jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då om $a$ och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Då är $a$ och $c$ udda, endast om $a b + b c$ är jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ och $c$ är udda, så för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ och $c$ udda, endast om för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ och $c$ är udda, så är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ och $c$ udda, endast om $a b + b c$ är jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då om $a$ och $c$ är udda, så är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Då är $a$ och $c$ udda, endast om $a b + b c$ är jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ och $c$ är udda. Då är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a$ och $c$ vara heltal. Anta att $a$ och $c$ är udda. Då är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ och $c$ är udda. Då för alla heltal $b$, är $a b + b c$ jämnt.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ och $c$ är udda. Då är $a b + b c$ jämnt för varje heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop110. Låt $a , c \\in Z$. Anta att $a$ och $c$ är udda. Då är $a b + b c$ jämnt för alla heltal $b$.",
    "output": "postulate prop110 : (a : Int) -> (c : Int) -> and (odd a) (odd c) -> all Int (\\ b -> even (plus (times a b) (times b c)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be instances of integers. Then we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all instances $a$ and $b$ of integers, we can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. We can prove that the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all integers $a$ and $b$, the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. The product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a , b \\in Z$. Then the product of $a$ and $b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. $a b$ is even, if and only if $a$ is even or $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ is even or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a$ and $b$ be integers. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. For all integers $a$ and $b$, $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. $a b$ is even, if and only if $a$ or $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop120. Let $a , b \\in Z$. Then $a b$ is even, if and only if $a$ or $b$ is even.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Soient $a$ et $b$ des instances d'entiers. Alors nous pouvons démontrer que le produit de $a$ et de $b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Pour toutes les instances $a$ et $b$ d'entiers, nous pouvons démontrer que le produit de $a$ et de $b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Nous pouvons démontrer que le produit de $a$ et de $b$ est pair si et seulement si $a$ est pair ou $b$ est pair pour toutes les instances $a$ et $b$ d'entiers.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Soient $a$ et $b$ des entiers. Alors le produit de $a$ et de $b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Pour tous les entiers $a$ et $b$, le produit de $a$ et de $b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Le produit de $a$ et de $b$ est pair si et seulement si $a$ est pair ou $b$ est pair pour tous les entiers $a$ et $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Soient $a , b \\in Z$. Alors le produit de $a$ et de $b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Soient $a$ et $b$ des entiers. Alors $a b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Pour tous les entiers $a$ et $b$, $a b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. $a b$ est pair si et seulement si $a$ est pair ou $b$ est pair pour tous les entiers $a$ et $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Soient $a , b \\in Z$. Alors $a b$ est pair si et seulement si $a$ est pair ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Soient $a$ et $b$ des entiers. Alors $a b$ est pair si et seulement si $a$ ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Pour tous les entiers $a$ et $b$, $a b$ est pair si et seulement si $a$ ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. $a b$ est pair si et seulement si $a$ ou $b$ est pair pour tous les entiers $a$ et $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop120. Soient $a , b \\in Z$. Alors $a b$ est pair si et seulement si $a$ ou $b$ est pair.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Låt $a$ och $b$ vara instanser av heltal. Då kan vi bevisa att produkten av $a$ och $b$ är jämn, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. För alla instanser $a$ och $b$ av heltal, kan vi bevisa att produkten av $a$ och $b$ är jämn, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Vi kan bevisa att produkten av $a$ och $b$ är jämn, om och endast om $a$ är jämnt eller $b$ är jämnt för alla instanser $a$ och $b$ av heltal.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Låt $a$ och $b$ vara heltal. Då är produkten av $a$ och $b$ jämn, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. För alla heltal $a$ och $b$, är produkten av $a$ och $b$ jämn, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Produkten av $a$ och $b$ är jämn, om och endast om $a$ är jämnt eller $b$ är jämnt för alla heltal $a$ och $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Låt $a , b \\in Z$. Då är produkten av $a$ och $b$ jämn, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Låt $a$ och $b$ vara heltal. Då är $a b$ jämnt, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. För alla heltal $a$ och $b$, är $a b$ jämnt, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. $a b$ är jämnt, om och endast om $a$ är jämnt eller $b$ är jämnt för alla heltal $a$ och $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Låt $a , b \\in Z$. Då är $a b$ jämnt, om och endast om $a$ är jämnt eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Låt $a$ och $b$ vara heltal. Då är $a b$ jämnt, om och endast om $a$ eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. För alla heltal $a$ och $b$, är $a b$ jämnt, om och endast om $a$ eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. $a b$ är jämnt, om och endast om $a$ eller $b$ är jämnt för alla heltal $a$ och $b$.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop120. Låt $a , b \\in Z$. Då är $a b$ jämnt, om och endast om $a$ eller $b$ är jämnt.",
    "output": "postulate prop120 : (a : Int) -> (b : Int) -> iff (even (times a b)) (or (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. We can prove that if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all instances $x$ and $y$ of integers, we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. We can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all instances $x$ and $y$ of integers.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be instances of integers. Then we can prove that the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. If the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. The product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then if the product of $x$ and $y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then the product of $x$ and $y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. If $x y$ is odd, then $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. $x y$ is odd, only if $x$ is odd and $y$ is odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ is odd and $y$ is odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. If $x y$ is odd, then $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. For all integers $x$ and $y$, $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. $x y$ is odd, only if $x$ and $y$ are odd for all integers $x$ and $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x$ and $y$ be integers. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then if $x y$ is odd, then $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop130. Let $x , y \\in Z$. Then $x y$ is odd, only if $x$ and $y$ are odd.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des instances d'entiers. Alors nous pouvons démontrer que si le produit de $x$ et de $y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour toutes les instances $x$ et $y$ d'entiers, nous pouvons démontrer que si le produit de $x$ et de $y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Nous pouvons démontrer que si le produit de $x$ et de $y$ est impair, alors $x$ est impair et $y$ est impair pour toutes les instances $x$ et $y$ d'entiers.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour toutes les instances $x$ et $y$ d'entiers, nous pouvons démontrer que le produit de $x$ et de $y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Nous pouvons démontrer que le produit de $x$ et de $y$ est impair seulement si $x$ est impair et $y$ est impair pour toutes les instances $x$ et $y$ d'entiers.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des instances d'entiers. Alors nous pouvons démontrer que le produit de $x$ et de $y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des entiers. Alors si le produit de $x$ et de $y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour tous les entiers $x$ et $y$, si le produit de $x$ et de $y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Si le produit de $x$ et de $y$ est impair, alors $x$ est impair et $y$ est impair pour tous les entiers $x$ et $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour tous les entiers $x$ et $y$, le produit de $x$ et de $y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Le produit de $x$ et de $y$ est impair seulement si $x$ est impair et $y$ est impair pour tous les entiers $x$ et $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des entiers. Alors le produit de $x$ et de $y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x , y \\in Z$. Alors si le produit de $x$ et de $y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x , y \\in Z$. Alors le produit de $x$ et de $y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des entiers. Alors si $x y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour tous les entiers $x$ et $y$, si $x y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Si $x y$ est impair, alors $x$ est impair et $y$ est impair pour tous les entiers $x$ et $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour tous les entiers $x$ et $y$, $x y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. $x y$ est impair seulement si $x$ est impair et $y$ est impair pour tous les entiers $x$ et $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des entiers. Alors $x y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x , y \\in Z$. Alors si $x y$ est impair, alors $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x , y \\in Z$. Alors $x y$ est impair seulement si $x$ est impair et $y$ est impair.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des entiers. Alors si $x y$ est impair, alors $x$ et $y$ sont impairs.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour tous les entiers $x$ et $y$, si $x y$ est impair, alors $x$ et $y$ sont impairs.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Si $x y$ est impair, alors $x$ et $y$ sont impairs pour tous les entiers $x$ et $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Pour tous les entiers $x$ et $y$, $x y$ est impair seulement si $x$ et $y$ sont impairs.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. $x y$ est impair seulement si $x$ et $y$ sont impairs pour tous les entiers $x$ et $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x$ et $y$ des entiers. Alors $x y$ est impair seulement si $x$ et $y$ sont impairs.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x , y \\in Z$. Alors si $x y$ est impair, alors $x$ et $y$ sont impairs.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop130. Soient $x , y \\in Z$. Alors $x y$ est impair seulement si $x$ et $y$ sont impairs.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara instanser av heltal. Då kan vi bevisa att om produkten av $x$ och $y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla instanser $x$ och $y$ av heltal, kan vi bevisa att om produkten av $x$ och $y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Vi kan bevisa att om produkten av $x$ och $y$ är udda, så är $x$ udda och $y$ är udda för alla instanser $x$ och $y$ av heltal.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla instanser $x$ och $y$ av heltal, kan vi bevisa att produkten av $x$ och $y$ är udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Vi kan bevisa att produkten av $x$ och $y$ är udda, endast om $x$ är udda och $y$ är udda för alla instanser $x$ och $y$ av heltal.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara instanser av heltal. Då kan vi bevisa att produkten av $x$ och $y$ är udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara heltal. Då om produkten av $x$ och $y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla heltal $x$ och $y$, om produkten av $x$ och $y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Om produkten av $x$ och $y$ är udda, så är $x$ udda och $y$ är udda för alla heltal $x$ och $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla heltal $x$ och $y$, är produkten av $x$ och $y$ udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Produkten av $x$ och $y$ är udda, endast om $x$ är udda och $y$ är udda för alla heltal $x$ och $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara heltal. Då är produkten av $x$ och $y$ udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x , y \\in Z$. Då om produkten av $x$ och $y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x , y \\in Z$. Då är produkten av $x$ och $y$ udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara heltal. Då om $x y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla heltal $x$ och $y$, om $x y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Om $x y$ är udda, så är $x$ udda och $y$ är udda för alla heltal $x$ och $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla heltal $x$ och $y$, är $x y$ udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. $x y$ är udda, endast om $x$ är udda och $y$ är udda för alla heltal $x$ och $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara heltal. Då är $x y$ udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x , y \\in Z$. Då om $x y$ är udda, så är $x$ udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x , y \\in Z$. Då är $x y$ udda, endast om $x$ är udda och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara heltal. Då om $x y$ är udda, så är $x$ och $y$ udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla heltal $x$ och $y$, om $x y$ är udda, så är $x$ och $y$ udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Om $x y$ är udda, så är $x$ och $y$ udda för alla heltal $x$ och $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. För alla heltal $x$ och $y$, är $x y$ udda, endast om $x$ och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. $x y$ är udda, endast om $x$ och $y$ är udda för alla heltal $x$ och $y$.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x$ och $y$ vara heltal. Då är $x y$ udda, endast om $x$ och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x , y \\in Z$. Då om $x y$ är udda, så är $x$ och $y$ udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop130. Låt $x , y \\in Z$. Då är $x y$ udda, endast om $x$ och $y$ är udda.",
    "output": "postulate prop130 : (x : Int) -> (y : Int) -> if (odd (times x y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$. Assume that $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Axiom. Assume that $Elem$ holds for $Int$ and $Elem$ holds for $Int$. Then $same_parity$ is a proposition.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Elem$ tient pour $Int$. Supposons que $Elem$ tient pour $Int$. Alors $same_parity$ est une proposition.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Axiome. Supposons que $Elem$ tient pour $Int$ et $Elem$ tient pour $Int$. Alors $same_parity$ est une proposition.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Elem$ håller för $Int$. Anta att $Elem$ håller för $Int$. Då är $same_parity$ ett påstående.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Axiom. Anta att $Elem$ håller för $Int$ och $Elem$ håller för $Int$. Då är $same_parity$ ett påstående.",
    "output": "same8parity : Int -> Int -> Prop\nsame8parity = \\ x -> \\ y -> or (and (even x) (even y)) (and (odd x) (odd y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x$ and $y$ be instances of integers. Then we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. For all instances $x$ and $y$ of integers, we can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. We can prove that $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all instances $x$ and $y$ of integers.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even for all integers $x$ and $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if the sum of $x$ and $y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x$ and $y$ be integers. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. For all integers $x$ and $y$, $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even for all integers $x$ and $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop140. Let $x , y \\in Z$. Then $same_parity$ holds for $x$ and $y$, if and only if $x + y$ is even.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Soient $x$ et $y$ des instances d'entiers. Alors nous pouvons démontrer que $same_parity$ tient pour $x$ et $y$ si et seulement si la somme de $x$ et de $y$ est paire.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Pour toutes les instances $x$ et $y$ d'entiers, nous pouvons démontrer que $same_parity$ tient pour $x$ et $y$ si et seulement si la somme de $x$ et de $y$ est paire.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Nous pouvons démontrer que $same_parity$ tient pour $x$ et $y$ si et seulement si la somme de $x$ et de $y$ est paire pour toutes les instances $x$ et $y$ d'entiers.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Soient $x$ et $y$ des entiers. Alors $same_parity$ tient pour $x$ et $y$ si et seulement si la somme de $x$ et de $y$ est paire.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Pour tous les entiers $x$ et $y$, $same_parity$ tient pour $x$ et $y$ si et seulement si la somme de $x$ et de $y$ est paire.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. $same_parity$ tient pour $x$ et $y$ si et seulement si la somme de $x$ et de $y$ est paire pour tous les entiers $x$ et $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Soient $x , y \\in Z$. Alors $same_parity$ tient pour $x$ et $y$ si et seulement si la somme de $x$ et de $y$ est paire.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Soient $x$ et $y$ des entiers. Alors $same_parity$ tient pour $x$ et $y$ si et seulement si $x + y$ est pair.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Pour tous les entiers $x$ et $y$, $same_parity$ tient pour $x$ et $y$ si et seulement si $x + y$ est pair.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. $same_parity$ tient pour $x$ et $y$ si et seulement si $x + y$ est pair pour tous les entiers $x$ et $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop140. Soient $x , y \\in Z$. Alors $same_parity$ tient pour $x$ et $y$ si et seulement si $x + y$ est pair.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. Låt $x$ och $y$ vara instanser av heltal. Då kan vi bevisa att $same_parity$ håller för $x$ och $y$, om och endast om summan av $x$ och $y$ är jämn.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. För alla instanser $x$ och $y$ av heltal, kan vi bevisa att $same_parity$ håller för $x$ och $y$, om och endast om summan av $x$ och $y$ är jämn.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. Vi kan bevisa att $same_parity$ håller för $x$ och $y$, om och endast om summan av $x$ och $y$ är jämn för alla instanser $x$ och $y$ av heltal.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. Låt $x$ och $y$ vara heltal. Då håller $same_parity$ för $x$ och $y$, om och endast om summan av $x$ och $y$ är jämn.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. För alla heltal $x$ och $y$, håller $same_parity$ för $x$ och $y$, om och endast om summan av $x$ och $y$ är jämn.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. $same_parity$ håller för $x$ och $y$, om och endast om summan av $x$ och $y$ är jämn för alla heltal $x$ och $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. Låt $x , y \\in Z$. Då håller $same_parity$ för $x$ och $y$, om och endast om summan av $x$ och $y$ är jämn.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. Låt $x$ och $y$ vara heltal. Då håller $same_parity$ för $x$ och $y$, om och endast om $x + y$ är jämnt.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. För alla heltal $x$ och $y$, håller $same_parity$ för $x$ och $y$, om och endast om $x + y$ är jämnt.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. $same_parity$ håller för $x$ och $y$, om och endast om $x + y$ är jämnt för alla heltal $x$ och $y$.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop140. Låt $x , y \\in Z$. Då håller $same_parity$ för $x$ och $y$, om och endast om $x + y$ är jämnt.",
    "output": "postulate prop140 : (x : Int) -> (y : Int) -> iff (same8parity x y) (even (plus x y))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n$ be an instance of natural numbers. Then we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. For all instances $n$ of natural numbers, we can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for every instance $n$ of natural numbers.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. We can prove that the difference of the exponentiation of $n$ and $3$ and $n$ is even for all instances $n$ of natural numbers.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n$ be a natural number. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. For all natural numbers $n$, the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for every natural number $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. The difference of the exponentiation of $n$ and $3$ and $n$ is even for all natural numbers $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n \\in N$. Then the difference of the exponentiation of $n$ and $3$ and $n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n$ be a natural number. Then $n ^ {3}- n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. For all natural numbers $n$, $n ^ {3}- n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ is even for every natural number $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ is even for all natural numbers $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop150. Let $n \\in N$. Then $n ^ {3}- n$ is even.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Soit $n$ une instance de nombres naturels. Alors nous pouvons démontrer que la différence de la puissance de $n$ et de $3$ et de $n$ est paire.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Pour toutes les instances $n$ de nombres naturels, nous pouvons démontrer que la différence de la puissance de $n$ et de $3$ et de $n$ est paire.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Nous pouvons démontrer que la différence de la puissance de $n$ et de $3$ et de $n$ est paire pour chaque instance $n$ de nombres naturels.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Nous pouvons démontrer que la différence de la puissance de $n$ et de $3$ et de $n$ est paire pour toutes les instances $n$ de nombres naturels.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Soit $n$ un nombre naturel. Alors la différence de la puissance de $n$ et de $3$ et de $n$ est paire.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Pour tous les nombres naturels $n$, la différence de la puissance de $n$ et de $3$ et de $n$ est paire.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. La différence de la puissance de $n$ et de $3$ et de $n$ est paire pour chaque nombre naturel $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. La différence de la puissance de $n$ et de $3$ et de $n$ est paire pour tous les nombres naturels $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Soit $n \\in N$. Alors la différence de la puissance de $n$ et de $3$ et de $n$ est paire.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Soit $n$ un nombre naturel. Alors $n ^ {3}- n$ est pair.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Pour tous les nombres naturels $n$, $n ^ {3}- n$ est pair.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ est pair pour chaque nombre naturel $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ est pair pour tous les nombres naturels $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop150. Soit $n \\in N$. Alors $n ^ {3}- n$ est pair.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Låt $n$ vara en instans av naturliga tal. Då kan vi bevisa att skillnaden mellan potensen av $n$ och $3$ och $n$ är jämn.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. För alla instanser $n$ av naturliga tal, kan vi bevisa att skillnaden mellan potensen av $n$ och $3$ och $n$ är jämn.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Vi kan bevisa att skillnaden mellan potensen av $n$ och $3$ och $n$ är jämn för varje instans $n$ av naturliga tal.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Vi kan bevisa att skillnaden mellan potensen av $n$ och $3$ och $n$ är jämn för alla instanser $n$ av naturliga tal.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Låt $n$ vara ett naturligt tal. Då är skillnaden mellan potensen av $n$ och $3$ och $n$ jämn.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. För alla naturliga tal $n$, är skillnaden mellan potensen av $n$ och $3$ och $n$ jämn.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Skillnaden mellan potensen av $n$ och $3$ och $n$ är jämn för varje naturligt tal $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Skillnaden mellan potensen av $n$ och $3$ och $n$ är jämn för alla naturliga tal $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Låt $n \\in N$. Då är skillnaden mellan potensen av $n$ och $3$ och $n$ jämn.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Låt $n$ vara ett naturligt tal. Då är $n ^ {3}- n$ jämnt.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. För alla naturliga tal $n$, är $n ^ {3}- n$ jämnt.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ är jämnt för varje naturligt tal $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. $n ^ {3}- n$ är jämnt för alla naturliga tal $n$.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop150. Låt $n \\in N$. Då är $n ^ {3}- n$ jämnt.",
    "output": "postulate prop150 : (n : Nat) -> even (minus (pow n 3) n)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. We can prove that if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all instances $a$ and $b$ of integers, we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. We can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all instances $a$ and $b$ of integers.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be instances of integers. Then we can prove that $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. If $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for the sum of $a$ and $b$ and the product of $a$ and $b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ is even and $b$ is even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. If $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. For all integers $a$ and $b$, $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even for all integers $a$ and $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a$ and $b$ be integers. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then if $same_parity$ holds for $a + b$ and $a b$, then $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop160. Let $a , b \\in Z$. Then $same_parity$ holds for $a + b$ and $a b$, only if $a$ and $b$ are even.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des instances d'entiers. Alors nous pouvons démontrer que si $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour toutes les instances $a$ et $b$ d'entiers, nous pouvons démontrer que si $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Nous pouvons démontrer que si $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$, alors $a$ est pair et $b$ est pair pour toutes les instances $a$ et $b$ d'entiers.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour toutes les instances $a$ et $b$ d'entiers, nous pouvons démontrer que $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Nous pouvons démontrer que $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$ seulement si $a$ est pair et $b$ est pair pour toutes les instances $a$ et $b$ d'entiers.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des instances d'entiers. Alors nous pouvons démontrer que $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des entiers. Alors si $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour tous les entiers $a$ et $b$, si $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Si $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$, alors $a$ est pair et $b$ est pair pour tous les entiers $a$ et $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour tous les entiers $a$ et $b$, $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$ seulement si $a$ est pair et $b$ est pair pour tous les entiers $a$ et $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des entiers. Alors $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a , b \\in Z$. Alors si $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a , b \\in Z$. Alors $same_parity$ tient pour la somme de $a$ et de $b$ et le produit de $a$ et de $b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des entiers. Alors si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour tous les entiers $a$ et $b$, si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ est pair et $b$ est pair pour tous les entiers $a$ et $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour tous les entiers $a$ et $b$, $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ est pair et $b$ est pair pour tous les entiers $a$ et $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des entiers. Alors $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a , b \\in Z$. Alors si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a , b \\in Z$. Alors $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ est pair et $b$ est pair.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des entiers. Alors si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ et $b$ sont pairs.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour tous les entiers $a$ et $b$, si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ et $b$ sont pairs.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ et $b$ sont pairs pour tous les entiers $a$ et $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Pour tous les entiers $a$ et $b$, $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ et $b$ sont pairs.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ et $b$ sont pairs pour tous les entiers $a$ et $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a$ et $b$ des entiers. Alors $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ et $b$ sont pairs.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a , b \\in Z$. Alors si $same_parity$ tient pour $a + b$ et $a b$, alors $a$ et $b$ sont pairs.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop160. Soient $a , b \\in Z$. Alors $same_parity$ tient pour $a + b$ et $a b$ seulement si $a$ et $b$ sont pairs.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara instanser av heltal. Då kan vi bevisa att om $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla instanser $a$ och $b$ av heltal, kan vi bevisa att om $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Vi kan bevisa att om $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, så är $a$ jämnt och $b$ är jämnt för alla instanser $a$ och $b$ av heltal.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla instanser $a$ och $b$ av heltal, kan vi bevisa att $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Vi kan bevisa att $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, endast om $a$ är jämnt och $b$ är jämnt för alla instanser $a$ och $b$ av heltal.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara instanser av heltal. Då kan vi bevisa att $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara heltal. Då om $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla heltal $a$ och $b$, om $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Om $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, så är $a$ jämnt och $b$ är jämnt för alla heltal $a$ och $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla heltal $a$ och $b$, håller $same_parity$ för summan av $a$ och $b$ och produkten av $a$ och $b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, endast om $a$ är jämnt och $b$ är jämnt för alla heltal $a$ och $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara heltal. Då håller $same_parity$ för summan av $a$ och $b$ och produkten av $a$ och $b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a , b \\in Z$. Då om $same_parity$ håller för summan av $a$ och $b$ och produkten av $a$ och $b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a , b \\in Z$. Då håller $same_parity$ för summan av $a$ och $b$ och produkten av $a$ och $b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara heltal. Då om $same_parity$ håller för $a + b$ och $a b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla heltal $a$ och $b$, om $same_parity$ håller för $a + b$ och $a b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Om $same_parity$ håller för $a + b$ och $a b$, så är $a$ jämnt och $b$ är jämnt för alla heltal $a$ och $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla heltal $a$ och $b$, håller $same_parity$ för $a + b$ och $a b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. $same_parity$ håller för $a + b$ och $a b$, endast om $a$ är jämnt och $b$ är jämnt för alla heltal $a$ och $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara heltal. Då håller $same_parity$ för $a + b$ och $a b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a , b \\in Z$. Då om $same_parity$ håller för $a + b$ och $a b$, så är $a$ jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a , b \\in Z$. Då håller $same_parity$ för $a + b$ och $a b$, endast om $a$ är jämnt och $b$ är jämnt.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara heltal. Då om $same_parity$ håller för $a + b$ och $a b$, så är $a$ och $b$ jämna.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla heltal $a$ och $b$, om $same_parity$ håller för $a + b$ och $a b$, så är $a$ och $b$ jämna.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Om $same_parity$ håller för $a + b$ och $a b$, så är $a$ och $b$ jämna för alla heltal $a$ och $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. För alla heltal $a$ och $b$, håller $same_parity$ för $a + b$ och $a b$, endast om $a$ och $b$ är jämna.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. $same_parity$ håller för $a + b$ och $a b$, endast om $a$ och $b$ är jämna för alla heltal $a$ och $b$.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a$ och $b$ vara heltal. Då håller $same_parity$ för $a + b$ och $a b$, endast om $a$ och $b$ är jämna.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a , b \\in Z$. Då om $same_parity$ håller för $a + b$ och $a b$, så är $a$ och $b$ jämna.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop160. Låt $a , b \\in Z$. Då håller $same_parity$ för $a + b$ och $a b$, endast om $a$ och $b$ är jämna.",
    "output": "postulate prop160 : (a : Int) -> (b : Int) -> if (same8parity (plus a b) (times a b)) (and (even a) (even b))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. We can prove that for all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. We can prove that it is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. For all natural numbers $x$, it is not the case that $x$ is even and $x$ is odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for every natural number $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. It is not the case that $x$ is even and $x$ is odd for all natural numbers $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. For all natural numbers $x$, $x$ is not even and odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. $x$ is not even and odd for every natural number $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. $x$ is not even and odd for all natural numbers $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. No natural number $x$ is even and odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop170. No natural number is even and odd.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Nous pouvons démontrer que pour tous les nombres naturels $x$, il n'est pas le cas que $x$ soit pair et $x$ soit impair.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Nous pouvons démontrer qu'il n'est pas le cas que $x$ soit pair et $x$ soit impair pour chaque nombre naturel $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Nous pouvons démontrer qu'il n'est pas le cas que $x$ soit pair et $x$ soit impair pour tous les nombres naturels $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Pour tous les nombres naturels $x$, il n'est pas le cas que $x$ soit pair et $x$ soit impair.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Il n'est pas le cas que $x$ soit pair et $x$ soit impair pour chaque nombre naturel $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Il n'est pas le cas que $x$ soit pair et $x$ soit impair pour tous les nombres naturels $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Pour tous les nombres naturels $x$, $x$ n'est pas pair et impair.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. $x$ n'est pas pair et impair pour chaque nombre naturel $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. $x$ n'est pas pair et impair pour tous les nombres naturels $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Aucun nombre naturel $x$ n'est pair et impair.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop170. Aucun nombre naturel n'est pair et impair.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. Vi kan bevisa att för alla naturliga tal $x$, är det inte fallet att $x$ är jämnt och $x$ är udda.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. Vi kan bevisa att det inte är fallet att $x$ är jämnt och $x$ är udda för varje naturligt tal $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. Vi kan bevisa att det inte är fallet att $x$ är jämnt och $x$ är udda för alla naturliga tal $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. För alla naturliga tal $x$, är det inte fallet att $x$ är jämnt och $x$ är udda.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. Det är inte fallet att $x$ är jämnt och $x$ är udda för varje naturligt tal $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. Det är inte fallet att $x$ är jämnt och $x$ är udda för alla naturliga tal $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. För alla naturliga tal $x$, är $x$ inte jämnt och udda.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. $x$ är inte jämnt och udda för varje naturligt tal $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. $x$ är inte jämnt och udda för alla naturliga tal $x$.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. Inget naturligt tal $x$ är jämnt och udda.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop170. Inget naturligt tal är jämnt och udda.",
    "output": "postulate prop170 : all Nat (\\ x -> not (and (even x) (odd x)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. We can prove that the union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. For all sets $A$ and $B$, the union of $A$ and $B$ is equal to the union of $B$ and $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. The union of $A$ and $B$ is equal to the union of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. Let $A$ and $B$ be sets. Then $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. For all sets $A$ and $B$, $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommUnion. $A \\cup B = B \\cup A$ for all sets $A$ and $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'union de $B$ et de $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'union de $B$ et de $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. Nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'union de $B$ et de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. Soient $A$ et $B$ des ensembles. Alors l'union de $A$ et de $B$ est égale à l'union de $B$ et de $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. Pour tous les ensembles $A$ et $B$, l'union de $A$ et de $B$ est égale à l'union de $B$ et de $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. L'union de $A$ et de $B$ est égale à l'union de $B$ et de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. Soient $A$ et $B$ des ensembles. Alors $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. Pour tous les ensembles $A$ et $B$, $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommUnion. $A \\cup B = B \\cup A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att unionen av $A$ och $B$ är lika med unionen av $B$ och $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. För alla mängder $A$ och $B$, kan vi bevisa att unionen av $A$ och $B$ är lika med unionen av $B$ och $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. Vi kan bevisa att unionen av $A$ och $B$ är lika med unionen av $B$ och $A$ för alla mängder $A$ och $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. Låt $A$ och $B$ vara mängder. Då är unionen av $A$ och $B$ lika med unionen av $B$ och $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. För alla mängder $A$ och $B$, är unionen av $A$ och $B$ lika med unionen av $B$ och $A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. Unionen av $A$ och $B$ är lika med unionen av $B$ och $A$ för alla mängder $A$ och $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. Låt $A$ och $B$ vara mängder. Då $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. För alla mängder $A$ och $B$, $A \\cup B = B \\cup A$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommUnion. $A \\cup B = B \\cup A$ för alla mängder $A$ och $B$.",
    "output": "postulate commUnion : (A : Set) -> (B : Set) -> equalset (union A B) (union B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. We can prove that the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. The intersection of $A$ and $B$ is equal to the intersection of $B$ and $A$ for all sets $A$ and $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. Let $A$ and $B$ be sets. Then $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. For all sets $A$ and $B$, $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "CommIntersection. $A \\cap B = B \\cap A$ for all sets $A$ and $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'intersection de $B$ et de $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'intersection de $B$ et de $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. Nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'intersection de $B$ et de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. Soient $A$ et $B$ des ensembles. Alors l'intersection de $A$ et de $B$ est égale à l'intersection de $B$ et de $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. Pour tous les ensembles $A$ et $B$, l'intersection de $A$ et de $B$ est égale à l'intersection de $B$ et de $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. L'intersection de $A$ et de $B$ est égale à l'intersection de $B$ et de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. Soient $A$ et $B$ des ensembles. Alors $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. Pour tous les ensembles $A$ et $B$, $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "CommIntersection. $A \\cap B = B \\cap A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att snittet av $A$ och $B$ är lika med snittet av $B$ och $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. För alla mängder $A$ och $B$, kan vi bevisa att snittet av $A$ och $B$ är lika med snittet av $B$ och $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. Vi kan bevisa att snittet av $A$ och $B$ är lika med snittet av $B$ och $A$ för alla mängder $A$ och $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. Låt $A$ och $B$ vara mängder. Då är snittet av $A$ och $B$ lika med snittet av $B$ och $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. För alla mängder $A$ och $B$, är snittet av $A$ och $B$ lika med snittet av $B$ och $A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. Snittet av $A$ och $B$ är lika med snittet av $B$ och $A$ för alla mängder $A$ och $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. Låt $A$ och $B$ vara mängder. Då $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. För alla mängder $A$ och $B$, $A \\cap B = B \\cap A$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "CommIntersection. $A \\cap B = B \\cap A$ för alla mängder $A$ och $B$.",
    "output": "postulate commIntersection : (A : Set) -> (B : Set) -> equalset (intersection A B) (intersection B A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, we can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. We can prove that the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, the union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. The union of the union of $A$ and $B$ and $C$ is equal to the union of $A$ and the union of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. Let $A$, $B$ and $C$ be sets. Then $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. For all sets $A$, $B$ and $C$, $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocUnion. $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. Soient $A$, $B$ et $C$ des ensembles. Alors nous pouvons démontrer que l'union de l'union de $A$ et de $B$ et de $C$ est égale à l'union de $A$ et de l'union de $B$ et de $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. Pour tous les ensembles $A$, $B$ et $C$, nous pouvons démontrer que l'union de l'union de $A$ et de $B$ et de $C$ est égale à l'union de $A$ et de l'union de $B$ et de $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. Nous pouvons démontrer que l'union de l'union de $A$ et de $B$ et de $C$ est égale à l'union de $A$ et de l'union de $B$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. Soient $A$, $B$ et $C$ des ensembles. Alors l'union de l'union de $A$ et de $B$ et de $C$ est égale à l'union de $A$ et de l'union de $B$ et de $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. Pour tous les ensembles $A$, $B$ et $C$, l'union de l'union de $A$ et de $B$ et de $C$ est égale à l'union de $A$ et de l'union de $B$ et de $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. L'union de l'union de $A$ et de $B$ et de $C$ est égale à l'union de $A$ et de l'union de $B$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. Soient $A$, $B$ et $C$ des ensembles. Alors $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. Pour tous les ensembles $A$, $B$ et $C$, $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocUnion. $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. Låt $A$, $B$ och $C$ vara mängder. Då kan vi bevisa att unionen av unionen av $A$ och $B$ och $C$ är lika med unionen av $A$ och unionen av $B$ och $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. För alla mängder $A$, $B$ och $C$, kan vi bevisa att unionen av unionen av $A$ och $B$ och $C$ är lika med unionen av $A$ och unionen av $B$ och $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. Vi kan bevisa att unionen av unionen av $A$ och $B$ och $C$ är lika med unionen av $A$ och unionen av $B$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. Låt $A$, $B$ och $C$ vara mängder. Då är unionen av unionen av $A$ och $B$ och $C$ lika med unionen av $A$ och unionen av $B$ och $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. För alla mängder $A$, $B$ och $C$, är unionen av unionen av $A$ och $B$ och $C$ lika med unionen av $A$ och unionen av $B$ och $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. Unionen av unionen av $A$ och $B$ och $C$ är lika med unionen av $A$ och unionen av $B$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. Låt $A$, $B$ och $C$ vara mängder. Då $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. För alla mängder $A$, $B$ och $C$, $(A \\cup B)\\cup C = A \\cup (B \\cup C)$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocUnion. $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate assocUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union (union A B) C) (union A (union B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. We can prove that the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, the intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. The intersection of the intersection of $A$ and $B$ and $C$ is equal to the intersection of $A$ and the intersection of $B$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. Let $A$, $B$ and $C$ be sets. Then $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. For all sets $A$, $B$ and $C$, $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AssocIntersection. $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. Soient $A$, $B$ et $C$ des ensembles. Alors nous pouvons démontrer que l'intersection de l'intersection de $A$ et de $B$ et de $C$ est égale à l'intersection de $A$ et de l'intersection de $B$ et de $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. Pour tous les ensembles $A$, $B$ et $C$, nous pouvons démontrer que l'intersection de l'intersection de $A$ et de $B$ et de $C$ est égale à l'intersection de $A$ et de l'intersection de $B$ et de $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. Nous pouvons démontrer que l'intersection de l'intersection de $A$ et de $B$ et de $C$ est égale à l'intersection de $A$ et de l'intersection de $B$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. Soient $A$, $B$ et $C$ des ensembles. Alors l'intersection de l'intersection de $A$ et de $B$ et de $C$ est égale à l'intersection de $A$ et de l'intersection de $B$ et de $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. Pour tous les ensembles $A$, $B$ et $C$, l'intersection de l'intersection de $A$ et de $B$ et de $C$ est égale à l'intersection de $A$ et de l'intersection de $B$ et de $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. L'intersection de l'intersection de $A$ et de $B$ et de $C$ est égale à l'intersection de $A$ et de l'intersection de $B$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. Soient $A$, $B$ et $C$ des ensembles. Alors $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. Pour tous les ensembles $A$, $B$ et $C$, $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AssocIntersection. $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. Låt $A$, $B$ och $C$ vara mängder. Då kan vi bevisa att snittet av snittet av $A$ och $B$ och $C$ är lika med snittet av $A$ och snittet av $B$ och $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. För alla mängder $A$, $B$ och $C$, kan vi bevisa att snittet av snittet av $A$ och $B$ och $C$ är lika med snittet av $A$ och snittet av $B$ och $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. Vi kan bevisa att snittet av snittet av $A$ och $B$ och $C$ är lika med snittet av $A$ och snittet av $B$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. Låt $A$, $B$ och $C$ vara mängder. Då är snittet av snittet av $A$ och $B$ och $C$ lika med snittet av $A$ och snittet av $B$ och $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. För alla mängder $A$, $B$ och $C$, är snittet av snittet av $A$ och $B$ och $C$ lika med snittet av $A$ och snittet av $B$ och $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. Snittet av snittet av $A$ och $B$ och $C$ är lika med snittet av $A$ och snittet av $B$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. Låt $A$, $B$ och $C$ vara mängder. Då $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. För alla mängder $A$, $B$ och $C$, $(A \\cap B)\\cap C = A \\cap (B \\cap C)$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AssocIntersection. $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate assocIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection (intersection A B) C) (intersection A (intersection B C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, we can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. We can prove that the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, the union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. The union of $A$ and the intersection of $B$ and $C$ is equal to the intersection of the union of $A$ and $B$ and the union of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. Let $A$, $B$ and $C$ be sets. Then $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. For all sets $A$, $B$ and $C$, $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrUnion. $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. Soient $A$, $B$ et $C$ des ensembles. Alors nous pouvons démontrer que l'union de $A$ et de l'intersection de $B$ et de $C$ est égale à l'intersection de l'union de $A$ et de $B$ et de l'union de $A$ et de $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. Pour tous les ensembles $A$, $B$ et $C$, nous pouvons démontrer que l'union de $A$ et de l'intersection de $B$ et de $C$ est égale à l'intersection de l'union de $A$ et de $B$ et de l'union de $A$ et de $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. Nous pouvons démontrer que l'union de $A$ et de l'intersection de $B$ et de $C$ est égale à l'intersection de l'union de $A$ et de $B$ et de l'union de $A$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. Soient $A$, $B$ et $C$ des ensembles. Alors l'union de $A$ et de l'intersection de $B$ et de $C$ est égale à l'intersection de l'union de $A$ et de $B$ et de l'union de $A$ et de $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. Pour tous les ensembles $A$, $B$ et $C$, l'union de $A$ et de l'intersection de $B$ et de $C$ est égale à l'intersection de l'union de $A$ et de $B$ et de l'union de $A$ et de $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. L'union de $A$ et de l'intersection de $B$ et de $C$ est égale à l'intersection de l'union de $A$ et de $B$ et de l'union de $A$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. Soient $A$, $B$ et $C$ des ensembles. Alors $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. Pour tous les ensembles $A$, $B$ et $C$, $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrUnion. $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. Låt $A$, $B$ och $C$ vara mängder. Då kan vi bevisa att unionen av $A$ och snittet av $B$ och $C$ är lika med snittet av unionen av $A$ och $B$ och unionen av $A$ och $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. För alla mängder $A$, $B$ och $C$, kan vi bevisa att unionen av $A$ och snittet av $B$ och $C$ är lika med snittet av unionen av $A$ och $B$ och unionen av $A$ och $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. Vi kan bevisa att unionen av $A$ och snittet av $B$ och $C$ är lika med snittet av unionen av $A$ och $B$ och unionen av $A$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. Låt $A$, $B$ och $C$ vara mängder. Då är unionen av $A$ och snittet av $B$ och $C$ lika med snittet av unionen av $A$ och $B$ och unionen av $A$ och $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. För alla mängder $A$, $B$ och $C$, är unionen av $A$ och snittet av $B$ och $C$ lika med snittet av unionen av $A$ och $B$ och unionen av $A$ och $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. Unionen av $A$ och snittet av $B$ och $C$ är lika med snittet av unionen av $A$ och $B$ och unionen av $A$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. Låt $A$, $B$ och $C$ vara mängder. Då $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. För alla mängder $A$, $B$ och $C$, $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrUnion. $A \\cup (B \\cap C)= (A \\cup B)\\cap (A \\cup C)$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate distrUnion : (A : Set) -> (B : Set) -> (C : Set) -> equalset (union A (intersection B C)) (intersection (union A B) (union A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, we can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. We can prove that the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, the intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. The intersection of $A$ and the union of $B$ and $C$ is equal to the union of the intersection of $A$ and $B$ and the intersection of $A$ and $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. Let $A$, $B$ and $C$ be sets. Then $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. For all sets $A$, $B$ and $C$, $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DistrIntersection. $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$ for all sets $A$, $B$ and $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. Soient $A$, $B$ et $C$ des ensembles. Alors nous pouvons démontrer que l'intersection de $A$ et de l'union de $B$ et de $C$ est égale à l'union de l'intersection de $A$ et de $B$ et de l'intersection de $A$ et de $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. Pour tous les ensembles $A$, $B$ et $C$, nous pouvons démontrer que l'intersection de $A$ et de l'union de $B$ et de $C$ est égale à l'union de l'intersection de $A$ et de $B$ et de l'intersection de $A$ et de $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. Nous pouvons démontrer que l'intersection de $A$ et de l'union de $B$ et de $C$ est égale à l'union de l'intersection de $A$ et de $B$ et de l'intersection de $A$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. Soient $A$, $B$ et $C$ des ensembles. Alors l'intersection de $A$ et de l'union de $B$ et de $C$ est égale à l'union de l'intersection de $A$ et de $B$ et de l'intersection de $A$ et de $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. Pour tous les ensembles $A$, $B$ et $C$, l'intersection de $A$ et de l'union de $B$ et de $C$ est égale à l'union de l'intersection de $A$ et de $B$ et de l'intersection de $A$ et de $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. L'intersection de $A$ et de l'union de $B$ et de $C$ est égale à l'union de l'intersection de $A$ et de $B$ et de l'intersection de $A$ et de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. Soient $A$, $B$ et $C$ des ensembles. Alors $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. Pour tous les ensembles $A$, $B$ et $C$, $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DistrIntersection. $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. Låt $A$, $B$ och $C$ vara mängder. Då kan vi bevisa att snittet av $A$ och unionen av $B$ och $C$ är lika med unionen av snittet av $A$ och $B$ och snittet av $A$ och $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. För alla mängder $A$, $B$ och $C$, kan vi bevisa att snittet av $A$ och unionen av $B$ och $C$ är lika med unionen av snittet av $A$ och $B$ och snittet av $A$ och $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. Vi kan bevisa att snittet av $A$ och unionen av $B$ och $C$ är lika med unionen av snittet av $A$ och $B$ och snittet av $A$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. Låt $A$, $B$ och $C$ vara mängder. Då är snittet av $A$ och unionen av $B$ och $C$ lika med unionen av snittet av $A$ och $B$ och snittet av $A$ och $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. För alla mängder $A$, $B$ och $C$, är snittet av $A$ och unionen av $B$ och $C$ lika med unionen av snittet av $A$ och $B$ och snittet av $A$ och $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. Snittet av $A$ och unionen av $B$ och $C$ är lika med unionen av snittet av $A$ och $B$ och snittet av $A$ och $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. Låt $A$, $B$ och $C$ vara mängder. Då $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. För alla mängder $A$, $B$ och $C$, $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DistrIntersection. $A \\cap (B \\cup C)= (A \\cap B)\\cup (A \\cap C)$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate distrIntersection : (A : Set) -> (B : Set) -> (C : Set) -> equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. Let $A$ be a set. Then we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. For all sets $A$, we can prove that the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. We can prove that the union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. Let $A$ be a set. Then the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. For all sets $A$, the union of $A$ and the empty set is equal to $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for every set $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. The union of $A$ and the empty set is equal to $A$ for all sets $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. Let $A$ be a set. Then $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. For all sets $A$, $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for every set $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ for all sets $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'union de $A$ et de l'ensemble vide est égale à $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Pour tous les ensembles $A$, nous pouvons démontrer que l'union de $A$ et de l'ensemble vide est égale à $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Nous pouvons démontrer que l'union de $A$ et de l'ensemble vide est égale à $A$ pour chaque ensemble $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Nous pouvons démontrer que l'union de $A$ et de l'ensemble vide est égale à $A$ pour tous les ensembles $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Soit $A$ un ensemble. Alors l'union de $A$ et de l'ensemble vide est égale à $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Pour tous les ensembles $A$, l'union de $A$ et de l'ensemble vide est égale à $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. L'union de $A$ et de l'ensemble vide est égale à $A$ pour chaque ensemble $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. L'union de $A$ et de l'ensemble vide est égale à $A$ pour tous les ensembles $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Soit $A$ un ensemble. Alors $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. Pour tous les ensembles $A$, $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ pour chaque ensemble $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ pour tous les ensembles $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. Låt $A$ vara en mängd. Då kan vi bevisa att unionen av $A$ och den tomma mängden är lika med $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. För alla mängder $A$, kan vi bevisa att unionen av $A$ och den tomma mängden är lika med $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. Vi kan bevisa att unionen av $A$ och den tomma mängden är lika med $A$ för varje mängd $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. Vi kan bevisa att unionen av $A$ och den tomma mängden är lika med $A$ för alla mängder $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. Låt $A$ vara en mängd. Då är unionen av $A$ och den tomma mängden lika med $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. För alla mängder $A$, är unionen av $A$ och den tomma mängden lika med $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. Unionen av $A$ och den tomma mängden är lika med $A$ för varje mängd $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. Unionen av $A$ och den tomma mängden är lika med $A$ för alla mängder $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. Låt $A$ vara en mängd. Då $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. För alla mängder $A$, $A \\cup \\emptyset = A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ för varje mängd $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UnionEmpty. $A \\cup \\emptyset = A$ för alla mängder $A$.",
    "output": "postulate unionEmpty : (A : Set) -> equalset (union A emptyset) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Pour tous les ensembles $A$, nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour chaque ensemble $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour tous les ensembles $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Soit $A$ un ensemble. Alors l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Pour tous les ensembles $A$, l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. L'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour chaque ensemble $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. L'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour tous les ensembles $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Soit $A$ un ensemble. Alors $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. Pour tous les ensembles $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ pour chaque ensemble $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ pour tous les ensembles $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. Låt $A$ vara en mängd. Då kan vi bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. För alla mängder $A$, kan vi bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. Vi kan bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden för varje mängd $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. Vi kan bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden för alla mängder $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. Låt $A$ vara en mängd. Då är snittet av $A$ och den tomma mängden lika med den tomma mängden.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. För alla mängder $A$, är snittet av $A$ och den tomma mängden lika med den tomma mängden.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. Snittet av $A$ och den tomma mängden är lika med den tomma mängden för varje mängd $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. Snittet av $A$ och den tomma mängden är lika med den tomma mängden för alla mängder $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. Låt $A$ vara en mängd. Då $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. För alla mängder $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ för varje mängd $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersEmpty. $A \\cap \\emptyset = \\emptyset$ för alla mängder $A$.",
    "output": "postulate intersEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. Let $A$ be a set. Then we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. For all sets $A$, we can prove that the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. We can prove that the union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. Let $A$ be a set. Then the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. For all sets $A$, the union of $A$ and the complement of $A$ is equal to the universal set.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for every set $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. The union of $A$ and the complement of $A$ is equal to the universal set for all sets $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. Let $A$ be a set. Then $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. For all sets $A$, $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for every set $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ for all sets $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'union de $A$ et du complément de $A$ est égale à l'ensemble universel.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Pour tous les ensembles $A$, nous pouvons démontrer que l'union de $A$ et du complément de $A$ est égale à l'ensemble universel.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Nous pouvons démontrer que l'union de $A$ et du complément de $A$ est égale à l'ensemble universel pour chaque ensemble $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Nous pouvons démontrer que l'union de $A$ et du complément de $A$ est égale à l'ensemble universel pour tous les ensembles $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Soit $A$ un ensemble. Alors l'union de $A$ et du complément de $A$ est égale à l'ensemble universel.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Pour tous les ensembles $A$, l'union de $A$ et du complément de $A$ est égale à l'ensemble universel.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. L'union de $A$ et du complément de $A$ est égale à l'ensemble universel pour chaque ensemble $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. L'union de $A$ et du complément de $A$ est égale à l'ensemble universel pour tous les ensembles $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Soit $A$ un ensemble. Alors $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. Pour tous les ensembles $A$, $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ pour chaque ensemble $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ pour tous les ensembles $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. Låt $A$ vara en mängd. Då kan vi bevisa att unionen av $A$ och komplementet av $A$ är lika med den universella mängden.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. För alla mängder $A$, kan vi bevisa att unionen av $A$ och komplementet av $A$ är lika med den universella mängden.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. Vi kan bevisa att unionen av $A$ och komplementet av $A$ är lika med den universella mängden för varje mängd $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. Vi kan bevisa att unionen av $A$ och komplementet av $A$ är lika med den universella mängden för alla mängder $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. Låt $A$ vara en mängd. Då är unionen av $A$ och komplementet av $A$ lika med den universella mängden.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. För alla mängder $A$, är unionen av $A$ och komplementet av $A$ lika med den universella mängden.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. Unionen av $A$ och komplementet av $A$ är lika med den universella mängden för varje mängd $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. Unionen av $A$ och komplementet av $A$ är lika med den universella mängden för alla mängder $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. Låt $A$ vara en mängd. Då $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. För alla mängder $A$, $A \\cup {A }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ för varje mängd $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEnion. $A \\cup {A }^{\\complement} = \\mathbb{ U}$ för alla mängder $A$.",
    "output": "postulate complEnion : (A : Set) -> equalset (union A (complement A)) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. For all sets $A$, we can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. We can prove that the intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. Let $A$ be a set. Then the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. For all sets $A$, the intersection of $A$ and the complement of $A$ is equal to the empty set.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for every set $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. The intersection of $A$ and the complement of $A$ is equal to the empty set for all sets $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. Let $A$ be a set. Then $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. For all sets $A$, $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for every set $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ for all sets $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Pour tous les ensembles $A$, nous pouvons démontrer que l'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Nous pouvons démontrer que l'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide pour chaque ensemble $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Nous pouvons démontrer que l'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide pour tous les ensembles $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Soit $A$ un ensemble. Alors l'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Pour tous les ensembles $A$, l'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. L'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide pour chaque ensemble $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. L'intersection de $A$ et du complément de $A$ est égale à l'ensemble vide pour tous les ensembles $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Soit $A$ un ensemble. Alors $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. Pour tous les ensembles $A$, $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ pour chaque ensemble $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ pour tous les ensembles $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. Låt $A$ vara en mängd. Då kan vi bevisa att snittet av $A$ och komplementet av $A$ är lika med den tomma mängden.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. För alla mängder $A$, kan vi bevisa att snittet av $A$ och komplementet av $A$ är lika med den tomma mängden.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. Vi kan bevisa att snittet av $A$ och komplementet av $A$ är lika med den tomma mängden för varje mängd $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. Vi kan bevisa att snittet av $A$ och komplementet av $A$ är lika med den tomma mängden för alla mängder $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. Låt $A$ vara en mängd. Då är snittet av $A$ och komplementet av $A$ lika med den tomma mängden.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. För alla mängder $A$, är snittet av $A$ och komplementet av $A$ lika med den tomma mängden.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. Snittet av $A$ och komplementet av $A$ är lika med den tomma mängden för varje mängd $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. Snittet av $A$ och komplementet av $A$ är lika med den tomma mängden för alla mängder $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. Låt $A$ vara en mängd. Då $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. För alla mängder $A$, $A \\cap {A }^{\\complement} = \\emptyset$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ för varje mängd $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplIntersection. $A \\cap {A }^{\\complement} = \\emptyset$ för alla mängder $A$.",
    "output": "postulate complIntersection : (A : Set) -> equalset (intersection A (complement A)) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. Let $A$ be a set. Then we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. For all sets $A$, we can prove that the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. We can prove that the union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. Let $A$ be a set. Then the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. For all sets $A$, the union of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. The union of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. Let $A$ be a set. Then $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. For all sets $A$, $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ for every set $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ for all sets $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'union de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Pour tous les ensembles $A$, nous pouvons démontrer que l'union de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Nous pouvons démontrer que l'union de $A$ et de $A$ est égale à $A$ pour chaque ensemble $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Nous pouvons démontrer que l'union de $A$ et de $A$ est égale à $A$ pour tous les ensembles $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Soit $A$ un ensemble. Alors l'union de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Pour tous les ensembles $A$, l'union de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. L'union de $A$ et de $A$ est égale à $A$ pour chaque ensemble $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. L'union de $A$ et de $A$ est égale à $A$ pour tous les ensembles $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Soit $A$ un ensemble. Alors $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. Pour tous les ensembles $A$, $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ pour chaque ensemble $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ pour tous les ensembles $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. Låt $A$ vara en mängd. Då kan vi bevisa att unionen av $A$ och $A$ är lika med $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. För alla mängder $A$, kan vi bevisa att unionen av $A$ och $A$ är lika med $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. Vi kan bevisa att unionen av $A$ och $A$ är lika med $A$ för varje mängd $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. Vi kan bevisa att unionen av $A$ och $A$ är lika med $A$ för alla mängder $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. Låt $A$ vara en mängd. Då är unionen av $A$ och $A$ lika med $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. För alla mängder $A$, är unionen av $A$ och $A$ lika med $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. Unionen av $A$ och $A$ är lika med $A$ för varje mängd $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. Unionen av $A$ och $A$ är lika med $A$ för alla mängder $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. Låt $A$ vara en mängd. Då $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. För alla mängder $A$, $A \\cup A = A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ för varje mängd $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemUnion. $A \\cup A = A$ för alla mängder $A$.",
    "output": "postulate idemUnion : (A : Set) -> equalset (union A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. Let $A$ be a set. Then we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. For all sets $A$, we can prove that the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. We can prove that the intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. Let $A$ be a set. Then the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. For all sets $A$, the intersection of $A$ and $A$ is equal to $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for every set $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. The intersection of $A$ and $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. Let $A$ be a set. Then $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. For all sets $A$, $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ for every set $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ for all sets $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'intersection de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Pour tous les ensembles $A$, nous pouvons démontrer que l'intersection de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Nous pouvons démontrer que l'intersection de $A$ et de $A$ est égale à $A$ pour chaque ensemble $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Nous pouvons démontrer que l'intersection de $A$ et de $A$ est égale à $A$ pour tous les ensembles $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Soit $A$ un ensemble. Alors l'intersection de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Pour tous les ensembles $A$, l'intersection de $A$ et de $A$ est égale à $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. L'intersection de $A$ et de $A$ est égale à $A$ pour chaque ensemble $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. L'intersection de $A$ et de $A$ est égale à $A$ pour tous les ensembles $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Soit $A$ un ensemble. Alors $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. Pour tous les ensembles $A$, $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ pour chaque ensemble $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ pour tous les ensembles $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. Låt $A$ vara en mängd. Då kan vi bevisa att snittet av $A$ och $A$ är lika med $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. För alla mängder $A$, kan vi bevisa att snittet av $A$ och $A$ är lika med $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. Vi kan bevisa att snittet av $A$ och $A$ är lika med $A$ för varje mängd $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. Vi kan bevisa att snittet av $A$ och $A$ är lika med $A$ för alla mängder $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. Låt $A$ vara en mängd. Då är snittet av $A$ och $A$ lika med $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. För alla mängder $A$, är snittet av $A$ och $A$ lika med $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. Snittet av $A$ och $A$ är lika med $A$ för varje mängd $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. Snittet av $A$ och $A$ är lika med $A$ för alla mängder $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. Låt $A$ vara en mängd. Då $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. För alla mängder $A$, $A \\cap A = A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ för varje mängd $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IdemIntersection. $A \\cap A = A$ för alla mängder $A$.",
    "output": "postulate idemIntersection : (A : Set) -> equalset (intersection A A) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. Let $A$ be a set. Then we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. For all sets $A$, we can prove that the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. We can prove that the union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. Let $A$ be a set. Then the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. For all sets $A$, the union of $A$ and the universal set is equal to the universal set.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for every set $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. The union of $A$ and the universal set is equal to the universal set for all sets $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. Let $A$ be a set. Then $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. For all sets $A$, $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for every set $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ for all sets $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'union de $A$ et de l'ensemble universel est égale à l'ensemble universel.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Pour tous les ensembles $A$, nous pouvons démontrer que l'union de $A$ et de l'ensemble universel est égale à l'ensemble universel.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Nous pouvons démontrer que l'union de $A$ et de l'ensemble universel est égale à l'ensemble universel pour chaque ensemble $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Nous pouvons démontrer que l'union de $A$ et de l'ensemble universel est égale à l'ensemble universel pour tous les ensembles $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Soit $A$ un ensemble. Alors l'union de $A$ et de l'ensemble universel est égale à l'ensemble universel.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Pour tous les ensembles $A$, l'union de $A$ et de l'ensemble universel est égale à l'ensemble universel.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. L'union de $A$ et de l'ensemble universel est égale à l'ensemble universel pour chaque ensemble $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. L'union de $A$ et de l'ensemble universel est égale à l'ensemble universel pour tous les ensembles $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Soit $A$ un ensemble. Alors $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. Pour tous les ensembles $A$, $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ pour chaque ensemble $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ pour tous les ensembles $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. Låt $A$ vara en mängd. Då kan vi bevisa att unionen av $A$ och den universella mängden är lika med den universella mängden.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. För alla mängder $A$, kan vi bevisa att unionen av $A$ och den universella mängden är lika med den universella mängden.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. Vi kan bevisa att unionen av $A$ och den universella mängden är lika med den universella mängden för varje mängd $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. Vi kan bevisa att unionen av $A$ och den universella mängden är lika med den universella mängden för alla mängder $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. Låt $A$ vara en mängd. Då är unionen av $A$ och den universella mängden lika med den universella mängden.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. För alla mängder $A$, är unionen av $A$ och den universella mängden lika med den universella mängden.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. Unionen av $A$ och den universella mängden är lika med den universella mängden för varje mängd $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. Unionen av $A$ och den universella mängden är lika med den universella mängden för alla mängder $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. Låt $A$ vara en mängd. Då $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. För alla mängder $A$, $A \\cup \\mathbb{ U}= \\mathbb{ U}$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ för varje mängd $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominUniverse. $A \\cup \\mathbb{ U}= \\mathbb{ U}$ för alla mängder $A$.",
    "output": "postulate dominUniverse : (A : Set) -> equalset (union A universeset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. Let $A$ be a set. Then we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. For all sets $A$, we can prove that the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. We can prove that the intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. Let $A$ be a set. Then the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. For all sets $A$, the intersection of $A$ and the empty set is equal to the empty set.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for every set $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. The intersection of $A$ and the empty set is equal to the empty set for all sets $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. Let $A$ be a set. Then $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. For all sets $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for every set $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ for all sets $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Soit $A$ un ensemble. Alors nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Pour tous les ensembles $A$, nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour chaque ensemble $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Nous pouvons démontrer que l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour tous les ensembles $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Soit $A$ un ensemble. Alors l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Pour tous les ensembles $A$, l'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. L'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour chaque ensemble $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. L'intersection de $A$ et de l'ensemble vide est égale à l'ensemble vide pour tous les ensembles $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Soit $A$ un ensemble. Alors $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. Pour tous les ensembles $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ pour chaque ensemble $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ pour tous les ensembles $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. Låt $A$ vara en mängd. Då kan vi bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. För alla mängder $A$, kan vi bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. Vi kan bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden för varje mängd $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. Vi kan bevisa att snittet av $A$ och den tomma mängden är lika med den tomma mängden för alla mängder $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. Låt $A$ vara en mängd. Då är snittet av $A$ och den tomma mängden lika med den tomma mängden.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. För alla mängder $A$, är snittet av $A$ och den tomma mängden lika med den tomma mängden.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. Snittet av $A$ och den tomma mängden är lika med den tomma mängden för varje mängd $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. Snittet av $A$ och den tomma mängden är lika med den tomma mängden för alla mängder $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. Låt $A$ vara en mängd. Då $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. För alla mängder $A$, $A \\cap \\emptyset = \\emptyset$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ för varje mängd $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DominEmpty. $A \\cap \\emptyset = \\emptyset$ för alla mängder $A$.",
    "output": "postulate dominEmpty : (A : Set) -> equalset (intersection A emptyset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, we can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. We can prove that the union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, the union of $A$ and the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. The union of $A$ and the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. Let $A$ and $B$ be sets. Then $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. For all sets $A$ and $B$, $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbUnion. $A \\cup (A \\cap B)= A$ for all sets $A$ and $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que l'union de $A$ et de l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que l'union de $A$ et de l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. Nous pouvons démontrer que l'union de $A$ et de l'intersection de $A$ et de $B$ est égale à $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. Soient $A$ et $B$ des ensembles. Alors l'union de $A$ et de l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. Pour tous les ensembles $A$ et $B$, l'union de $A$ et de l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. L'union de $A$ et de l'intersection de $A$ et de $B$ est égale à $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. Soient $A$ et $B$ des ensembles. Alors $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. Pour tous les ensembles $A$ et $B$, $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbUnion. $A \\cup (A \\cap B)= A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att unionen av $A$ och snittet av $A$ och $B$ är lika med $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. För alla mängder $A$ och $B$, kan vi bevisa att unionen av $A$ och snittet av $A$ och $B$ är lika med $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. Vi kan bevisa att unionen av $A$ och snittet av $A$ och $B$ är lika med $A$ för alla mängder $A$ och $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. Låt $A$ och $B$ vara mängder. Då är unionen av $A$ och snittet av $A$ och $B$ lika med $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. För alla mängder $A$ och $B$, är unionen av $A$ och snittet av $A$ och $B$ lika med $A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. Unionen av $A$ och snittet av $A$ och $B$ är lika med $A$ för alla mängder $A$ och $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. Låt $A$ och $B$ vara mängder. Då $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. För alla mängder $A$ och $B$, $A \\cup (A \\cap B)= A$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbUnion. $A \\cup (A \\cap B)= A$ för alla mängder $A$ och $B$.",
    "output": "postulate absorbUnion : (A : Set) -> (B : Set) -> equalset (union A (intersection A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, we can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. We can prove that the intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, the intersection of $A$ and the union of $A$ and $B$ is equal to $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. The intersection of $A$ and the union of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. Let $A$ and $B$ be sets. Then $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. For all sets $A$ and $B$, $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AbsorbIntersection. $A \\cap (A \\cup B)= A$ for all sets $A$ and $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que l'intersection de $A$ et de l'union de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que l'intersection de $A$ et de l'union de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. Nous pouvons démontrer que l'intersection de $A$ et de l'union de $A$ et de $B$ est égale à $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. Soient $A$ et $B$ des ensembles. Alors l'intersection de $A$ et de l'union de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. Pour tous les ensembles $A$ et $B$, l'intersection de $A$ et de l'union de $A$ et de $B$ est égale à $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. L'intersection de $A$ et de l'union de $A$ et de $B$ est égale à $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. Soient $A$ et $B$ des ensembles. Alors $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. Pour tous les ensembles $A$ et $B$, $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AbsorbIntersection. $A \\cap (A \\cup B)= A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att snittet av $A$ och unionen av $A$ och $B$ är lika med $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. För alla mängder $A$ och $B$, kan vi bevisa att snittet av $A$ och unionen av $A$ och $B$ är lika med $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. Vi kan bevisa att snittet av $A$ och unionen av $A$ och $B$ är lika med $A$ för alla mängder $A$ och $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. Låt $A$ och $B$ vara mängder. Då är snittet av $A$ och unionen av $A$ och $B$ lika med $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. För alla mängder $A$ och $B$, är snittet av $A$ och unionen av $A$ och $B$ lika med $A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. Snittet av $A$ och unionen av $A$ och $B$ är lika med $A$ för alla mängder $A$ och $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. Låt $A$ och $B$ vara mängder. Då $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. För alla mängder $A$ och $B$, $A \\cap (A \\cup B)= A$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AbsorbIntersection. $A \\cap (A \\cup B)= A$ för alla mängder $A$ och $B$.",
    "output": "postulate absorbIntersection : (A : Set) -> (B : Set) -> equalset (intersection A (union A B)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. For all sets $A$ and $B$, we can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. We can prove that the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. For all sets $A$ and $B$, the complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. The complement of the union of $A$ and $B$ is equal to the intersection of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. Let $A$ and $B$ be sets. Then ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. For all sets $A$ and $B$, ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganUnion. ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que le complément de l'union de $A$ et de $B$ est égal à l'intersection du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que le complément de l'union de $A$ et de $B$ est égal à l'intersection du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Nous pouvons démontrer que le complément de l'union de $A$ et de $B$ est égal à l'intersection du complément de $A$ et du complément de $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Soient $A$ et $B$ des ensembles. Alors le complément de l'union de $A$ et de $B$ est égal à l'intersection du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Pour tous les ensembles $A$ et $B$, le complément de l'union de $A$ et de $B$ est égal à l'intersection du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Le complément de l'union de $A$ et de $B$ est égal à l'intersection du complément de $A$ et du complément de $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Soient $A$ et $B$ des ensembles. Alors ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. Pour tous les ensembles $A$ et $B$, ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganUnion. ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att komplementet av unionen av $A$ och $B$ är lika med snittet av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. För alla mängder $A$ och $B$, kan vi bevisa att komplementet av unionen av $A$ och $B$ är lika med snittet av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. Vi kan bevisa att komplementet av unionen av $A$ och $B$ är lika med snittet av komplementet av $A$ och komplementet av $B$ för alla mängder $A$ och $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. Låt $A$ och $B$ vara mängder. Då är komplementet av unionen av $A$ och $B$ lika med snittet av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. För alla mängder $A$ och $B$, är komplementet av unionen av $A$ och $B$ lika med snittet av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. Komplementet av unionen av $A$ och $B$ är lika med snittet av komplementet av $A$ och komplementet av $B$ för alla mängder $A$ och $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. Låt $A$ och $B$ vara mängder. Då ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. För alla mängder $A$ och $B$, ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganUnion. ${(A \\cup B)}^{\\complement} = {A }^{\\complement} \\cap {B }^{\\complement}$ för alla mängder $A$ och $B$.",
    "output": "postulate demorganUnion : (A : Set) -> (B : Set) -> equalset (complement (union A B)) (intersection (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, we can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. We can prove that the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, the complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. The complement of the intersection of $A$ and $B$ is equal to the union of the complement of $A$ and the complement of $B$ for all sets $A$ and $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. Let $A$ and $B$ be sets. Then ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. For all sets $A$ and $B$, ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "DemorganIntersection. ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que le complément de l'intersection de $A$ et de $B$ est égal à l'union du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que le complément de l'intersection de $A$ et de $B$ est égal à l'union du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Nous pouvons démontrer que le complément de l'intersection de $A$ et de $B$ est égal à l'union du complément de $A$ et du complément de $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Soient $A$ et $B$ des ensembles. Alors le complément de l'intersection de $A$ et de $B$ est égal à l'union du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Pour tous les ensembles $A$ et $B$, le complément de l'intersection de $A$ et de $B$ est égal à l'union du complément de $A$ et du complément de $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Le complément de l'intersection de $A$ et de $B$ est égal à l'union du complément de $A$ et du complément de $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Soient $A$ et $B$ des ensembles. Alors ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. Pour tous les ensembles $A$ et $B$, ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "DemorganIntersection. ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att komplementet av snittet av $A$ och $B$ är lika med unionen av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. För alla mängder $A$ och $B$, kan vi bevisa att komplementet av snittet av $A$ och $B$ är lika med unionen av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. Vi kan bevisa att komplementet av snittet av $A$ och $B$ är lika med unionen av komplementet av $A$ och komplementet av $B$ för alla mängder $A$ och $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. Låt $A$ och $B$ vara mängder. Då är komplementet av snittet av $A$ och $B$ lika med unionen av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. För alla mängder $A$ och $B$, är komplementet av snittet av $A$ och $B$ lika med unionen av komplementet av $A$ och komplementet av $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. Komplementet av snittet av $A$ och $B$ är lika med unionen av komplementet av $A$ och komplementet av $B$ för alla mängder $A$ och $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. Låt $A$ och $B$ vara mängder. Då ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. För alla mängder $A$ och $B$, ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "DemorganIntersection. ${(A \\cap B)}^{\\complement} = {A }^{\\complement} \\cup {B }^{\\complement}$ för alla mängder $A$ och $B$.",
    "output": "postulate demorganIntersection : (A : Set) -> (B : Set) -> equalset (complement (intersection A B)) (union (complement A) (complement B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. Let $A$ be a set. Then we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. For all sets $A$, we can prove that the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. We can prove that the complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. Let $A$ be a set. Then the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. For all sets $A$, the complement of the complement of $A$ is equal to $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for every set $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. The complement of the complement of $A$ is equal to $A$ for all sets $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. Let $A$ be a set. Then ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. For all sets $A$, ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for every set $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ for all sets $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Soit $A$ un ensemble. Alors nous pouvons démontrer que le complément du complément de $A$ est égal à $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Pour tous les ensembles $A$, nous pouvons démontrer que le complément du complément de $A$ est égal à $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Nous pouvons démontrer que le complément du complément de $A$ est égal à $A$ pour chaque ensemble $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Nous pouvons démontrer que le complément du complément de $A$ est égal à $A$ pour tous les ensembles $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Soit $A$ un ensemble. Alors le complément du complément de $A$ est égal à $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Pour tous les ensembles $A$, le complément du complément de $A$ est égal à $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Le complément du complément de $A$ est égal à $A$ pour chaque ensemble $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Le complément du complément de $A$ est égal à $A$ pour tous les ensembles $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Soit $A$ un ensemble. Alors ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. Pour tous les ensembles $A$, ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ pour chaque ensemble $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ pour tous les ensembles $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. Låt $A$ vara en mängd. Då kan vi bevisa att komplementet av komplementet av $A$ är lika med $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. För alla mängder $A$, kan vi bevisa att komplementet av komplementet av $A$ är lika med $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. Vi kan bevisa att komplementet av komplementet av $A$ är lika med $A$ för varje mängd $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. Vi kan bevisa att komplementet av komplementet av $A$ är lika med $A$ för alla mängder $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. Låt $A$ vara en mängd. Då är komplementet av komplementet av $A$ lika med $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. För alla mängder $A$, är komplementet av komplementet av $A$ lika med $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. Komplementet av komplementet av $A$ är lika med $A$ för varje mängd $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. Komplementet av komplementet av $A$ är lika med $A$ för alla mängder $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. Låt $A$ vara en mängd. Då ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. För alla mängder $A$, ${({A }^{\\complement})}^{\\complement} = A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ för varje mängd $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Involution. ${({A }^{\\complement})}^{\\complement} = A$ för alla mängder $A$.",
    "output": "postulate involution : (A : Set) -> equalset (complement (complement A)) A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, we can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. We can prove that the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, the intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. The intersection of $A$ and $B$ is equal to the difference of $A$ and the difference of $A$ and $B$ for all sets $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. Let $A$ and $B$ be sets. Then $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. For all sets $A$ and $B$, $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "IntersectionAsDifference. $A \\cap B = A \\setminus (A \\setminus B)$ for all sets $A$ and $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à la différence entre $A$ et la différence entre $A$ et $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à la différence entre $A$ et la différence entre $A$ et $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. Nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à la différence entre $A$ et la différence entre $A$ et $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. Soient $A$ et $B$ des ensembles. Alors l'intersection de $A$ et de $B$ est égale à la différence entre $A$ et la différence entre $A$ et $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. Pour tous les ensembles $A$ et $B$, l'intersection de $A$ et de $B$ est égale à la différence entre $A$ et la différence entre $A$ et $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. L'intersection de $A$ et de $B$ est égale à la différence entre $A$ et la différence entre $A$ et $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. Soient $A$ et $B$ des ensembles. Alors $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. Pour tous les ensembles $A$ et $B$, $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "IntersectionAsDifference. $A \\cap B = A \\setminus (A \\setminus B)$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att snittet av $A$ och $B$ är lika med differensen mellan $A$ och differensen mellan $A$ och $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. För alla mängder $A$ och $B$, kan vi bevisa att snittet av $A$ och $B$ är lika med differensen mellan $A$ och differensen mellan $A$ och $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. Vi kan bevisa att snittet av $A$ och $B$ är lika med differensen mellan $A$ och differensen mellan $A$ och $B$ för alla mängder $A$ och $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. Låt $A$ och $B$ vara mängder. Då är snittet av $A$ och $B$ lika med differensen mellan $A$ och differensen mellan $A$ och $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. För alla mängder $A$ och $B$, är snittet av $A$ och $B$ lika med differensen mellan $A$ och differensen mellan $A$ och $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. Snittet av $A$ och $B$ är lika med differensen mellan $A$ och differensen mellan $A$ och $B$ för alla mängder $A$ och $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. Låt $A$ och $B$ vara mängder. Då $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. För alla mängder $A$ och $B$, $A \\cap B = A \\setminus (A \\setminus B)$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "IntersectionAsDifference. $A \\cap B = A \\setminus (A \\setminus B)$ för alla mängder $A$ och $B$.",
    "output": "postulate intersectionAsDifference : (A : Set) -> (B : Set) -> equalset (intersection A B) (difference A (difference A B))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEmpty. We can prove that the complement of the empty set is equal to the universal set.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEmpty. The complement of the empty set is equal to the universal set.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplEmpty. ${\\emptyset }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEmpty. Nous pouvons démontrer que le complément de l'ensemble vide est égal à l'ensemble universel.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEmpty. Le complément de l'ensemble vide est égal à l'ensemble universel.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplEmpty. ${\\emptyset }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEmpty. Vi kan bevisa att komplementet av den tomma mängden är lika med den universella mängden.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEmpty. Komplementet av den tomma mängden är lika med den universella mängden.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplEmpty. ${\\emptyset }^{\\complement} = \\mathbb{ U}$.",
    "output": "postulate complEmpty : equalset (complement emptyset) universeset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplUniverse. We can prove that the complement of the universal set is equal to the empty set.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplUniverse. The complement of the universal set is equal to the empty set.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ComplUniverse. ${\\mathbb{ U}}^{\\complement} = \\emptyset$.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplUniverse. Nous pouvons démontrer que le complément de l'ensemble universel est égal à l'ensemble vide.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplUniverse. Le complément de l'ensemble universel est égal à l'ensemble vide.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ComplUniverse. ${\\mathbb{ U}}^{\\complement} = \\emptyset$.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplUniverse. Vi kan bevisa att komplementet av den universella mängden är lika med den tomma mängden.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplUniverse. Komplementet av den universella mängden är lika med den tomma mängden.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ComplUniverse. ${\\mathbb{ U}}^{\\complement} = \\emptyset$.",
    "output": "postulate complUniverse : equalset (complement universeset) emptyset"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Assume that we can prove that the intersection of $A$ and $B$ is equal to the empty set. Then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if we can prove that the union of $A$ and $B$ is equal to the universal set, then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then we can prove that the union of $A$ and $B$ is equal to the universal set, only if if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then if we can prove that the intersection of $A$ and $B$ is equal to the empty set, then we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that we can prove that the union of $A$ and $B$ is equal to the universal set. Then we can prove that the intersection of $A$ and $B$ is equal to the empty set, only if we can prove that $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Assume that the intersection of $A$ and $B$ is equal to the empty set. Then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if the union of $A$ and $B$ is equal to the universal set, then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then the union of $A$ and $B$ is equal to the universal set, only if if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then if the intersection of $A$ and $B$ is equal to the empty set, then $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that the union of $A$ and $B$ is equal to the universal set. Then the intersection of $A$ and $B$ is equal to the empty set, only if $B$ is equal to the complement of $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Assume that $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$, then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$, only if if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then if $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$. Then $A \\cap B = \\emptyset$ implies $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Assume that $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$. Then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. For all sets $A$ and $B$, if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. If $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then if $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, then $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "UniqComplement. Let $A$ and $B$ be sets. Then $A \\cup B = \\mathbb{ U}$ and $A \\cap B = \\emptyset$, only if $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'ensemble universel. Supposons que nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'ensemble vide. Alors nous pouvons démontrer que $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Pour tous les ensembles $A$ et $B$, si nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'ensemble universel, alors si nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors nous pouvons démontrer que $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Si nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'ensemble universel, alors si nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors nous pouvons démontrer que $B$ est égal au complément de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors si nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'ensemble universel, alors si nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors nous pouvons démontrer que $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'ensemble universel seulement si si nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors nous pouvons démontrer que $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'ensemble universel. Alors si nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors nous pouvons démontrer que $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que nous pouvons démontrer que l'union de $A$ et de $B$ est égale à l'ensemble universel. Alors nous pouvons démontrer que l'intersection de $A$ et de $B$ est égale à l'ensemble vide seulement si nous pouvons démontrer que $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que l'union de $A$ et de $B$ est égale à l'ensemble universel. Supposons que l'intersection de $A$ et de $B$ est égale à l'ensemble vide. Alors $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Pour tous les ensembles $A$ et $B$, si l'union de $A$ et de $B$ est égale à l'ensemble universel, alors si l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Si l'union de $A$ et de $B$ est égale à l'ensemble universel, alors si l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors $B$ est égal au complément de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors si l'union de $A$ et de $B$ est égale à l'ensemble universel, alors si l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors l'union de $A$ et de $B$ est égale à l'ensemble universel seulement si si l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que l'union de $A$ et de $B$ est égale à l'ensemble universel. Alors si l'intersection de $A$ et de $B$ est égale à l'ensemble vide, alors $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que l'union de $A$ et de $B$ est égale à l'ensemble universel. Alors l'intersection de $A$ et de $B$ est égale à l'ensemble vide seulement si $B$ est égal au complément de $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que $A \\cup B = \\mathbb{ U}$. Supposons que $A \\cap B = \\emptyset$. Alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Pour tous les ensembles $A$ et $B$, si $A \\cup B = \\mathbb{ U}$, alors si $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Si $A \\cup B = \\mathbb{ U}$, alors si $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors si $A \\cup B = \\mathbb{ U}$, alors si $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors $A \\cup B = \\mathbb{ U}$ seulement si si $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que $A \\cup B = \\mathbb{ U}$. Alors si $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que $A \\cup B = \\mathbb{ U}$. Alors $A \\cap B = \\emptyset$ seulement si $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que $A \\cup B = \\mathbb{ U}$. Alors $A \\cap B = \\emptyset$ implique $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Supposons que $A \\cup B = \\mathbb{ U}$ et $A \\cap B = \\emptyset$. Alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Pour tous les ensembles $A$ et $B$, si $A \\cup B = \\mathbb{ U}$ et $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Si $A \\cup B = \\mathbb{ U}$ et $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors si $A \\cup B = \\mathbb{ U}$ et $A \\cap B = \\emptyset$, alors $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "UniqComplement. Soient $A$ et $B$ des ensembles. Alors $A \\cup B = \\mathbb{ U}$ et $A \\cap B = \\emptyset$ seulement si $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att vi kan bevisa att unionen av $A$ och $B$ är lika med den universella mängden. Anta att vi kan bevisa att snittet av $A$ och $B$ är lika med den tomma mängden. Då kan vi bevisa att $B$ är lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. För alla mängder $A$ och $B$, om vi kan bevisa att unionen av $A$ och $B$ är lika med den universella mängden, så om vi kan bevisa att snittet av $A$ och $B$ är lika med den tomma mängden, så kan vi bevisa att $B$ är lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Om vi kan bevisa att unionen av $A$ och $B$ är lika med den universella mängden, så om vi kan bevisa att snittet av $A$ och $B$ är lika med den tomma mängden, så kan vi bevisa att $B$ är lika med komplementet av $A$ för alla mängder $A$ och $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då om vi kan bevisa att unionen av $A$ och $B$ är lika med den universella mängden, så om vi kan bevisa att snittet av $A$ och $B$ är lika med den tomma mängden, så kan vi bevisa att $B$ är lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att unionen av $A$ och $B$ är lika med den universella mängden, endast om om vi kan bevisa att snittet av $A$ och $B$ är lika med den tomma mängden, så kan vi bevisa att $B$ är lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att vi kan bevisa att unionen av $A$ och $B$ är lika med den universella mängden. Då om vi kan bevisa att snittet av $A$ och $B$ är lika med den tomma mängden, så kan vi bevisa att $B$ är lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att vi kan bevisa att unionen av $A$ och $B$ är lika med den universella mängden. Då kan vi bevisa att snittet av $A$ och $B$ är lika med den tomma mängden, endast om vi kan bevisa att $B$ är lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att unionen av $A$ och $B$ är lika med den universella mängden. Anta att snittet av $A$ och $B$ är lika med den tomma mängden. Då är $B$ lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. För alla mängder $A$ och $B$, om unionen av $A$ och $B$ är lika med den universella mängden, så om snittet av $A$ och $B$ är lika med den tomma mängden, så är $B$ lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Om unionen av $A$ och $B$ är lika med den universella mängden, så om snittet av $A$ och $B$ är lika med den tomma mängden, så är $B$ lika med komplementet av $A$ för alla mängder $A$ och $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då om unionen av $A$ och $B$ är lika med den universella mängden, så om snittet av $A$ och $B$ är lika med den tomma mängden, så är $B$ lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då är unionen av $A$ och $B$ lika med den universella mängden, endast om om snittet av $A$ och $B$ är lika med den tomma mängden, så är $B$ lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att unionen av $A$ och $B$ är lika med den universella mängden. Då om snittet av $A$ och $B$ är lika med den tomma mängden, så är $B$ lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att unionen av $A$ och $B$ är lika med den universella mängden. Då är snittet av $A$ och $B$ lika med den tomma mängden, endast om $B$ är lika med komplementet av $A$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att $A \\cup B = \\mathbb{ U}$. Anta att $A \\cap B = \\emptyset$. Då $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. För alla mängder $A$ och $B$, om $A \\cup B = \\mathbb{ U}$, så om $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Om $A \\cup B = \\mathbb{ U}$, så om $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$ för alla mängder $A$ och $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då om $A \\cup B = \\mathbb{ U}$, så om $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då $A \\cup B = \\mathbb{ U}$, endast om om $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att $A \\cup B = \\mathbb{ U}$. Då om $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att $A \\cup B = \\mathbb{ U}$. Då $A \\cap B = \\emptyset$, endast om $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att $A \\cup B = \\mathbb{ U}$. Då implicerar $A \\cap B = \\emptyset$  $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Anta att $A \\cup B = \\mathbb{ U}$ och $A \\cap B = \\emptyset$. Då $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. För alla mängder $A$ och $B$, om $A \\cup B = \\mathbb{ U}$ och $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Om $A \\cup B = \\mathbb{ U}$ och $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$ för alla mängder $A$ och $B$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då om $A \\cup B = \\mathbb{ U}$ och $A \\cap B = \\emptyset$, så $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "UniqComplement. Låt $A$ och $B$ vara mängder. Då $A \\cup B = \\mathbb{ U}$ och $A \\cap B = \\emptyset$, endast om $B = {A }^{\\complement}$.",
    "output": "postulate uniqComplement : (A : Set) -> (B : Set) -> equalset (union A B) universeset -> equalset (intersection A B) emptyset -> equalset B (complement A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. Let $A$ be a set. Then we can prove that $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. For all sets $A$, we can prove that $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for every set $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. We can prove that $A$ is a subset of $A$ for all sets $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. Let $A$ be a set. Then $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. For all sets $A$, $A$ is a subset of $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A$ is a subset of $A$ for every set $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A$ is a subset of $A$ for all sets $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. Let $A$ be a set. Then $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. For all sets $A$, $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ for every set $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ for all sets $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Soit $A$ un ensemble. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Pour tous les ensembles $A$, nous pouvons démontrer que $A$ est un sous-ensemble de $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Nous pouvons démontrer que $A$ est un sous-ensemble de $A$ pour chaque ensemble $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Nous pouvons démontrer que $A$ est un sous-ensemble de $A$ pour tous les ensembles $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Soit $A$ un ensemble. Alors $A$ est un sous-ensemble de $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Pour tous les ensembles $A$, $A$ est un sous-ensemble de $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. $A$ est un sous-ensemble de $A$ pour chaque ensemble $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. $A$ est un sous-ensemble de $A$ pour tous les ensembles $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Soit $A$ un ensemble. Alors $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. Pour tous les ensembles $A$, $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ pour chaque ensemble $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ pour tous les ensembles $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. Låt $A$ vara en mängd. Då kan vi bevisa att $A$ är en delmängd av $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. För alla mängder $A$, kan vi bevisa att $A$ är en delmängd av $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. Vi kan bevisa att $A$ är en delmängd av $A$ för varje mängd $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. Vi kan bevisa att $A$ är en delmängd av $A$ för alla mängder $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. Låt $A$ vara en mängd. Då är $A$ en delmängd av $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. För alla mängder $A$, är $A$ en delmängd av $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. $A$ är en delmängd av $A$ för varje mängd $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. $A$ är en delmängd av $A$ för alla mängder $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. Låt $A$ vara en mängd. Då $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. För alla mängder $A$, $A \\subseteq A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ för varje mängd $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "ReflSubset. $A \\subseteq A$ för alla mängder $A$.",
    "output": "postulate reflSubset : (A : Set) -> subseteq A A"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. $A$ is a subset of $B$ and $B$ is a subset of $A$, if and only if $A$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B$ and $B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. For all sets $A$ and $B$, $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B \\subseteq A$, if and only if $A = B$ for all sets $A$ and $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "AntisymmSubset. Let $A$ and $B$ be sets. Then $A \\subseteq B \\subseteq A$, if and only if $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $A$ si et seulement si $A$ est égal à $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $A$ si et seulement si $A$ est égal à $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Nous pouvons démontrer que $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $A$ si et seulement si $A$ est égal à $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Soient $A$ et $B$ des ensembles. Alors $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $A$ si et seulement si $A$ est égal à $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Pour tous les ensembles $A$ et $B$, $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $A$ si et seulement si $A$ est égal à $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $A$ si et seulement si $A$ est égal à $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Soient $A$ et $B$ des ensembles. Alors $A \\subseteq B$ et $B \\subseteq A$ si et seulement si $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Pour tous les ensembles $A$ et $B$, $A \\subseteq B$ et $B \\subseteq A$ si et seulement si $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B$ et $B \\subseteq A$ si et seulement si $A = B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Pour tous les ensembles $A$ et $B$, $A \\subseteq B \\subseteq A$ si et seulement si $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B \\subseteq A$ si et seulement si $A = B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "AntisymmSubset. Soient $A$ et $B$ des ensembles. Alors $A \\subseteq B \\subseteq A$ si et seulement si $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att $A$ är en delmängd av $B$ och $B$ är en delmängd av $A$, om och endast om $A$ är lika med $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. För alla mängder $A$ och $B$, kan vi bevisa att $A$ är en delmängd av $B$ och $B$ är en delmängd av $A$, om och endast om $A$ är lika med $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. Vi kan bevisa att $A$ är en delmängd av $B$ och $B$ är en delmängd av $A$, om och endast om $A$ är lika med $B$ för alla mängder $A$ och $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. Låt $A$ och $B$ vara mängder. Då är $A$ en delmängd av $B$ och $B$ är en delmängd av $A$, om och endast om $A$ är lika med $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. För alla mängder $A$ och $B$, är $A$ en delmängd av $B$ och $B$ är en delmängd av $A$, om och endast om $A$ är lika med $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. $A$ är en delmängd av $B$ och $B$ är en delmängd av $A$, om och endast om $A$ är lika med $B$ för alla mängder $A$ och $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. Låt $A$ och $B$ vara mängder. Då $A \\subseteq B$ och $B \\subseteq A$, om och endast om $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. För alla mängder $A$ och $B$, $A \\subseteq B$ och $B \\subseteq A$, om och endast om $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B$ och $B \\subseteq A$, om och endast om $A = B$ för alla mängder $A$ och $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. För alla mängder $A$ och $B$, $A \\subseteq B \\subseteq A$, om och endast om $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. $A \\subseteq B \\subseteq A$, om och endast om $A = B$ för alla mängder $A$ och $B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "AntisymmSubset. Låt $A$ och $B$ vara mängder. Då $A \\subseteq B \\subseteq A$, om och endast om $A = B$.",
    "output": "postulate antisymmSubset : (A : Set) -> (B : Set) -> iff (and (subseteq A B) (subseteq B A)) (equalset A B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. We can prove that if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. We can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then we can prove that $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. If $A$ is a subset of $B$ and $B$ is a subset of $C$, then $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A$ is a subset of $B$ and $B$ is a subset of $C$, only if $A$ is a subset of $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, if $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. If $A \\subseteq B$ and $B \\subseteq C$, then $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. For all sets $A$, $B$ and $C$, $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$ for all sets $A$, $B$ and $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B$ and $B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "TransitSubset. Let $A$, $B$ and $C$ be sets. Then $A \\subseteq B \\subseteq C$, only if $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Soient $A$, $B$ et $C$ des ensembles. Alors nous pouvons démontrer que si $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$, alors $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Pour tous les ensembles $A$, $B$ et $C$, nous pouvons démontrer que si $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$, alors $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Nous pouvons démontrer que si $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$, alors $A$ est un sous-ensemble de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Pour tous les ensembles $A$, $B$ et $C$, nous pouvons démontrer que $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$ seulement si $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Nous pouvons démontrer que $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$ seulement si $A$ est un sous-ensemble de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Soient $A$, $B$ et $C$ des ensembles. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$ seulement si $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Soient $A$, $B$ et $C$ des ensembles. Alors si $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$, alors $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Pour tous les ensembles $A$, $B$ et $C$, si $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$, alors $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Si $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$, alors $A$ est un sous-ensemble de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Pour tous les ensembles $A$, $B$ et $C$, $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$ seulement si $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$ seulement si $A$ est un sous-ensemble de $C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Soient $A$, $B$ et $C$ des ensembles. Alors $A$ est un sous-ensemble de $B$ et $B$ est un sous-ensemble de $C$ seulement si $A$ est un sous-ensemble de $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Soient $A$, $B$ et $C$ des ensembles. Alors si $A \\subseteq B$ et $B \\subseteq C$, alors $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Pour tous les ensembles $A$, $B$ et $C$, si $A \\subseteq B$ et $B \\subseteq C$, alors $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Si $A \\subseteq B$ et $B \\subseteq C$, alors $A \\subseteq C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Pour tous les ensembles $A$, $B$ et $C$, $A \\subseteq B$ et $B \\subseteq C$ seulement si $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. $A \\subseteq B$ et $B \\subseteq C$ seulement si $A \\subseteq C$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Soient $A$, $B$ et $C$ des ensembles. Alors $A \\subseteq B$ et $B \\subseteq C$ seulement si $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "TransitSubset. Soient $A$, $B$ et $C$ des ensembles. Alors $A \\subseteq B \\subseteq C$ seulement si $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Låt $A$, $B$ och $C$ vara mängder. Då kan vi bevisa att om $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, så är $A$ en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. För alla mängder $A$, $B$ och $C$, kan vi bevisa att om $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, så är $A$ en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Vi kan bevisa att om $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, så är $A$ en delmängd av $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. För alla mängder $A$, $B$ och $C$, kan vi bevisa att $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, endast om $A$ är en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Vi kan bevisa att $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, endast om $A$ är en delmängd av $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Låt $A$, $B$ och $C$ vara mängder. Då kan vi bevisa att $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, endast om $A$ är en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Låt $A$, $B$ och $C$ vara mängder. Då om $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, så är $A$ en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. För alla mängder $A$, $B$ och $C$, om $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, så är $A$ en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Om $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, så är $A$ en delmängd av $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. För alla mängder $A$, $B$ och $C$, är $A$ en delmängd av $B$ och $B$ är en delmängd av $C$, endast om $A$ är en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. $A$ är en delmängd av $B$ och $B$ är en delmängd av $C$, endast om $A$ är en delmängd av $C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Låt $A$, $B$ och $C$ vara mängder. Då är $A$ en delmängd av $B$ och $B$ är en delmängd av $C$, endast om $A$ är en delmängd av $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Låt $A$, $B$ och $C$ vara mängder. Då om $A \\subseteq B$ och $B \\subseteq C$, så $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. För alla mängder $A$, $B$ och $C$, om $A \\subseteq B$ och $B \\subseteq C$, så $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Om $A \\subseteq B$ och $B \\subseteq C$, så $A \\subseteq C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. För alla mängder $A$, $B$ och $C$, $A \\subseteq B$ och $B \\subseteq C$, endast om $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. $A \\subseteq B$ och $B \\subseteq C$, endast om $A \\subseteq C$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Låt $A$, $B$ och $C$ vara mängder. Då $A \\subseteq B$ och $B \\subseteq C$, endast om $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "TransitSubset. Låt $A$, $B$ och $C$ vara mängder. Då $A \\subseteq B \\subseteq C$, endast om $A \\subseteq C$.",
    "output": "postulate transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> if (and (subseteq A B) (subseteq B C)) (subseteq A C)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that we can prove that $A$ is a subset of $S$. Then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if we can prove that $A$ is a subset of $S$, then we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then we can prove that $A$ is a subset of $S$, only if we can prove that the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A$ is a subset of $S$. Then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A$ is a subset of $S$, then the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A$ is a subset of $S$, only if the empty set is a subset of $A$ and $A$ is a subset of $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. For all sets $S$ and $A$, if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. If $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$ for all sets $S$ and $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A$ and $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then if $A \\subseteq S$, then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$, only if $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Then $A \\subseteq S$ implies $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop7. Let $S$ and $A$ be sets. Assume that $A \\subseteq S$. Then $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Supposons que nous pouvons démontrer que $A$ est un sous-ensemble de $S$. Alors nous pouvons démontrer que l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Pour tous les ensembles $S$ et $A$, si nous pouvons démontrer que $A$ est un sous-ensemble de $S$, alors nous pouvons démontrer que l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Si nous pouvons démontrer que $A$ est un sous-ensemble de $S$, alors nous pouvons démontrer que l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$ pour tous les ensembles $S$ et $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors si nous pouvons démontrer que $A$ est un sous-ensemble de $S$, alors nous pouvons démontrer que l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $S$ seulement si nous pouvons démontrer que l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Supposons que $A$ est un sous-ensemble de $S$. Alors l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Pour tous les ensembles $S$ et $A$, si $A$ est un sous-ensemble de $S$, alors l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Si $A$ est un sous-ensemble de $S$, alors l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$ pour tous les ensembles $S$ et $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors si $A$ est un sous-ensemble de $S$, alors l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors $A$ est un sous-ensemble de $S$ seulement si l'ensemble vide est un sous-ensemble de $A$ et $A$ est un sous-ensemble de $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Supposons que $A \\subseteq S$. Alors $\\emptyset \\subseteq A$ et $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Pour tous les ensembles $S$ et $A$, si $A \\subseteq S$, alors $\\emptyset \\subseteq A$ et $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Si $A \\subseteq S$, alors $\\emptyset \\subseteq A$ et $A \\subseteq S$ pour tous les ensembles $S$ et $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Pour tous les ensembles $S$ et $A$, si $A \\subseteq S$, alors $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Si $A \\subseteq S$, alors $\\emptyset \\subseteq A \\subseteq S$ pour tous les ensembles $S$ et $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors si $A \\subseteq S$, alors $\\emptyset \\subseteq A$ et $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors $A \\subseteq S$ seulement si $\\emptyset \\subseteq A$ et $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors si $A \\subseteq S$, alors $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors $A \\subseteq S$ seulement si $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Alors $A \\subseteq S$ implique $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop7. Soient $S$ et $A$ des ensembles. Supposons que $A \\subseteq S$. Alors $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Anta att vi kan bevisa att $A$ är en delmängd av $S$. Då kan vi bevisa att den tomma mängden är en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. För alla mängder $S$ och $A$, om vi kan bevisa att $A$ är en delmängd av $S$, så kan vi bevisa att den tomma mängden är en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Om vi kan bevisa att $A$ är en delmängd av $S$, så kan vi bevisa att den tomma mängden är en delmängd av $A$ och $A$ är en delmängd av $S$ för alla mängder $S$ och $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då om vi kan bevisa att $A$ är en delmängd av $S$, så kan vi bevisa att den tomma mängden är en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då kan vi bevisa att $A$ är en delmängd av $S$, endast om vi kan bevisa att den tomma mängden är en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Anta att $A$ är en delmängd av $S$. Då är den tomma mängden en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. För alla mängder $S$ och $A$, om $A$ är en delmängd av $S$, så är den tomma mängden en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Om $A$ är en delmängd av $S$, så är den tomma mängden en delmängd av $A$ och $A$ är en delmängd av $S$ för alla mängder $S$ och $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då om $A$ är en delmängd av $S$, så är den tomma mängden en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då är $A$ en delmängd av $S$, endast om den tomma mängden är en delmängd av $A$ och $A$ är en delmängd av $S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Anta att $A \\subseteq S$. Då $\\emptyset \\subseteq A$ och $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. För alla mängder $S$ och $A$, om $A \\subseteq S$, så $\\emptyset \\subseteq A$ och $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Om $A \\subseteq S$, så $\\emptyset \\subseteq A$ och $A \\subseteq S$ för alla mängder $S$ och $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. För alla mängder $S$ och $A$, om $A \\subseteq S$, så $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Om $A \\subseteq S$, så $\\emptyset \\subseteq A \\subseteq S$ för alla mängder $S$ och $A$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då om $A \\subseteq S$, så $\\emptyset \\subseteq A$ och $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då $A \\subseteq S$, endast om $\\emptyset \\subseteq A$ och $A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då om $A \\subseteq S$, så $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då $A \\subseteq S$, endast om $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Då implicerar $A \\subseteq S$  $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop7. Låt $S$ och $A$ vara mängder. Anta att $A \\subseteq S$. Då $\\emptyset \\subseteq A \\subseteq S$.",
    "output": "postulate prop7 : (S : Set) -> (A : Set) -> subseteq A S -> and (subseteq emptyset A) (subseteq A S)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. We can prove that $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. $A$ is a subset of $B$, if and only if the intersection of $A$ and $B$ is equal to $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8a. $A \\subseteq B$, if and only if $A \\cap B = A$ for all sets $A$ and $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. Nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si l'intersection de $A$ et de $B$ est égale à $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. Soient $A$ et $B$ des ensembles. Alors $A$ est un sous-ensemble de $B$ si et seulement si l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. Pour tous les ensembles $A$ et $B$, $A$ est un sous-ensemble de $B$ si et seulement si l'intersection de $A$ et de $B$ est égale à $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. $A$ est un sous-ensemble de $B$ si et seulement si l'intersection de $A$ et de $B$ est égale à $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. Soient $A$ et $B$ des ensembles. Alors $A \\subseteq B$ si et seulement si $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. Pour tous les ensembles $A$ et $B$, $A \\subseteq B$ si et seulement si $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8a. $A \\subseteq B$ si et seulement si $A \\cap B = A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att $A$ är en delmängd av $B$, om och endast om snittet av $A$ och $B$ är lika med $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. För alla mängder $A$ och $B$, kan vi bevisa att $A$ är en delmängd av $B$, om och endast om snittet av $A$ och $B$ är lika med $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. Vi kan bevisa att $A$ är en delmängd av $B$, om och endast om snittet av $A$ och $B$ är lika med $A$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. Låt $A$ och $B$ vara mängder. Då är $A$ en delmängd av $B$, om och endast om snittet av $A$ och $B$ är lika med $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. För alla mängder $A$ och $B$, är $A$ en delmängd av $B$, om och endast om snittet av $A$ och $B$ är lika med $A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. $A$ är en delmängd av $B$, om och endast om snittet av $A$ och $B$ är lika med $A$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. Låt $A$ och $B$ vara mängder. Då $A \\subseteq B$, om och endast om $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. För alla mängder $A$ och $B$, $A \\subseteq B$, om och endast om $A \\cap B = A$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8a. $A \\subseteq B$, om och endast om $A \\cap B = A$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8a : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (intersection A B) A)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. We can prove that $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. $A$ is a subset of $B$, if and only if the union of $A$ and $B$ is equal to $B$ for all sets $A$ and $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8b. $A \\subseteq B$, if and only if $A \\cup B = B$ for all sets $A$ and $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si l'union de $A$ et de $B$ est égale à $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si l'union de $A$ et de $B$ est égale à $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. Nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si l'union de $A$ et de $B$ est égale à $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. Soient $A$ et $B$ des ensembles. Alors $A$ est un sous-ensemble de $B$ si et seulement si l'union de $A$ et de $B$ est égale à $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. Pour tous les ensembles $A$ et $B$, $A$ est un sous-ensemble de $B$ si et seulement si l'union de $A$ et de $B$ est égale à $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. $A$ est un sous-ensemble de $B$ si et seulement si l'union de $A$ et de $B$ est égale à $B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. Soient $A$ et $B$ des ensembles. Alors $A \\subseteq B$ si et seulement si $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. Pour tous les ensembles $A$ et $B$, $A \\subseteq B$ si et seulement si $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8b. $A \\subseteq B$ si et seulement si $A \\cup B = B$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att $A$ är en delmängd av $B$, om och endast om unionen av $A$ och $B$ är lika med $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. För alla mängder $A$ och $B$, kan vi bevisa att $A$ är en delmängd av $B$, om och endast om unionen av $A$ och $B$ är lika med $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. Vi kan bevisa att $A$ är en delmängd av $B$, om och endast om unionen av $A$ och $B$ är lika med $B$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. Låt $A$ och $B$ vara mängder. Då är $A$ en delmängd av $B$, om och endast om unionen av $A$ och $B$ är lika med $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. För alla mängder $A$ och $B$, är $A$ en delmängd av $B$, om och endast om unionen av $A$ och $B$ är lika med $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. $A$ är en delmängd av $B$, om och endast om unionen av $A$ och $B$ är lika med $B$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. Låt $A$ och $B$ vara mängder. Då $A \\subseteq B$, om och endast om $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. För alla mängder $A$ och $B$, $A \\subseteq B$, om och endast om $A \\cup B = B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8b. $A \\subseteq B$, om och endast om $A \\cup B = B$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8b : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (union A B) B)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. We can prove that $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. $A$ is a subset of $B$, if and only if the difference of $A$ and $B$ is equal to the empty set for all sets $A$ and $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. For all sets $A$ and $B$, $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8c. $A \\subseteq B$, if and only if $A \\setminus B = \\emptyset$ for all sets $A$ and $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si la différence entre $A$ et $B$ est égale à l'ensemble vide.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si la différence entre $A$ et $B$ est égale à l'ensemble vide.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. Nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si la différence entre $A$ et $B$ est égale à l'ensemble vide pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. Soient $A$ et $B$ des ensembles. Alors $A$ est un sous-ensemble de $B$ si et seulement si la différence entre $A$ et $B$ est égale à l'ensemble vide.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. Pour tous les ensembles $A$ et $B$, $A$ est un sous-ensemble de $B$ si et seulement si la différence entre $A$ et $B$ est égale à l'ensemble vide.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. $A$ est un sous-ensemble de $B$ si et seulement si la différence entre $A$ et $B$ est égale à l'ensemble vide pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. Soient $A$ et $B$ des ensembles. Alors $A \\subseteq B$ si et seulement si $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. Pour tous les ensembles $A$ et $B$, $A \\subseteq B$ si et seulement si $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8c. $A \\subseteq B$ si et seulement si $A \\setminus B = \\emptyset$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att $A$ är en delmängd av $B$, om och endast om differensen mellan $A$ och $B$ är lika med den tomma mängden.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. För alla mängder $A$ och $B$, kan vi bevisa att $A$ är en delmängd av $B$, om och endast om differensen mellan $A$ och $B$ är lika med den tomma mängden.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. Vi kan bevisa att $A$ är en delmängd av $B$, om och endast om differensen mellan $A$ och $B$ är lika med den tomma mängden för alla mängder $A$ och $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. Låt $A$ och $B$ vara mängder. Då är $A$ en delmängd av $B$, om och endast om differensen mellan $A$ och $B$ är lika med den tomma mängden.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. För alla mängder $A$ och $B$, är $A$ en delmängd av $B$, om och endast om differensen mellan $A$ och $B$ är lika med den tomma mängden.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. $A$ är en delmängd av $B$, om och endast om differensen mellan $A$ och $B$ är lika med den tomma mängden för alla mängder $A$ och $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. Låt $A$ och $B$ vara mängder. Då $A \\subseteq B$, om och endast om $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. För alla mängder $A$ och $B$, $A \\subseteq B$, om och endast om $A \\setminus B = \\emptyset$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8c. $A \\subseteq B$, om och endast om $A \\setminus B = \\emptyset$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8c : (A : Set) -> (B : Set) -> iff (subseteq A B) (equalset (difference A B) emptyset)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. For all sets $A$ and $B$, we can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. We can prove that $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. For all sets $A$ and $B$, $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. $A$ is a subset of $B$, if and only if the complement of $B$ is a subset of the complement of $A$ for all sets $A$ and $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. Let $A$ and $B$ be sets. Then $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. For all sets $A$ and $B$, $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop8d. $A \\subseteq B$, if and only if ${B }^{\\complement} \\subseteq {A }^{\\complement}$ for all sets $A$ and $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. Soient $A$ et $B$ des ensembles. Alors nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si le complément de $B$ est un sous-ensemble du complément de $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. Pour tous les ensembles $A$ et $B$, nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si le complément de $B$ est un sous-ensemble du complément de $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. Nous pouvons démontrer que $A$ est un sous-ensemble de $B$ si et seulement si le complément de $B$ est un sous-ensemble du complément de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. Soient $A$ et $B$ des ensembles. Alors $A$ est un sous-ensemble de $B$ si et seulement si le complément de $B$ est un sous-ensemble du complément de $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. Pour tous les ensembles $A$ et $B$, $A$ est un sous-ensemble de $B$ si et seulement si le complément de $B$ est un sous-ensemble du complément de $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. $A$ est un sous-ensemble de $B$ si et seulement si le complément de $B$ est un sous-ensemble du complément de $A$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. Soient $A$ et $B$ des ensembles. Alors $A \\subseteq B$ si et seulement si ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. Pour tous les ensembles $A$ et $B$, $A \\subseteq B$ si et seulement si ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop8d. $A \\subseteq B$ si et seulement si ${B }^{\\complement} \\subseteq {A }^{\\complement}$ pour tous les ensembles $A$ et $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. Låt $A$ och $B$ vara mängder. Då kan vi bevisa att $A$ är en delmängd av $B$, om och endast om komplementet av $B$ är en delmängd av komplementet av $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. För alla mängder $A$ och $B$, kan vi bevisa att $A$ är en delmängd av $B$, om och endast om komplementet av $B$ är en delmängd av komplementet av $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. Vi kan bevisa att $A$ är en delmängd av $B$, om och endast om komplementet av $B$ är en delmängd av komplementet av $A$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. Låt $A$ och $B$ vara mängder. Då är $A$ en delmängd av $B$, om och endast om komplementet av $B$ är en delmängd av komplementet av $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. För alla mängder $A$ och $B$, är $A$ en delmängd av $B$, om och endast om komplementet av $B$ är en delmängd av komplementet av $A$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. $A$ är en delmängd av $B$, om och endast om komplementet av $B$ är en delmängd av komplementet av $A$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. Låt $A$ och $B$ vara mängder. Då $A \\subseteq B$, om och endast om ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. För alla mängder $A$ och $B$, $A \\subseteq B$, om och endast om ${B }^{\\complement} \\subseteq {A }^{\\complement}$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop8d. $A \\subseteq B$, om och endast om ${B }^{\\complement} \\subseteq {A }^{\\complement}$ för alla mängder $A$ och $B$.",
    "output": "postulate prop8d : (A : Set) -> (B : Set) -> iff (subseteq A B) (subseteq (complement B) (complement A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, we can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. We can prove that the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, the intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. The intersection of the difference of $B$ and $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ and the difference of the intersection of $B$ and $C$ and the intersection of $A$ and $C$ is equal to the difference of the intersection of $B$ and $C$ and $A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ and $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. For all sets $A$, $B$ and $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ for all sets $A$, $B$ and $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Prop9d. Let $A$, $B$ and $C$ be sets. Then $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Soient $A$, $B$ et $C$ des ensembles. Alors nous pouvons démontrer que l'intersection de la différence entre $B$ et $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ et la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Pour tous les ensembles $A$, $B$ et $C$, nous pouvons démontrer que l'intersection de la différence entre $B$ et $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ et la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Nous pouvons démontrer que l'intersection de la différence entre $B$ et $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ et la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et $A$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Soient $A$, $B$ et $C$ des ensembles. Alors l'intersection de la différence entre $B$ et $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ et la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Pour tous les ensembles $A$, $B$ et $C$, l'intersection de la différence entre $B$ et $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ et la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. L'intersection de la différence entre $B$ et $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ et la différence entre l'intersection de $B$ et de $C$ et l'intersection de $A$ et de $C$ est égale à la différence entre l'intersection de $B$ et de $C$ et $A$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Soient $A$, $B$ et $C$ des ensembles. Alors $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ et $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Pour tous les ensembles $A$, $B$ et $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ et $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ et $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Pour tous les ensembles $A$, $B$ et $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ pour tous les ensembles $A$, $B$ et $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Prop9d. Soient $A$, $B$ et $C$ des ensembles. Alors $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. Låt $A$, $B$ och $C$ vara mängder. Då kan vi bevisa att snittet av differensen mellan $B$ och $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ och differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. För alla mängder $A$, $B$ och $C$, kan vi bevisa att snittet av differensen mellan $B$ och $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ och differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. Vi kan bevisa att snittet av differensen mellan $B$ och $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ och differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och $A$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. Låt $A$, $B$ och $C$ vara mängder. Då är snittet av differensen mellan $B$ och $A$ och $C$ lika med differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ och differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. För alla mängder $A$, $B$ och $C$, är snittet av differensen mellan $B$ och $A$ och $C$ lika med differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ och differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och $A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. Snittet av differensen mellan $B$ och $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ och differensen mellan snittet av $B$ och $C$ och snittet av $A$ och $C$ är lika med differensen mellan snittet av $B$ och $C$ och $A$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. Låt $A$, $B$ och $C$ vara mängder. Då $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ och $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. För alla mängder $A$, $B$ och $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ och $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)$ och $(B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. För alla mängder $A$, $B$ och $C$, $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$ för alla mängder $A$, $B$ och $C$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Prop9d. Låt $A$, $B$ och $C$ vara mängder. Då $(B \\setminus A)\\cap C = (B \\cap C)\\setminus (A \\cap C)= (B \\cap C)\\setminus A$.",
    "output": "postulate prop9d : (A : Set) -> (B : Set) -> (C : Set) -> and (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C))) (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Assume that we can prove that $n$ is not equal to $0$. Then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. For all instances $m$ and $n$ of natural numbers, if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. If we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then if we can prove that $n$ is not equal to $0$, then we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be instances of natural numbers. Then we can prove that $n$ is not equal to $0$, only if we can prove that the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. If $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n$ is not equal to $0$, then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then $n$ is not equal to $0$, only if the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n$ is not equal to $0$. Then the exponentiation of the quotient of $m$ and $n$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. For all natural numbers $m$ and $n$, if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. If $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m$ and $n$ be natural numbers. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then if $n \\neq 0$, then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$, only if $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Then $n \\neq 0$ implies $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01. Let $m , n \\in N$. Assume that $n \\neq 0$. Then $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des instances de nombres naturels. Supposons que nous pouvons démontrer que $n$ est inégal à $0$. Alors nous pouvons démontrer que la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Pour toutes les instances $m$ et $n$ de nombres naturels, si nous pouvons démontrer que $n$ est inégal à $0$, alors nous pouvons démontrer que la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Si nous pouvons démontrer que $n$ est inégal à $0$, alors nous pouvons démontrer que la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$ pour toutes les instances $m$ et $n$ de nombres naturels.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des instances de nombres naturels. Alors si nous pouvons démontrer que $n$ est inégal à $0$, alors nous pouvons démontrer que la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des instances de nombres naturels. Alors nous pouvons démontrer que $n$ est inégal à $0$ seulement si nous pouvons démontrer que la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des nombres naturels. Supposons que $n$ est inégal à $0$. Alors la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Pour tous les nombres naturels $m$ et $n$, si $n$ est inégal à $0$, alors la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Si $n$ est inégal à $0$, alors la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$ pour tous les nombres naturels $m$ et $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des nombres naturels. Alors si $n$ est inégal à $0$, alors la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des nombres naturels. Alors $n$ est inégal à $0$ seulement si la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m , n \\in N$. Alors si $n$ est inégal à $0$, alors la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m , n \\in N$. Alors $n$ est inégal à $0$ seulement si la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m , n \\in N$. Supposons que $n$ est inégal à $0$. Alors la puissance du quotient de $m$ et de $n$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des nombres naturels. Supposons que $n \\neq 0$. Alors $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Pour tous les nombres naturels $m$ et $n$, si $n \\neq 0$, alors $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Si $n \\neq 0$, alors $(\\frac{ m}{n})^ {2}\\neq 2$ pour tous les nombres naturels $m$ et $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des nombres naturels. Alors si $n \\neq 0$, alors $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des nombres naturels. Alors $n \\neq 0$ seulement si $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m$ et $n$ des nombres naturels. Alors $n \\neq 0$ implique $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m , n \\in N$. Alors si $n \\neq 0$, alors $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m , n \\in N$. Alors $n \\neq 0$ seulement si $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m , n \\in N$. Alors $n \\neq 0$ implique $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01. Soient $m , n \\in N$. Supposons que $n \\neq 0$. Alors $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara instanser av naturliga tal. Anta att vi kan bevisa att $n$ är inte lika med $0$. Då kan vi bevisa att potensen av kvoten av $m$ och $n$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. För alla instanser $m$ och $n$ av naturliga tal, om vi kan bevisa att $n$ är inte lika med $0$, så kan vi bevisa att potensen av kvoten av $m$ och $n$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Om vi kan bevisa att $n$ är inte lika med $0$, så kan vi bevisa att potensen av kvoten av $m$ och $n$ och $2$ är inte lika med $2$ för alla instanser $m$ och $n$ av naturliga tal.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara instanser av naturliga tal. Då om vi kan bevisa att $n$ är inte lika med $0$, så kan vi bevisa att potensen av kvoten av $m$ och $n$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara instanser av naturliga tal. Då kan vi bevisa att $n$ är inte lika med $0$, endast om vi kan bevisa att potensen av kvoten av $m$ och $n$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara naturliga tal. Anta att $n$ är inte lika med $0$. Då är potensen av kvoten av $m$ och $n$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. För alla naturliga tal $m$ och $n$, om $n$ är inte lika med $0$, så är potensen av kvoten av $m$ och $n$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Om $n$ är inte lika med $0$, så är potensen av kvoten av $m$ och $n$ och $2$ inte lika med $2$ för alla naturliga tal $m$ och $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara naturliga tal. Då om $n$ är inte lika med $0$, så är potensen av kvoten av $m$ och $n$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara naturliga tal. Då är $n$ inte lika med $0$, endast om potensen av kvoten av $m$ och $n$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m , n \\in N$. Då om $n$ är inte lika med $0$, så är potensen av kvoten av $m$ och $n$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m , n \\in N$. Då är $n$ inte lika med $0$, endast om potensen av kvoten av $m$ och $n$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m , n \\in N$. Anta att $n$ är inte lika med $0$. Då är potensen av kvoten av $m$ och $n$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara naturliga tal. Anta att $n \\neq 0$. Då $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. För alla naturliga tal $m$ och $n$, om $n \\neq 0$, så $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Om $n \\neq 0$, så $(\\frac{ m}{n})^ {2}\\neq 2$ för alla naturliga tal $m$ och $n$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara naturliga tal. Då om $n \\neq 0$, så $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara naturliga tal. Då $n \\neq 0$, endast om $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m$ och $n$ vara naturliga tal. Då implicerar $n \\neq 0$  $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m , n \\in N$. Då om $n \\neq 0$, så $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m , n \\in N$. Då $n \\neq 0$, endast om $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m , n \\in N$. Då implicerar $n \\neq 0$  $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01. Låt $m , n \\in N$. Anta att $n \\neq 0$. Då $(\\frac{ m}{n})^ {2}\\neq 2$.",
    "output": "postulate Thm01 : (m : Nat) -> (n : Nat) -> Neq n 0 -> Neq (pow (div m n) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m$ and $n$ be instances of natural numbers. Then we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. For all instances $m$ and $n$ of natural numbers, we can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. We can prove that the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all instances $m$ and $n$ of natural numbers.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. The exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m , n \\in N$. Then the exponentiation of the quotient of $m$ and the sum of $n$ and $1$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m$ and $n$ be natural numbers. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. For all natural numbers $m$ and $n$, $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. $(\\frac{ m}{n + 1})^ {2}\\neq 2$ for all natural numbers $m$ and $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01a. Let $m , n \\in N$. Then $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Soient $m$ et $n$ des instances de nombres naturels. Alors nous pouvons démontrer que la puissance du quotient de $m$ et de la somme de $n$ et de $1$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Pour toutes les instances $m$ et $n$ de nombres naturels, nous pouvons démontrer que la puissance du quotient de $m$ et de la somme de $n$ et de $1$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Nous pouvons démontrer que la puissance du quotient de $m$ et de la somme de $n$ et de $1$ et de $2$ est inégale à $2$ pour toutes les instances $m$ et $n$ de nombres naturels.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Soient $m$ et $n$ des nombres naturels. Alors la puissance du quotient de $m$ et de la somme de $n$ et de $1$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Pour tous les nombres naturels $m$ et $n$, la puissance du quotient de $m$ et de la somme de $n$ et de $1$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. La puissance du quotient de $m$ et de la somme de $n$ et de $1$ et de $2$ est inégale à $2$ pour tous les nombres naturels $m$ et $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Soient $m , n \\in N$. Alors la puissance du quotient de $m$ et de la somme de $n$ et de $1$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Soient $m$ et $n$ des nombres naturels. Alors $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Pour tous les nombres naturels $m$ et $n$, $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. $(\\frac{ m}{n + 1})^ {2}\\neq 2$ pour tous les nombres naturels $m$ et $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01a. Soient $m , n \\in N$. Alors $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. Låt $m$ och $n$ vara instanser av naturliga tal. Då kan vi bevisa att potensen av kvoten av $m$ och summan av $n$ och $1$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. För alla instanser $m$ och $n$ av naturliga tal, kan vi bevisa att potensen av kvoten av $m$ och summan av $n$ och $1$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. Vi kan bevisa att potensen av kvoten av $m$ och summan av $n$ och $1$ och $2$ är inte lika med $2$ för alla instanser $m$ och $n$ av naturliga tal.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. Låt $m$ och $n$ vara naturliga tal. Då är potensen av kvoten av $m$ och summan av $n$ och $1$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. För alla naturliga tal $m$ och $n$, är potensen av kvoten av $m$ och summan av $n$ och $1$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. Potensen av kvoten av $m$ och summan av $n$ och $1$ och $2$ är inte lika med $2$ för alla naturliga tal $m$ och $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. Låt $m , n \\in N$. Då är potensen av kvoten av $m$ och summan av $n$ och $1$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. Låt $m$ och $n$ vara naturliga tal. Då $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. För alla naturliga tal $m$ och $n$, $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. $(\\frac{ m}{n + 1})^ {2}\\neq 2$ för alla naturliga tal $m$ och $n$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01a. Låt $m , n \\in N$. Då $(\\frac{ m}{n + 1})^ {2}\\neq 2$.",
    "output": "postulate Thm01a : (m : Nat) -> (n : Nat) -> Neq (pow (div m (plus n 1)) 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q$ be an instance of rational numbers. Then we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. For all instances $q$ of rational numbers, we can prove that the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for every instance $q$ of rational numbers.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. We can prove that the exponentiation of $q$ and $2$ is not equal to $2$ for all instances $q$ of rational numbers.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q$ be a rational number. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. For all rational numbers $q$, the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for every rational number $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. The exponentiation of $q$ and $2$ is not equal to $2$ for all rational numbers $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q \\in Q$. Then the exponentiation of $q$ and $2$ is not equal to $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q$ be a rational number. Then $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. For all rational numbers $q$, $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for every rational number $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ for all rational numbers $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01b. Let $q \\in Q$. Then $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Soit $q$ une instance de nombres rationnels. Alors nous pouvons démontrer que la puissance de $q$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Pour toutes les instances $q$ de nombres rationnels, nous pouvons démontrer que la puissance de $q$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Nous pouvons démontrer que la puissance de $q$ et de $2$ est inégale à $2$ pour chaque instance $q$ de nombres rationnels.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Nous pouvons démontrer que la puissance de $q$ et de $2$ est inégale à $2$ pour toutes les instances $q$ de nombres rationnels.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Soit $q$ un nombre rationnel. Alors la puissance de $q$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Pour tous les nombres rationnels $q$, la puissance de $q$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. La puissance de $q$ et de $2$ est inégale à $2$ pour chaque nombre rationnel $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. La puissance de $q$ et de $2$ est inégale à $2$ pour tous les nombres rationnels $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Soit $q \\in Q$. Alors la puissance de $q$ et de $2$ est inégale à $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Soit $q$ un nombre rationnel. Alors $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Pour tous les nombres rationnels $q$, $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ pour chaque nombre rationnel $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ pour tous les nombres rationnels $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01b. Soit $q \\in Q$. Alors $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Låt $q$ vara en instans av rationella tal. Då kan vi bevisa att potensen av $q$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. För alla instanser $q$ av rationella tal, kan vi bevisa att potensen av $q$ och $2$ är inte lika med $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Vi kan bevisa att potensen av $q$ och $2$ är inte lika med $2$ för varje instans $q$ av rationella tal.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Vi kan bevisa att potensen av $q$ och $2$ är inte lika med $2$ för alla instanser $q$ av rationella tal.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Låt $q$ vara ett rationellt tal. Då är potensen av $q$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. För alla rationella tal $q$, är potensen av $q$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Potensen av $q$ och $2$ är inte lika med $2$ för varje rationellt tal $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Potensen av $q$ och $2$ är inte lika med $2$ för alla rationella tal $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Låt $q \\in Q$. Då är potensen av $q$ och $2$ inte lika med $2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Låt $q$ vara ett rationellt tal. Då $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. För alla rationella tal $q$, $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ för varje rationellt tal $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. $q ^ {2}\\neq 2$ för alla rationella tal $q$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01b. Låt $q \\in Q$. Då $q ^ {2}\\neq 2$.",
    "output": "postulate Thm01b : (q : Rat) -> Neq (pow q 2) 2"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q$ be an instance of rational numbers. Then we can prove that the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. For all instances $q$ of rational numbers, we can prove that the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for every instance $q$ of rational numbers.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. We can prove that the square root of $2$ is not equal to $q$ for all instances $q$ of rational numbers.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q$ be a rational number. Then the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. For all rational numbers $q$, the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for every rational number $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. The square root of $2$ is not equal to $q$ for all rational numbers $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q \\in Q$. Then the square root of $2$ is not equal to $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q$ be a rational number. Then $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. For all rational numbers $q$, $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for every rational number $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ for all rational numbers $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01c. Let $q \\in Q$. Then $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Soit $q$ une instance de nombres rationnels. Alors nous pouvons démontrer que la racine carrée de $2$ est inégale à $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Pour toutes les instances $q$ de nombres rationnels, nous pouvons démontrer que la racine carrée de $2$ est inégale à $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Nous pouvons démontrer que la racine carrée de $2$ est inégale à $q$ pour chaque instance $q$ de nombres rationnels.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Nous pouvons démontrer que la racine carrée de $2$ est inégale à $q$ pour toutes les instances $q$ de nombres rationnels.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Soit $q$ un nombre rationnel. Alors la racine carrée de $2$ est inégale à $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Pour tous les nombres rationnels $q$, la racine carrée de $2$ est inégale à $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. La racine carrée de $2$ est inégale à $q$ pour chaque nombre rationnel $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. La racine carrée de $2$ est inégale à $q$ pour tous les nombres rationnels $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Soit $q \\in Q$. Alors la racine carrée de $2$ est inégale à $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Soit $q$ un nombre rationnel. Alors $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Pour tous les nombres rationnels $q$, $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ pour chaque nombre rationnel $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ pour tous les nombres rationnels $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01c. Soit $q \\in Q$. Alors $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Låt $q$ vara en instans av rationella tal. Då kan vi bevisa att kvadratroten av $2$ är inte lika med $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. För alla instanser $q$ av rationella tal, kan vi bevisa att kvadratroten av $2$ är inte lika med $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Vi kan bevisa att kvadratroten av $2$ är inte lika med $q$ för varje instans $q$ av rationella tal.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Vi kan bevisa att kvadratroten av $2$ är inte lika med $q$ för alla instanser $q$ av rationella tal.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Låt $q$ vara ett rationellt tal. Då är kvadratroten av $2$ inte lika med $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. För alla rationella tal $q$, är kvadratroten av $2$ inte lika med $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Kvadratroten av $2$ är inte lika med $q$ för varje rationellt tal $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Kvadratroten av $2$ är inte lika med $q$ för alla rationella tal $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Låt $q \\in Q$. Då är kvadratroten av $2$ inte lika med $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Låt $q$ vara ett rationellt tal. Då $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. För alla rationella tal $q$, $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ för varje rationellt tal $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. $\\sqrt{ 2}\\neq q$ för alla rationella tal $q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01c. Låt $q \\in Q$. Då $\\sqrt{ 2}\\neq q$.",
    "output": "postulate Thm01c : (q : Rat) -> Neq (sqrt 2) q"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01d. We can prove that the square root of $2$ is not rational.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01d. The square root of $2$ is not rational.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01d. $\\sqrt{ 2}$ is not rational.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01d. Nous pouvons démontrer que la racine carrée de $2$ n'est pas rationnelle.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01d. La racine carrée de $2$ n'est pas rationnelle.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01d. $\\sqrt{ 2}$ n'est pas rationnel.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01d. Vi kan bevisa att kvadratroten av $2$ inte är rationell.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01d. Kvadratroten av $2$ är inte rationell.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01d. $\\sqrt{ 2}$ är inte rationellt.",
    "output": "postulate Thm01d : not (rational (sqrt 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01e. We can prove that the square root of $2$ is irrational.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01e. The square root of $2$ is irrational.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01e. $\\sqrt{ 2}$ is irrational.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01e. Nous pouvons démontrer que la racine carrée de $2$ est irrationnelle.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01e. La racine carrée de $2$ est irrationnelle.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01e. $\\sqrt{ 2}$ est irrationnel.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01e. Vi kan bevisa att kvadratroten av $2$ är irrationell.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01e. Kvadratroten av $2$ är irrationell.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01e. $\\sqrt{ 2}$ är irrationellt.",
    "output": "postulate Thm01e : irrational (sqrt 2)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. We can prove that it is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for a natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that the square of $p$ is equal to the product of $2$ and the square of $q$ for some natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $p$, such that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exists a natural number $q$, such that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for a natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for a natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural number $q$ for some natural number $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that there exist natural numbers $p$ and $q$, such that $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm01f. It is not the case that $p ^{ 2}= 2 (q ^{ 2})$ for some natural numbers $p$ and $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Nous pouvons démontrer qu'il n'est pas le cas qu'il existe un nombre naturel $p$ tel que il existe un nombre naturel $q$ tel que le carré de $p$ soit égal au produit de $2$ et du carré de $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Nous pouvons démontrer qu'il n'est pas le cas qu'il existe un nombre naturel $q$ tel que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Nous pouvons démontrer qu'il n'est pas le cas qu'il existe un nombre naturel $q$ tel que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Nous pouvons démontrer qu'il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour un nombre naturel $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Nous pouvons démontrer qu'il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour quelque nombre naturel $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Nous pouvons démontrer qu'il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour un nombre naturel $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Nous pouvons démontrer qu'il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour quelque nombre naturel $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas qu'il existe un nombre naturel $p$ tel que il existe un nombre naturel $q$ tel que le carré de $p$ soit égal au produit de $2$ et du carré de $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas qu'il existe un nombre naturel $q$ tel que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas qu'il existe un nombre naturel $q$ tel que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour un nombre naturel $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour quelque nombre naturel $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour un nombre naturel $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que le carré de $p$ soit égal au produit de $2$ et du carré de $q$ pour quelque nombre naturel $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas qu'il existe un nombre naturel $p$ tel que il existe un nombre naturel $q$ tel que $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas qu'il existe un nombre naturel $q$ tel que $p ^{ 2}= 2 (q ^{ 2})$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas qu'il existe un nombre naturel $q$ tel que $p ^{ 2}= 2 (q ^{ 2})$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que $p ^{ 2}= 2 (q ^{ 2})$ pour un nombre naturel $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que $p ^{ 2}= 2 (q ^{ 2})$ pour quelque nombre naturel $q$ pour un nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que $p ^{ 2}= 2 (q ^{ 2})$ pour un nombre naturel $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que $p ^{ 2}= 2 (q ^{ 2})$ pour quelque nombre naturel $q$ pour quelque nombre naturel $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas qu'il existent des nombres naturels $p$ et $q$ tel que $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm01f. Il n'est pas le cas que $p ^{ 2}= 2 (q ^{ 2})$ pour quelques nombres naturels $p$ et $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Vi kan bevisa att det inte är fallet att det finns ett naturligt tal $p$, så att det finns ett naturligt tal $q$, så att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Vi kan bevisa att det inte är fallet att det finns ett naturligt tal $q$, så att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Vi kan bevisa att det inte är fallet att det finns ett naturligt tal $q$, så att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Vi kan bevisa att det inte är fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för ett naturligt tal $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Vi kan bevisa att det inte är fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för något naturligt tal $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Vi kan bevisa att det inte är fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för ett naturligt tal $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Vi kan bevisa att det inte är fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för något naturligt tal $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att det finns ett naturligt tal $p$, så att det finns ett naturligt tal $q$, så att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att det finns ett naturligt tal $q$, så att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att det finns ett naturligt tal $q$, så att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för ett naturligt tal $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för något naturligt tal $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för ett naturligt tal $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att kvadraten av $p$ är lika med produkten av $2$ och kvadraten av $q$ för något naturligt tal $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att det finns ett naturligt tal $p$, så att det finns ett naturligt tal $q$, så att $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att det finns ett naturligt tal $q$, så att $p ^{ 2}= 2 (q ^{ 2})$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att det finns ett naturligt tal $q$, så att $p ^{ 2}= 2 (q ^{ 2})$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att $p ^{ 2}= 2 (q ^{ 2})$ för ett naturligt tal $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att $p ^{ 2}= 2 (q ^{ 2})$ för något naturligt tal $q$ för ett naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att $p ^{ 2}= 2 (q ^{ 2})$ för ett naturligt tal $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att $p ^{ 2}= 2 (q ^{ 2})$ för något naturligt tal $q$ för något naturligt tal $p$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att det finns naturliga tal $p$ och $q$, så att $p ^{ 2}= 2 (q ^{ 2})$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm01f. Det är inte fallet att $p ^{ 2}= 2 (q ^{ 2})$ för några naturliga tal $p$ och $q$.",
    "output": "postulate Thm01f : not (exists Nat (\\ p -> exists Nat (\\ q -> Eq (square p) (times 2 (square q)))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if we can prove that the degree of $P$ is greater than $0$, then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then we can prove that the degree of $P$ is greater than $0$, only if we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that we can prove that the degree of $P$ is greater than $0$. Then we can prove that $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. For all polynomials $P$, if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for every polynomial $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. If the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$ for all polynomials $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if there exists a complex number $c$, such that $c$ is a root of $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then if the degree of $P$ is greater than $0$, then $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Then the degree of $P$ is greater than $0$, only if $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for a complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm02. Let $P$ be a polynomial. Assume that the degree of $P$ is greater than $0$. Then $c$ is a root of $P$ for some complex number $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Supposons que nous pouvons démontrer que le degré de $P$ est supérieur à $0$. Alors nous pouvons démontrer qu'il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Pour tous les polynômes $P$, si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer qu'il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer qu'il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$ pour chaque polynôme $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer qu'il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$ pour tous les polynômes $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Pour tous les polynômes $P$, si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour un nombre complexe $c$ pour chaque polynôme $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour un nombre complexe $c$ pour tous les polynômes $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Pour tous les polynômes $P$, si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour quelque nombre complexe $c$ pour chaque polynôme $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour quelque nombre complexe $c$ pour tous les polynômes $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer qu'il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors nous pouvons démontrer que le degré de $P$ est supérieur à $0$ seulement si nous pouvons démontrer qu'il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors nous pouvons démontrer que le degré de $P$ est supérieur à $0$ seulement si nous pouvons démontrer que $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors si nous pouvons démontrer que le degré de $P$ est supérieur à $0$, alors nous pouvons démontrer que $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors nous pouvons démontrer que le degré de $P$ est supérieur à $0$ seulement si nous pouvons démontrer que $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Supposons que nous pouvons démontrer que le degré de $P$ est supérieur à $0$. Alors nous pouvons démontrer que $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Supposons que nous pouvons démontrer que le degré de $P$ est supérieur à $0$. Alors nous pouvons démontrer que $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Supposons que le degré de $P$ est supérieur à $0$. Alors il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Pour tous les polynômes $P$, si le degré de $P$ est supérieur à $0$, alors il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si le degré de $P$ est supérieur à $0$, alors il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$ pour chaque polynôme $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si le degré de $P$ est supérieur à $0$, alors il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$ pour tous les polynômes $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Pour tous les polynômes $P$, si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour un nombre complexe $c$ pour chaque polynôme $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour un nombre complexe $c$ pour tous les polynômes $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Pour tous les polynômes $P$, si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour quelque nombre complexe $c$ pour chaque polynôme $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour quelque nombre complexe $c$ pour tous les polynômes $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors si le degré de $P$ est supérieur à $0$, alors il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors le degré de $P$ est supérieur à $0$ seulement si il existe un nombre complexe $c$ tel que $c$ soit une racine de $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors le degré de $P$ est supérieur à $0$ seulement si $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors si le degré de $P$ est supérieur à $0$, alors $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Alors le degré de $P$ est supérieur à $0$ seulement si $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Supposons que le degré de $P$ est supérieur à $0$. Alors $c$ est une racine de $P$ pour un nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm02. Soit $P$ un polynôme. Supposons que le degré de $P$ est supérieur à $0$. Alors $c$ est une racine de $P$ pour quelque nombre complexe $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Anta att vi kan bevisa att graden av $P$ är större än $0$. Då kan vi bevisa att det finns ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. För alla polynom $P$, om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att det finns ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att det finns ett komplext tal $c$, så att $c$ är en rot av $P$ för varje polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att det finns ett komplext tal $c$, så att $c$ är en rot av $P$ för alla polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. För alla polynom $P$, om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för ett komplext tal $c$ för varje polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för ett komplext tal $c$ för alla polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. För alla polynom $P$, om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för något komplext tal $c$ för varje polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för något komplext tal $c$ för alla polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att det finns ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då kan vi bevisa att graden av $P$ är större än $0$, endast om vi kan bevisa att det finns ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då kan vi bevisa att graden av $P$ är större än $0$, endast om vi kan bevisa att $c$ är en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då om vi kan bevisa att graden av $P$ är större än $0$, så kan vi bevisa att $c$ är en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då kan vi bevisa att graden av $P$ är större än $0$, endast om vi kan bevisa att $c$ är en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Anta att vi kan bevisa att graden av $P$ är större än $0$. Då kan vi bevisa att $c$ är en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Anta att vi kan bevisa att graden av $P$ är större än $0$. Då kan vi bevisa att $c$ är en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Anta att graden av $P$ är större än $0$. Då finns det ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. För alla polynom $P$, om graden av $P$ är större än $0$, så finns det ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om graden av $P$ är större än $0$, så finns det ett komplext tal $c$, så att $c$ är en rot av $P$ för varje polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om graden av $P$ är större än $0$, så finns det ett komplext tal $c$, så att $c$ är en rot av $P$ för alla polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. För alla polynom $P$, om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för ett komplext tal $c$ för varje polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för ett komplext tal $c$ för alla polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. För alla polynom $P$, om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för något komplext tal $c$ för varje polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för något komplext tal $c$ för alla polynom $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då om graden av $P$ är större än $0$, så finns det ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då är graden av $P$ större än $0$, endast om det finns ett komplext tal $c$, så att $c$ är en rot av $P$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då är graden av $P$ större än $0$, endast om $c$ är en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då om graden av $P$ är större än $0$, så är $c$ en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Då är graden av $P$ större än $0$, endast om $c$ är en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Anta att graden av $P$ är större än $0$. Då är $c$ en rot av $P$ för ett komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm02. Låt $P$ vara ett polynom. Anta att graden av $P$ är större än $0$. Då är $c$ en rot av $P$ för något komplext tal $c$.",
    "output": "postulate Thm02 : (P : Polynomial) -> Gt (degree P) 0 -> exists Complex (\\ c -> isRoot c P)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03. We can prove that $Rat$ is denumerable.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03. $Rat$ is denumerable.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm03. Nous pouvons démontrer que $Rat$ est dénombrable.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm03. $Rat$ est dénombrable.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm03. Vi kan bevisa att $Rat$ är upräkneligt.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm03. $Rat$ är upräkneligt.",
    "output": "postulate Thm03 : denumerable Rat"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03a. We can prove that the cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03a. The cardinality of $Nat$ is equal to the cardinality of $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm03a. $| Nat | = | Rat |$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm03a. Nous pouvons démontrer que le cardinalité de $Nat$ est égal au cardinalité de $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm03a. Le cardinalité de $Nat$ est égal au cardinalité de $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm03a. $| Nat | = | Rat |$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm03a. Vi kan bevisa att kardinaliteten av $Nat$ är lika med kardinaliteten av $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm03a. Kardinaliteten av $Nat$ är lika med kardinaliteten av $Rat$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm03a. $| Nat | = | Rat |$.",
    "output": "postulate Thm03a : Eq (cardinality Nat) (cardinality Rat)"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Assume that we can prove that $u$ is perpendicular to $v$. Then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. For all instances $u$ and $v$ of vectors, if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. If we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all instances $u$ and $v$ of vectors.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then if we can prove that $u$ is perpendicular to $v$, then we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be instances of vectors. Then we can prove that $u$ is perpendicular to $v$, only if we can prove that the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u$ is perpendicular to $v$. Then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. If $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$ for all vectors $u$ and $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u$ is perpendicular to $v$, then the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u$ is perpendicular to $v$, only if the length of the sum of $u$ and $v$ is equal to the square root of the sum of the square of the length of $u$ and the square of the length of $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Assume that $u \\perp v$. Then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. For all vectors $u$ and $v$, if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. If $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$ for all vectors $u$ and $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then if $u \\perp v$, then $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$, only if $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm04. Let $u$ and $v$ be vectors. Then $u \\perp v$ implies $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des instances de vecteurs. Supposons que nous pouvons démontrer que $u$ est perpendiculaire à $v$. Alors nous pouvons démontrer que la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Pour toutes les instances $u$ et $v$ de vecteurs, si nous pouvons démontrer que $u$ est perpendiculaire à $v$, alors nous pouvons démontrer que la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Si nous pouvons démontrer que $u$ est perpendiculaire à $v$, alors nous pouvons démontrer que la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$ pour toutes les instances $u$ et $v$ de vecteurs.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des instances de vecteurs. Alors si nous pouvons démontrer que $u$ est perpendiculaire à $v$, alors nous pouvons démontrer que la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des instances de vecteurs. Alors nous pouvons démontrer que $u$ est perpendiculaire à $v$ seulement si nous pouvons démontrer que la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des vecteurs. Supposons que $u$ est perpendiculaire à $v$. Alors la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Pour tous les vecteurs $u$ et $v$, si $u$ est perpendiculaire à $v$, alors la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Si $u$ est perpendiculaire à $v$, alors la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$ pour tous les vecteurs $u$ et $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des vecteurs. Alors si $u$ est perpendiculaire à $v$, alors la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des vecteurs. Alors $u$ est perpendiculaire à $v$ seulement si la norme de l'addition de $u$ et de $v$ est égale à la racine carrée de la somme du carré de la norme de $u$ et du carré de la norme de $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des vecteurs. Supposons que $u \\perp v$. Alors $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Pour tous les vecteurs $u$ et $v$, si $u \\perp v$, alors $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Si $u \\perp v$, alors $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$ pour tous les vecteurs $u$ et $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des vecteurs. Alors si $u \\perp v$, alors $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des vecteurs. Alors $u \\perp v$ seulement si $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm04. Soient $u$ et $v$ des vecteurs. Alors $u \\perp v$ implique $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara instanser av vektorer. Anta att vi kan bevisa att $u$ är vinkelrätt mot $v$. Då kan vi bevisa att normen av resultanten av $u$ och $v$ är lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. För alla instanser $u$ och $v$ av vektorer, om vi kan bevisa att $u$ är vinkelrätt mot $v$, så kan vi bevisa att normen av resultanten av $u$ och $v$ är lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Om vi kan bevisa att $u$ är vinkelrätt mot $v$, så kan vi bevisa att normen av resultanten av $u$ och $v$ är lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$ för alla instanser $u$ och $v$ av vektorer.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara instanser av vektorer. Då om vi kan bevisa att $u$ är vinkelrätt mot $v$, så kan vi bevisa att normen av resultanten av $u$ och $v$ är lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara instanser av vektorer. Då kan vi bevisa att $u$ är vinkelrätt mot $v$, endast om vi kan bevisa att normen av resultanten av $u$ och $v$ är lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara vektorer. Anta att $u$ är vinkelrätt mot $v$. Då är normen av resultanten av $u$ och $v$ lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. För alla vektorer $u$ och $v$, om $u$ är vinkelrätt mot $v$, så är normen av resultanten av $u$ och $v$ lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Om $u$ är vinkelrätt mot $v$, så är normen av resultanten av $u$ och $v$ lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$ för alla vektorer $u$ och $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara vektorer. Då om $u$ är vinkelrätt mot $v$, så är normen av resultanten av $u$ och $v$ lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara vektorer. Då är $u$ vinkelrätt mot $v$, endast om normen av resultanten av $u$ och $v$ är lika med kvadratroten av summan av kvadraten av normen av $u$ och kvadraten av normen av $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara vektorer. Anta att $u \\perp v$. Då $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. För alla vektorer $u$ och $v$, om $u \\perp v$, så $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Om $u \\perp v$, så $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$ för alla vektorer $u$ och $v$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara vektorer. Då om $u \\perp v$, så $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara vektorer. Då $u \\perp v$, endast om $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm04. Låt $u$ och $v$ vara vektorer. Då implicerar $u \\perp v$  $\\| u + v \\| = \\sqrt{ \\| u \\| ^{ 2}+ \\| v \\| ^{ 2}}$.",
    "output": "postulate Thm04 : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Assume that we can prove that $p$ is prime and $q$ is prime. Then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all instances $p$ and $q$ of natural numbers, if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all instances $p$ and $q$ of natural numbers.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then if we can prove that $p$ is prime and $q$ is prime, then we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be instances of natural numbers. Then we can prove that $p$ is prime and $q$ is prime, only if we can prove that the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$ for all natural numbers $p$ and $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then the product of the Legendre symbol of $p$ and $q$ and the Legendre symbol of $q$ and $p$ is equal to the exponentiation of the negation of $1$ and the product of the quotient of the difference of $p$ and $1$ and $2$ and the quotient of the difference of $q$ and $1$ and $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ is prime and $q$ is prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ is prime and $q$ is prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ is prime and $q$ is prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. For all natural numbers $p$ and $q$, if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. If $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ for all natural numbers $p$ and $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p$ and $q$ be natural numbers. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then if $p$ and $q$ are prime, then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Then $p$ and $q$ are prime, only if $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm07. Let $p , q \\in N$. Assume that $p$ and $q$ are prime. Then $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des instances de nombres naturels. Supposons que nous pouvons démontrer que $p$ est premier et $q$ est premier. Alors nous pouvons démontrer que le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Pour toutes les instances $p$ et $q$ de nombres naturels, si nous pouvons démontrer que $p$ est premier et $q$ est premier, alors nous pouvons démontrer que le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Si nous pouvons démontrer que $p$ est premier et $q$ est premier, alors nous pouvons démontrer que le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$ pour toutes les instances $p$ et $q$ de nombres naturels.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des instances de nombres naturels. Alors si nous pouvons démontrer que $p$ est premier et $q$ est premier, alors nous pouvons démontrer que le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des instances de nombres naturels. Alors nous pouvons démontrer que $p$ est premier et $q$ est premier seulement si nous pouvons démontrer que le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Supposons que $p$ est premier et $q$ est premier. Alors le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Pour tous les nombres naturels $p$ et $q$, si $p$ est premier et $q$ est premier, alors le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Si $p$ est premier et $q$ est premier, alors le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$ pour tous les nombres naturels $p$ et $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Alors si $p$ est premier et $q$ est premier, alors le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Alors $p$ est premier et $q$ est premier seulement si le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Alors si $p$ est premier et $q$ est premier, alors le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Alors $p$ est premier et $q$ est premier seulement si le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Supposons que $p$ est premier et $q$ est premier. Alors le produit du symbole de Legendre de $p$ et de $q$ et du symbole de Legendre de $q$ et de $p$ est égal à la puissance de la négation de $1$ et du produit du quotient de la différence de $p$ et de $1$ et de $2$ et du quotient de la différence de $q$ et de $1$ et de $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Supposons que $p$ est premier et $q$ est premier. Alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Pour tous les nombres naturels $p$ et $q$, si $p$ est premier et $q$ est premier, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Si $p$ est premier et $q$ est premier, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ pour tous les nombres naturels $p$ et $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Alors si $p$ est premier et $q$ est premier, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Alors $p$ est premier et $q$ est premier seulement si $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Alors si $p$ est premier et $q$ est premier, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Alors $p$ est premier et $q$ est premier seulement si $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Supposons que $p$ est premier et $q$ est premier. Alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Supposons que $p$ et $q$ sont premiers. Alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Pour tous les nombres naturels $p$ et $q$, si $p$ et $q$ sont premiers, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Si $p$ et $q$ sont premiers, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ pour tous les nombres naturels $p$ et $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Alors si $p$ et $q$ sont premiers, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p$ et $q$ des nombres naturels. Alors $p$ et $q$ sont premiers seulement si $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Alors si $p$ et $q$ sont premiers, alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Alors $p$ et $q$ sont premiers seulement si $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm07. Soient $p , q \\in N$. Supposons que $p$ et $q$ sont premiers. Alors $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara instanser av naturliga tal. Anta att vi kan bevisa att $p$ är primt och $q$ är primt. Då kan vi bevisa att produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ är lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. För alla instanser $p$ och $q$ av naturliga tal, om vi kan bevisa att $p$ är primt och $q$ är primt, så kan vi bevisa att produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ är lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Om vi kan bevisa att $p$ är primt och $q$ är primt, så kan vi bevisa att produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ är lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$ för alla instanser $p$ och $q$ av naturliga tal.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara instanser av naturliga tal. Då om vi kan bevisa att $p$ är primt och $q$ är primt, så kan vi bevisa att produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ är lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara instanser av naturliga tal. Då kan vi bevisa att $p$ är primt och $q$ är primt, endast om vi kan bevisa att produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ är lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Anta att $p$ är primt och $q$ är primt. Då är produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. För alla naturliga tal $p$ och $q$, om $p$ är primt och $q$ är primt, så är produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Om $p$ är primt och $q$ är primt, så är produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$ för alla naturliga tal $p$ och $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Då om $p$ är primt och $q$ är primt, så är produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Då är $p$ primt och $q$ är primt, endast om produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ är lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Då om $p$ är primt och $q$ är primt, så är produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Då är $p$ primt och $q$ är primt, endast om produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ är lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Anta att $p$ är primt och $q$ är primt. Då är produkten av Legendresymbolen av $p$ och $q$ och Legendresymbolen av $q$ och $p$ lika med potensen av negationen av $1$ och produkten av kvoten av skillnaden mellan $p$ och $1$ och $2$ och kvoten av skillnaden mellan $q$ och $1$ och $2$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Anta att $p$ är primt och $q$ är primt. Då $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. För alla naturliga tal $p$ och $q$, om $p$ är primt och $q$ är primt, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Om $p$ är primt och $q$ är primt, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ för alla naturliga tal $p$ och $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Då om $p$ är primt och $q$ är primt, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Då är $p$ primt och $q$ är primt, endast om $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Då om $p$ är primt och $q$ är primt, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Då är $p$ primt och $q$ är primt, endast om $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Anta att $p$ är primt och $q$ är primt. Då $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Anta att $p$ och $q$ är prima. Då $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. För alla naturliga tal $p$ och $q$, om $p$ och $q$ är prima, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Om $p$ och $q$ är prima, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$ för alla naturliga tal $p$ och $q$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Då om $p$ och $q$ är prima, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p$ och $q$ vara naturliga tal. Då är $p$ och $q$ prima, endast om $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Då om $p$ och $q$ är prima, så $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Då är $p$ och $q$ prima, endast om $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm07. Låt $p , q \\in N$. Anta att $p$ och $q$ är prima. Då $\\left(\\frac{ p }{ q }\\right) \\left(\\frac{ q }{ p }\\right) = (- 1)^ {\\frac{ p - 1}{2}\\frac{ q - 1}{2}}$.",
    "output": "postulate thm07 : (p : Nat) -> (q : Nat) -> and (prime p) (prime q) -> Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Assume that we can prove that $r$ is equal to the radius of $c$. Then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all circles $c$, for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then for all instances $r$ of real numbers, if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every instance $r$ of real numbers.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all instances $r$ of real numbers.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then if we can prove that $r$ is equal to the radius of $c$, then we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be an instance of real numbers. Then we can prove that $r$ is equal to the radius of $c$, only if we can prove that the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every circle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all circles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for every real number $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$ for all real numbers $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to the product of the number \\(\\pi\\) and the exponentiation of $r$ and $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all circles $c$, for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every circle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. For all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all circles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then for all real numbers $r$, if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for every real number $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$ for all real numbers $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r$ be a real number. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then if $r$ is equal to the radius of $c$, then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Then $r$ is equal to the radius of $c$, only if the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following English statement into Agda.",
    "input": "Thm09. Let $c$ be a circle. Let $r \\in R$. Assume that $r$ is equal to the radius of $c$. Then the area of $c$ is equal to $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ une instance de nombres réels. Supposons que nous pouvons démontrer que $r$ est égal au rayon de $c$. Alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour tous les cercles $c$, pour toutes les instances $r$ de nombres réels, si nous pouvons démontrer que $r$ est égal au rayon de $c$, alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour toutes les instances $r$ de nombres réels, si nous pouvons démontrer que $r$ est égal au rayon de $c$, alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour chaque cercle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour toutes les instances $r$ de nombres réels, si nous pouvons démontrer que $r$ est égal au rayon de $c$, alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour tous les cercles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors pour toutes les instances $r$ de nombres réels, si nous pouvons démontrer que $r$ est égal au rayon de $c$, alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors si nous pouvons démontrer que $r$ est égal au rayon de $c$, alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour chaque instance $r$ de nombres réels.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors si nous pouvons démontrer que $r$ est égal au rayon de $c$, alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour toutes les instances $r$ de nombres réels.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ une instance de nombres réels. Alors si nous pouvons démontrer que $r$ est égal au rayon de $c$, alors nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ une instance de nombres réels. Alors nous pouvons démontrer que $r$ est égal au rayon de $c$ seulement si nous pouvons démontrer que l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ un nombre réel. Supposons que $r$ est égal au rayon de $c$. Alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour tous les cercles $c$, pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour chaque cercle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour tous les cercles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour chaque nombre réel $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$ pour tous les nombres réels $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ un nombre réel. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ un nombre réel. Alors $r$ est égal au rayon de $c$ seulement si l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r \\in R$. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r \\in R$. Alors $r$ est égal au rayon de $c$ seulement si l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r \\in R$. Supposons que $r$ est égal au rayon de $c$. Alors l'aire de $c$ est égale au produit du nombre \\(\\pi\\) et de la puissance de $r$ et de $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ un nombre réel. Supposons que $r$ est égal au rayon de $c$. Alors l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour tous les cercles $c$, pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$ pour chaque cercle $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$ pour tous les cercles $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors pour tous les nombres réels $r$, si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$ pour chaque nombre réel $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$ pour tous les nombres réels $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ un nombre réel. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r$ un nombre réel. Alors $r$ est égal au rayon de $c$ seulement si l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r \\in R$. Alors si $r$ est égal au rayon de $c$, alors l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r \\in R$. Alors $r$ est égal au rayon de $c$ seulement si l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following French statement into Agda.",
    "input": "Thm09. Soit $c$ un cercle. Soit $r \\in R$. Supposons que $r$ est égal au rayon de $c$. Alors l'aire de $c$ est égale à $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara en instans av reella tal. Anta att vi kan bevisa att $r$ är lika med radiet av $c$. Då kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla cirklar $c$, för alla instanser $r$ av reella tal, om vi kan bevisa att $r$ är lika med radiet av $c$, så kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla instanser $r$ av reella tal, om vi kan bevisa att $r$ är lika med radiet av $c$, så kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för varje cirkel $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla instanser $r$ av reella tal, om vi kan bevisa att $r$ är lika med radiet av $c$, så kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för alla cirklar $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då för alla instanser $r$ av reella tal, om vi kan bevisa att $r$ är lika med radiet av $c$, så kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då om vi kan bevisa att $r$ är lika med radiet av $c$, så kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för varje instans $r$ av reella tal.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då om vi kan bevisa att $r$ är lika med radiet av $c$, så kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för alla instanser $r$ av reella tal.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara en instans av reella tal. Då om vi kan bevisa att $r$ är lika med radiet av $c$, så kan vi bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara en instans av reella tal. Då kan vi bevisa att $r$ är lika med radiet av $c$, endast om vi kan bevisa att arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara ett reellt tal. Anta att $r$ är lika med radiet av $c$. Då är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla cirklar $c$, för alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för varje cirkel $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för alla cirklar $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då för alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för varje reellt tal $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$ för alla reella tal $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara ett reellt tal. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara ett reellt tal. Då är $r$ lika med radiet av $c$, endast om arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r \\in R$. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r \\in R$. Då är $r$ lika med radiet av $c$, endast om arean av $c$ är lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r \\in R$. Anta att $r$ är lika med radiet av $c$. Då är arean av $c$ lika med produkten av talet \\(\\pi\\) och potensen av $r$ och $2$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara ett reellt tal. Anta att $r$ är lika med radiet av $c$. Då är arean av $c$ lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla cirklar $c$, för alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$ för varje cirkel $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. För alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$ för alla cirklar $c$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då för alla reella tal $r$, om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$ för varje reellt tal $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$ för alla reella tal $r$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara ett reellt tal. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r$ vara ett reellt tal. Då är $r$ lika med radiet av $c$, endast om arean av $c$ är lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r \\in R$. Då om $r$ är lika med radiet av $c$, så är arean av $c$ lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r \\in R$. Då är $r$ lika med radiet av $c$, endast om arean av $c$ är lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  },
  {
    "instruction": "Translate the following Swedish statement into Agda.",
    "input": "Thm09. Låt $c$ vara en cirkel. Låt $r \\in R$. Anta att $r$ är lika med radiet av $c$. Då är arean av $c$ lika med $\\pi r ^ {2}$.",
    "output": "postulate thm09 : (c : Circle) -> (r : Real) -> Eq r (radius c) -> Eq (area c) (times pi (pow r 2))"
  }
]