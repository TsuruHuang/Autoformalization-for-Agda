postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow (cardinality A) 2)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> ((k : Nat) -> Leq k n) -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Eq (cardinality (combinationsFromSet A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinationsFromSet A k)) (binomial n k)
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (length u) (length v))
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (p : Nat) -> prime p -> (n : Nat) -> and (Lt n p) (Lt p (times 2 n))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> ((a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p someInt))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p someInt))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p a))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))) )
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))) )
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (square c)))))) )
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))) )
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2))))))) )
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> ((k : Nat) -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> ((k : Nat) -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> ((k : Nat) -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> ((k : Nat) -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> ((k : Nat) -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> ((k : Nat) -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> ((k : Nat) -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (times 4 k) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 (mod 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 (mod 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 (mod 4) -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 (mod 4) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))) )
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))) )
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))) )
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))) )
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))) )
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (square x) (square y)) p))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq p (plus (square x) (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (square x) (square y)) p))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (square x) (square y)) p))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq (plus (square x) (square y)) p))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> Eq (square x) (minus p (square y)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm22 : not (denumerable Real)
postulate Thm22 : not (denumerable Real)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) (mod n))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1))
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (- 1) (mod n))
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1)) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1)) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1)) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1)) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (factorial (minus n 1)) n)
