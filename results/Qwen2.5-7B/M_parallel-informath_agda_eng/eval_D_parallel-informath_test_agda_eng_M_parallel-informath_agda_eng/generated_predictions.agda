postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k) n) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> Eq (cardinality (combinations A k) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (norm u) (norm v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (norm u) (norm v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dotProduct u v) (times (norm u) (norm v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (length u) (length v))
postulate Thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> (p : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> (p : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> (p : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Lt n p) (Lt p (times 2 n)))
postulate Thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> Prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> Prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> Prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> Prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> Prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> Prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> Prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Nat (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Nat (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Nat (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> Prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> (a : Int) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and Prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and ( Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> Geq p n and prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> (p : Nat) -> Geq p n -> Prime p
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (Prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (prime p) (Geq p n))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (Prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (>= p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (pow a 2) (pow b 2)) (pow c 2)) (pow d 2)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ b -> exists Nat (\ a -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (plus (square c) (square d))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d)))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> Prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> Prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> and (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (prime p)
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> Prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (pow k 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> Prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (pow k 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square k) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k k) (times l l)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (times x x) (times y y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k k) (times l l)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (times x x) (times y y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square k) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k k) (times l l))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k k) (times l l))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k k) (times l l)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (times x x) (times y y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k k) (times l l)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (times x x) (times y y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Nat -> Eq p (plus (square x) (square y))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square k) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ y -> Eq p (plus (square k) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Nat -> Eq p (plus (square x) (square y))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k k) (times l l))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times x x) (times y y))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 2 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times x 2) (times y 2)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (times x 2) (times y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times k 4) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Nat -> Eq p (plus (square x) (square y))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y)) -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq p (plus (square x) (square y))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> if (and (prime p) (congruent p 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20b : (p : Nat) -> if (and (prime p) (congruent p 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> if (and (prime p) (congruent p 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20b : (p : Nat) -> if (and (prime p) (congruent p 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20b : (p : Nat) -> if (and (prime p) (congruent p 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))))
postulate Thm20b : (p : Nat) -> if (and (prime p) (congruent p 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> if (and (prime p) (congruent p 1)) (exists Nat (\ x -> exists Nat (\ y -> Eq (plus (square x) (square y)) p)))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm22 : not (denumerable Real)
postulate Thm22 : not (denumerable Real)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (-1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (-1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (minus (factorial (minus n)) 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial (minus n 1)) 1) n
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial (minus n 1)) 1) n
