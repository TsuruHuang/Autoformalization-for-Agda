postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm52 : (A : Set) -> finite A -> Eq (cardinality (powerset A)) (pow 2 (cardinality A))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n) -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> all Nat (\ k -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k))
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (combinations n k)
postulate thm58 : (A : Set) -> (n : Nat) -> Eq (cardinality A) n -> (k : Nat) -> Leq k n -> Eq (cardinality (combinations A k)) (binomial n k)
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (norm u) (norm v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (length u) (length v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (length u) (length v))
postulate thm78 : (u : Vector) -> (v : Vector) -> Leq (dot u v) (times (length u) (length v))
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> orthogonal u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dotProduct u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate Thm78a : (u : Vector) -> (v : Vector) -> perpendicular u v -> Eq (dot u v) 0
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (norm (resultant u v)) (plus (norm u) (norm v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate thm91 : (u : Vector) -> (v : Vector) -> Leq (length (resultant u v)) (plus (length u) (length v))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> (n : Nat) -> and (prime p) (and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> prime p -> all Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (p : Nat) -> prime p -> (n : Nat) -> and (Lt n p) (Lt p (times 2 n))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (p : Nat) -> prime p -> exists Nat (\ n -> and (Lt n p) (Lt p (times 2 n)))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate thm98 : (n : Nat) -> exists Nat (\ p -> and (prime p) (and (Lt n p) (Lt p (times 2 n))))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q) where q : Int
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> exists Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> all Int (\ a -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q)))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> Eq (minus (pow a p) a) (times p q)
postulate Thm10FermatLittle : (p : Nat) -> prime p -> (a : Int) -> exists Int (\ q -> Eq (minus (pow a p) a) (times p q))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (p : Nat) -> (n : Nat) -> or (Geq p n) (prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> (n : Nat) -> or (Geq p n) (prime p)
postulate thm11 : (p : Nat) -> (n : Nat) -> or (Geq p n) (prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (p : Nat) -> (n : Nat) -> and (Geq p n) (prime p)
postulate thm11 : (p : Nat) -> (n : Nat) -> and (Geq p n) (prime p)
postulate Thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm11 : (n : Nat) -> exists Nat (\ p -> and (Geq p n) (prime p))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c)) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (plus (square a) (square b)) (square c) (square d))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (pow a 2) (plus (pow b 2) (plus (pow c 2) (pow d 2)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate thm19 : (n : Nat) -> exists Nat (\ a -> exists Nat (\ b -> exists Nat (\ c -> exists Nat (\ d -> Eq n (plus (square a) (plus (square b) (plus (square c) (square d)))))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> all Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 (times k 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> exists Nat (\ k -> Eq p (plus (times 4 k) 1)) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (times 4 k 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> and (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20a : (p : Nat) -> prime p -> (k : Nat) -> Eq p (plus (times 4 k) 1) -> or (Eq p (plus (square x) (square y))) (and (Nat) (Nat))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> or (exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y)))) (exists Nat (\ y -> exists Nat (\ x -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> congruent p 1 4 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> prime p -> Eq (mod p 4) 1 -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (pow x 2) (pow y 2))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm20b : (p : Nat) -> and (prime p) (congruent p 1 4) -> exists Nat (\ x -> exists Nat (\ y -> Eq p (plus (square x) (square y))))
postulate Thm22 : not (denumerable Real)
postulate Thm22 : not (denumerable Real)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate Thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (neg 1) n)
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1))
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1))
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1))
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1))
postulate thm51wilson : (n : Nat) -> iff (prime n) (congruent (factorial (minus n 1)) (minus 1))
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial n) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial n) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial n) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial n) 1) n)
postulate Thm51b : (n : Nat) -> iff (prime n) (divisible (minus (factorial n) 1) n)
